name: HumanEval_109_move_one_ball
language: jl
results:
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    for i in 1:length(arr)\n        if i\
    \ == 1\n            if arr[i] > arr[i+1]\n                return false\n     \
    \       end\n        elseif i == length(arr)\n            if arr[i] < arr[i-1]\n\
    \                return false\n            end\n        else\n            if arr[i]\
    \ < arr[i-1] || arr[i] > arr[i+1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyri5fna3.jl:58\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyri5fna3.jl:58 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyri5fna3.jl:57\ntest set: Test\
    \ Failed at /tmp/tmpyri5fna3.jl:59\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyri5fna3.jl:59 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyri5fna3.jl:57\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyri5fna3.jl:55\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4ajpixq.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq4ajpixq.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4ajpixq.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpq4ajpixq.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpq4ajpixq.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq4ajpixq.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4ajpixq.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx8hsan45.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx8hsan45.jl:1\n\
    in expression starting at /tmp/tmpx8hsan45.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqdf_jjxr.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqdf_jjxr.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdf_jjxr.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqdf_jjxr.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqdf_jjxr.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqdf_jjxr.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdf_jjxr.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeu7vcpgo.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpeu7vcpgo.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu7vcpgo.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpeu7vcpgo.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpeu7vcpgo.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu7vcpgo.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeu7vcpgo.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    if arr[1] <= arr[2] <= arr[3]\n            return true\n        elseif arr[1]\
    \ <= arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] <= arr[1]\n\
    \            return true\n        elseif arr[3] <= arr[1] <= arr[2]\n        \
    \    return true\n        elseif arr[3] <= arr[2] <= arr[1]\n            return\
    \ true\n        else\n            return false\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcck_ugtk.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcck_ugtk.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcck_ugtk.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpcck_ugtk.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcck_ugtk.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcck_ugtk.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcck_ugtk.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt09kr9rc.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt09kr9rc.jl:1\n\
    in expression starting at /tmp/tmpt09kr9rc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjmnyg04_.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjmnyg04_.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmnyg04_.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpjmnyg04_.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjmnyg04_.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjmnyg04_.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmnyg04_.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8msaj4ba.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8msaj4ba.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8msaj4ba.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp8msaj4ba.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8msaj4ba.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8msaj4ba.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8msaj4ba.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if (arr[1] <= arr[2]) && (arr[2]\
    \ <= arr[3])\n            return true\n        elseif (arr[1] <= arr[3]) && (arr[3]\
    \ <= arr[2])\n            return true\n        elseif (arr[2] <= arr[1]) && (arr[1]\
    \ <= arr[3])\n            return true\n        elseif (arr[2] <= arr[3]) && (arr[3]\
    \ <= arr[1])\n            return true\n        elseif (arr[3] <= arr[1]) && (arr[1]\
    \ <= arr[2])\n            return true\n        elseif (arr[3] <= arr[2]) && (arr[2]\
    \ <= arr[1])\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) > 3\n        if (arr[1] <= arr[2]) &&\
    \ (arr[2] <= arr[3])\n            return true\n        elseif (arr[1] <= arr[3])\
    \ && (arr[3] <= arr[2])\n            return true\n        elseif (arr[2] <= arr[1])\
    \ && (arr[1] <= arr[3])\n            return true\n        elseif (arr[2] <= arr[3])\
    \ && (arr[3] <= arr[1])\n            return true\n        elseif (arr[3] <= arr[1])\
    \ && (arr[1] <= arr[2])\n            return true\n        elseif (arr[3] <= arr[2])\
    \ && (arr[2] <= arr[1])\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgayxw36h.jl:81\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgayxw36h.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgayxw36h.jl:78\ntest set: Test\
    \ Failed at /tmp/tmpgayxw36h.jl:82\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgayxw36h.jl:82 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgayxw36h.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgayxw36h.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    min_val = minimum(arr)\n    min_index\
    \ = findall(arr .== min_val)[1]\n    if min_index == 1\n        return true\n\
    \    end\n    if min_index == length(arr)\n        return false\n    end\n   \
    \ if arr[min_index-1] > arr[min_index+1]\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobxrh0cm.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpobxrh0cm.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobxrh0cm.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpobxrh0cm.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpobxrh0cm.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpobxrh0cm.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobxrh0cm.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp44etn7fy.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp44etn7fy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp44etn7fy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp44etn7fy.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp44etn7fy.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp44etn7fy.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp44etn7fy.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5fuq5aey.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fuq5aey.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fuq5aey.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp5fuq5aey.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5fuq5aey.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fuq5aey.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp5fuq5aey.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5fuq5aey.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fuq5aey.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5fuq5aey.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ arr[1] <= arr[2]\n    end\n    if length(arr) == 3\n        return arr[1] <=\
    \ arr[2] && arr[2] <= arr[3]\n    end\n    if length(arr) == 4\n        return\
    \ arr[1] <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4]\n    end\n    if length(arr)\
    \ == 5\n        return arr[1] <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4]\
    \ && arr[4] <= arr[5]\n    end\n    if length(arr) == 6\n        return arr[1]\
    \ <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5]\
    \ <= arr[6]\n    end\n    if length(arr) == 7\n        return arr[1] <= arr[2]\
    \ && arr[2] <= arr[3] && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6]\
    \ && arr[6] <= arr[7]\n    end\n    if length(arr) == 8\n        return arr[1]\
    \ <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5]\
    \ <= arr[6] && arr[6] <= arr[7] && arr[7] <= arr[8]\n    end\n    if length(arr)\
    \ == 9\n        return arr[1] <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4]\
    \ && arr[4] <= arr[5] && arr[5] <= arr[6] && arr[6] <= arr[7] && arr[7] <= arr[8]\
    \ && arr[8] <= arr[9]\n    end\n    if length(arr) ==\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0rag5bs.jl:1\nin expression starting at /tmp/tmpf0rag5bs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx3prs9va.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx3prs9va.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3prs9va.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpx3prs9va.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpx3prs9va.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx3prs9va.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx3prs9va.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        for i in 1:length(arr)\n\
    \            if arr[i] == minimum(arr)\n                if i == 1\n          \
    \          if arr[i] <= arr[i+1]\n                        return true\n      \
    \              else\n                        return false\n                  \
    \  end\n                elseif i == length(arr)\n                    if arr[i]\
    \ <= arr[i-1]\n                        return true\n                    else\n\
    \                        return false\n                    end\n             \
    \   else\n                    if arr[i] <= arr[i-1] && arr[i] <= arr[i+1]\n  \
    \                      return true\n                    else\n               \
    \         return false\n                    end\n                end\n       \
    \     end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp248rya7z.jl:93\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp248rya7z.jl:93 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp248rya7z.jl:90\ntest set: Test\
    \ Failed at /tmp/tmp248rya7z.jl:94\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp248rya7z.jl:94 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp248rya7z.jl:90\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp248rya7z.jl:88\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpogy_hc9m.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpogy_hc9m.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogy_hc9m.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpogy_hc9m.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpogy_hc9m.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpogy_hc9m.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpogy_hc9m.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpve5lh2jx.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpve5lh2jx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpve5lh2jx.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpve5lh2jx.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpve5lh2jx.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpve5lh2jx.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpve5lh2jx.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5fwgrbmy.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fwgrbmy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fwgrbmy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp5fwgrbmy.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5fwgrbmy.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fwgrbmy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp5fwgrbmy.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5fwgrbmy.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fwgrbmy.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5fwgrbmy.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph1gbhd53.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph1gbhd53.jl:1\n\
    in expression starting at /tmp/tmph1gbhd53.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn9yu00n2.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn9yu00n2.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9yu00n2.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpn9yu00n2.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn9yu00n2.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn9yu00n2.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn9yu00n2.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwo_r9jqx.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwo_r9jqx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo_r9jqx.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpwo_r9jqx.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwo_r9jqx.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwo_r9jqx.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwo_r9jqx.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 4\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3] && arr[3] <= arr[4]\n            return true\n        elseif\
    \ arr[1] <= arr[2] && arr[2] <= arr[4] && arr[4] <= arr[3]\n            return\
    \ true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[2] && arr[2] <= arr[4]\n\
    \            return true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[4]\
    \ && arr[4] <= arr[2]\n            return true\n        elseif arr[1] <= arr[4]\
    \ && arr[4] <= arr[2] && arr[2] <= arr[3]\n            return true\n        elseif\
    \ arr[1] <= arr[4] && arr[4] <= arr[3] && arr[3] <= arr[2]\n            return\
    \ true\n        elseif arr[2] <= arr[1] && arr[1] <= arr[3] && arr[3] <=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6m575ty.jl:1\nin expression starting at /tmp/tmpy6m575ty.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqe6a61sm.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqe6a61sm.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqe6a61sm.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqe6a61sm.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqe6a61sm.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqe6a61sm.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqe6a61sm.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptgbddl6_.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptgbddl6_.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptgbddl6_.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptgbddl6_.jl:36\ntest set:\
    \ Error During Test at /tmp/tmptgbddl6_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmptgbddl6_.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptgbddl6_.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptgbddl6_.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp800hgypv.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp800hgypv.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp800hgypv.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp800hgypv.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp800hgypv.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp800hgypv.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp800hgypv.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprr002u7g.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr002u7g.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr002u7g.jl:64\ntest set: Test\
    \ Failed at /tmp/tmprr002u7g.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprr002u7g.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr002u7g.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprr002u7g.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrpsl9wn.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplrpsl9wn.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrpsl9wn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplrpsl9wn.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplrpsl9wn.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrpsl9wn.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplrpsl9wn.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplrpsl9wn.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplrpsl9wn.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrpsl9wn.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputpcgj8d.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputpcgj8d.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputpcgj8d.jl:48\ntest set: Test\
    \ Failed at /tmp/tmputpcgj8d.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmputpcgj8d.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputpcgj8d.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputpcgj8d.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] && arr[3]\
    \ <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] && arr[1]\
    \ <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] && arr[3]\
    \ <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] && arr[1]\
    \ <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] && arr[2]\
    \ <= arr[1]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n        elseif\
    \ arr[1] <= arr[3] && arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] && arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] && arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] && arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] && arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprrecakev.jl:81\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprrecakev.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprrecakev.jl:78\ntest set: Test\
    \ Failed at /tmp/tmprrecakev.jl:82\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprrecakev.jl:82 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprrecakev.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprrecakev.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            return true\n        end\n        if\
    \ arr[i] > arr[i+1]\n            return false\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2i72on2p.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2i72on2p.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2i72on2p.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp2i72on2p.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2i72on2p.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2i72on2p.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2i72on2p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3], arr[2]\n   \
    \         return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 4\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        if arr[4] > arr[5]\n            arr[4],\
    \ arr[5] = arr[5], arr[4]\n            return true\n        end\n        return\
    \ true\n    end\n    if length(arr) == 6\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3],\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqh8xs7u.jl:1\nin expression starting at /tmp/tmpqqh8xs7u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     if arr[2] > arr[3]\n                return true\n            else\n    \
    \            return false\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    return true\n                else\n          \
    \          return false\n                end\n            else\n             \
    \   if arr[1] > arr[3]\n                    if arr[3] > arr[4]\n             \
    \           return true\n                    else\n                        return\
    \ false\n                    end\n                else\n                    if\
    \ arr[1] > arr[4]\n                        return true\n                    else\n\
    \                        return false\n                    end\n             \
    \   end\n            end\n        else\n            if arr[1] > arr[3]\n     \
    \           if arr[3] > arr[4]\n                    return true\n            \
    \    else\n                    return false\n                end\n           \
    \ else\n                if arr[1] > arr[4]\n                    return true\n\
    \                else\n                    return false\n                end\n\
    \            end\n        end\n    end\n    if length(arr) == 5\n        if arr[1]\
    \ > arr[2]\n            if arr[2] > arr[3]\n                if arr[3] > arr[4]\n\
    \                    if arr[4] > arr[5]\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if arr[1] > arr[4]\n \
    \                       if arr[4] > arr[5]\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   if arr[1] > arr[5]\n                            return true\n            \
    \            else\n                            return false\n                \
    \        end\n                    end\n                end\n            else\n\
    \                if arr[1] > arr[3]\n                   \nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3pd911df.jl:1\nin expression starting at /tmp/tmp3pd911df.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] != i\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjgaqtys9.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjgaqtys9.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgaqtys9.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpjgaqtys9.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjgaqtys9.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjgaqtys9.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjgaqtys9.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1m4ndfq9.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1m4ndfq9.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1m4ndfq9.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp1m4ndfq9.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1m4ndfq9.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1m4ndfq9.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp1m4ndfq9.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1m4ndfq9.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1m4ndfq9.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1m4ndfq9.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoh8a0r6s.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoh8a0r6s.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh8a0r6s.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpoh8a0r6s.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoh8a0r6s.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoh8a0r6s.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoh8a0r6s.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdt_6x9e7.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdt_6x9e7.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdt_6x9e7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpdt_6x9e7.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdt_6x9e7.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdt_6x9e7.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdt_6x9e7.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    # if length(arr) > 2\n    #     if arr[1] > arr[2]\n\
    \    #         return false\n    #     end\n    # end\n    for i in 1:length(arr)\n\
    \        if i == 1\n            if arr[i] > arr[i+1]\n                return false\n\
    \            end\n        end\n        if i == length(arr)\n            if arr[i]\
    \ < arr[i-1]\n                return false\n            end\n        end\n   \
    \     if i > 1 && i < length(arr)\n            if arr[i] < arr[i-1] || arr[i]\
    \ > arr[i+1]\n                return false\n            end\n        end\n   \
    \ end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gdkur09.jl:72\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2gdkur09.jl:72 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdkur09.jl:71\ntest set: Test\
    \ Failed at /tmp/tmp2gdkur09.jl:73\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2gdkur09.jl:73 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2gdkur09.jl:71\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gdkur09.jl:69\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaou4k6sw.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaou4k6sw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaou4k6sw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaou4k6sw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpaou4k6sw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpaou4k6sw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaou4k6sw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaou4k6sw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6609v0h.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf6609v0h.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6609v0h.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpf6609v0h.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf6609v0h.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6609v0h.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6609v0h.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7jvu3wd2.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7jvu3wd2.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7jvu3wd2.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7jvu3wd2.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp7jvu3wd2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp7jvu3wd2.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7jvu3wd2.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jvu3wd2.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] > arr[i+1]\
    \ || arr[i] < arr[i-1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1kgtft2j.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1kgtft2j.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kgtft2j.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp1kgtft2j.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1kgtft2j.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1kgtft2j.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1kgtft2j.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiypu3j3i.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiypu3j3i.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiypu3j3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiypu3j3i.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiypu3j3i.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiypu3j3i.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpiypu3j3i.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiypu3j3i.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiypu3j3i.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiypu3j3i.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] <= arr[i+1]\n\
    \            continue\n        else\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptc2i8rxe.jl:57\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptc2i8rxe.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc2i8rxe.jl:56\ntest set: Test\
    \ Failed at /tmp/tmptc2i8rxe.jl:58\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptc2i8rxe.jl:58 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptc2i8rxe.jl:56\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptc2i8rxe.jl:54\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    # find the index\
    \ of the first element that is smaller than its previous element\n    for i in\
    \ 2:length(arr)\n        if arr[i] < arr[i-1]\n            break\n        end\n\
    \    end\n    # if the index is equal to the length of the array, then the array\
    \ is sorted\n    if i == length(arr)\n        return true\n    end\n    # if the\
    \ index is not equal to the length of the array, then the array is not sorted\n\
    \    # check if the first element is smaller than the last element\n    if arr[1]\
    \ < arr[end]\n        return true\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbhy1papp.jl:55\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  UndefVarError: i not defined\n\
    \  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbhy1papp.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhy1papp.jl:55 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhy1papp.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpbhy1papp.jl:56\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbhy1papp.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhy1papp.jl:56 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhy1papp.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpbhy1papp.jl:57\n  Test threw exception\n  Expression:\
    \ candidate([4, 3, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbhy1papp.jl:40\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbhy1papp.jl:57 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbhy1papp.jl:54\ntest set:\
    \ Error During Test at /tmp/tmpbhy1papp.jl:58\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 4, 1, 2]) == false\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] move_one_ball(arr::Vector{Int64})\n     @ Main /tmp/tmpbhy1papp.jl:40\n\
    \   [2] macro expansion\n     @ /"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbhy1papp.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            if arr[i] < arr[1]\n               \
    \ return false\n            end\n        else\n            if arr[i] < arr[i+1]\n\
    \                continue\n            else\n                return false\n  \
    \          end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_wsw717d.jl:53\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_wsw717d.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wsw717d.jl:52\ntest set: Test\
    \ Failed at /tmp/tmp_wsw717d.jl:54\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_wsw717d.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_wsw717d.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wsw717d.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\n    # You can add helper functions here\n    # You can\
    \ also change the return type of the function\n    # You can also change the function\
    \ signature\n    # You can also add more input arguments\n    # You can also change\
    \ the input arguments\n    # You can also change the function name\n    # You\
    \ can also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You can also change the function name\n    # You can also change the function\
    \ name\n    # You can also change the function name\n    # You can also change\
    \ the function name\n    # You can also change the function name\n    # You can\
    \ also change the function name\n    # You can also change the function name\n\
    \    # You\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg70lvsqr.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg70lvsqr.jl:1\n\
    in expression starting at /tmp/tmpg70lvsqr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr57yu82y.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr57yu82y.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr57yu82y.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr57yu82y.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr57yu82y.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr57yu82y.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpr57yu82y.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpr57yu82y.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr57yu82y.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr57yu82y.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph0u0u_hu.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph0u0u_hu.jl:1\n\
    in expression starting at /tmp/tmph0u0u_hu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # your code goes here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71mvn6n5.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp71mvn6n5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mvn6n5.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp71mvn6n5.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp71mvn6n5.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp71mvn6n5.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71mvn6n5.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpue0vqfry.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpue0vqfry.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpue0vqfry.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpue0vqfry.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpue0vqfry.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpue0vqfry.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpue0vqfry.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpue0vqfry.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpue0vqfry.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpue0vqfry.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg2uzc9kp.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg2uzc9kp.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2uzc9kp.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpg2uzc9kp.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg2uzc9kp.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg2uzc9kp.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg2uzc9kp.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        return true\n\
    \    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) > 3\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\n\
    \            return move_one_ball(arr[2:end])\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn60qhah7.jl:59\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn60qhah7.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn60qhah7.jl:58\ntest set: Test\
    \ Failed at /tmp/tmpn60qhah7.jl:60\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn60qhah7.jl:60 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn60qhah7.jl:58\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn60qhah7.jl:56\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1l1o1mt.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1l1o1mt.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1l1o1mt.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpc1l1o1mt.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc1l1o1mt.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1l1o1mt.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1l1o1mt.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            if arr[i] >= arr[1]\n              \
    \  return true\n            else\n                return false\n            end\n\
    \        else\n            if arr[i] >= arr[i+1]\n                return true\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi6ho89tl.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6ho89tl.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6ho89tl.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpi6ho89tl.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpi6ho89tl.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6ho89tl.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpi6ho89tl.jl:56\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi6ho89tl.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi6ho89tl.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi6ho89tl.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3], arr[2]\n   \
    \         return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 4\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        if arr[4] > arr[5]\n            arr[4],\
    \ arr[5] = arr[5], arr[4]\n            return true\n        end\n        return\
    \ true\n    end\n    if length(arr) == 6\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3],\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzc367wek.jl:1\nin expression starting at /tmp/tmpzc367wek.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4f8985ib.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4f8985ib.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f8985ib.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp4f8985ib.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4f8985ib.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4f8985ib.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4f8985ib.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1okjueh.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1okjueh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1okjueh.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpa1okjueh.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpa1okjueh.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1okjueh.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1okjueh.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 4\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3] && arr[3] <= arr[4]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) == 5\n   \
    \     if arr[1] <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4] && arr[4] <=\
    \ arr[5]\n            return true\n        else\n            return false\n  \
    \      end\n    end\n    if length(arr) == 6\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3] && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6]\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    if length(arr) == 7\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\
    \ && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6] && arr[6] <= arr[7]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 8\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\
    \ && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6] && arr[6] <= arr[7]\
    \ && arr[7] <= arr[8]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 9\n        if arr[1] <= arr[2]\
    \ && arr[2]\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuki_owi8.jl:1\nin expression starting at /tmp/tmpuki_owi8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprn7c44la.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn7c44la.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn7c44la.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprn7c44la.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbvieibks.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvieibks.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvieibks.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpbvieibks.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbvieibks.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvieibks.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpbvieibks.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbvieibks.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvieibks.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvieibks.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2imu3sr.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2imu3sr.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2imu3sr.jl:64\ntest set: Test\
    \ Failed at /tmp/tmpv2imu3sr.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv2imu3sr.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2imu3sr.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2imu3sr.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfigdbm4g.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfigdbm4g.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfigdbm4g.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpfigdbm4g.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpfigdbm4g.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfigdbm4g.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfigdbm4g.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    if length(arr) == 0\n        return true\n    end\n\
    \    if length(arr) == 1\n        return true\n    end\n    if length(arr) ==\
    \ 2\n        if arr[1] > arr[2]\n            return false\n        else\n    \
    \        return true\n        end\n    end\n    if length(arr) == 3\n        if\
    \ arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return false\n\
    \            else\n                return true\n            end\n        else\n\
    \            if arr[1] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        end\n    end\n    if length(arr)\
    \ == 4\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n         \
    \       if arr[3] > arr[4]\n                    return false\n               \
    \ else\n                    return true\n                end\n            else\n\
    \                if arr[1] > arr[3]\n                    if arr[3] > arr[4]\n\
    \                        return false\n                    else\n            \
    \            return true\n                    end\n                else\n    \
    \                if arr[1] > arr[4]\n                        return false\n  \
    \                  else\n                        return true\n               \
    \     end\n                end\n            end\n        else\n            if\
    \ arr[1] > arr[3]\n                if arr[3] > arr[4]\n                    return\
    \ false\n                else\n                    return true\n             \
    \   end\n            else\n                if arr[1] > arr[4]\n              \
    \      if arr[2] > arr[4]\n                        return false\n            \
    \        else\n                        return true\n                    end\n\
    \                else\n                    if arr[2] > arr[3]\n              \
    \          if arr[3] > arr[4]\n                            return false\n    \
    \                    else\n                            return true\n         \
    \               end\n                    else\n                        return\
    \ true\n                    end\n                end\n            end\n      \
    \  end\n    end\n    if length(arr) == 5\n        if arr[1] > arr[2]\n       \
    \     if arr[2] > arr[3]\n                if arr[3] > arr[4]\n               \
    \     if arr[4] > arr[5]\n                        return false\n             \
    \       else\n                        return true\n                    end\n\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgqo360_a.jl:1\nin expression starting at /tmp/tmpgqo360_a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg3w7e0ab.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg3w7e0ab.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3w7e0ab.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpg3w7e0ab.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg3w7e0ab.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg3w7e0ab.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3w7e0ab.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7m7s0hj3.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7m7s0hj3.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7m7s0hj3.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7m7s0hj3.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjfv__wau.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjfv__wau.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjfv__wau.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjfv__wau.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpjfv__wau.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpjfv__wau.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjfv__wau.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjfv__wau.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpck29g1mh.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpck29g1mh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpck29g1mh.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpck29g1mh.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpck29g1mh.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpck29g1mh.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpck29g1mh.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3al69_k.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz3al69_k.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3al69_k.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpz3al69_k.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz3al69_k.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz3al69_k.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3al69_k.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    # Return true if it is possible to get a vector\
    \ sorted in non-decreasing order\n    # by performing the above operation else\
    \ return false.\n    # If the given vector is empty then return true.\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp32tay3hd.jl:43\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32tay3hd.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32tay3hd.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp32tay3hd.jl:44\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp32tay3hd.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32tay3hd.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32tay3hd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <= arr[3]\n\
    \            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n        \
    \    return true\n        elseif arr[2] <= arr[1] <= arr[3]\n            return\
    \ true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return true\n \
    \       elseif arr[3] <= arr[1] <= arr[2]\n            return true\n        elseif\
    \ arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n        \
    \    return false\n        end\n    end\n    if arr[1] <= arr[2] <= arr[3]\n \
    \       return move_one_ball(arr[2:end])\n    elseif arr[1] <= arr[3] <= arr[2]\n\
    \        return move_one_ball(arr[2:end])\n    elseif arr[2] <= arr[1] <= arr[3]\n\
    \        return move_one_ball(arr[2:end])\n    elseif arr[2] <= arr[3] <= arr[1]\n\
    \        return move_one_ball(arr[2:end])\n    elseif arr[3] <= arr[1] <= arr[2]\n\
    \        return move_one_ball(arr[2:end])\n    elseif arr[3] <= arr[2] <= arr[1]\n\
    \        return move_one_ball(arr[2:end])\n    else\n        return false\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3v0gjl4x.jl:79\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3v0gjl4x.jl:79 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v0gjl4x.jl:76\ntest set: Test\
    \ Failed at /tmp/tmp3v0gjl4x.jl:80\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3v0gjl4x.jl:80 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3v0gjl4x.jl:76\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3v0gjl4x.jl:74\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuda3479l.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuda3479l.jl:1\n\
    in expression starting at /tmp/tmpuda3479l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2]\n\
    \            if arr[2] <= arr[3]\n                return true\n            else\n\
    \                return false\n            end\n        else\n            if arr[1]\
    \ <= arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] <= arr[2]\n            if arr[2] <= arr[3]\n                if\
    \ arr[3] <= arr[4]\n                    return true\n                else\n  \
    \                  return false\n                end\n            else\n     \
    \           if arr[1] <= arr[3]\n                    if arr[3] <= arr[4]\n   \
    \                     return true\n                    else\n                \
    \        return false\n                    end\n                else\n       \
    \             return false\n                end\n            end\n        else\n\
    \            if arr[1] <= arr[3]\n                if arr[3] <= arr[4]\n      \
    \              return true\n                else\n                    return false\n\
    \                end\n            else\n                return false\n       \
    \     end\n        end\n    end\n    if length(arr) == 5\n        if arr[1] <=\
    \ arr[2]\n            if arr[2] <= arr[3]\n                if arr[3] <= arr[4]\n\
    \                    if arr[4] <= arr[5]\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if arr[1] <= arr[4]\n\
    \                        if arr[4] <= arr[5]\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   return false\n                    end\n                end\n            else\n\
    \                if arr[1] <= arr[3]\n                    if arr[3] <= arr[4]\n\
    \                        if arr[4] <= arr[5]\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   return false\n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp64j5l2q6.jl:111\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp64j5l2q6.jl:1\n\
    in expression starting at /tmp/tmp64j5l2q6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        if arr[1] <= arr[2]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    for i in 1:length(arr)\n        if i == 1\n            if arr[i]\
    \ > arr[i+1]\n                return false\n            end\n        elseif i\
    \ == length(arr)\n            if arr[i] < arr[i-1]\n                return false\n\
    \            end\n        else\n            if arr[i] < arr[i-1] || arr[i] > arr[i+1]\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6i9ikoua.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6i9ikoua.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6i9ikoua.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp6i9ikoua.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6i9ikoua.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6i9ikoua.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6i9ikoua.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        if arr[1] <= arr[2]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    for i in 1:length(arr)\n        if i == 1\n            if arr[i]\
    \ <= arr[i+1]\n                continue\n            else\n                return\
    \ false\n            end\n        end\n        if i == length(arr)\n         \
    \   if arr[i] >= arr[i-1]\n                continue\n            else\n      \
    \          return false\n            end\n        end\n        if arr[i] >= arr[i-1]\
    \ && arr[i] <= arr[i+1]\n            continue\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66b8bhue.jl:71\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp66b8bhue.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66b8bhue.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp66b8bhue.jl:72\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp66b8bhue.jl:72 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp66b8bhue.jl:70\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66b8bhue.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \"\"\"\n    This function takes a vector of integers as input and returns\
    \ true if it is\n    possible to get a vector sorted in non-decreasing order by\
    \ performing the\n    following operation on the given vector:\n        You are\
    \ allowed to perform right shift operation any number of times.\n    \n    One\
    \ right shift operation means shifting all elements of the vector by one\n   \
    \ position in the right direction. The last element of the vector will be moved\
    \ to\n    the starting position in the vector i.e. 0th index. \nusing Test\n\n\
    @testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2])\
    \ == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabwy8579.jl:1\nin expression starting at /tmp/tmpabwy8579.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     if arr[2] > arr[3]\n                return true\n            else\n    \
    \            return false\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    return true\n                else\n          \
    \          return false\n                end\n            else\n             \
    \   if arr[2] > arr[4]\n                    return true\n                else\n\
    \                    return false\n                end\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                if arr[3] > arr[4]\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            else\n                if arr[1] > arr[4]\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            end\n        end\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n         \
    \       if arr[3] > arr[4]\n                    if arr[4] > arr[5]\n         \
    \               return true\n                    else\n                      \
    \  return false\n                    end\n                else\n             \
    \       if arr[3] > arr[5]\n                        return true\n            \
    \        else\n                        return false\n                    end\n\
    \                end\n            else\n                if arr[2] > arr[4]\n \
    \                   if arr[4] > arr[5]\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if arr[2] > arr[5]\n \
    \                       return true\n                    else\n              \
    \          return false\n                    end\n                end\n      \
    \      end\n        else\n            if arr[1] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    if arr[4\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthqr1dxx.jl:1\nin expression starting at /tmp/tmpthqr1dxx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            if arr[i] >= arr[1]\n              \
    \  return true\n            else\n                return false\n            end\n\
    \        else\n            if arr[i] >= arr[i+1]\n                return true\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbvuftavq.jl:54\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvuftavq.jl:54 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvuftavq.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpbvuftavq.jl:55\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbvuftavq.jl:55 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvuftavq.jl:53\ntest set: Test\
    \ Failed at /tmp/tmpbvuftavq.jl:56\n  Expression: candidate([4, 3, 1, 2]) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbvuftavq.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbvuftavq.jl:53\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvuftavq.jl:51\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5bt4d66n.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5bt4d66n.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bt4d66n.jl:54\ntest set: Test\
    \ Failed at /tmp/tmp5bt4d66n.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5bt4d66n.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5bt4d66n.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5bt4d66n.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclx13vug.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclx13vug.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclx13vug.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclx13vug.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) == 4\n     \
    \   if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    return false\n                else\n         \
    \           return true\n                end\n            else\n             \
    \   if arr[1] > arr[3]\n                    if arr[3] > arr[4]\n             \
    \           return false\n                    else\n                        return\
    \ true\n                    end\n                else\n                    if\
    \ arr[1] > arr[4]\n                        return false\n                    else\n\
    \                        return true\n                    end\n              \
    \  end\n            end\n        else\n            if arr[1] > arr[3]\n      \
    \          if arr[3] > arr[4]\n                    return false\n            \
    \    else\n                    return true\n                end\n            else\n\
    \                if arr[1] > arr[4]\n                    if arr[2] > arr[4]\n\
    \                        return false\n                    else\n            \
    \            return true\n                    end\n                else\n    \
    \                return true\n                end\n            end\n        end\n\
    \    end\n    if length(arr) == 5\n        if arr[1] > arr[2]\n            if\
    \ arr[2] > arr[3]\n                if arr[3] > arr[4]\n                    if\
    \ arr[4] > arr[5]\n                        return false\n                    else\n\
    \                        return true\n                    end\n              \
    \  else\n                    if arr[1] > arr[4]\n                        if arr[4]\
    \ > arr[5]\n                            return false\n                       \
    \ else\n                            return true\n                        end\n\
    \                    else\n                        if arr[1]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyftl1yt.jl:1\nin expression starting at /tmp/tmpkyftl1yt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            return true\n        end\n        if\
    \ arr[i] > arr[i+1]\n            return false\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpquhdx1z4.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpquhdx1z4.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquhdx1z4.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpquhdx1z4.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpquhdx1z4.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpquhdx1z4.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquhdx1z4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 4\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3] && arr[3] <= arr[4]\n            return true\n        elseif\
    \ arr[1] <= arr[2] && arr[2] <= arr[4] && arr[4] <= arr[3]\n            return\
    \ true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[2] && arr[2] <= arr[4]\n\
    \            return true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[4]\
    \ && arr[4] <= arr[2]\n            return true\n        elseif arr[1] <= arr[4]\
    \ && arr[4] <= arr[2] && arr[2] <= arr[3]\n            return true\n        elseif\
    \ arr[1] <= arr[4] && arr[4] <= arr[3] && arr[3] <= arr[2]\n            return\
    \ true\n        elseif arr[2] <= arr[1] && arr[1] <= arr[3] && arr[3] <=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5dbvd1b.jl:1\nin expression starting at /tmp/tmpr5dbvd1b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidnuoma1.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidnuoma1.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidnuoma1.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpidnuoma1.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpidnuoma1.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidnuoma1.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidnuoma1.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    n = length(arr)\n    if n == 0\n        return true\n    end\n    for\
    \ i in 1:n\n        if arr[i] == i\n            continue\n        elseif arr[i]\
    \ == i+1\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n    \
    \        return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf10brlcf.jl:50\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf10brlcf.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf10brlcf.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpf10brlcf.jl:51\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf10brlcf.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf10brlcf.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf10brlcf.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        if arr[1] <= arr[2]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\n\
    \            return true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] && arr[1] <= arr[3]\n\
    \            return true\n        elseif arr[2] <= arr[3] && arr[3] <= arr[1]\n\
    \            return true\n        elseif arr[3] <= arr[1] && arr[1] <= arr[2]\n\
    \            return true\n        elseif arr[3] <= arr[2] && arr[2] <= arr[1]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if arr[1] <= arr[2]\n        return move_one_ball(arr[2:end])\n\
    \    else\n        return move_one_ball(vcat(arr[end], arr[1:end-1]))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3nooy8z0.jl:73\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3nooy8z0.jl:73 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nooy8z0.jl:70\ntest set: Test\
    \ Failed at /tmp/tmp3nooy8z0.jl:74\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3nooy8z0.jl:74 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3nooy8z0.jl:70\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3nooy8z0.jl:68\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1e6ic5wv.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1e6ic5wv.jl:1\n\
    in expression starting at /tmp/tmp1e6ic5wv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0keobuk3.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0keobuk3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0keobuk3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp0keobuk3.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0keobuk3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0keobuk3.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0keobuk3.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphc1v4yp6.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphc1v4yp6.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphc1v4yp6.jl:37\ntest set: Test\
    \ Failed at /tmp/tmphc1v4yp6.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphc1v4yp6.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphc1v4yp6.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphc1v4yp6.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5qlwa16.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm5qlwa16.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5qlwa16.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpm5qlwa16.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm5qlwa16.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm5qlwa16.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5qlwa16.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            return true\n        end\n        if\
    \ arr[i] > arr[i+1]\n            return false\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6m1bzynf.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6m1bzynf.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6m1bzynf.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp6m1bzynf.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6m1bzynf.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6m1bzynf.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6m1bzynf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpglgfb5g4.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpglgfb5g4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpglgfb5g4.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpglgfb5g4.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpglgfb5g4.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpglgfb5g4.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpglgfb5g4.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           return false\n        elseif arr[2] > arr[3]\n            return false\n\
    \        else\n            return true\n        end\n    end\n    if length(arr)\
    \ > 3\n        for i in 1:length(arr)\n            if arr[i] > arr[i+1]\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntxzw6e4.jl:66\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpntxzw6e4.jl:66 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntxzw6e4.jl:65\ntest set: Test\
    \ Failed at /tmp/tmpntxzw6e4.jl:67\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpntxzw6e4.jl:67 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpntxzw6e4.jl:65\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntxzw6e4.jl:63\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    for i in 1:length(arr)\n        if arr[i]\
    \ > arr[i+1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5el_k6a8.jl:48\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5el_k6a8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5el_k6a8.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp5el_k6a8.jl:49\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5el_k6a8.jl:49 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5el_k6a8.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5el_k6a8.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplzaqr00y.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplzaqr00y.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzaqr00y.jl:37\ntest set: Test\
    \ Failed at /tmp/tmplzaqr00y.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplzaqr00y.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplzaqr00y.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplzaqr00y.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == 1\n            if arr[i] > arr[i+1]\n                return false\n\
    \            end\n        elseif i == length(arr)\n            if arr[i] < arr[i-1]\n\
    \                return false\n            end\n        else\n            if arr[i]\
    \ > arr[i+1] || arr[i] < arr[i-1]\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdh_j1pom.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdh_j1pom.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdh_j1pom.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpdh_j1pom.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpdh_j1pom.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdh_j1pom.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdh_j1pom.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    n = length(arr)\n    if n == 0\n        return true\n    end\n    if n\
    \ == 1\n        return true\n    end\n    if n == 2\n        return true\n   \
    \ end\n    for i in 1:n-1\n        if arr[i] > arr[i+1]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4or58mv7.jl:52\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4or58mv7.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or58mv7.jl:51\ntest set: Test\
    \ Failed at /tmp/tmp4or58mv7.jl:53\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4or58mv7.jl:53 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4or58mv7.jl:51\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4or58mv7.jl:49\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        if arr[1] > arr[2]\n\
    \            return false\n        else\n            return true\n        end\n\
    \    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n            if\
    \ arr[2] > arr[3]\n                return false\n            else\n          \
    \      return true\n            end\n        else\n            if arr[1] > arr[3]\n\
    \                return false\n            else\n                return true\n\
    \            end\n        end\n    end\n    if length(arr) == 4\n        if arr[1]\
    \ > arr[2]\n            if arr[2] > arr[3]\n                if arr[3] > arr[4]\n\
    \                    return false\n                else\n                    return\
    \ true\n                end\n            else\n                if arr[1] > arr[3]\n\
    \                    if arr[3] > arr[4]\n                        return false\n\
    \                    else\n                        return true\n             \
    \       end\n                else\n                    if arr[1] > arr[4]\n  \
    \                      return false\n                    else\n              \
    \          return true\n                    end\n                end\n       \
    \     end\n        else\n            if arr[1] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    return false\n                else\n         \
    \           return true\n                end\n            else\n             \
    \   if arr[1] > arr[4]\n                    if arr[2] > arr[4]\n             \
    \           return false\n                    else\n                        return\
    \ true\n                    end\n                else\n                    return\
    \ true\n                end\n            end\n        end\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n         \
    \       if arr[3] > arr[4]\n                    if arr[4] > arr[5]\n         \
    \               return false\n                    else\n                     \
    \   return true\n                    end\n                else\n             \
    \       if arr[1] > arr[4]\n                        if arr[4] > arr[5]\n     \
    \                       return false\n                        else\n         \
    \                   return true\n                        end\n               \
    \     else\n                        if arr[1] >\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfakwg25.jl:1\nin expression starting at /tmp/tmpwfakwg25.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8pwo61b.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps8pwo61b.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8pwo61b.jl:48\ntest set: Test\
    \ Failed at /tmp/tmps8pwo61b.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmps8pwo61b.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps8pwo61b.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8pwo61b.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnr1k6zxl.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnr1k6zxl.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr1k6zxl.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpnr1k6zxl.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnr1k6zxl.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnr1k6zxl.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnr1k6zxl.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <= arr[3]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 4\n        if arr[1] <= arr[2] <= arr[3] <= arr[4]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 5\n        if arr[1] <= arr[2] <= arr[3] <= arr[4]\
    \ <= arr[5]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 6\n        if arr[1] <= arr[2] <=\
    \ arr[3] <= arr[4] <= arr[5] <= arr[6]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) == 7\n   \
    \     if arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 8\n        if arr[1] <= arr[2] <= arr[3] <= arr[4]\
    \ <= arr[5] <= arr[6] <= arr[7] <= arr[8]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) == 9\n   \
    \     if arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <=\
    \ arr[8] <= arr[9]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 10\n        if arr[1] <=\
    \ arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9]\
    \ <= arr\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92p8p99z.jl:1\nin expression starting at /tmp/tmp92p8p99z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] && arr[3]\
    \ <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] && arr[1]\
    \ <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] && arr[3]\
    \ <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] && arr[1]\
    \ <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] && arr[2]\
    \ <= arr[1]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n        elseif\
    \ arr[1] <= arr[3] && arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] && arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] && arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] && arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] && arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc5w955op.jl:81\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5w955op.jl:81 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5w955op.jl:78\ntest set: Test\
    \ Failed at /tmp/tmpc5w955op.jl:82\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc5w955op.jl:82 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5w955op.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5w955op.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    n = length(arr)\n    if n == 0\n        return true\n    end\n    if n\
    \ == 1\n        return true\n    end\n    if n == 2\n        return true\n   \
    \ end\n    if n == 3\n        return true\n    end\n    if n == 4\n        return\
    \ true\n    end\n    if n == 5\n        return true\n    end\n    if n == 6\n\
    \        return true\n    end\n    if n == 7\n        return true\n    end\n \
    \   if n == 8\n        return true\n    end\n    if n == 9\n        return true\n\
    \    end\n    if n == 10\n        return true\n    end\n    if n == 11\n     \
    \   return true\n    end\n    if n == 12\n        return true\n    end\n    if\
    \ n == 13\n        return true\n    end\n    if n == 14\n        return true\n\
    \    end\n    if n == 15\n        return true\n    end\n    if n == 16\n     \
    \   return true\n    end\n    if n == 17\n        return true\n    end\n    if\
    \ n == 18\n        return true\n    end\n    if n == 19\n        return true\n\
    \    end\n    if n == 20\n        return true\n    end\n    if n == 21\n     \
    \   return true\n    end\n    if n == 22\n        return true\n    end\n    if\
    \ n == 23\n        return true\n    end\n    if n == 24\n        return true\n\
    \    end\n    if n == 25\n        return true\n    end\n    if n == 26\n     \
    \   return true\n    end\n    if n == 27\n        return true\n    end\n    if\
    \ n == 28\n        return true\n    end\n    if n == 29\n        return true\n\
    \    end\n    if n == 30\n        return true\n    end\n    if n == 31\n     \
    \   return true\n    end\n    if n == 32\n        return true\n    end\n    if\
    \ n == 33\n        return true\n    end\n    if n == 34\n        return true\n\
    \    end\n    if n == 35\n        return true\n    end\n    if n == 36\n     \
    \   return true\n    end\n    if n == 37\n        return true\n    end\n    if\
    \ n == 38\n        return true\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxttirzx.jl:1\nin expression starting at /tmp/tmpyxttirzx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    n = length(arr)\n    if n == 0\n        return true\n    end\n    if n\
    \ == 1\n        return true\n    end\n    for i in 1:n-1\n        if arr[i] >\
    \ arr[i+1]\n            return false\n        end\n    end\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoz7a7obx.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoz7a7obx.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz7a7obx.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpoz7a7obx.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoz7a7obx.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoz7a7obx.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoz7a7obx.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptdptfo_5.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptdptfo_5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptdptfo_5.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptdptfo_5.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptdptfo_5.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptdptfo_5.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptdptfo_5.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 4\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3] && arr[3] <= arr[4]\n            return true\n        elseif\
    \ arr[1] <= arr[2] && arr[2] <= arr[4] && arr[4] <= arr[3]\n            return\
    \ true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[2] && arr[2] <= arr[4]\n\
    \            return true\n        elseif arr[1] <= arr[3] && arr[3] <= arr[4]\
    \ && arr[4] <= arr[2]\n            return true\n        elseif arr[1] <= arr[4]\
    \ && arr[4] <= arr[2] && arr[2] <= arr[3]\n            return true\n        elseif\
    \ arr[1] <= arr[4] && arr[4] <= arr[3] && arr[3] <= arr[2]\n            return\
    \ true\n        elseif arr[2] <= arr[1] && arr[1] <= arr[3] && arr[3] <=\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0o4vvaq8.jl:1\nin expression starting at /tmp/tmp0o4vvaq8.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbkcj7mr5.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbkcj7mr5.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbkcj7mr5.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbkcj7mr5.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2]\n\
    \            if arr[2] <= arr[3]\n                return true\n            else\n\
    \                return false\n            end\n        else\n            if arr[1]\
    \ <= arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] <= arr[2]\n            if arr[2] <= arr[3]\n                if\
    \ arr[3] <= arr[4]\n                    return true\n                else\n  \
    \                  return false\n                end\n            else\n     \
    \           if arr[1] <= arr[3]\n                    if arr[3] <= arr[4]\n   \
    \                     return true\n                    else\n                \
    \        return false\n                    end\n                else\n       \
    \             return false\n                end\n            end\n        else\n\
    \            if arr[1] <= arr[3]\n                if arr[3] <= arr[4]\n      \
    \              return true\n                else\n                    return false\n\
    \                end\n            else\n                return false\n       \
    \     end\n        end\n    end\n    if length(arr) == 5\n        if arr[1] <=\
    \ arr[2]\n            if arr[2] <= arr[3]\n                if arr[3] <= arr[4]\n\
    \                    if arr[4] <= arr[5]\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if arr[1] <= arr[4]\n\
    \                        if arr[4] <= arr[5]\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   return false\n                    end\n                end\n            else\n\
    \                if arr[1] <= arr[3]\n                    if arr[3] <= arr[4]\n\
    \                        if arr[4] <= arr[5]\n                            return\
    \ true\n                        else\n                            return false\n\
    \                        end\n                    else\n                     \
    \   return false\n\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpw28fhpgt.jl:111\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw28fhpgt.jl:1\n\
    in expression starting at /tmp/tmpw28fhpgt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     return true\n        else\n            return false\n        end\n    end\n\
    \    if length(arr) == 4\n        if arr[1] > arr[2]\n            return true\n\
    \        else\n            return false\n        end\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            return true\n        else\n  \
    \          return false\n        end\n    end\n    if length(arr) == 6\n     \
    \   if arr[1] > arr[2]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 7\n        if arr[1] > arr[2]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 8\n        if arr[1] > arr[2]\n            return\
    \ true\n        else\n            return false\n        end\n    end\n    if length(arr)\
    \ == 9\n        if arr[1] > arr[2]\n            return true\n        else\n  \
    \          return false\n        end\n    end\n    if length(arr) == 10\n    \
    \    if arr[1] > arr[2]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 11\n        if arr[1] > arr[2]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 12\n        if arr[1] > arr[2]\n            return\
    \ true\n        else\n            return false\n        end\n    end\n    if length(arr)\
    \ == 13\n        if arr[1] > arr[2]\n            return true\n        else\n \
    \           return false\n        end\n    end\n    if length(arr) == 14\n   \
    \     if arr[1] > arr[2]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) ==\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke_ekoer.jl:1\nin expression starting at /tmp/tmpke_ekoer.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphm15t6zg.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphm15t6zg.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphm15t6zg.jl:82\ntest set: Test\
    \ Failed at /tmp/tmphm15t6zg.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphm15t6zg.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphm15t6zg.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphm15t6zg.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoydsnacj.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoydsnacj.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoydsnacj.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoydsnacj.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpoydsnacj.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpoydsnacj.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoydsnacj.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoydsnacj.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] > arr[i+1]\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptp6mfz9n.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptp6mfz9n.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp6mfz9n.jl:44\ntest set: Test\
    \ Failed at /tmp/tmptp6mfz9n.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptp6mfz9n.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptp6mfz9n.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptp6mfz9n.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu07a0nsg.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu07a0nsg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu07a0nsg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu07a0nsg.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu07a0nsg.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu07a0nsg.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu07a0nsg.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwly31y6.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgwly31y6.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwly31y6.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpgwly31y6.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpgwly31y6.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgwly31y6.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwly31y6.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi8pt8m20.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8pt8m20.jl:1\n\
    in expression starting at /tmp/tmpi8pt8m20.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizufhgib.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpizufhgib.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizufhgib.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpizufhgib.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpizufhgib.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpizufhgib.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizufhgib.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprl528p4b.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprl528p4b.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprl528p4b.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprl528p4b.jl:36\ntest set:\
    \ Error During Test at /tmp/tmprl528p4b.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmprl528p4b.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprl528p4b.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprl528p4b.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprsz34pst.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprsz34pst.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsz34pst.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprsz34pst.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprsz34pst.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprsz34pst.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsz34pst.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2] ||\
    \ arr[2] > arr[3]\n            return false\n        else\n            return\
    \ true\n        end\n    end\n    if length(arr) == 4\n        if arr[1] > arr[2]\
    \ || arr[2] > arr[3] || arr[3] > arr[4]\n            return false\n        else\n\
    \            return true\n        end\n    end\n    if length(arr) == 5\n    \
    \    if arr[1] > arr[2] || arr[2] > arr[3] || arr[3] > arr[4] || arr[4] > arr[5]\n\
    \            return false\n        else\n            return true\n        end\n\
    \    end\n    if length(arr) == 6\n        if arr[1] > arr[2] || arr[2] > arr[3]\
    \ || arr[3] > arr[4] || arr[4] > arr[5] || arr[5] > arr[6]\n            return\
    \ false\n        else\n            return true\n        end\n    end\n    if length(arr)\
    \ == 7\n        if arr[1] > arr[2] || arr[2] > arr[3] || arr[3] > arr[4] || arr[4]\
    \ > arr[5] || arr[5] > arr[6] || arr[6] > arr[7]\n            return false\n \
    \       else\n            return true\n        end\n    end\n    if length(arr)\
    \ == 8\n        if arr[1] > arr[2] || arr[2] > arr[3] || arr[3] > arr[4] || arr[4]\
    \ > arr[5] || arr[5] > arr[6] || arr[6] > arr[7] || arr[7] > arr[8]\n        \
    \    return false\n        else\n            return true\n        end\n    end\n\
    \    if length\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9w9txmzg.jl:1\nin expression starting at /tmp/tmp9w9txmzg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    if length(arr) == 0\n        return true\n    end\n\
    \    if length(arr) == 1\n        return true\n    end\n    if length(arr) ==\
    \ 2\n        if arr[1] > arr[2]\n            return false\n        else\n    \
    \        return true\n        end\n    end\n    if length(arr) == 3\n        if\
    \ arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return false\n\
    \            else\n                return true\n            end\n        else\n\
    \            if arr[1] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        end\n    end\n    if length(arr)\
    \ > 3\n        for i in 1:length(arr)\n            if arr[i] > arr[i+1]\n    \
    \            if arr[i+1] > arr[i+2]\n                    return false\n      \
    \          else\n                    return true\n                end\n      \
    \      else\n                if arr[i] > arr[i+2]\n                    return\
    \ false\n                else\n                    return true\n             \
    \   end\n            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zz2jaaj.jl:85\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zz2jaaj.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zz2jaaj.jl:81\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zz2jaaj.jl:79\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    # Return true if it is possible to get a vector\
    \ sorted in non-decreasing order\n    # by performing the above operation else\
    \ return false.\n    # If the given vector is empty then return true.\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzxt9fcxf.jl:43\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxt9fcxf.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxt9fcxf.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpzxt9fcxf.jl:44\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzxt9fcxf.jl:44 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxt9fcxf.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxt9fcxf.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    min_val = minimum(arr)\n\
    \    min_index = findall(arr .== min_val)[1]\n    if min_index == 1\n        return\
    \ true\n    end\n    for i in 1:min_index-1\n        if arr[i] > min_val\n   \
    \         return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe2721xw9.jl:50\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe2721xw9.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2721xw9.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpe2721xw9.jl:51\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpe2721xw9.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe2721xw9.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe2721xw9.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprg90fofs.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprg90fofs.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprg90fofs.jl:37\ntest set: Test\
    \ Failed at /tmp/tmprg90fofs.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprg90fofs.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprg90fofs.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprg90fofs.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp62qjxtyw.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp62qjxtyw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp62qjxtyw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp62qjxtyw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp62qjxtyw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmp62qjxtyw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp62qjxtyw.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62qjxtyw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptrob5hq9.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrob5hq9.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrob5hq9.jl:48\ntest set: Test\
    \ Failed at /tmp/tmptrob5hq9.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptrob5hq9.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrob5hq9.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrob5hq9.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    if arr[1] <= arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[1] <= arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0g9pe1oq.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0g9pe1oq.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g9pe1oq.jl:82\ntest set: Test\
    \ Failed at /tmp/tmp0g9pe1oq.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0g9pe1oq.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0g9pe1oq.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0g9pe1oq.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw_di1txe.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw_di1txe.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_di1txe.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpw_di1txe.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw_di1txe.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw_di1txe.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_di1txe.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    if arr[1] <= arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[1] <= arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwjpwepqr.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwjpwepqr.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjpwepqr.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpwjpwepqr.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwjpwepqr.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwjpwepqr.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjpwepqr.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    if arr[1] <= arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[1] <= arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7yahi36.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj7yahi36.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7yahi36.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpj7yahi36.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj7yahi36.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj7yahi36.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7yahi36.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp732d9kkx.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp732d9kkx.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732d9kkx.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp732d9kkx.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp732d9kkx.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp732d9kkx.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp732d9kkx.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            if arr[i] < arr[1]\n               \
    \ return false\n            end\n        else\n            if arr[i] < arr[i+1]\n\
    \                continue\n            else\n                return false\n  \
    \          end\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpug5lwncg.jl:53\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpug5lwncg.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpug5lwncg.jl:52\ntest set: Test\
    \ Failed at /tmp/tmpug5lwncg.jl:54\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpug5lwncg.jl:54 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpug5lwncg.jl:52\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpug5lwncg.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr7poncp0.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr7poncp0.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7poncp0.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr7poncp0.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpr7poncp0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpr7poncp0.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr7poncp0.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7poncp0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    # Return true if it is possible to get the\
    \ vector in non-decreasing order\n    # else return false.\n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ft9ir53.jl:42\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ft9ir53.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ft9ir53.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp2ft9ir53.jl:43\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp2ft9ir53.jl:43 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ft9ir53.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ft9ir53.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe_u2lcu0.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe_u2lcu0.jl:1\n\
    in expression starting at /tmp/tmpe_u2lcu0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzhkounnh.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzhkounnh.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzhkounnh.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpzhkounnh.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzhkounnh.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzhkounnh.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzhkounnh.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    for i in 1:length(arr)\n        if i == length(arr)\n\
    \            return true\n        end\n        if arr[i] > arr[i+1]\n        \
    \    return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dk994j8.jl:50\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1dk994j8.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dk994j8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmp1dk994j8.jl:51\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1dk994j8.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1dk994j8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dk994j8.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Write your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwe8mnks4.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwe8mnks4.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwe8mnks4.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpwe8mnks4.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwe8mnks4.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwe8mnks4.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwe8mnks4.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvaik1omp.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvaik1omp.jl:1\n\
    in expression starting at /tmp/tmpvaik1omp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewd5fr_i.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpewd5fr_i.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpewd5fr_i.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewd5fr_i.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjzh4lgo7.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzh4lgo7.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzh4lgo7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjzh4lgo7.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjzh4lgo7.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzh4lgo7.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjzh4lgo7.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjzh4lgo7.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzh4lgo7.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzh4lgo7.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpst45qb28.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpst45qb28.jl:1\n\
    in expression starting at /tmp/tmpst45qb28.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qz3goxs.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4qz3goxs.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4qz3goxs.jl:64\ntest set: Test\
    \ Failed at /tmp/tmp4qz3goxs.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp4qz3goxs.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4qz3goxs.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qz3goxs.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptoc8l2kg.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptoc8l2kg.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptoc8l2kg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmptoc8l2kg.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptoc8l2kg.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptoc8l2kg.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptoc8l2kg.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i == length(arr)\n            return true\n        end\n        if\
    \ arr[i] > arr[i+1]\n            return false\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp480y3i8.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp480y3i8.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp480y3i8.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpp480y3i8.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpp480y3i8.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp480y3i8.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp480y3i8.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8jbl4u3.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpm8jbl4u3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8jbl4u3.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpm8jbl4u3.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpm8jbl4u3.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpm8jbl4u3.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8jbl4u3.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5_dywbbg.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5_dywbbg.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5_dywbbg.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5_dywbbg.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpjuy4wv.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprpjuy4wv.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpjuy4wv.jl:48\ntest set: Test\
    \ Failed at /tmp/tmprpjuy4wv.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprpjuy4wv.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprpjuy4wv.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpjuy4wv.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if arr[1] <= arr[2] && arr[2] <= arr[3]\n \
    \       return move_one_ball(arr[2:end])\n    elseif arr[1] <= arr[3] && arr[3]\
    \ <= arr[2]\n        return move_one_ball(arr[3:end])\n    elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n        return move_one_ball(arr[1:end-1])\n    elseif\
    \ arr[2] <= arr[3] && arr[3] <= arr[1]\n        return move_one_ball(arr[1:end-2])\n\
    \    elseif arr[3] <= arr[1] && arr[1] <= arr[2]\n        return move_one_ball(arr[1:end-1])\n\
    \    elseif arr[3] <= arr[2] && arr[2] <= arr[1]\n        return move_one_ball(arr[2:end])\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1h752nnr.jl:83\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1h752nnr.jl:83 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h752nnr.jl:80\ntest set: Test\
    \ Failed at /tmp/tmp1h752nnr.jl:84\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1h752nnr.jl:84 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1h752nnr.jl:80\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1h752nnr.jl:78\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv2v58sgr.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpv2v58sgr.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2v58sgr.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpv2v58sgr.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpv2v58sgr.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpv2v58sgr.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv2v58sgr.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu1u1ij3m.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1u1ij3m.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1u1ij3m.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu1u1ij3m.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu1u1ij3m.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1u1ij3m.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu1u1ij3m.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpu1u1ij3m.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1u1ij3m.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu1u1ij3m.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf4hddhy5.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf4hddhy5.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4hddhy5.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpf4hddhy5.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf4hddhy5.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf4hddhy5.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4hddhy5.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code goes here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgomcqi4e.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgomcqi4e.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgomcqi4e.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgomcqi4e.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpgomcqi4e.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmpgomcqi4e.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgomcqi4e.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgomcqi4e.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkh2drtgw.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkh2drtgw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkh2drtgw.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpkh2drtgw.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpkh2drtgw.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkh2drtgw.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkh2drtgw.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if arr[i] > arr[i+1]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpisrb8cdf.jl:55\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpisrb8cdf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisrb8cdf.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpisrb8cdf.jl:56\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpisrb8cdf.jl:56 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpisrb8cdf.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisrb8cdf.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt0geqor0.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt0geqor0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0geqor0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpt0geqor0.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt0geqor0.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0geqor0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpt0geqor0.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpt0geqor0.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt0geqor0.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0geqor0.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqyz78v39.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqyz78v39.jl:1\n\
    in expression starting at /tmp/tmpqyz78v39.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp13hq6v19.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp13hq6v19.jl:1\n\
    in expression starting at /tmp/tmp13hq6v19.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Your code here\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyj50mdlp.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyj50mdlp.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyj50mdlp.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpyj50mdlp.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpyj50mdlp.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyj50mdlp.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyj50mdlp.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    min_val = minimum(arr)\n\
    \    min_index = findall(arr .== min_val)[1]\n    if min_index == 1\n        return\
    \ true\n    end\n    for i in 1:min_index-1\n        if arr[i] > min_val\n   \
    \         return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepmlc3d8.jl:50\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpepmlc3d8.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepmlc3d8.jl:49\ntest set: Test\
    \ Failed at /tmp/tmpepmlc3d8.jl:51\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpepmlc3d8.jl:51 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpepmlc3d8.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepmlc3d8.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4u6dcx62.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4u6dcx62.jl:1\n\
    in expression starting at /tmp/tmp4u6dcx62.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6luocp9.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf6luocp9.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6luocp9.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpf6luocp9.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpf6luocp9.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf6luocp9.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6luocp9.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    i = length(arr)\n\
    \    while i > 1\n        if arr[i] < arr[i-1]\n            return false\n   \
    \     end\n        i -= 1\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprn9y1t1o.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprn9y1t1o.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn9y1t1o.jl:46\ntest set: Test\
    \ Failed at /tmp/tmprn9y1t1o.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprn9y1t1o.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprn9y1t1o.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprn9y1t1o.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    for i in 1:length(arr)\n        if i == 1\n       \
    \     if arr[i] > arr[i+1]\n                return false\n            end\n  \
    \      elseif i == length(arr)\n            if arr[i] < arr[i-1]\n           \
    \     return false\n            end\n        else\n            if arr[i] < arr[i-1]\
    \ || arr[i] > arr[i+1]\n                return false\n            end\n      \
    \  end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbng8k5x.jl:65\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphbng8k5x.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbng8k5x.jl:64\ntest set: Test\
    \ Failed at /tmp/tmphbng8k5x.jl:66\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmphbng8k5x.jl:66 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphbng8k5x.jl:64\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbng8k5x.jl:62\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbfqfjhlu.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbfqfjhlu.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfqfjhlu.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpbfqfjhlu.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpbfqfjhlu.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbfqfjhlu.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfqfjhlu.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    for i in 1:length(arr)\n            if i == 1\n                if arr[i]\
    \ <= arr[i+1] <= arr[i+2]\n                    return true\n                elseif\
    \ arr[i] <= arr[i+2] <= arr[i+1]\n                    return true\n          \
    \      elseif arr[i+1] <= arr[i] <= arr[i+2]\n                    return true\n\
    \                elseif arr[i+1] <= arr[i+2] <= arr[i]\n                    return\
    \ true\n                elseif arr[i+2] <= arr[i] <= arr[i+1]\n              \
    \      return true\n                elseif arr[i+2] <= arr[i+1] <= arr[i]\n  \
    \                  return true\n                else\n                    return\
    \ false\n                end\n            elseif i == length(arr)\n          \
    \      if arr[i-2] <= arr[i-1] <= arr[i]\n                    return true\n  \
    \              elseif arr[i-2] <= arr[i] <= arr[i-1]\n                    return\
    \ true\n                elseif arr[i-1] <= arr[i-2] <= arr[i]\n              \
    \      return true\n                elseif arr[i-1] <=\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp380lwt14.jl:1\nin expression starting at /tmp/tmp380lwt14.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91fvyqm3.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp91fvyqm3.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91fvyqm3.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp91fvyqm3.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp91fvyqm3.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp91fvyqm3.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91fvyqm3.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if i != length(arr)\n            if arr[i] > arr[i+1]\n             \
    \   return false\n            end\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ftsuqfc.jl:47\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0ftsuqfc.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ftsuqfc.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp0ftsuqfc.jl:48\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0ftsuqfc.jl:48 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0ftsuqfc.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ftsuqfc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    n = length(arr)\n    if n == 0\n        return true\n    end\n    if n\
    \ == 1\n        return true\n    end\n    if n == 2\n        return true\n   \
    \ end\n    if n == 3\n        return true\n    end\n    if n == 4\n        return\
    \ true\n    end\n    if n == 5\n        return true\n    end\n    if n == 6\n\
    \        return true\n    end\n    if n == 7\n        return true\n    end\n \
    \   if n == 8\n        return true\n    end\n    if n == 9\n        return true\n\
    \    end\n    if n == 10\n        return true\n    end\n    if n == 11\n     \
    \   return true\n    end\n    if n == 12\n        return true\n    end\n    if\
    \ n == 13\n        return true\n    end\n    if n == 14\n        return true\n\
    \    end\n    if n == 15\n        return true\n    end\n    if n == 16\n     \
    \   return true\n    end\n    if n == 17\n        return true\n    end\n    if\
    \ n == 18\n        return true\n    end\n    if n == 19\n        return true\n\
    \    end\n    if n == 20\n        return true\n    end\n    if n == 21\n     \
    \   return true\n    end\n    if n == 22\n        return true\n    end\n    if\
    \ n == 23\n        return true\n    end\n    if n == 24\n        return true\n\
    \    end\n    if n == 25\n        return true\n    end\n    if n == 26\n     \
    \   return true\n    end\n    if n == 27\n        return true\n    end\n    if\
    \ n == 28\n        return true\n    end\n    if n == 29\n        return true\n\
    \    end\n    if n == 30\n        return true\n    end\n    if n == 31\n     \
    \   return true\n    end\n    if n == 32\n        return true\n    end\n    if\
    \ n == 33\n        return true\n    end\n    if n == 34\n        return true\n\
    \    end\n    if n == 35\n        return true\n    end\n    if n == 36\n     \
    \   return true\n    end\n    if n == 37\n        return true\n    end\n    if\
    \ n == 38\n        return true\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpke2_y2_b.jl:1\nin expression starting at /tmp/tmpke2_y2_b.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1xns80g0.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1xns80g0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xns80g0.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp1xns80g0.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp1xns80g0.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1xns80g0.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xns80g0.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     if arr[2] > arr[3]\n                return true\n            else\n    \
    \            return false\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    return true\n                else\n          \
    \          return false\n                end\n            else\n             \
    \   if arr[2] > arr[4]\n                    return true\n                else\n\
    \                    return false\n                end\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                if arr[3] > arr[4]\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            else\n                if arr[1] > arr[4]\n\
    \                    return true\n                else\n                    return\
    \ false\n                end\n            end\n        end\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n         \
    \       if arr[3] > arr[4]\n                    if arr[4] > arr[5]\n         \
    \               return true\n                    else\n                      \
    \  return false\n                    end\n                else\n             \
    \       if arr[3] > arr[5]\n                        return true\n            \
    \        else\n                        return false\n                    end\n\
    \                end\n            else\n                if arr[2] > arr[4]\n \
    \                   if arr[4] > arr[5]\n                        return true\n\
    \                    else\n                        return false\n            \
    \        end\n                else\n                    if arr[2] > arr[5]\n \
    \                       return true\n                    else\n              \
    \          return false\n                    end\n                end\n      \
    \      end\n        else\n            if arr[1] > arr[3]\n                if arr[3]\
    \ > arr[4]\n                    if arr[4\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu14wwio7.jl:1\nin expression starting at /tmp/tmpu14wwio7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputyc0wrt.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputyc0wrt.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputyc0wrt.jl:48\ntest set: Test\
    \ Failed at /tmp/tmputyc0wrt.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmputyc0wrt.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputyc0wrt.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputyc0wrt.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] <=\
    \ arr[3]\n            return true\n        elseif arr[1] <= arr[3] <= arr[2]\n\
    \            return true\n        elseif arr[2] <= arr[1] <= arr[3]\n        \
    \    return true\n        elseif arr[2] <= arr[3] <= arr[1]\n            return\
    \ true\n        elseif arr[3] <= arr[1] <= arr[2]\n            return true\n \
    \       elseif arr[3] <= arr[2] <= arr[1]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) > 3\n    \
    \    if arr[1] <= arr[2] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[1] <= arr[3] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[1] <= arr[3]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[2] <= arr[3] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[1] <= arr[2]\n            return move_one_ball(arr[2:end])\n\
    \        elseif arr[3] <= arr[2] <= arr[1]\n            return move_one_ball(arr[2:end])\n\
    \        else\n            return false\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_blufz_y.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_blufz_y.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_blufz_y.jl:82\ntest set: Test\
    \ Failed at /tmp/tmp_blufz_y.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp_blufz_y.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_blufz_y.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_blufz_y.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # Base case\n    if length(arr) == 0\n        return true\n    end\n \
    \   \n    # Find the index of the minimum element\n    min_index = findmin(arr)[2]\n\
    \    \n    # Check if the minimum element is at the first position\n    if min_index\
    \ == 1\n        return true\n    end\n    \n    # Check if the minimum element\
    \ is at the last position\n    if min_index == length(arr)\n        return move_one_ball(arr[1:end-1])\n\
    \    end\n    \n    # Check if the minimum element is at the second position\n\
    \    if min_index == 2\n        return move_one_ball(arr[2:end])\n    end\n  \
    \  \n    # Check if the minimum element is at the second last position\n    if\
    \ min_index == length(arr)-1\n        return move_one_ball(arr[1:end-2])\n   \
    \ end\n    \n    # Check if the minimum element is at the third position\n   \
    \ if min_index == 3\n        return move_one_ball(arr[3:end])\n    end\n    \n\
    \    # Check if the minimum element is at the third last position\n    if min_index\
    \ == length(arr)-2\n        return move_one_ball(arr[1:end-3])\n    end\n    \n\
    \    # Check if the minimum element is at the fourth position\n    if min_index\
    \ == 4\n        return move_one_ball(arr[4:end])\n    end\n    \n    # Check if\
    \ the minimum element is at the fourth last position\n    if min_index == length(arr)-3\n\
    \        return move_one_ball(arr[1:end-4])\n    end\n    \n    # Check if the\
    \ minimum element is at the fifth position\n    if min_index == 5\n        return\
    \ move_one_ball(arr[5:end])\n    end\n    \n    # Check if the minimum element\
    \ is at the fifth last position\n    if min_index == length(arr)-4\n        return\
    \ move_one_ball(arr[1:end-5])\n    end\n    \n    # Check if the minimum element\
    \ is at the sixth position\n    if min_index == 6\n        return move_one_ball(arr[\n\
    using Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvghr7qq.jl:1\nin expression starting at /tmp/tmpsvghr7qq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 4\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3] && arr[3] <= arr[4]\n            return true\n        else\n\
    \            return false\n        end\n    end\n    if length(arr) == 5\n   \
    \     if arr[1] <= arr[2] && arr[2] <= arr[3] && arr[3] <= arr[4] && arr[4] <=\
    \ arr[5]\n            return true\n        else\n            return false\n  \
    \      end\n    end\n    if length(arr) == 6\n        if arr[1] <= arr[2] && arr[2]\
    \ <= arr[3] && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6]\n    \
    \        return true\n        else\n            return false\n        end\n  \
    \  end\n    if length(arr) == 7\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\
    \ && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6] && arr[6] <= arr[7]\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(arr) == 8\n        if arr[1] <= arr[2] && arr[2] <= arr[3]\
    \ && arr[3] <= arr[4] && arr[4] <= arr[5] && arr[5] <= arr[6] && arr[6] <= arr[7]\
    \ && arr[7] <= arr[8]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) == 9\n        if arr[1] <= arr[2]\
    \ && arr[2]\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfny6zq5a.jl:1\nin expression starting at /tmp/tmpfny6zq5a.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd4vnyn5d.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd4vnyn5d.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4vnyn5d.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpd4vnyn5d.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpd4vnyn5d.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd4vnyn5d.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4vnyn5d.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i+1\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0c35nas9.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0c35nas9.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c35nas9.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp0c35nas9.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp0c35nas9.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0c35nas9.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0c35nas9.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpplm64s35.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpplm64s35.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplm64s35.jl:82\ntest set: Test\
    \ Failed at /tmp/tmpplm64s35.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpplm64s35.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpplm64s35.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpplm64s35.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3], arr[2]\n   \
    \         return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 4\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        if arr[4] > arr[5]\n            arr[4],\
    \ arr[5] = arr[5], arr[4]\n            return true\n        end\n        return\
    \ true\n    end\n    if length(arr) == 6\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3],\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilvy952r.jl:1\nin expression starting at /tmp/tmpilvy952r.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        if arr[1] > arr[2]\n\
    \            return false\n        else\n            return true\n        end\n\
    \    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n            if\
    \ arr[2] > arr[3]\n                return false\n            else\n          \
    \      return true\n            end\n        else\n            if arr[1] > arr[3]\n\
    \                return false\n            else\n                return true\n\
    \            end\n        end\n    end\n    if length(arr) > 3\n        if arr[1]\
    \ > arr[2]\n            if arr[2] > arr[3]\n                return false\n   \
    \         else\n                return true\n            end\n        else\n \
    \           if arr[1] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwwqb992g.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwwqb992g.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwwqb992g.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwqb992g.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi75qdpx9.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi75qdpx9.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi75qdpx9.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi75qdpx9.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqmt1ftrv.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqmt1ftrv.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmt1ftrv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqmt1ftrv.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqmt1ftrv.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmt1ftrv.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqmt1ftrv.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpqmt1ftrv.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqmt1ftrv.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmt1ftrv.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    \"\"\"\n    This function takes a vector of integers and returns a boolean\
    \ value.\n    \"\"\"\n    if length(arr) == 0\n        return true\n    end\n\
    \    if length(arr) == 1\n        return true\n    end\n    if length(arr) ==\
    \ 2\n        if arr[1] > arr[2]\n            return false\n        else\n    \
    \        return true\n        end\n    end\n    if length(arr) == 3\n        if\
    \ arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return false\n\
    \            else\n                return true\n            end\n        else\n\
    \            if arr[1] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        end\n    end\n    if length(arr)\
    \ > 3\n        if arr[1] > arr[2]\n            if arr[2] > arr[3]\n          \
    \      return false\n            else\n                return true\n         \
    \   end\n        else\n            if arr[1] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_yk43z_.jl:85\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_yk43z_.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_yk43z_.jl:81\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_yk43z_.jl:79\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjqv5qdze.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjqv5qdze.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqv5qdze.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjqv5qdze.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjqv5qdze.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqv5qdze.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjqv5qdze.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpjqv5qdze.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjqv5qdze.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjqv5qdze.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcjr6ctjk.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjr6ctjk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjr6ctjk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcjr6ctjk.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcjr6ctjk.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjr6ctjk.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjr6ctjk.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1wl6jf8.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc1wl6jf8.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1wl6jf8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpc1wl6jf8.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc1wl6jf8.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1wl6jf8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpc1wl6jf8.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpc1wl6jf8.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc1wl6jf8.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1wl6jf8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnfyuq1ki.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnfyuq1ki.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfyuq1ki.jl:48\ntest set: Test\
    \ Failed at /tmp/tmpnfyuq1ki.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpnfyuq1ki.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnfyuq1ki.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnfyuq1ki.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    if length(arr) == 1\n\
    \        return true\n    end\n    if length(arr) == 2\n        return true\n\
    \    end\n    if length(arr) == 3\n        if arr[1] < arr[2]\n            if\
    \ arr[2] < arr[3]\n                return true\n            else\n           \
    \     return false\n            end\n        else\n            if arr[1] < arr[3]\n\
    \                return true\n            else\n                return false\n\
    \            end\n        end\n    end\n    if length(arr) > 3\n        if arr[1]\
    \ < arr[2]\n            if arr[2] < arr[3]\n                return move_one_ball(arr[2:end])\n\
    \            else\n                return false\n            end\n        else\n\
    \            if arr[1] < arr[3]\n                return move_one_ball(arr[2:end])\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t\
    @test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6l6x5vyz.jl:75\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6l6x5vyz.jl:75 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6l6x5vyz.jl:74\ntest set: Test\
    \ Failed at /tmp/tmp6l6x5vyz.jl:76\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp6l6x5vyz.jl:76 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6l6x5vyz.jl:74\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l6x5vyz.jl:72\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ <= arr[2]\n            return true\n        else\n            return false\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] <= arr[2] &&\
    \ arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3] &&\
    \ arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1] &&\
    \ arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3] &&\
    \ arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1] &&\
    \ arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2] &&\
    \ arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    if length(arr) > 3\n        if arr[1] <= arr[2]\
    \ && arr[2] <= arr[3]\n            return true\n        elseif arr[1] <= arr[3]\
    \ && arr[3] <= arr[2]\n            return true\n        elseif arr[2] <= arr[1]\
    \ && arr[1] <= arr[3]\n            return true\n        elseif arr[2] <= arr[3]\
    \ && arr[3] <= arr[1]\n            return true\n        elseif arr[3] <= arr[1]\
    \ && arr[1] <= arr[2]\n            return true\n        elseif arr[3] <= arr[2]\
    \ && arr[2] <= arr[1]\n            return true\n        else\n            return\
    \ false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3,\
    \ 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3,\
    \ 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprh6rbbiy.jl:85\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprh6rbbiy.jl:85 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprh6rbbiy.jl:82\ntest set: Test\
    \ Failed at /tmp/tmprh6rbbiy.jl:86\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprh6rbbiy.jl:86 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprh6rbbiy.jl:82\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprh6rbbiy.jl:80\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppsmzemt8.jl:37\n  Test threw exception\n\
    \  Expression: candidate([3, 4, 5, 1, 2]) == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppsmzemt8.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsmzemt8.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppsmzemt8.jl:36\ntest set:\
    \ Error During Test at /tmp/tmppsmzemt8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([3, 5, 10, 1, 2]) == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] move_one_ball(arr::Vector{Int64})\n     @ Main\
    \ /tmp/tmppsmzemt8.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppsmzemt8.jl:38 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsmzemt8.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpam5h2ws5.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpam5h2ws5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam5h2ws5.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpam5h2ws5.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpam5h2ws5.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpam5h2ws5.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpam5h2ws5.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        return true\n    end\n    if\
    \ length(arr) == 4\n        return true\n    end\n    if length(arr) == 5\n  \
    \      return true\n    end\n    if length(arr) == 6\n        return true\n  \
    \  end\n    if length(arr) == 7\n        return true\n    end\n    if length(arr)\
    \ == 8\n        return true\n    end\n    if length(arr) == 9\n        return\
    \ true\n    end\n    if length(arr) == 10\n        return true\n    end\n    if\
    \ length(arr) == 11\n        return true\n    end\n    if length(arr) == 12\n\
    \        return true\n    end\n    if length(arr) == 13\n        return true\n\
    \    end\n    if length(arr) == 14\n        return true\n    end\n    if length(arr)\
    \ == 15\n        return true\n    end\n    if length(arr) == 16\n        return\
    \ true\n    end\n    if length(arr) == 17\n        return true\n    end\n    if\
    \ length(arr) == 18\n        return true\n    end\n    if length(arr) == 19\n\
    \        return true\n    end\n    if length(arr) == 20\n        return true\n\
    \    end\n    if length(arr) == 21\n        return true\n    end\n    if length(arr)\
    \ == 22\n        return true\n    end\n    if length(arr) == 23\n        return\
    \ true\n    end\n    if length(arr) == 24\n        return true\n    end\n    if\
    \ length(arr) == 25\n        return true\n    end\n    if length(arr) == 26\n\
    \        return true\n    end\n    if length(arr) == 27\n        return true\n\
    \    end\n    if length(arr) == 28\n        return true\n    end\n    if length(arr)\
    \ == 29\n        return true\n    end\n    if length(arr) == 30\n        return\
    \ true\n    end\n    if length(arr) == 31\n        return true\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2m3_1mu3.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2m3_1mu3.jl:1\n\
    in expression starting at /tmp/tmp2m3_1mu3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           return false\n        elseif arr[2] > arr[3]\n            return false\n\
    \        else\n            return true\n        end\n    end\n    if length(arr)\
    \ > 3\n        if arr[1] > arr[2]\n            return false\n        elseif arr[2]\
    \ > arr[3]\n            return false\n        else\n            return move_one_ball(arr[2:end])\n\
    \        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\
    \t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2])\
    \ == true)\n\t@test(candidate([4, 3, 1, 2]) == false)\n\t@test(candidate([3, 5,\
    \ 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([])) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz4hl8sxr.jl:67\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz4hl8sxr.jl:67 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4hl8sxr.jl:66\ntest set: Test\
    \ Failed at /tmp/tmpz4hl8sxr.jl:68\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpz4hl8sxr.jl:68 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz4hl8sxr.jl:66\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz4hl8sxr.jl:64\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3], arr[2]\n   \
    \         return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 4\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        return true\n    end\n    if length(arr)\
    \ == 5\n        if arr[1] > arr[2]\n            arr[1], arr[2] = arr[2], arr[1]\n\
    \            return true\n        end\n        if arr[2] > arr[3]\n          \
    \  arr[2], arr[3] = arr[3], arr[2]\n            return true\n        end\n   \
    \     if arr[3] > arr[4]\n            arr[3], arr[4] = arr[4], arr[3]\n      \
    \      return true\n        end\n        if arr[4] > arr[5]\n            arr[4],\
    \ arr[5] = arr[5], arr[4]\n            return true\n        end\n        return\
    \ true\n    end\n    if length(arr) == 6\n        if arr[1] > arr[2]\n       \
    \     arr[1], arr[2] = arr[2], arr[1]\n            return true\n        end\n\
    \        if arr[2] > arr[3]\n            arr[2], arr[3] = arr[3],\nusing Test\n\
    \n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1,\
    \ 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgssguyjk.jl:1\nin expression starting at /tmp/tmpgssguyjk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkom61dk.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmkom61dk.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkom61dk.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpmkom61dk.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpmkom61dk.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmkom61dk.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkom61dk.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] != i\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoydz4nuo.jl:45\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoydz4nuo.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoydz4nuo.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpoydz4nuo.jl:46\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpoydz4nuo.jl:46 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoydz4nuo.jl:44\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoydz4nuo.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn60p0nr5.jl:40\n  Expression: candidate([4,\
    \ 3, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn60p0nr5.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn60p0nr5.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpn60p0nr5.jl:41\n  Expression: candidate([3, 5, 4, 1, 2]) ==\
    \ false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpn60p0nr5.jl:41 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn60p0nr5.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn60p0nr5.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if isempty(arr)\n        return true\n    end\n    for i in 1:length(arr)\n\
    \        if arr[i] == i\n            continue\n        elseif arr[i] == i + 1\n\
    \            arr[i], arr[i + 1] = arr[i + 1], arr[i]\n        else\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\
    \t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2])\
    \ == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3krfggwn.jl:49\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3krfggwn.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3krfggwn.jl:48\ntest set: Test\
    \ Failed at /tmp/tmp3krfggwn.jl:50\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3krfggwn.jl:50 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3krfggwn.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3krfggwn.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        return\
    \ true\n    end\n    if length(arr) == 3\n        if arr[1] < arr[2]\n       \
    \     if arr[2] < arr[3]\n                return true\n            else\n    \
    \            return false\n            end\n        else\n            if arr[1]\
    \ < arr[3]\n                return true\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if length(arr) == 4\n    \
    \    if arr[1] < arr[2]\n            if arr[2] < arr[3]\n                if arr[3]\
    \ < arr[4]\n                    return true\n                else\n          \
    \          return false\n                end\n            else\n             \
    \   if arr[1] < arr[3]\n                    if arr[3] < arr[4]\n             \
    \           return true\n                    else\n                        return\
    \ false\n                    end\n                else\n                    return\
    \ false\n                end\n            end\n        else\n            if arr[1]\
    \ < arr[3]\n                if arr[3] < arr[4]\n                    return true\n\
    \                else\n                    return false\n                end\n\
    \            else\n                return false\n            end\n        end\n\
    \    end\n    if length(arr) == 5\n        if arr[1] < arr[2]\n            if\
    \ arr[2] < arr[3]\n                if arr[3] < arr[4]\n                    if\
    \ arr[4] < arr[5]\n                        return true\n                    else\n\
    \                        return false\n                    end\n             \
    \   else\n                    if arr[1] < arr[4]\n                        if arr[4]\
    \ < arr[5]\n                            return true\n                        else\n\
    \                            return false\n                        end\n     \
    \               else\n                        return false\n                 \
    \   end\n                end\n            else\n                if arr[1] < arr[3]\n\
    \                    if arr[3] < arr[4]\n                        if arr[4] < arr[5]\n\
    \                            return true\n                        else\n     \
    \                       return false\n                        end\n          \
    \          else\n                        return false\n                    end\n\
    \                else\n                    return false\n                end\n\
    \            end\n        else\n            if arr\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbgpbf61i.jl:1\nin expression starting at /tmp/tmpbgpbf61i.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    # YOUR CODE HERE\n    return false\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = move_one_ball;\n\t@test(candidate([3, 4, 5, 1, 2]) == true)\n\t\
    @test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4, 3, 1, 2]) ==\
    \ false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcr6ohcuf.jl:38\n  Expression: candidate([3,\
    \ 4, 5, 1, 2]) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcr6ohcuf.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr6ohcuf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcr6ohcuf.jl:39\n  Expression: candidate([3, 5, 10, 1, 2])\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcr6ohcuf.jl:39 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr6ohcuf.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpcr6ohcuf.jl:42\n  Expression: candidate(Vector{Int64}([]))\
    \ == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcr6ohcuf.jl:42 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcr6ohcuf.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcr6ohcuf.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    \    numbers in the vector will be randomly ordered. Your task is to determine\
    \ if\n    it is possible to get a vector sorted in non-decreasing order by performing\
    \ \n    the following operation on the given vector:\n        You are allowed\
    \ to perform right shift operation any number of times.\n    \n    One right shift\
    \ operation means shifting all elements of the vector by one\n    position in\
    \ the right direction. The last element of the vector will be moved to\n    the\
    \ starting position in the vector i.e. 0th index. \n\n    If it is possible to\
    \ obtain the sorted vector by performing the above operation\n    then return\
    \ true else return false.\n    If the given vector is empty then return true.\n\
    \n    Note: The given vector is guaranteed to have unique elements.\n\n    For\
    \ Example:\n    \n    >>> move_one_ball([3, 4, 5, 1, 2])\n    true\n    Explanation:\
    \ By performin 2 right shift operations, non-decreasing order can\n          \
    \       be achieved for the given vector.\n    >>> move_one_ball([3, 5, 4, 1,\
    \ 2])\n    false\n    Explanation:It is not possible to get non-decreasing order\
    \ for the given\n                vector by performing any number of right shift\
    \ operations.\n                \n    \"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\
    \ \n    if length(arr) == 0\n        return true\n    end\n    if length(arr)\
    \ == 1\n        return true\n    end\n    if length(arr) == 2\n        if arr[1]\
    \ > arr[2]\n            return false\n        else\n            return true\n\
    \        end\n    end\n    if length(arr) == 3\n        if arr[1] > arr[2]\n \
    \           if arr[2] > arr[3]\n                return false\n            else\n\
    \                return true\n            end\n        else\n            if arr[1]\
    \ > arr[3]\n                return false\n            else\n                return\
    \ true\n            end\n        end\n    end\n    if length(arr) > 3\n      \
    \  if arr[1] > arr[2]\n            if arr[2] > arr[3]\n                return\
    \ false\n            else\n                return true\n            end\n    \
    \    else\n            if arr[1] > arr[3]\n                return false\n    \
    \        else\n                return true\n            end\n        end\n   \
    \ end\nend\nusing Test\n\n@testset begin\n\ncandidate = move_one_ball;\n\t@test(candidate([3,\
    \ 4, 5, 1, 2]) == true)\n\t@test(candidate([3, 5, 10, 1, 2]) == true)\n\t@test(candidate([4,\
    \ 3, 1, 2]) == false)\n\t@test(candidate([3, 5, 4, 1, 2]) == false)\n\t@test(candidate(Vector{Int64}([]))\
    \ == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa8karpmm.jl:82\n  Expression: candidate([3,\
    \ 5, 4, 1, 2]) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa8karpmm.jl:82 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa8karpmm.jl:78\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8karpmm.jl:76\n"
  exit_code: 1
  status: SyntaxError
