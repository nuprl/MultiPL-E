name: HumanEval_127_intersection
language: jl
results:
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return \"YES\" if isprime(finish\
    \ - start + 1) else \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpn2gs_6f2.jl:23 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn2gs_6f2.jl:29\n\
    in expression starting at /tmp/tmpn2gs_6f2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp961ey5i_.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp961ey5i_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp961ey5i_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp961ey5i_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp961ey5i_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp961ey5i_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp961ey5i_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp961ey5i_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp961ey5i_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp961ey5i_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp961ey5i_.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp961ey5i_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp961ey5i_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp961ey5i_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz3jzajbt.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpz3jzajbt.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz3jzajbt.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3jzajbt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz3jzajbt.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz3jzajbt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz3jzajbt.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3jzajbt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz3jzajbt.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz3jzajbt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz3jzajbt.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz3jzajbt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz3jzajbt.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3jzajbt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpradtwg4v.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpradtwg4v.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpradtwg4v.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpradtwg4v.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpradtwg4v.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpradtwg4v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpradtwg4v.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpradtwg4v.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpradtwg4v.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpradtwg4v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpradtwg4v.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpradtwg4v.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpradtwg4v.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpradtwg4v.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpls3wog5h.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpls3wog5h.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpls3wog5h.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpls3wog5h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpls3wog5h.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpls3wog5h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpls3wog5h.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpls3wog5h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpls3wog5h.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpls3wog5h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpls3wog5h.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpls3wog5h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpls3wog5h.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpls3wog5h.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_7u5ealp.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp_7u5ealp.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7u5ealp.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7u5ealp.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_7u5ealp.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_7u5ealp.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_7u5ealp.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7u5ealp.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_7u5ealp.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_7u5ealp.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_7u5ealp.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7u5ealp.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp_7u5ealp.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7u5ealp.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptttujpzd.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmptttujpzd.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptttujpzd.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptttujpzd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptttujpzd.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptttujpzd.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptttujpzd.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptttujpzd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptttujpzd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptttujpzd.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptttujpzd.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptttujpzd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptttujpzd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptttujpzd.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] > interval2[2]\
    \ || interval2[1] > interval1[2]\n        return \"NO\"\n    end\n    return isprime(maximum(interval1[1],\
    \ interval2[1]) - minimum(interval1[2], interval2[2])) ? \"YES\" : \"NO\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt_n6yh3y.jl:34\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  MethodError: objects of\
    \ type Int64 are not callable\n  Maybe you forgot to use an operator such as *,\
    \ ^, %, / etc. ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function,\
    \ x::Int64)\n     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function,\
    \ a::Int64)\n     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:678\n   [5] intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpt_n6yh3y.jl:27\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpt_n6yh3y.jl:34 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpt_n6yh3y.jl:33\ntest set:\
    \ Error During Test at /tmp/tmpt_n6yh3y.jl:35\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  MethodError: objects of type Int64 are\
    \ not callable\n  Maybe you forgot to use an operator such as *, ^, %, / etc.\
    \ ?\n  Stacktrace:\n   [1] mapreduce_first(f::Int64, op::Function, x::Int64)\n\
    \     @ Base ./reduce.jl:394\n   [2] mapreduce(f::Int64, op::Function, a::Int64)\n\
    \     @ Base ./reduce.jl:421\n   [3] maximum(f::Int64, a::Int64; kw::Base.Pairs{Symbol,\
    \ Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n     @ Base ./reduce.jl:678\n \
    \  [4] maximum(f::Int64, a::Int64)\n     @ Base ./reduce.jl:678\n   [5] intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpt_n6yh3y.jl:27\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpt_n6yh3y.jl:35 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/shar"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_n6yh3y.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplo5ah6xu.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmplo5ah6xu.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplo5ah6xu.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo5ah6xu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplo5ah6xu.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplo5ah6xu.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplo5ah6xu.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo5ah6xu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplo5ah6xu.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplo5ah6xu.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplo5ah6xu.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplo5ah6xu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplo5ah6xu.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplo5ah6xu.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph25ebmm7.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmph25ebmm7.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph25ebmm7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph25ebmm7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph25ebmm7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph25ebmm7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph25ebmm7.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph25ebmm7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph25ebmm7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph25ebmm7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph25ebmm7.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph25ebmm7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph25ebmm7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph25ebmm7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnr2ytr0a.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpnr2ytr0a.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnr2ytr0a.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr2ytr0a.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnr2ytr0a.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnr2ytr0a.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnr2ytr0a.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr2ytr0a.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnr2ytr0a.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnr2ytr0a.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnr2ytr0a.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnr2ytr0a.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpnr2ytr0a.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnr2ytr0a.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4_clq_j8.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp4_clq_j8.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4_clq_j8.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_clq_j8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4_clq_j8.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4_clq_j8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4_clq_j8.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_clq_j8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4_clq_j8.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4_clq_j8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4_clq_j8.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4_clq_j8.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4_clq_j8.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_clq_j8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw4awcvd0.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpw4awcvd0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw4awcvd0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4awcvd0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpw4awcvd0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpw4awcvd0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpw4awcvd0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4awcvd0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpw4awcvd0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpw4awcvd0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpw4awcvd0.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw4awcvd0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpw4awcvd0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4awcvd0.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9em6uwy6.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9em6uwy6.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9em6uwy6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9em6uwy6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9em6uwy6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9em6uwy6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9em6uwy6.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9em6uwy6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9em6uwy6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9em6uwy6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9em6uwy6.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9em6uwy6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9em6uwy6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9em6uwy6.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjpxt8o4o.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpjpxt8o4o.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjpxt8o4o.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpxt8o4o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjpxt8o4o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjpxt8o4o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjpxt8o4o.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpxt8o4o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjpxt8o4o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjpxt8o4o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjpxt8o4o.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjpxt8o4o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpjpxt8o4o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpxt8o4o.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps6dcx6_m.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmps6dcx6_m.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps6dcx6_m.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6dcx6_m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps6dcx6_m.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmps6dcx6_m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmps6dcx6_m.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6dcx6_m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps6dcx6_m.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmps6dcx6_m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmps6dcx6_m.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps6dcx6_m.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps6dcx6_m.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps6dcx6_m.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdi96tqrw.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpdi96tqrw.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdi96tqrw.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdi96tqrw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpdi96tqrw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdi96tqrw.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdi96tqrw.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdi96tqrw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpdi96tqrw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdi96tqrw.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdi96tqrw.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdi96tqrw.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpdi96tqrw.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdi96tqrw.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7a1y0yuy.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp7a1y0yuy.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7a1y0yuy.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a1y0yuy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp7a1y0yuy.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7a1y0yuy.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7a1y0yuy.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a1y0yuy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp7a1y0yuy.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7a1y0yuy.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7a1y0yuy.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a1y0yuy.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp7a1y0yuy.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a1y0yuy.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start1, end1 = interval1\n\
    \    start2, end2 = interval2\n    if start1 > end1 || start2 > end2\n       \
    \ return \"NO\"\n    end\n    if start1 > start2\n        start1, start2 = start2,\
    \ start1\n    end\n    if end1 < end2\n        end1, end2 = end2, end1\n    end\n\
    \    if start2 > end1\n        return \"NO\"\n    end\n    if start2 <= end1\n\
    \        return isprime(end1 - start2 + 1) ? \"YES\" : \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9go9bls2.jl:47\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9go9bls2.jl:39\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9go9bls2.jl:47 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9go9bls2.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp9go9bls2.jl:48\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9go9bls2.jl:39\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9go9bls2.jl:48 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9go9bls2.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp9go9bls2.jl:49\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9go9bls2.jl:39\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9go9bls2.jl:49 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9go9bls2.jl:46\ntest set:\
    \ Error During Test at /tmp/tmp9go9bls2.jl:50\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9go9bls2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf2sv9h4l.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpf2sv9h4l.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf2sv9h4l.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2sv9h4l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf2sv9h4l.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpf2sv9h4l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf2sv9h4l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2sv9h4l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf2sv9h4l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpf2sv9h4l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf2sv9h4l.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf2sv9h4l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf2sv9h4l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf2sv9h4l.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplc0xbx2i.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmplc0xbx2i.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplc0xbx2i.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplc0xbx2i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplc0xbx2i.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplc0xbx2i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplc0xbx2i.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplc0xbx2i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplc0xbx2i.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplc0xbx2i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplc0xbx2i.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplc0xbx2i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplc0xbx2i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplc0xbx2i.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp01w8hnjd.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp01w8hnjd.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp01w8hnjd.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01w8hnjd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp01w8hnjd.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp01w8hnjd.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp01w8hnjd.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01w8hnjd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp01w8hnjd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp01w8hnjd.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp01w8hnjd.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp01w8hnjd.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp01w8hnjd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01w8hnjd.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpry7apbao.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpry7apbao.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpry7apbao.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpry7apbao.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpry7apbao.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpry7apbao.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpry7apbao.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpry7apbao.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpry7apbao.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpry7apbao.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpry7apbao.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpry7apbao.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpry7apbao.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpry7apbao.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpebznfs72.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpebznfs72.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpebznfs72.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpebznfs72.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpebznfs72.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpebznfs72.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpebznfs72.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpebznfs72.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpebznfs72.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpebznfs72.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpebznfs72.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpebznfs72.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpebznfs72.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebznfs72.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi98dfwmm.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpi98dfwmm.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi98dfwmm.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi98dfwmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi98dfwmm.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpi98dfwmm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi98dfwmm.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi98dfwmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi98dfwmm.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpi98dfwmm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi98dfwmm.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi98dfwmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi98dfwmm.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi98dfwmm.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz6e2zigt.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpz6e2zigt.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz6e2zigt.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6e2zigt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz6e2zigt.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz6e2zigt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz6e2zigt.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6e2zigt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz6e2zigt.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz6e2zigt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz6e2zigt.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz6e2zigt.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpz6e2zigt.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6e2zigt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph384cc8f.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmph384cc8f.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph384cc8f.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph384cc8f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph384cc8f.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph384cc8f.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph384cc8f.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph384cc8f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph384cc8f.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph384cc8f.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph384cc8f.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph384cc8f.jl:39\ntest set:\
    \ Error During Test at /tmp/tmph384cc8f.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph384cc8f.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcffy2q1v.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpcffy2q1v.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcffy2q1v.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffy2q1v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcffy2q1v.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcffy2q1v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcffy2q1v.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffy2q1v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcffy2q1v.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcffy2q1v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcffy2q1v.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffy2q1v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcffy2q1v.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcffy2q1v.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] > interval2[2]\
    \ || interval2[1] > interval1[2]\n        return \"NO\"\n    end\n    if interval1[1]\
    \ < interval2[1]\n        start = interval2[1]\n    else\n        start = interval1[1]\n\
    \    end\n    if interval1[2] < interval2[2]\n        end_ = interval1[2]\n  \
    \  else\n        end_ = interval2[2]\n    end\n    if start == end_\n        return\
    \ \"NO\"\n    end\n    if isprime(end_ - start + 1)\n        return \"YES\"\n\
    \    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t\
    @test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5,\
    \ 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeh1yq1xj.jl:52\n  Test threw exception\n\
    \  Expression: candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpeh1yq1xj.jl:40\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeh1yq1xj.jl:52 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeh1yq1xj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpeh1yq1xj.jl:53\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpeh1yq1xj.jl:40\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpeh1yq1xj.jl:53 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeh1yq1xj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpeh1yq1xj.jl:54\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpeh1yq1xj.jl:40\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpeh1yq1xj.jl:54 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeh1yq1xj.jl:50\ntest set:\
    \ Error During Test at /tmp/tmpeh1yq1xj.jl:57\n  Test threw exception\n  Expression:\
    \ candidate((1, 2), (1, 2)) == \"NO\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeh1yq1xj.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] > interval2[2]\
    \ || interval2[1] > interval1[2]\n        return \"NO\"\n    end\n    start =\
    \ max(interval1[1], interval2[1])\n    stop = min(interval1[2], interval2[2])\n\
    \    return isprime(stop - start + 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3))\
    \ == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn_o7qd4m.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpn_o7qd4m.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_o7qd4m.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_o7qd4m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn_o7qd4m.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn_o7qd4m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn_o7qd4m.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_o7qd4m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn_o7qd4m.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn_o7qd4m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn_o7qd4m.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_o7qd4m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn_o7qd4m.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_o7qd4m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphndfe__7.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmphndfe__7.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphndfe__7.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphndfe__7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphndfe__7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphndfe__7.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphndfe__7.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphndfe__7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphndfe__7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphndfe__7.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphndfe__7.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphndfe__7.jl:36\ntest set:\
    \ Error During Test at /tmp/tmphndfe__7.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphndfe__7.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpic8mcmr4.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpic8mcmr4.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpic8mcmr4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpic8mcmr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpic8mcmr4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpic8mcmr4.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpic8mcmr4.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpic8mcmr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpic8mcmr4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpic8mcmr4.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpic8mcmr4.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpic8mcmr4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpic8mcmr4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpic8mcmr4.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpybb5v7q0.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpybb5v7q0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpybb5v7q0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybb5v7q0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpybb5v7q0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpybb5v7q0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpybb5v7q0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybb5v7q0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpybb5v7q0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpybb5v7q0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpybb5v7q0.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpybb5v7q0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpybb5v7q0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybb5v7q0.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp19gctd09.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp19gctd09.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp19gctd09.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19gctd09.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp19gctd09.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp19gctd09.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp19gctd09.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19gctd09.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp19gctd09.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp19gctd09.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp19gctd09.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp19gctd09.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp19gctd09.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19gctd09.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbaikr3sr.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpbaikr3sr.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbaikr3sr.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaikr3sr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbaikr3sr.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpbaikr3sr.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbaikr3sr.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaikr3sr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbaikr3sr.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpbaikr3sr.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbaikr3sr.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbaikr3sr.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbaikr3sr.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbaikr3sr.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjn6lunw9.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpjn6lunw9.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjn6lunw9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjn6lunw9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjn6lunw9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjn6lunw9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjn6lunw9.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjn6lunw9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjn6lunw9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjn6lunw9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjn6lunw9.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjn6lunw9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjn6lunw9.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjn6lunw9.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpob56be1j.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpob56be1j.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpob56be1j.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpob56be1j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpob56be1j.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpob56be1j.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpob56be1j.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpob56be1j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpob56be1j.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpob56be1j.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpob56be1j.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpob56be1j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpob56be1j.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpob56be1j.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphg7gjs7g.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmphg7gjs7g.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphg7gjs7g.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg7gjs7g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg7gjs7g.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphg7gjs7g.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphg7gjs7g.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg7gjs7g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg7gjs7g.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphg7gjs7g.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphg7gjs7g.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg7gjs7g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg7gjs7g.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphg7gjs7g.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfuietjr0.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpfuietjr0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfuietjr0.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuietjr0.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfuietjr0.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpfuietjr0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfuietjr0.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuietjr0.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfuietjr0.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpfuietjr0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfuietjr0.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfuietjr0.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpfuietjr0.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuietjr0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9wz7upu_.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9wz7upu_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9wz7upu_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wz7upu_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9wz7upu_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9wz7upu_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9wz7upu_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wz7upu_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9wz7upu_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9wz7upu_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9wz7upu_.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9wz7upu_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9wz7upu_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wz7upu_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzyu1467_.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpzyu1467_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzyu1467_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzyu1467_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzyu1467_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzyu1467_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzyu1467_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzyu1467_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzyu1467_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzyu1467_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzyu1467_.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzyu1467_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzyu1467_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzyu1467_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpha212ie9.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpha212ie9.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpha212ie9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpha212ie9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpha212ie9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpha212ie9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpha212ie9.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpha212ie9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpha212ie9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpha212ie9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpha212ie9.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpha212ie9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpha212ie9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpha212ie9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp438pllhq.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp438pllhq.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp438pllhq.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp438pllhq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp438pllhq.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp438pllhq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp438pllhq.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp438pllhq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp438pllhq.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp438pllhq.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp438pllhq.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp438pllhq.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp438pllhq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp438pllhq.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjyq4xzgm.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpjyq4xzgm.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjyq4xzgm.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyq4xzgm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjyq4xzgm.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjyq4xzgm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjyq4xzgm.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyq4xzgm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjyq4xzgm.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjyq4xzgm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjyq4xzgm.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjyq4xzgm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjyq4xzgm.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyq4xzgm.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfekv5_c.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmptfekv5_c.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptfekv5_c.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfekv5_c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptfekv5_c.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptfekv5_c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptfekv5_c.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfekv5_c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptfekv5_c.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptfekv5_c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptfekv5_c.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptfekv5_c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptfekv5_c.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfekv5_c.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__paz3xc.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp__paz3xc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp__paz3xc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__paz3xc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp__paz3xc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp__paz3xc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp__paz3xc.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__paz3xc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp__paz3xc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp__paz3xc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp__paz3xc.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__paz3xc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp__paz3xc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__paz3xc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq3dybcdf.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpq3dybcdf.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq3dybcdf.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3dybcdf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq3dybcdf.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpq3dybcdf.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpq3dybcdf.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3dybcdf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq3dybcdf.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpq3dybcdf.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpq3dybcdf.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq3dybcdf.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpq3dybcdf.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq3dybcdf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph0bv6l03.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmph0bv6l03.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph0bv6l03.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0bv6l03.jl:35\ntest set:\
    \ Error During Test at /tmp/tmph0bv6l03.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph0bv6l03.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph0bv6l03.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0bv6l03.jl:35\ntest set:\
    \ Error During Test at /tmp/tmph0bv6l03.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmph0bv6l03.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmph0bv6l03.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph0bv6l03.jl:35\ntest set:\
    \ Error During Test at /tmp/tmph0bv6l03.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0bv6l03.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    length = stop - start + 1\n    if isprime(length)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp48jvo0zd.jl:41\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp48jvo0zd.jl:30\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp48jvo0zd.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48jvo0zd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp48jvo0zd.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp48jvo0zd.jl:30\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp48jvo0zd.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48jvo0zd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp48jvo0zd.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp48jvo0zd.jl:30\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp48jvo0zd.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp48jvo0zd.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp48jvo0zd.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48jvo0zd.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaip6vpny.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaip6vpny.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaip6vpny.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaip6vpny.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaip6vpny.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaip6vpny.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaip6vpny.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaip6vpny.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaip6vpny.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaip6vpny.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaip6vpny.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaip6vpny.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpaip6vpny.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaip6vpny.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc4vjcsjk.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpc4vjcsjk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc4vjcsjk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4vjcsjk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc4vjcsjk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpc4vjcsjk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc4vjcsjk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4vjcsjk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc4vjcsjk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpc4vjcsjk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc4vjcsjk.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc4vjcsjk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc4vjcsjk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4vjcsjk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsru8l0ky.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpsru8l0ky.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsru8l0ky.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsru8l0ky.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsru8l0ky.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsru8l0ky.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsru8l0ky.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsru8l0ky.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsru8l0ky.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsru8l0ky.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsru8l0ky.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsru8l0ky.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsru8l0ky.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsru8l0ky.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppn2ir2ck.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmppn2ir2ck.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppn2ir2ck.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppn2ir2ck.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppn2ir2ck.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppn2ir2ck.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppn2ir2ck.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppn2ir2ck.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppn2ir2ck.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppn2ir2ck.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppn2ir2ck.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppn2ir2ck.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppn2ir2ck.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppn2ir2ck.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphe0m48jk.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmphe0m48jk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphe0m48jk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphe0m48jk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphe0m48jk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphe0m48jk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphe0m48jk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphe0m48jk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphe0m48jk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphe0m48jk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphe0m48jk.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphe0m48jk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphe0m48jk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphe0m48jk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaknzyz4y.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaknzyz4y.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaknzyz4y.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaknzyz4y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaknzyz4y.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaknzyz4y.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaknzyz4y.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaknzyz4y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaknzyz4y.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaknzyz4y.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaknzyz4y.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaknzyz4y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaknzyz4y.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaknzyz4y.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi5tushx1.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpi5tushx1.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5tushx1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5tushx1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi5tushx1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpi5tushx1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi5tushx1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5tushx1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi5tushx1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpi5tushx1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi5tushx1.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5tushx1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpi5tushx1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5tushx1.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvnldi96l.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvnldi96l.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvnldi96l.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnldi96l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvnldi96l.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvnldi96l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvnldi96l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnldi96l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvnldi96l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvnldi96l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvnldi96l.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvnldi96l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvnldi96l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvnldi96l.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    for i in 2:finish-1\n        if (finish - start) % i ==\
    \ 0\n            return \"NO\"\n        end\n    end\n    return \"YES\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0tz2b1w.jl:44\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0tz2b1w.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0tz2b1w.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo0tz2b1w.jl:45\n  Expression: candidate((-1, 1), (0, 4)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0tz2b1w.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0tz2b1w.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo0tz2b1w.jl:48\n  Expression: candidate((-11, 2), (-1, -1))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0tz2b1w.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0tz2b1w.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo0tz2b1w.jl:50\n  Expression: candidate((1, 2), (1, 2)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo0tz2b1w.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo0tz2b1w.jl:43\ntest set: Test\
    \ Failed at /tmp/tmpo0tz2b1w.jl:51\n  Expression: candidate((-2, -2), (-3, -2))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0tz2b1w.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvpk6js0c.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvpk6js0c.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvpk6js0c.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvpk6js0c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvpk6js0c.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvpk6js0c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvpk6js0c.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvpk6js0c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvpk6js0c.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvpk6js0c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvpk6js0c.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvpk6js0c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvpk6js0c.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvpk6js0c.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp292zz0h.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpp292zz0h.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp292zz0h.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp292zz0h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp292zz0h.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp292zz0h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp292zz0h.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp292zz0h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp292zz0h.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp292zz0h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp292zz0h.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp292zz0h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp292zz0h.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp292zz0h.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5kn3rocz.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp5kn3rocz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5kn3rocz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kn3rocz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5kn3rocz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp5kn3rocz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5kn3rocz.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kn3rocz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5kn3rocz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp5kn3rocz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5kn3rocz.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5kn3rocz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp5kn3rocz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5kn3rocz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa_dr_o1q.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpa_dr_o1q.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa_dr_o1q.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_dr_o1q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpa_dr_o1q.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpa_dr_o1q.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpa_dr_o1q.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_dr_o1q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpa_dr_o1q.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpa_dr_o1q.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpa_dr_o1q.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa_dr_o1q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpa_dr_o1q.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_dr_o1q.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2vjdwva6.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp2vjdwva6.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2vjdwva6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vjdwva6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2vjdwva6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2vjdwva6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2vjdwva6.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vjdwva6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2vjdwva6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2vjdwva6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2vjdwva6.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2vjdwva6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2vjdwva6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vjdwva6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1x5ic43o.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1x5ic43o.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1x5ic43o.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x5ic43o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1x5ic43o.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1x5ic43o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1x5ic43o.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x5ic43o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1x5ic43o.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1x5ic43o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1x5ic43o.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1x5ic43o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1x5ic43o.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x5ic43o.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy0foym_a.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpy0foym_a.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0foym_a.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0foym_a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpy0foym_a.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpy0foym_a.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpy0foym_a.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0foym_a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpy0foym_a.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpy0foym_a.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpy0foym_a.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0foym_a.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpy0foym_a.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0foym_a.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqe_aahik.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpqe_aahik.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqe_aahik.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqe_aahik.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqe_aahik.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqe_aahik.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqe_aahik.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqe_aahik.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqe_aahik.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqe_aahik.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqe_aahik.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqe_aahik.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqe_aahik.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqe_aahik.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd2vkgpfx.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpd2vkgpfx.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd2vkgpfx.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd2vkgpfx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd2vkgpfx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd2vkgpfx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd2vkgpfx.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd2vkgpfx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd2vkgpfx.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd2vkgpfx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd2vkgpfx.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd2vkgpfx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd2vkgpfx.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2vkgpfx.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphg39ve5r.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmphg39ve5r.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphg39ve5r.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg39ve5r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg39ve5r.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphg39ve5r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphg39ve5r.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg39ve5r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg39ve5r.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphg39ve5r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphg39ve5r.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphg39ve5r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphg39ve5r.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphg39ve5r.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3x1pj6i1.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp3x1pj6i1.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3x1pj6i1.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3x1pj6i1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3x1pj6i1.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3x1pj6i1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3x1pj6i1.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3x1pj6i1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3x1pj6i1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3x1pj6i1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3x1pj6i1.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3x1pj6i1.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3x1pj6i1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3x1pj6i1.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp__q_cut2.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp__q_cut2.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp__q_cut2.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__q_cut2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp__q_cut2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp__q_cut2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp__q_cut2.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__q_cut2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp__q_cut2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp__q_cut2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp__q_cut2.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp__q_cut2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp__q_cut2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__q_cut2.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8gvgn88e.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp8gvgn88e.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gvgn88e.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gvgn88e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8gvgn88e.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8gvgn88e.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8gvgn88e.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gvgn88e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8gvgn88e.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8gvgn88e.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8gvgn88e.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gvgn88e.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8gvgn88e.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gvgn88e.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    ending = min(interval1[2], interval2[2])\n    if start >\
    \ ending\n        return \"NO\"\n    end\n    if isprime(ending - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6_ych5sl.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6_ych5sl.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6_ych5sl.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ych5sl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6_ych5sl.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6_ych5sl.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6_ych5sl.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ych5sl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6_ych5sl.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6_ych5sl.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6_ych5sl.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6_ych5sl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6_ych5sl.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_ych5sl.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpks79_jt1.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpks79_jt1.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks79_jt1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks79_jt1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpks79_jt1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpks79_jt1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpks79_jt1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks79_jt1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpks79_jt1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpks79_jt1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpks79_jt1.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks79_jt1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpks79_jt1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpks79_jt1.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdk0c8fdk.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpdk0c8fdk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdk0c8fdk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdk0c8fdk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdk0c8fdk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdk0c8fdk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdk0c8fdk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdk0c8fdk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdk0c8fdk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdk0c8fdk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdk0c8fdk.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdk0c8fdk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdk0c8fdk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdk0c8fdk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3h1bc8tn.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp3h1bc8tn.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3h1bc8tn.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3h1bc8tn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3h1bc8tn.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3h1bc8tn.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3h1bc8tn.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3h1bc8tn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3h1bc8tn.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3h1bc8tn.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3h1bc8tn.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3h1bc8tn.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3h1bc8tn.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3h1bc8tn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppvfh927t.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmppvfh927t.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppvfh927t.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvfh927t.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppvfh927t.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppvfh927t.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppvfh927t.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvfh927t.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppvfh927t.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppvfh927t.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppvfh927t.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppvfh927t.jl:39\ntest set:\
    \ Error During Test at /tmp/tmppvfh927t.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppvfh927t.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps1p9mr2v.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmps1p9mr2v.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps1p9mr2v.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1p9mr2v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps1p9mr2v.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmps1p9mr2v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmps1p9mr2v.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1p9mr2v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps1p9mr2v.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmps1p9mr2v.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmps1p9mr2v.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps1p9mr2v.jl:39\ntest set:\
    \ Error During Test at /tmp/tmps1p9mr2v.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps1p9mr2v.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7r4ar7_j.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp7r4ar7_j.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7r4ar7_j.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7r4ar7_j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7r4ar7_j.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7r4ar7_j.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7r4ar7_j.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7r4ar7_j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7r4ar7_j.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7r4ar7_j.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7r4ar7_j.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7r4ar7_j.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7r4ar7_j.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7r4ar7_j.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppuaearhx.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmppuaearhx.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppuaearhx.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuaearhx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppuaearhx.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppuaearhx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppuaearhx.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuaearhx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppuaearhx.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppuaearhx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppuaearhx.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppuaearhx.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppuaearhx.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppuaearhx.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2w6_hjdr.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp2w6_hjdr.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2w6_hjdr.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2w6_hjdr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2w6_hjdr.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2w6_hjdr.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2w6_hjdr.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2w6_hjdr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2w6_hjdr.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2w6_hjdr.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2w6_hjdr.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2w6_hjdr.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp2w6_hjdr.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2w6_hjdr.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzvgw0r1o.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpzvgw0r1o.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzvgw0r1o.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvgw0r1o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzvgw0r1o.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzvgw0r1o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzvgw0r1o.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvgw0r1o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzvgw0r1o.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzvgw0r1o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzvgw0r1o.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzvgw0r1o.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzvgw0r1o.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvgw0r1o.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9b2fmdmm.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9b2fmdmm.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9b2fmdmm.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b2fmdmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9b2fmdmm.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9b2fmdmm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9b2fmdmm.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b2fmdmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9b2fmdmm.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9b2fmdmm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9b2fmdmm.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9b2fmdmm.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9b2fmdmm.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b2fmdmm.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpik8kclh4.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpik8kclh4.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpik8kclh4.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik8kclh4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpik8kclh4.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpik8kclh4.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpik8kclh4.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik8kclh4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpik8kclh4.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpik8kclh4.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpik8kclh4.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpik8kclh4.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpik8kclh4.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik8kclh4.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0jx2u_ta.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp0jx2u_ta.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0jx2u_ta.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0jx2u_ta.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp0jx2u_ta.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp0jx2u_ta.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0jx2u_ta.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0jx2u_ta.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp0jx2u_ta.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp0jx2u_ta.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0jx2u_ta.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0jx2u_ta.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp0jx2u_ta.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0jx2u_ta.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv3nzt5ve.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpv3nzt5ve.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv3nzt5ve.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3nzt5ve.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv3nzt5ve.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv3nzt5ve.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv3nzt5ve.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3nzt5ve.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv3nzt5ve.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv3nzt5ve.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv3nzt5ve.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv3nzt5ve.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv3nzt5ve.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv3nzt5ve.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkjohvfnw.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpkjohvfnw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkjohvfnw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjohvfnw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkjohvfnw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkjohvfnw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkjohvfnw.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjohvfnw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkjohvfnw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkjohvfnw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkjohvfnw.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkjohvfnw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkjohvfnw.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjohvfnw.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk73bsoze.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpk73bsoze.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk73bsoze.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk73bsoze.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpk73bsoze.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk73bsoze.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk73bsoze.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk73bsoze.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpk73bsoze.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk73bsoze.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk73bsoze.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk73bsoze.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpk73bsoze.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk73bsoze.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppgskc4vz.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmppgskc4vz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppgskc4vz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgskc4vz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppgskc4vz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppgskc4vz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppgskc4vz.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgskc4vz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppgskc4vz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmppgskc4vz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppgskc4vz.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppgskc4vz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmppgskc4vz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppgskc4vz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5jc5nya_.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp5jc5nya_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5jc5nya_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc5nya_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jc5nya_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp5jc5nya_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5jc5nya_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc5nya_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jc5nya_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp5jc5nya_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5jc5nya_.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5jc5nya_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp5jc5nya_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5jc5nya_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpavg_phoc.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpavg_phoc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpavg_phoc.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavg_phoc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpavg_phoc.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpavg_phoc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpavg_phoc.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavg_phoc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpavg_phoc.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpavg_phoc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpavg_phoc.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpavg_phoc.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpavg_phoc.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpavg_phoc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvcn2rdw1.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvcn2rdw1.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvcn2rdw1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvcn2rdw1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvcn2rdw1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvcn2rdw1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvcn2rdw1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvcn2rdw1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvcn2rdw1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvcn2rdw1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvcn2rdw1.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvcn2rdw1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvcn2rdw1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvcn2rdw1.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    if isprime(finish - start + 1)\n        return \"YES\"\
    \n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpun3opo8m.jl:42\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpun3opo8m.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpun3opo8m.jl:41\ntest set: Error\
    \ During Test at /tmp/tmpun3opo8m.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpun3opo8m.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpun3opo8m.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpun3opo8m.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpun3opo8m.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpun3opo8m.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpun3opo8m.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpun3opo8m.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpun3opo8m.jl:45\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpun3opo8m.jl:32\n   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpun3opo8m.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaklp82hc.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaklp82hc.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaklp82hc.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaklp82hc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaklp82hc.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaklp82hc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaklp82hc.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaklp82hc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaklp82hc.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaklp82hc.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaklp82hc.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaklp82hc.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaklp82hc.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaklp82hc.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpus0hw47r.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpus0hw47r.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpus0hw47r.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus0hw47r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpus0hw47r.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpus0hw47r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpus0hw47r.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus0hw47r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpus0hw47r.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpus0hw47r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpus0hw47r.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpus0hw47r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpus0hw47r.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpus0hw47r.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl6wzp_vm.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpl6wzp_vm.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl6wzp_vm.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6wzp_vm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpl6wzp_vm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpl6wzp_vm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl6wzp_vm.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6wzp_vm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpl6wzp_vm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpl6wzp_vm.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl6wzp_vm.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl6wzp_vm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpl6wzp_vm.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6wzp_vm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_wj4950j.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp_wj4950j.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_wj4950j.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wj4950j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_wj4950j.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_wj4950j.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_wj4950j.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wj4950j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_wj4950j.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp_wj4950j.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp_wj4950j.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_wj4950j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmp_wj4950j.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_wj4950j.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start1, end1 = interval1\n\
    \    start2, end2 = interval2\n    if start1 > end1 || start2 > end2\n       \
    \ return \"NO\"\n    end\n    if start1 > start2\n        start1, start2 = start2,\
    \ start1\n    end\n    if end1 < end2\n        end1, end2 = end2, end1\n    end\n\
    \    if end1 < start2\n        return \"NO\"\n    end\n    if start1 <= start2\
    \ && end1 >= end2\n        return \"YES\"\n    end\n    if start1 <= start2 &&\
    \ end1 < end2\n        return isprime(end1 - start2 + 1) ? \"YES\" : \"NO\"\n\
    \    end\n    if start1 > start2 && end1 >= end2\n        return isprime(end2\
    \ - start1 + 1) ? \"YES\" : \"NO\"\n    end\n    if start1 > start2 && end1 <\
    \ end2\n        return isprime(end1 - start1 + 1) ? \"YES\" : \"NO\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9aex0qhz.jl:56\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9aex0qhz.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9aex0qhz.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp9aex0qhz.jl:57\n  Expression: candidate((-1, 1), (0, 4)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9aex0qhz.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9aex0qhz.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp9aex0qhz.jl:60\n  Expression: candidate((-11, 2), (-1, -1))\
    \ == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9aex0qhz.jl:60 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9aex0qhz.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp9aex0qhz.jl:61\n  Expression: candidate((1, 2), (3, 5)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9aex0qhz.jl:61 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9aex0qhz.jl:55\ntest set: Test\
    \ Failed at /tmp/tmp9aex0qhz.jl:62\n  Expression: candidate((1, 2), (1, 2)) ==\
    \ \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/s"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9aex0qhz.jl:53\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl40cnxb_.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpl40cnxb_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl40cnxb_.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl40cnxb_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpl40cnxb_.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpl40cnxb_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl40cnxb_.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl40cnxb_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpl40cnxb_.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpl40cnxb_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl40cnxb_.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl40cnxb_.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpl40cnxb_.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl40cnxb_.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp05hdfep0.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp05hdfep0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp05hdfep0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp05hdfep0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp05hdfep0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp05hdfep0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp05hdfep0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp05hdfep0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp05hdfep0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp05hdfep0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp05hdfep0.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp05hdfep0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp05hdfep0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp05hdfep0.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp44a_7xh2.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp44a_7xh2.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44a_7xh2.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44a_7xh2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp44a_7xh2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp44a_7xh2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp44a_7xh2.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44a_7xh2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp44a_7xh2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp44a_7xh2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp44a_7xh2.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44a_7xh2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp44a_7xh2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp44a_7xh2.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxdntl9hg.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpxdntl9hg.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxdntl9hg.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxdntl9hg.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxdntl9hg.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxdntl9hg.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxdntl9hg.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxdntl9hg.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxdntl9hg.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxdntl9hg.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxdntl9hg.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxdntl9hg.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxdntl9hg.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdntl9hg.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprkmkrnvz.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmprkmkrnvz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprkmkrnvz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprkmkrnvz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprkmkrnvz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprkmkrnvz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprkmkrnvz.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprkmkrnvz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprkmkrnvz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprkmkrnvz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprkmkrnvz.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprkmkrnvz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmprkmkrnvz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprkmkrnvz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ic5szi_.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1ic5szi_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ic5szi_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ic5szi_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1ic5szi_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1ic5szi_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1ic5szi_.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ic5szi_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1ic5szi_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1ic5szi_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1ic5szi_.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ic5szi_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp1ic5szi_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ic5szi_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4yixdqgo.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp4yixdqgo.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4yixdqgo.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4yixdqgo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4yixdqgo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4yixdqgo.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4yixdqgo.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4yixdqgo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4yixdqgo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4yixdqgo.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4yixdqgo.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4yixdqgo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4yixdqgo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yixdqgo.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzlhsjqd6.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpzlhsjqd6.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzlhsjqd6.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlhsjqd6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzlhsjqd6.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzlhsjqd6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzlhsjqd6.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlhsjqd6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzlhsjqd6.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpzlhsjqd6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzlhsjqd6.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzlhsjqd6.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpzlhsjqd6.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlhsjqd6.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start1, end1 = interval1\n\
    \    start2, end2 = interval2\n    if start1 > end1 || start2 > end2\n       \
    \ return \"NO\"\n    end\n    if start1 > start2\n        start1, start2 = start2,\
    \ start1\n    end\n    if end1 < end2\n        end1, end2 = end2, end1\n    end\n\
    \    if start2 <= end1\n        if start2 == end1\n            return \"YES\"\n\
    \        end\n        if start2 == end1 - 1\n            return \"NO\"\n     \
    \   end\n        if isprime(end1 - start2 + 1)\n            return \"YES\"\n \
    \       end\n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp085v_dig.jl:54\n  Test threw exception\n\
    \  Expression: candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime\
    \ not defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp085v_dig.jl:42\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp085v_dig.jl:54 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp085v_dig.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp085v_dig.jl:55\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp085v_dig.jl:42\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp085v_dig.jl:55 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp085v_dig.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp085v_dig.jl:56\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp085v_dig.jl:42\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp085v_dig.jl:56 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp085v_dig.jl:52\ntest set:\
    \ Error During Test at /tmp/tmp085v_dig.jl:57\n  Test threw exception\n  Expression:\
    \ candidate((-11, 2), (-1, -1)) == \"N"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp085v_dig.jl:50\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] > interval2[2]\
    \ || interval2[1] > interval1[2]\n        return \"NO\"\n    end\n    if interval1[1]\
    \ <= interval2[1]\n        start = interval2[1]\n    else\n        start = interval1[1]\n\
    \    end\n    if interval1[2] <= interval2[2]\n        end = interval1[2]\n  \
    \  else\n        end = interval2[2]\n    end\n    if isprime(end - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmppt4lpjc4.jl:23 expected\
    \ \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppt4lpjc4.jl:34\n\
    in expression starting at /tmp/tmppt4lpjc4.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7qmacpqz.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp7qmacpqz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qmacpqz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qmacpqz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7qmacpqz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7qmacpqz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7qmacpqz.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qmacpqz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7qmacpqz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7qmacpqz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7qmacpqz.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qmacpqz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7qmacpqz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qmacpqz.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp33l5_45d.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp33l5_45d.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp33l5_45d.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33l5_45d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp33l5_45d.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp33l5_45d.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp33l5_45d.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33l5_45d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp33l5_45d.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp33l5_45d.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp33l5_45d.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp33l5_45d.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp33l5_45d.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp33l5_45d.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoov_kiea.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpoov_kiea.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoov_kiea.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoov_kiea.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpoov_kiea.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpoov_kiea.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoov_kiea.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoov_kiea.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpoov_kiea.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpoov_kiea.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoov_kiea.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoov_kiea.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpoov_kiea.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoov_kiea.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf3d2puir.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpf3d2puir.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf3d2puir.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3d2puir.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf3d2puir.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpf3d2puir.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf3d2puir.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3d2puir.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf3d2puir.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpf3d2puir.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpf3d2puir.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf3d2puir.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpf3d2puir.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3d2puir.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk22jfw3l.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpk22jfw3l.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk22jfw3l.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk22jfw3l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk22jfw3l.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk22jfw3l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk22jfw3l.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk22jfw3l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk22jfw3l.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpk22jfw3l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpk22jfw3l.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk22jfw3l.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpk22jfw3l.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk22jfw3l.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp93odxmk.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpp93odxmk.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp93odxmk.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp93odxmk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp93odxmk.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp93odxmk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp93odxmk.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp93odxmk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp93odxmk.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp93odxmk.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp93odxmk.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp93odxmk.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp93odxmk.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp93odxmk.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx9fop2lw.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpx9fop2lw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx9fop2lw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9fop2lw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx9fop2lw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpx9fop2lw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx9fop2lw.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9fop2lw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx9fop2lw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpx9fop2lw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx9fop2lw.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx9fop2lw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx9fop2lw.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9fop2lw.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkxugeur7.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpkxugeur7.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkxugeur7.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxugeur7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkxugeur7.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkxugeur7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkxugeur7.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxugeur7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkxugeur7.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkxugeur7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkxugeur7.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkxugeur7.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpkxugeur7.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxugeur7.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpexz47tjy.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpexz47tjy.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpexz47tjy.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpexz47tjy.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpexz47tjy.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpexz47tjy.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpexz47tjy.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpexz47tjy.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpexz47tjy.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpexz47tjy.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpexz47tjy.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpexz47tjy.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpexz47tjy.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpexz47tjy.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    if isprime(finish - start + 1)\n        return \"YES\"\
    \n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7kf6fvvq.jl:42\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7kf6fvvq.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7kf6fvvq.jl:41\ntest set: Error\
    \ During Test at /tmp/tmp7kf6fvvq.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7kf6fvvq.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7kf6fvvq.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7kf6fvvq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7kf6fvvq.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7kf6fvvq.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7kf6fvvq.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7kf6fvvq.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7kf6fvvq.jl:45\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7kf6fvvq.jl:32\n   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kf6fvvq.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbzru9xp3.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpbzru9xp3.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbzru9xp3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbzru9xp3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbzru9xp3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpbzru9xp3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbzru9xp3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbzru9xp3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbzru9xp3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpbzru9xp3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpbzru9xp3.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbzru9xp3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpbzru9xp3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbzru9xp3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv9rc2kzl.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpv9rc2kzl.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv9rc2kzl.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9rc2kzl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv9rc2kzl.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv9rc2kzl.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv9rc2kzl.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9rc2kzl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv9rc2kzl.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv9rc2kzl.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv9rc2kzl.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv9rc2kzl.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpv9rc2kzl.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9rc2kzl.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe4f5dn17.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpe4f5dn17.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe4f5dn17.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4f5dn17.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe4f5dn17.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpe4f5dn17.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe4f5dn17.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4f5dn17.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe4f5dn17.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpe4f5dn17.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpe4f5dn17.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe4f5dn17.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpe4f5dn17.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4f5dn17.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdmsanidu.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpdmsanidu.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdmsanidu.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmsanidu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdmsanidu.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdmsanidu.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdmsanidu.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmsanidu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdmsanidu.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdmsanidu.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdmsanidu.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmsanidu.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpdmsanidu.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmsanidu.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnak3x2e7.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpnak3x2e7.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnak3x2e7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnak3x2e7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnak3x2e7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnak3x2e7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnak3x2e7.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnak3x2e7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnak3x2e7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnak3x2e7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnak3x2e7.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnak3x2e7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnak3x2e7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnak3x2e7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx1w5bcy1.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpx1w5bcy1.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx1w5bcy1.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1w5bcy1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx1w5bcy1.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpx1w5bcy1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx1w5bcy1.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1w5bcy1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx1w5bcy1.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpx1w5bcy1.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpx1w5bcy1.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx1w5bcy1.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpx1w5bcy1.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1w5bcy1.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp70q2u8yx.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp70q2u8yx.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp70q2u8yx.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70q2u8yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp70q2u8yx.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp70q2u8yx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp70q2u8yx.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70q2u8yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp70q2u8yx.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp70q2u8yx.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp70q2u8yx.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp70q2u8yx.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp70q2u8yx.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70q2u8yx.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp20hikbow.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp20hikbow.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp20hikbow.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20hikbow.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp20hikbow.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp20hikbow.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp20hikbow.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20hikbow.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp20hikbow.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp20hikbow.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp20hikbow.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp20hikbow.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp20hikbow.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp20hikbow.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn7unqy35.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpn7unqy35.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn7unqy35.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn7unqy35.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn7unqy35.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn7unqy35.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn7unqy35.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn7unqy35.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn7unqy35.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn7unqy35.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn7unqy35.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn7unqy35.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpn7unqy35.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn7unqy35.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoj7t10vi.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpoj7t10vi.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoj7t10vi.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoj7t10vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpoj7t10vi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpoj7t10vi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoj7t10vi.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoj7t10vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpoj7t10vi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpoj7t10vi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpoj7t10vi.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoj7t10vi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpoj7t10vi.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoj7t10vi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmfciomiw.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpmfciomiw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmfciomiw.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfciomiw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmfciomiw.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmfciomiw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmfciomiw.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfciomiw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmfciomiw.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmfciomiw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmfciomiw.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmfciomiw.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmfciomiw.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmfciomiw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start <= stop\n\
    \        return isprime(stop - start + 1) ? \"YES\" : \"NO\"\n    else\n     \
    \   return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcvnmj5j.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpxcvnmj5j.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxcvnmj5j.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcvnmj5j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxcvnmj5j.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxcvnmj5j.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxcvnmj5j.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcvnmj5j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxcvnmj5j.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxcvnmj5j.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxcvnmj5j.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxcvnmj5j.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpxcvnmj5j.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcvnmj5j.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwca0imdt.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpwca0imdt.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwca0imdt.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwca0imdt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwca0imdt.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpwca0imdt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwca0imdt.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwca0imdt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwca0imdt.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpwca0imdt.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwca0imdt.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwca0imdt.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwca0imdt.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwca0imdt.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpohcz00xi.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpohcz00xi.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpohcz00xi.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpohcz00xi.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpohcz00xi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpohcz00xi.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpohcz00xi.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpohcz00xi.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpohcz00xi.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpohcz00xi.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpohcz00xi.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpohcz00xi.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpohcz00xi.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohcz00xi.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] <= interval2[1]\
    \ <= interval1[2] <= interval2[2]\n        return isprime(interval1[2] - interval2[1]\
    \ + 1) ? \"YES\" : \"NO\"\n    elseif interval2[1] <= interval1[1] <= interval2[2]\
    \ <= interval1[2]\n        return isprime(interval2[2] - interval1[1] + 1) ? \"\
    YES\" : \"NO\"\n    elseif interval1[1] <= interval2[1] <= interval2[2] <= interval1[2]\n\
    \        return isprime(interval2[2] - interval2[1] + 1) ? \"YES\" : \"NO\"\n\
    \    elseif interval2[1] <= interval1[1] <= interval1[2] <= interval2[2]\n   \
    \     return isprime(interval1[2] - interval1[1] + 1) ? \"YES\" : \"NO\"\n   \
    \ else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9gguyms5.jl:41\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9gguyms5.jl:25\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gguyms5.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gguyms5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9gguyms5.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9gguyms5.jl:25\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9gguyms5.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gguyms5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9gguyms5.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9gguyms5.jl:31\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9gguyms5.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gguyms5.jl:40\ntest set:\
    \ Error During Test at /tmp/tmp9gguyms5.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gguyms5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp78g0qe_w.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp78g0qe_w.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp78g0qe_w.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp78g0qe_w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp78g0qe_w.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp78g0qe_w.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp78g0qe_w.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp78g0qe_w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp78g0qe_w.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp78g0qe_w.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp78g0qe_w.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp78g0qe_w.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp78g0qe_w.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp78g0qe_w.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnya1nb96.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpnya1nb96.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnya1nb96.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnya1nb96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnya1nb96.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnya1nb96.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnya1nb96.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnya1nb96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnya1nb96.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpnya1nb96.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpnya1nb96.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnya1nb96.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpnya1nb96.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnya1nb96.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    if isprime(finish - start + 1)\n        return \"YES\"\
    \n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmper8i7xdj.jl:42\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmper8i7xdj.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmper8i7xdj.jl:41\ntest set: Error\
    \ During Test at /tmp/tmper8i7xdj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmper8i7xdj.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmper8i7xdj.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmper8i7xdj.jl:41\ntest set:\
    \ Error During Test at /tmp/tmper8i7xdj.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmper8i7xdj.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmper8i7xdj.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmper8i7xdj.jl:41\ntest set:\
    \ Error During Test at /tmp/tmper8i7xdj.jl:45\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmper8i7xdj.jl:32\n   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper8i7xdj.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn8u1yqzz.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpn8u1yqzz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn8u1yqzz.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn8u1yqzz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn8u1yqzz.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn8u1yqzz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn8u1yqzz.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn8u1yqzz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn8u1yqzz.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpn8u1yqzz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpn8u1yqzz.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn8u1yqzz.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpn8u1yqzz.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn8u1yqzz.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd062wajs.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpd062wajs.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd062wajs.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd062wajs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd062wajs.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd062wajs.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd062wajs.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd062wajs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd062wajs.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd062wajs.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd062wajs.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd062wajs.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd062wajs.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd062wajs.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4vvb59h9.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp4vvb59h9.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4vvb59h9.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4vvb59h9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4vvb59h9.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4vvb59h9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4vvb59h9.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4vvb59h9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4vvb59h9.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4vvb59h9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4vvb59h9.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4vvb59h9.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp4vvb59h9.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4vvb59h9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    len = stop - start + 1\n    if isprime(len)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvynwrsb9.jl:41\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvynwrsb9.jl:30\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvynwrsb9.jl:41 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvynwrsb9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvynwrsb9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvynwrsb9.jl:30\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvynwrsb9.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvynwrsb9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvynwrsb9.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvynwrsb9.jl:30\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvynwrsb9.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvynwrsb9.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpvynwrsb9.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvynwrsb9.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3ickofsi.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp3ickofsi.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3ickofsi.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ickofsi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3ickofsi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3ickofsi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3ickofsi.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ickofsi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3ickofsi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp3ickofsi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp3ickofsi.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3ickofsi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp3ickofsi.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ickofsi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuj5h2iax.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpuj5h2iax.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj5h2iax.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj5h2iax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpuj5h2iax.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpuj5h2iax.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuj5h2iax.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj5h2iax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpuj5h2iax.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpuj5h2iax.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpuj5h2iax.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj5h2iax.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpuj5h2iax.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuj5h2iax.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprhq8nvc3.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmprhq8nvc3.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhq8nvc3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhq8nvc3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprhq8nvc3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprhq8nvc3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprhq8nvc3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhq8nvc3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprhq8nvc3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprhq8nvc3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprhq8nvc3.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhq8nvc3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprhq8nvc3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhq8nvc3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp50be87td.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp50be87td.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp50be87td.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50be87td.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50be87td.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp50be87td.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp50be87td.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50be87td.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50be87td.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp50be87td.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp50be87td.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp50be87td.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp50be87td.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp50be87td.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkurv2aci.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpkurv2aci.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkurv2aci.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkurv2aci.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkurv2aci.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkurv2aci.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkurv2aci.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkurv2aci.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkurv2aci.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpkurv2aci.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpkurv2aci.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkurv2aci.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpkurv2aci.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkurv2aci.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd4_p9mi8.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpd4_p9mi8.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd4_p9mi8.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p9mi8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd4_p9mi8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd4_p9mi8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd4_p9mi8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p9mi8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd4_p9mi8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpd4_p9mi8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpd4_p9mi8.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd4_p9mi8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpd4_p9mi8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4_p9mi8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfwwlpox0.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpfwwlpox0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfwwlpox0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfwwlpox0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfwwlpox0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpfwwlpox0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfwwlpox0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfwwlpox0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfwwlpox0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpfwwlpox0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpfwwlpox0.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfwwlpox0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpfwwlpox0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwwlpox0.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp88qci6el.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp88qci6el.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp88qci6el.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88qci6el.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp88qci6el.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp88qci6el.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp88qci6el.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88qci6el.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp88qci6el.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp88qci6el.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp88qci6el.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp88qci6el.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp88qci6el.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88qci6el.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp56u3ypot.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp56u3ypot.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp56u3ypot.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp56u3ypot.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp56u3ypot.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp56u3ypot.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp56u3ypot.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp56u3ypot.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp56u3ypot.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp56u3ypot.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp56u3ypot.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp56u3ypot.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp56u3ypot.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56u3ypot.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqfjbhi34.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpqfjbhi34.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqfjbhi34.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfjbhi34.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqfjbhi34.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqfjbhi34.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqfjbhi34.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfjbhi34.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqfjbhi34.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqfjbhi34.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqfjbhi34.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqfjbhi34.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqfjbhi34.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfjbhi34.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphebtcra8.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmphebtcra8.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphebtcra8.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphebtcra8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphebtcra8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphebtcra8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphebtcra8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphebtcra8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphebtcra8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmphebtcra8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmphebtcra8.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphebtcra8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmphebtcra8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphebtcra8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplt415a9x.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmplt415a9x.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplt415a9x.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplt415a9x.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplt415a9x.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplt415a9x.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplt415a9x.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplt415a9x.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplt415a9x.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplt415a9x.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplt415a9x.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplt415a9x.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplt415a9x.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplt415a9x.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9d6va_s6.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9d6va_s6.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9d6va_s6.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9d6va_s6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9d6va_s6.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9d6va_s6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9d6va_s6.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9d6va_s6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9d6va_s6.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9d6va_s6.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9d6va_s6.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9d6va_s6.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp9d6va_s6.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9d6va_s6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9fl5yvpo.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9fl5yvpo.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9fl5yvpo.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fl5yvpo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9fl5yvpo.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9fl5yvpo.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9fl5yvpo.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fl5yvpo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9fl5yvpo.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9fl5yvpo.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9fl5yvpo.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9fl5yvpo.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9fl5yvpo.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9fl5yvpo.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp36bk3p8k.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp36bk3p8k.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp36bk3p8k.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36bk3p8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp36bk3p8k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp36bk3p8k.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp36bk3p8k.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36bk3p8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp36bk3p8k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp36bk3p8k.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp36bk3p8k.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp36bk3p8k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp36bk3p8k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36bk3p8k.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxhsctr9q.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpxhsctr9q.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxhsctr9q.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxhsctr9q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxhsctr9q.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxhsctr9q.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxhsctr9q.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxhsctr9q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxhsctr9q.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxhsctr9q.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxhsctr9q.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxhsctr9q.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpxhsctr9q.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhsctr9q.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1axlgtl7.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp1axlgtl7.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1axlgtl7.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1axlgtl7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1axlgtl7.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1axlgtl7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1axlgtl7.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1axlgtl7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1axlgtl7.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp1axlgtl7.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1axlgtl7.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1axlgtl7.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp1axlgtl7.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1axlgtl7.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8ovs_svi.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp8ovs_svi.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8ovs_svi.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ovs_svi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8ovs_svi.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8ovs_svi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8ovs_svi.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ovs_svi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8ovs_svi.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8ovs_svi.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8ovs_svi.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8ovs_svi.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8ovs_svi.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ovs_svi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpliwtasur.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpliwtasur.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpliwtasur.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliwtasur.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpliwtasur.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpliwtasur.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpliwtasur.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliwtasur.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpliwtasur.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpliwtasur.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpliwtasur.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpliwtasur.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpliwtasur.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpliwtasur.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj2p606jb.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpj2p606jb.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj2p606jb.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj2p606jb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpj2p606jb.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpj2p606jb.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpj2p606jb.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj2p606jb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpj2p606jb.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpj2p606jb.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpj2p606jb.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj2p606jb.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpj2p606jb.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2p606jb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmv4yavpj.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpmv4yavpj.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmv4yavpj.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv4yavpj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmv4yavpj.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmv4yavpj.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmv4yavpj.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv4yavpj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmv4yavpj.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmv4yavpj.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmv4yavpj.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmv4yavpj.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmv4yavpj.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmv4yavpj.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8gmt8b48.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp8gmt8b48.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8gmt8b48.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gmt8b48.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gmt8b48.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8gmt8b48.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8gmt8b48.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gmt8b48.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gmt8b48.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp8gmt8b48.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8gmt8b48.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8gmt8b48.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp8gmt8b48.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gmt8b48.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if start == finish\n        return\
    \ \"YES\"\n    end\n    if isprime(finish - start + 1)\n        return \"YES\"\
    \n    end\n    return \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclhn2duf.jl:42\n  Expression: candidate((1,\
    \ 2), (2, 3)) == \"NO\"\n   Evaluated: \"YES\" == \"NO\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpclhn2duf.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpclhn2duf.jl:41\ntest set: Error\
    \ During Test at /tmp/tmpclhn2duf.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpclhn2duf.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpclhn2duf.jl:43 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclhn2duf.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpclhn2duf.jl:44\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpclhn2duf.jl:32\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpclhn2duf.jl:44 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpclhn2duf.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpclhn2duf.jl:45\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpclhn2duf.jl:32\n   [2]"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclhn2duf.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcxz97c3y.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpcxz97c3y.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcxz97c3y.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxz97c3y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcxz97c3y.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcxz97c3y.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcxz97c3y.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxz97c3y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcxz97c3y.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcxz97c3y.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcxz97c3y.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcxz97c3y.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpcxz97c3y.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcxz97c3y.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqg51zad3.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpqg51zad3.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqg51zad3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqg51zad3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqg51zad3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqg51zad3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqg51zad3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqg51zad3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqg51zad3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqg51zad3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqg51zad3.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqg51zad3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpqg51zad3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqg51zad3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpacrt3ww2.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpacrt3ww2.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpacrt3ww2.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpacrt3ww2.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpacrt3ww2.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpacrt3ww2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpacrt3ww2.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpacrt3ww2.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpacrt3ww2.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpacrt3ww2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpacrt3ww2.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpacrt3ww2.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpacrt3ww2.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacrt3ww2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvx2fli88.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvx2fli88.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvx2fli88.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx2fli88.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvx2fli88.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvx2fli88.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvx2fli88.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx2fli88.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvx2fli88.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvx2fli88.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvx2fli88.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvx2fli88.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpvx2fli88.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvx2fli88.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpse2xwb2x.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpse2xwb2x.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpse2xwb2x.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpse2xwb2x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpse2xwb2x.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpse2xwb2x.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpse2xwb2x.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpse2xwb2x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpse2xwb2x.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpse2xwb2x.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpse2xwb2x.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpse2xwb2x.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpse2xwb2x.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpse2xwb2x.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    if interval1[1] > interval2[2]\
    \ || interval2[1] > interval1[2]\n        return \"NO\"\n    end\n    start =\
    \ max(interval1[1], interval2[1])\n    stop = min(interval1[2], interval2[2])\n\
    \    if isprime(stop - start + 1)\n        return \"YES\"\n    else\n        return\
    \ \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsnql0rb9.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpsnql0rb9.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnql0rb9.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnql0rb9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsnql0rb9.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsnql0rb9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsnql0rb9.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnql0rb9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsnql0rb9.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsnql0rb9.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsnql0rb9.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnql0rb9.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpsnql0rb9.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsnql0rb9.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0e4jaun3.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp0e4jaun3.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0e4jaun3.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0e4jaun3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0e4jaun3.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp0e4jaun3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0e4jaun3.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0e4jaun3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0e4jaun3.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp0e4jaun3.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp0e4jaun3.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0e4jaun3.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp0e4jaun3.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0e4jaun3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv1tuys6i.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpv1tuys6i.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv1tuys6i.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1tuys6i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpv1tuys6i.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv1tuys6i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv1tuys6i.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1tuys6i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpv1tuys6i.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpv1tuys6i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpv1tuys6i.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv1tuys6i.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpv1tuys6i.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv1tuys6i.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplqw3b79g.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmplqw3b79g.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplqw3b79g.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqw3b79g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplqw3b79g.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplqw3b79g.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplqw3b79g.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqw3b79g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplqw3b79g.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmplqw3b79g.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmplqw3b79g.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplqw3b79g.jl:39\ntest set:\
    \ Error During Test at /tmp/tmplqw3b79g.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqw3b79g.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start <=\
    \ finish\n        return isprime(finish - start + 1) ? \"YES\" : \"NO\"\n    else\n\
    \        return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1,\
    \ 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t\
    @test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1,\
    \ -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsny776n1.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpsny776n1.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsny776n1.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsny776n1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsny776n1.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsny776n1.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsny776n1.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsny776n1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsny776n1.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsny776n1.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsny776n1.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsny776n1.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpsny776n1.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsny776n1.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpen509hz_.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpen509hz_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpen509hz_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpen509hz_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpen509hz_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpen509hz_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpen509hz_.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpen509hz_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpen509hz_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpen509hz_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpen509hz_.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpen509hz_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpen509hz_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpen509hz_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvdhm9t6_.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpvdhm9t6_.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvdhm9t6_.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvdhm9t6_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpvdhm9t6_.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvdhm9t6_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvdhm9t6_.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvdhm9t6_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpvdhm9t6_.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpvdhm9t6_.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpvdhm9t6_.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvdhm9t6_.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpvdhm9t6_.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdhm9t6_.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptchkm7t2.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmptchkm7t2.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptchkm7t2.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptchkm7t2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptchkm7t2.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptchkm7t2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptchkm7t2.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptchkm7t2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptchkm7t2.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmptchkm7t2.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptchkm7t2.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptchkm7t2.jl:39\ntest set:\
    \ Error During Test at /tmp/tmptchkm7t2.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptchkm7t2.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ynetb76.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp9ynetb76.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ynetb76.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ynetb76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9ynetb76.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9ynetb76.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9ynetb76.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ynetb76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9ynetb76.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp9ynetb76.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp9ynetb76.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ynetb76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp9ynetb76.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ynetb76.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start <= stop\n\
    \        return isprime(stop - start + 1) ? \"YES\" : \"NO\"\n    else\n     \
    \   return \"NO\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcffty74o.jl:37\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpcffty74o.jl:27\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcffty74o.jl:37 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffty74o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcffty74o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcffty74o.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcffty74o.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffty74o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcffty74o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpcffty74o.jl:27\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpcffty74o.jl:39 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcffty74o.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpcffty74o.jl:40\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcffty74o.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaf68gt1i.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpaf68gt1i.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaf68gt1i.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaf68gt1i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaf68gt1i.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaf68gt1i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaf68gt1i.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaf68gt1i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaf68gt1i.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpaf68gt1i.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpaf68gt1i.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaf68gt1i.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpaf68gt1i.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaf68gt1i.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwcp14wfz.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpwcp14wfz.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcp14wfz.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcp14wfz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwcp14wfz.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpwcp14wfz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwcp14wfz.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcp14wfz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwcp14wfz.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpwcp14wfz.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpwcp14wfz.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcp14wfz.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpwcp14wfz.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcp14wfz.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmo1zb4fs.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpmo1zb4fs.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmo1zb4fs.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmo1zb4fs.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmo1zb4fs.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmo1zb4fs.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmo1zb4fs.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmo1zb4fs.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmo1zb4fs.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmo1zb4fs.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmo1zb4fs.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmo1zb4fs.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpmo1zb4fs.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmo1zb4fs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdmwkrdk5.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpdmwkrdk5.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdmwkrdk5.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmwkrdk5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdmwkrdk5.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdmwkrdk5.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdmwkrdk5.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmwkrdk5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdmwkrdk5.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpdmwkrdk5.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpdmwkrdk5.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdmwkrdk5.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpdmwkrdk5.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdmwkrdk5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmlxlto2c.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpmlxlto2c.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmlxlto2c.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlxlto2c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmlxlto2c.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmlxlto2c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmlxlto2c.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlxlto2c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmlxlto2c.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpmlxlto2c.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpmlxlto2c.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmlxlto2c.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpmlxlto2c.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmlxlto2c.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start1, end1 = interval1\n\
    \    start2, end2 = interval2\n    if start1 > end1 || start2 > end2\n       \
    \ return \"NO\"\n    end\n    if end1 < start2 || end2 < start1\n        return\
    \ \"NO\"\n    end\n    start = max(start1, start2)\n    end_ = min(end1, end2)\n\
    \    if start > end_\n        return \"NO\"\n    end\n    if isprime(end_ - start\
    \ + 1)\n        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1,\
    \ 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsp8s4mmn.jl:48\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpsp8s4mmn.jl:37\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsp8s4mmn.jl:48 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsp8s4mmn.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpsp8s4mmn.jl:49\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsp8s4mmn.jl:37\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsp8s4mmn.jl:49 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsp8s4mmn.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpsp8s4mmn.jl:50\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpsp8s4mmn.jl:37\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsp8s4mmn.jl:50 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsp8s4mmn.jl:47\ntest set:\
    \ Error During Test at /tmp/tmpsp8s4mmn.jl:51\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsp8s4mmn.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4sl3nx5n.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp4sl3nx5n.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4sl3nx5n.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4sl3nx5n.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4sl3nx5n.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4sl3nx5n.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4sl3nx5n.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4sl3nx5n.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4sl3nx5n.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp4sl3nx5n.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp4sl3nx5n.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4sl3nx5n.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp4sl3nx5n.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4sl3nx5n.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7b4mf5c8.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp7b4mf5c8.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7b4mf5c8.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b4mf5c8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7b4mf5c8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7b4mf5c8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7b4mf5c8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b4mf5c8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7b4mf5c8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7b4mf5c8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7b4mf5c8.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7b4mf5c8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7b4mf5c8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7b4mf5c8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpghhl89tw.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpghhl89tw.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpghhl89tw.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpghhl89tw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpghhl89tw.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpghhl89tw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpghhl89tw.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpghhl89tw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpghhl89tw.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpghhl89tw.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpghhl89tw.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpghhl89tw.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpghhl89tw.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghhl89tw.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2nay2sh8.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp2nay2sh8.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2nay2sh8.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nay2sh8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2nay2sh8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2nay2sh8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2nay2sh8.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nay2sh8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2nay2sh8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp2nay2sh8.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp2nay2sh8.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2nay2sh8.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp2nay2sh8.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nay2sh8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgxkgix6l.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpgxkgix6l.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgxkgix6l.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxkgix6l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgxkgix6l.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpgxkgix6l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgxkgix6l.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxkgix6l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgxkgix6l.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpgxkgix6l.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpgxkgix6l.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgxkgix6l.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpgxkgix6l.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxkgix6l.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc01z_49h.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpc01z_49h.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc01z_49h.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc01z_49h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc01z_49h.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpc01z_49h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc01z_49h.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc01z_49h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc01z_49h.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpc01z_49h.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc01z_49h.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc01z_49h.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpc01z_49h.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc01z_49h.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpay76yq54.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpay76yq54.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpay76yq54.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpay76yq54.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpay76yq54.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpay76yq54.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpay76yq54.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpay76yq54.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpay76yq54.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpay76yq54.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpay76yq54.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpay76yq54.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpay76yq54.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpay76yq54.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprpagy2ul.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmprpagy2ul.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprpagy2ul.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpagy2ul.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprpagy2ul.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprpagy2ul.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprpagy2ul.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpagy2ul.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprpagy2ul.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmprpagy2ul.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprpagy2ul.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprpagy2ul.jl:39\ntest set:\
    \ Error During Test at /tmp/tmprpagy2ul.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpagy2ul.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqo4f869o.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpqo4f869o.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqo4f869o.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo4f869o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqo4f869o.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqo4f869o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqo4f869o.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo4f869o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqo4f869o.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpqo4f869o.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpqo4f869o.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqo4f869o.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpqo4f869o.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqo4f869o.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz2s6gv8m.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpz2s6gv8m.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz2s6gv8m.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2s6gv8m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpz2s6gv8m.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz2s6gv8m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz2s6gv8m.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2s6gv8m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpz2s6gv8m.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpz2s6gv8m.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpz2s6gv8m.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2s6gv8m.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpz2s6gv8m.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2s6gv8m.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp90i8vup0.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp90i8vup0.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp90i8vup0.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90i8vup0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp90i8vup0.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp90i8vup0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp90i8vup0.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90i8vup0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp90i8vup0.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp90i8vup0.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp90i8vup0.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp90i8vup0.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp90i8vup0.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90i8vup0.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    return isprime(stop - start + 1) ? \"YES\"\
    \ : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\t\
    @test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6uxd9r9r.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6uxd9r9r.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6uxd9r9r.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6uxd9r9r.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6uxd9r9r.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6uxd9r9r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6uxd9r9r.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6uxd9r9r.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6uxd9r9r.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6uxd9r9r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6uxd9r9r.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6uxd9r9r.jl:35\ntest set:\
    \ Error During Test at /tmp/tmp6uxd9r9r.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6uxd9r9r.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6kkhlm76.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp6kkhlm76.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6kkhlm76.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kkhlm76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6kkhlm76.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6kkhlm76.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6kkhlm76.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kkhlm76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6kkhlm76.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp6kkhlm76.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp6kkhlm76.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6kkhlm76.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp6kkhlm76.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6kkhlm76.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    return isprime(finish - start +\
    \ 1) ? \"YES\" : \"NO\"\nend\nusing Test\n\n@testset begin\n\ncandidate = intersection;\n\
    \t@test(candidate((1, 2), (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4))\
    \ == \"NO\")\n\t@test(candidate((-3, -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2,\
    \ 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\
    \t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2))\
    \ == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxeu_zqoa.jl:36\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpxeu_zqoa.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxeu_zqoa.jl:36 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeu_zqoa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxeu_zqoa.jl:37\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxeu_zqoa.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxeu_zqoa.jl:37 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeu_zqoa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxeu_zqoa.jl:38\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpxeu_zqoa.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpxeu_zqoa.jl:38 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxeu_zqoa.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpxeu_zqoa.jl:39\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxeu_zqoa.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7020yi7r.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmp7020yi7r.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7020yi7r.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7020yi7r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7020yi7r.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7020yi7r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7020yi7r.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7020yi7r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7020yi7r.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmp7020yi7r.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp7020yi7r.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7020yi7r.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp7020yi7r.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7020yi7r.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    finish = min(interval1[2], interval2[2])\n    if start >\
    \ finish\n        return \"NO\"\n    end\n    if isprime(finish - start + 1)\n\
    \        return \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2),\
    \ (2, 3)) == \"NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3,\
    \ -1), (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\
    \t@test(candidate((-11, 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3,\
    \ 5)) == \"NO\")\n\t@test(candidate((1, 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2,\
    \ -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjcvon9dn.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpjcvon9dn.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjcvon9dn.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcvon9dn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjcvon9dn.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjcvon9dn.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjcvon9dn.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcvon9dn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjcvon9dn.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpjcvon9dn.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjcvon9dn.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjcvon9dn.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpjcvon9dn.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjcvon9dn.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given two intervals,\n    where each interval is a pair\
    \ of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals\
    \ are closed which means that the interval (start, end)\n    includes both start\
    \ and end.\n    For each given interval, it is assumed that its start is less\
    \ or equal its end.\n    Your task is to determine whether the length of intersection\
    \ of these two \n    intervals is a prime number.\n    Example, the intersection\
    \ of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which\
    \ not a prime number.\n    If the length of the intersection is a prime number,\
    \ return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't\
    \ intersect, return \"NO\".\n\n\n    [input/output] samples:\n    >>> intersection((1,\
    \ 2), (2, 3))\n    \"NO\"\n    >>> intersection((-1, 1), (0, 4))\n    \"NO\"\n\
    \    >>> intersection((-3, -1), (-5, 5))\n    \"YES\"\n    \"\"\"\nfunction intersection(interval1::Tuple{Int64,\
    \ Int64}, interval2::Tuple{Int64, Int64})::String \n    start = max(interval1[1],\
    \ interval2[1])\n    stop = min(interval1[2], interval2[2])\n    if start > stop\n\
    \        return \"NO\"\n    end\n    if isprime(stop - start + 1)\n        return\
    \ \"YES\"\n    else\n        return \"NO\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = intersection;\n\t@test(candidate((1, 2), (2, 3)) == \"\
    NO\")\n\t@test(candidate((-1, 1), (0, 4)) == \"NO\")\n\t@test(candidate((-3, -1),\
    \ (-5, 5)) == \"YES\")\n\t@test(candidate((-2, 2), (-4, 0)) == \"YES\")\n\t@test(candidate((-11,\
    \ 2), (-1, -1)) == \"NO\")\n\t@test(candidate((1, 2), (3, 5)) == \"NO\")\n\t@test(candidate((1,\
    \ 2), (1, 2)) == \"NO\")\n\t@test(candidate((-2, -2), (-3, -2)) == \"NO\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp0ldz426.jl:40\n  Test threw exception\n\
    \  Expression: candidate((1, 2), (2, 3)) == \"NO\"\n  UndefVarError: isprime not\
    \ defined\n  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64},\
    \ interval2::Tuple{Int64, Int64})\n     @ Main /tmp/tmpp0ldz426.jl:29\n   [2]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp0ldz426.jl:40 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0ldz426.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp0ldz426.jl:41\n  Test threw exception\n  Expression:\
    \ candidate((-1, 1), (0, 4)) == \"NO\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp0ldz426.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp0ldz426.jl:41 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0ldz426.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp0ldz426.jl:42\n  Test threw exception\n  Expression:\
    \ candidate((-3, -1), (-5, 5)) == \"YES\"\n  UndefVarError: isprime not defined\n\
    \  Stacktrace:\n   [1] intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64,\
    \ Int64})\n     @ Main /tmp/tmpp0ldz426.jl:29\n   [2] macro expansion\n     @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpp0ldz426.jl:42 [inlined]\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp0ldz426.jl:39\ntest set:\
    \ Error During Test at /tmp/tmpp0ldz426.jl:43\n  Test threw exception\n  Expression:\
    \ candidate((-2, 2), (-4, 0)) == \"YES\"\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0ldz426.jl:37\n"
  exit_code: 1
  status: SyntaxError
