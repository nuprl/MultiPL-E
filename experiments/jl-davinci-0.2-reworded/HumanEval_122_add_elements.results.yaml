language: jl
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            sum += arr[i]\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] > 99\n \
    \           continue\n        end\n        sum += arr[i]\n    end\n    return\
    \ sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    # Initialize sum\n    sum = 0\n    # Iterate through\
    \ first k elements of arr\n    for i in 1:k\n        # If the element is less\
    \ than 100, add it to sum\n        if arr[i] < 100\n            sum += arr[i]\n\
    \        end\n    end\n    # Return sum\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    return sum(filter(x -> x < 100, arr[1:k]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n \
    \           sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    \"\"\"\n    Given a non-empty vector of integers arr\
    \ and an integer k, return\n    the sum of the elements with at most two digits\
    \ from the first k elements of arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprig8gwz3.jl:1\nin expression starting at /tmp/tmprig8gwz3.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    \"\"\"\n    Given a non-empty vector of integers arr\
    \ and an integer k, return\n    the sum of the elements with at most two digits\
    \ from the first k elements of arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprig8gwz3.jl:1\nin expression starting at /tmp/tmprig8gwz3.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    return sum(filter(x -> x < 100, arr[1:k]))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if length(string(arr[i]))\
    \ <= 2\n            sum += arr[i]\n        end\n    end\n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    # Initialize sum\n    sum = 0\n    # Loop through first\
    \ k elements of arr\n    for i in 1:k\n        # If element is less than 100,\
    \ add to sum\n        if arr[i] < 100\n            sum += arr[i]\n        end\n\
    \    end\n    # Return sum\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    total = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            total += arr[i]\n        end\n    end\n    return total\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n \
    \           sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    \"\"\"\n    Given a non-empty vector of integers arr\
    \ and an integer k, return\n    the sum of the elements with at most two digits\
    \ from the first k elements of arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprig8gwz3.jl:1\nin expression starting at /tmp/tmprig8gwz3.jl:1\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        if arr[i] < 100\n \
    \           sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 0
  program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
