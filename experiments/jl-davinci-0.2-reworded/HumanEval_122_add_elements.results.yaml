name: HumanEval_122_add_elements
language: jl
results:
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given a non-empty vector of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n    >>> add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)\n    24\n\n    Constraints:\n        1. 1 <= len(arr) <=\
    \ 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        if arr[i] < 100\n\
    \            sum += arr[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
