name: HumanEval_90_next_smallest
language: jl
results:
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[3]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[2] == lst[3]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2] == lst[3]\n            return nothing\n        end\n\
    \    end\n    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3] == lst[4]\n\
    \            return nothing\n        end\n    end\n    if length(lst) > 2\n  \
    \      if lst[1] == lst[2] == lst[3] == lst[4] == lst[5]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2] ==\
    \ lst[3] == lst[4] == lst[5] == lst[6]\n            return nothing\n        end\n\
    \    end\n    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3] == lst[4]\
    \ == lst[5] == lst[6] == lst[7]\n            return nothing\n        end\n   \
    \ end\n    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3] == lst[4]\
    \ == lst[5] == lst[6] == lst[7] == lst[8]\n            return nothing\n      \
    \  end\n    end\n    if length(lst) > 2\n       \nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6qk969k.jl:1\nin expression starting at /tmp/tmpk6qk969k.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_val = minimum(lst)\n \
    \   min_val_index = findall(lst .== min_val)\n    for i in min_val_index\n   \
    \     deleteat!(lst, i)\n    end\n    return minimum(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min = lst[1]\n    min2 = lst[2]\n\
    \    for i in lst\n        if i < min\n            min2 = min\n            min\
    \ = i\n        elseif i < min2\n            min2 = i\n        end\n    end\n \
    \   return min2\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwl01s8tl.jl:35\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl01s8tl.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl01s8tl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl01s8tl.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl01s8tl.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl01s8tl.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwl01s8tl.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwl01s8tl.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwl01s8tl.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwl01s8tl.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsv345z25.jl:1\nin expression starting at /tmp/tmpsv345z25.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmg4ctc6n.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmg4ctc6n.jl:1\n\
    in expression starting at /tmp/tmpmg4ctc6n.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppfj5y9_0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmppfj5y9_0.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmppfj5y9_0.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmppfj5y9_0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmppfj5y9_0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmppfj5y9_0.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmppfj5y9_0.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    min_1 = lst[1]\n\
    \    min_2 = lst[2]\n    if min_1 > min_2\n        min_1, min_2 = min_2, min_1\n\
    \    end\n    for i in 3:length(lst)\n        if lst[i] < min_1\n            min_2\
    \ = min_1\n            min_1 = lst[i]\n        elseif lst[i] < min_2\n       \
    \     min_2 = lst[i]\n        end\n    end\n    return min_2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        smallest\
    \ = lst[1]\n        second_smallest = lst[2]\n    else\n        smallest = lst[2]\n\
    \        second_smallest = lst[1]\n    end\n    for i in 3:length(lst)\n     \
    \   if lst[i] < smallest\n            second_smallest = smallest\n           \
    \ smallest = lst[i]\n        elseif lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4jdhg7zt.jl:43\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jdhg7zt.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jdhg7zt.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp4jdhg7zt.jl:45\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jdhg7zt.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jdhg7zt.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jdhg7zt.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return nothing\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[2] < lst[3]\n          \
    \      return lst[2]\n            end\n            if lst[2] > lst[3]\n      \
    \          return lst[3]\n            end\n            if lst[2] == lst[3]\n \
    \               return nothing\n            end\n        end\n    end\n    if\
    \ length(lst) > 2\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n\
    \                return lst[2]\n            end\n            if lst[2] > lst[3]\n\
    \                return lst[3]\n            end\n            if lst[2] == lst[3]\n\
    \                return nothing\n            end\n        end\n    end\n    if\
    \ length(lst) > 2\n        if lst[1] == lst[2]\n            if lst[2] < lst[3]\n\
    \                return lst[2]\n            end\n            if lst[2] > lst[3]\n\
    \                return lst[3]\n            end\n            if lst[2] == lst[3]\n\
    \                return nothing\n            end\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiteyaqa.jl:1\nin expression starting at /tmp/tmpwiteyaqa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min1 = lst[1]\n    min2 = lst[2]\n\
    \    if min1 > min2\n        min1, min2 = min2, min1\n    end\n    for i in 3:length(lst)\n\
    \        if lst[i] < min1\n            min2 = min1\n            min1 = lst[i]\n\
    \        elseif lst[i] < min2\n            min2 = lst[i]\n        end\n    end\n\
    \    return min2\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1i6vi580.jl:41\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i6vi580.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i6vi580.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp1i6vi580.jl:43\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1i6vi580.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1i6vi580.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1i6vi580.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9518hyse.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9518hyse.jl:1\n\
    in expression starting at /tmp/tmp9518hyse.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst[2:end]\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif (i < second_smallest) ||\
    \ (second_smallest == nothing)\n            second_smallest = i\n        end\n\
    \    end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa3toosst.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpa3toosst.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpa3toosst.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpa3toosst.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpefhjedfa.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpefhjedfa.jl:1\n\
    in expression starting at /tmp/tmpefhjedfa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = minimum(lst)\n    lst =\
    \ filter(x -> x != smallest, lst)\n    return minimum(lst)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7jjavuor.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmp7jjavuor.jl:20\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmp7jjavuor.jl:30 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmp7jjavuor.jl:26\\ntest\
    \ set: Error During Test at /tmp/tmp7jjavuor.jl:32\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return nothing\n        end\n    end\n    if length(lst)\
    \ > 2\n        for i in 1:length(lst)\n            if lst[i] < lst[i+1]\n    \
    \            return lst[i]\n            end\n            if lst[i] > lst[i+1]\n\
    \                return lst[i+1]\n            end\n            if lst[i] == lst[i+1]\n\
    \                return nothing\n            end\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp9tshl6h.jl:64\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9tshl6h.jl:64 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9tshl6h.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpp9tshl6h.jl:65\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9tshl6h.jl:65 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9tshl6h.jl:63\ntest set: Test\
    \ Failed at /tmp/tmpp9tshl6h.jl:68\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp9tshl6h.jl:68 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp9tshl6h.jl:63\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp9tshl6h.jl:61\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    if next_smallest == smallest\n        return nothing\n    end\n  \
    \  return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqdv5e9t.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaqdv5e9t.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaqdv5e9t.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqdv5e9t.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7x8zygt4.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x8zygt4.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x8zygt4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7x8zygt4.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x8zygt4.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x8zygt4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7x8zygt4.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x8zygt4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x8zygt4.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7x8zygt4.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7x8zygt4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7x8zygt4.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7x8zygt4.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg5lc54ip.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpg5lc54ip.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpg5lc54ip.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpg5lc54ip.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpg5lc54ip.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpg5lc54ip.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpg5lc54ip.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst[2:end]\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif i < second_smallest ||\
    \ second_smallest == nothing\n            second_smallest = i\n        end\n \
    \   end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsd7n5g94.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpsd7n5g94.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsd7n5g94.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsd7n5g94.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        if lst[1] < lst[2]\n  \
    \          if lst[1] < lst[3]\n                if lst[1] < lst[4]\n          \
    \          return lst[1]\n                end\n                if lst[1] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \         if lst[1] > lst[3]\n                if lst[3] < lst[4]\n           \
    \         return lst[3]\n                end\n                if lst[3] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \     end\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n      \
    \          if lst[2] < lst[4]\n                    return lst[2]\n           \
    \     end\n                if lst[2] > lst[4]\n                    return lst[\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4mjlwpu.jl:1\nin expression starting at /tmp/tmpm4mjlwpu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplg3hrfpb.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg3hrfpb.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg3hrfpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplg3hrfpb.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg3hrfpb.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg3hrfpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplg3hrfpb.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg3hrfpb.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg3hrfpb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplg3hrfpb.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplg3hrfpb.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplg3hrfpb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplg3hrfpb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = lst[1]\n    min_val_idx\
    \ = 1\n    for i in 2:length(lst)\n        if lst[i] < min_val\n            min_val\
    \ = lst[i]\n            min_val_idx = i\n        end\n    end\n    min_val = lst[1]\n\
    \    for i in 2:length(lst)\n        if i != min_val_idx && lst[i] < min_val\n\
    \            min_val = lst[i]\n        end\n    end\n    return min_val\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl52uipv0.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl52uipv0.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl52uipv0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl52uipv0.jl:42\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl52uipv0.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl52uipv0.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpl52uipv0.jl:44\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl52uipv0.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl52uipv0.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl52uipv0.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3fdsmxqt.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3fdsmxqt.jl:1\n\
    in expression starting at /tmp/tmp3fdsmxqt.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8k0jivsh.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8k0jivsh.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8k0jivsh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8k0jivsh.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8k0jivsh.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8k0jivsh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8k0jivsh.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8k0jivsh.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8k0jivsh.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8k0jivsh.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8k0jivsh.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8k0jivsh.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8k0jivsh.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2] && lst[2] == lst[3]\n     \
    \       return nothing\n        end\n    end\n    if length(lst) > 3\n       \
    \ if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 4\n        if lst[1] ==\
    \ lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 5\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6]\n            return nothing\n        end\n    end\n    if\
    \ length(lst) > 6\n        if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 7\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpolb9i2ks.jl:1\nin expression starting at /tmp/tmpolb9i2ks.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst[2:end]\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif i < second_smallest ||\
    \ second_smallest == nothing\n            second_smallest = i\n        end\n \
    \   end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeycenubw.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpeycenubw.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpeycenubw.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpeycenubw.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_idx\
    \ = findall(lst .== min_val)\n    if length(min_val_idx) > 1\n        lst = deleteat!(lst,\
    \ min_val_idx)\n    else\n        lst = deleteat!(lst, min_val_idx[1])\n    end\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpipkz8gtz.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpipkz8gtz.jl:25\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpipkz8gtz.jl:35 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpipkz8gtz.jl:31\\ntest\
    \ set: Error During Test at /tmp/tmpipkz8gtz.jl:37\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt4zod2or.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt4zod2or.jl:1\n\
    in expression starting at /tmp/tmpt4zod2or.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        for i in 4:length(lst)\n\
    \            if lst[i] < lst[i-1]\n                if lst[i] < lst[i-2]\n    \
    \                if lst[i] < lst[i-3]\n                        return lst[i]\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7qiqias.jl:70\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7qiqias.jl:70 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7qiqias.jl:69\ntest set: Test\
    \ Failed at /tmp/tmpx7qiqias.jl:71\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7qiqias.jl:71 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7qiqias.jl:69\ntest set: Test\
    \ Failed at /tmp/tmpx7qiqias.jl:74\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7qiqias.jl:74 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7qiqias.jl:69\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7qiqias.jl:67\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3hshuwxj.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3hshuwxj.jl:1\n\
    in expression starting at /tmp/tmp3hshuwxj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplbsguv4o.jl:52\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplbsguv4o.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplbsguv4o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmplbsguv4o.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplbsguv4o.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplbsguv4o.jl:50\ntest set: Test\
    \ Failed at /tmp/tmplbsguv4o.jl:57\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplbsguv4o.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplbsguv4o.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplbsguv4o.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findmin(lst)[2]\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk1ogojyu.jl:31\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk1ogojyu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk1ogojyu.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpk1ogojyu.jl:33\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk1ogojyu.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk1ogojyu.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk1ogojyu.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppuu9x7nu.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppuu9x7nu.jl:1\n\
    in expression starting at /tmp/tmppuu9x7nu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7rl8dsch.jl:52\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rl8dsch.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rl8dsch.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp7rl8dsch.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rl8dsch.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rl8dsch.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp7rl8dsch.jl:57\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7rl8dsch.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7rl8dsch.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7rl8dsch.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_index = 1\n    min_value\
    \ = lst[1]\n    for i in 2:length(lst)\n        if lst[i] < min_value\n      \
    \      min_value = lst[i]\n            min_index = i\n        end\n    end\n \
    \   min_value = lst[1]\n    for i in 2:length(lst)\n        if i == min_index\n\
    \            continue\n        end\n        if lst[i] < min_value\n          \
    \  min_value = lst[i]\n        end\n    end\n    return min_value\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1tvcie83.jl:50\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1tvcie83.jl:50 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1tvcie83.jl:49\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1tvcie83.jl:47\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return next_smallest(lst[2:end])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbd9pi3le.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd9pi3le.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd9pi3le.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbd9pi3le.jl:52\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd9pi3le.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd9pi3le.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpbd9pi3le.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbd9pi3le.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbd9pi3le.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbd9pi3le.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_value = minimum(lst)\n    min_index\
    \ = findall(lst .== min_value)\n    lst[min_index] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7xv5fdxr.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7xv5fdxr.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7xv5fdxr.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp7xv5fdxr.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7xv5fdxr.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7xv5fdxr.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7xv5fdxr.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa3vlv4hr.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa3vlv4hr.jl:1\n\
    in expression starting at /tmp/tmpa3vlv4hr.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return lst[3]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9h_vd6b.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9h_vd6b.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9h_vd6b.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpx9h_vd6b.jl:52\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9h_vd6b.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9h_vd6b.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9h_vd6b.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_val = minimum(lst)\n \
    \   min_val_idx = findall(lst .== min_val)\n    lst = deleteat!(lst, min_val_idx)\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpasesgb4j.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpasesgb4j.jl:1\n\
    in expression starting at /tmp/tmpasesgb4j.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqp2v6vpf.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqp2v6vpf.jl:1\n\
    in expression starting at /tmp/tmpqp2v6vpf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy04vrjbe.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy04vrjbe.jl:1\n\
    in expression starting at /tmp/tmpy04vrjbe.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        if lst[1] < lst[2]\n  \
    \          if lst[1] < lst[3]\n                if lst[1] < lst[4]\n          \
    \          return lst[1]\n                end\n                if lst[1] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \         if lst[1] > lst[3]\n                if lst[3] < lst[4]\n           \
    \         return lst[3]\n                end\n                if lst[3] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \     end\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n      \
    \          if lst[2] < lst[4]\n                    return lst[2]\n           \
    \     end\n                if lst[2] > lst[4]\n                    return lst[\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyytpwu3g.jl:1\nin expression starting at /tmp/tmpyytpwu3g.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sort!(lst)\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    return sort(lst)[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9l36i78.jl:28\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9l36i78.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9l36i78.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpx9l36i78.jl:30\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9l36i78.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9l36i78.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9l36i78.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph5u1bnp5.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph5u1bnp5.jl:1\n\
    in expression starting at /tmp/tmph5u1bnp5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7okl2gd0.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7okl2gd0.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7okl2gd0.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp7okl2gd0.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7okl2gd0.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7okl2gd0.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7okl2gd0.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqoi8a31g.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoi8a31g.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoi8a31g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqoi8a31g.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoi8a31g.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoi8a31g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqoi8a31g.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoi8a31g.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoi8a31g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqoi8a31g.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqoi8a31g.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqoi8a31g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqoi8a31g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx1tcyurp.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpx1tcyurp.jl:1\n\
    in expression starting at /tmp/tmpx1tcyurp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_ind\
    \ = findall(lst .== min_val)\n    lst[min_val_ind] = typemax(Int64)\n    return\
    \ minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpue3y38f7.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpue3y38f7.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpue3y38f7.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpue3y38f7.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpue3y38f7.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpue3y38f7.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpue3y38f7.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    if lst[1] <\
    \ lst[2]\n        return lst[2]\n    end\n    if lst[1] > lst[2]\n        return\
    \ lst[1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphtdvu377.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtdvu377.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtdvu377.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphtdvu377.jl:39\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtdvu377.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtdvu377.jl:34\ntest set: Test\
    \ Failed at /tmp/tmphtdvu377.jl:41\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphtdvu377.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphtdvu377.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtdvu377.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] < lst[2]\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sgn330d.jl:1\nin expression starting at /tmp/tmp9sgn330d.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7cu39fld.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cu39fld.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cu39fld.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7cu39fld.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cu39fld.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cu39fld.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp7cu39fld.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7cu39fld.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7cu39fld.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cu39fld.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9lofkrhs.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9lofkrhs.jl:1\n\
    in expression starting at /tmp/tmp9lofkrhs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return next_smallest(lst[2:end])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnykg_w87.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnykg_w87.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnykg_w87.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpnykg_w87.jl:52\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnykg_w87.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnykg_w87.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpnykg_w87.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnykg_w87.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnykg_w87.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnykg_w87.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyyh22wqg.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyyh22wqg.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpyyh22wqg.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpyyh22wqg.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpyyh22wqg.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyyh22wqg.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpyyh22wqg.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        for i in 1:length(lst)\n\
    \            if lst[i] < lst[i+1]\n                if lst[i] < lst[i+2]\n    \
    \                return lst[i]\n                end\n                if lst[i]\
    \ > lst[i+2]\n                    return lst[i+2]\n                end\n     \
    \       end\n            if lst[i] > lst[i+1]\n                if lst[i+1] < lst[i+2]\n\
    \                    return lst[i+1]\n                end\n                if\
    \ lst[i+1] > lst[i+2]\n                    return lst[i+2]\n                end\n\
    \            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp378r3wa3.jl:78\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp378r3wa3.jl:78 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp378r3wa3.jl:77\\ntest set: Test\
    \ Failed at /tmp/tmp378r3wa3.jl:79\\n  Expression: candidate([5, 1, 4, 3, 2])\
    \ == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp378r3wa3.jl:79 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp378r3wa3.jl:77\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in 2:length(lst)\n        if lst[i] < smallest\n      \
    \      second_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] > smallest && (second_smallest == nothing || lst[i] < second_smallest)\n\
    \            second_smallest = lst[i]\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2] && lst[2] == lst[3]\n     \
    \       return nothing\n        end\n    end\n    if length(lst) > 3\n       \
    \ if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 4\n        if lst[1] ==\
    \ lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 5\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6]\n            return nothing\n        end\n    end\n    if\
    \ length(lst) > 6\n        if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 7\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02b27j3s.jl:1\nin expression starting at /tmp/tmp02b27j3s.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    lst = sort(lst)\n    if lst[1]\
    \ == lst[2]\n        return lst[3]\n    end\n    return lst[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp71tm43k7.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp71tm43k7.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp71tm43k7.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp71tm43k7.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp71tm43k7.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp71tm43k7.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp71tm43k7.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst[2:end]\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif i < second_smallest ||\
    \ second_smallest == nothing\n            second_smallest = i\n        end\n \
    \   end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsyhdesxk.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmpsyhdesxk.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmpsyhdesxk.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpsyhdesxk.jl:34\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in 2:length(lst)\n        if lst[i] < smallest\n      \
    \      second_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ second_smallest == nothing || lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xp0hdgw.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xp0hdgw.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xp0hdgw.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp0xp0hdgw.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0xp0hdgw.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0xp0hdgw.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xp0hdgw.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnx41j5cs.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnx41j5cs.jl:1\n\
    in expression starting at /tmp/tmpnx41j5cs.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvk5syqc.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvk5syqc.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvk5syqc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyvk5syqc.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvk5syqc.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvk5syqc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyvk5syqc.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvk5syqc.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvk5syqc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyvk5syqc.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyvk5syqc.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyvk5syqc.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvk5syqc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmply6783iz.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply6783iz.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply6783iz.jl:34\ntest set: Test\
    \ Failed at /tmp/tmply6783iz.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply6783iz.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply6783iz.jl:34\ntest set: Test\
    \ Failed at /tmp/tmply6783iz.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmply6783iz.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmply6783iz.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmply6783iz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    lst = sort(lst)\n    for i\
    \ in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n            return lst[i+1]\n\
    \        end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpajmg914f.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajmg914f.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajmg914f.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpajmg914f.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajmg914f.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajmg914f.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpajmg914f.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpajmg914f.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpajmg914f.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpajmg914f.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            for i in 1:length(lst)\n                if lst[i]\
    \ != lst[1]\n                    return lst[i]\n                end\n        \
    \    end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt6twwplf.jl:55\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6twwplf.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6twwplf.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpt6twwplf.jl:56\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6twwplf.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6twwplf.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpt6twwplf.jl:59\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt6twwplf.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt6twwplf.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt6twwplf.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sort!(lst)\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    smallest =\
    \ lst[1]\n    second_smallest = nothing\n    for i in lst\n        if i < smallest\n\
    \            second_smallest = smallest\n            smallest = i\n        elseif\
    \ i > smallest && (second_smallest == nothing || i < second_smallest)\n      \
    \      second_smallest = i\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        if lst[1] < lst[2]\n  \
    \          if lst[1] < lst[3]\n                if lst[1] < lst[4]\n          \
    \          return lst[1]\n                end\n                if lst[1] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \         if lst[1] > lst[3]\n                if lst[3] < lst[4]\n           \
    \         return lst[3]\n                end\n                if lst[3] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \     end\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n      \
    \          if lst[2] < lst[4]\n                    return lst[2]\n           \
    \     end\n                if lst[2] > lst[4]\n                    return lst[\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhnpwzry.jl:1\nin expression starting at /tmp/tmprhnpwzry.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst = deleteat!(lst, min_idx)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbe3k_6qk.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpbe3k_6qk.jl:21\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpbe3k_6qk.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpbe3k_6qk.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmpbe3k_6qk.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    lst = sort(lst)\n    for i\
    \ in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n            return lst[i+1]\n\
    \        end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv48vhnpl.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpv48vhnpl.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpv48vhnpl.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpv48vhnpl.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv48vhnpl.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpv48vhnpl.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpv48vhnpl.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    if next_smallest == smallest\n        return nothing\n    end\n  \
    \  return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl05lxonj.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl05lxonj.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl05lxonj.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl05lxonj.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxz250vpq.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpxz250vpq.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpxz250vpq.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpxz250vpq.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpxz250vpq.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpxz250vpq.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpxz250vpq.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    lst = sort(lst)\n    if lst[1] ==\
    \ lst[2]\n        return nothing\n    end\n    return lst[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptwi0uo_q.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptwi0uo_q.jl:1\n\
    in expression starting at /tmp/tmptwi0uo_q.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnjjb4g0l.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnjjb4g0l.jl:1\n\
    in expression starting at /tmp/tmpnjjb4g0l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif i > smallest && (second_smallest\
    \ == nothing || i < second_smallest)\n            second_smallest = i\n      \
    \  end\n    end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted_lst = sort(lst)\n \
    \   for i in 1:length(sorted_lst)\n        if i == length(sorted_lst)\n      \
    \      return nothing\n        end\n        if sorted_lst[i] != sorted_lst[i+1]\n\
    \            return sorted_lst[i+1]\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    lst = sort(lst)\n\
    \    for i in 2:length(lst)\n        if lst[i] != lst[i-1]\n            return\
    \ lst[i]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    m = minimum(lst)\n    lst = filter(x\
    \ -> x != m, lst)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcdglvy1u.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpcdglvy1u.jl:20\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpcdglvy1u.jl:30 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpcdglvy1u.jl:26\\ntest\
    \ set: Error During Test at /tmp/tmpcdglvy1u.jl:32\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    if next_smallest == smallest\n        return nothing\n    end\n  \
    \  return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqvi094j1.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqvi094j1.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqvi094j1.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqvi094j1.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ >= 3\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n         \
    \       return lst[1]\n            end\n            if lst[1] > lst[3]\n     \
    \           return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) >= 4\n        if lst[1] < lst[2]\n \
    \           if lst[1] < lst[3]\n                if lst[1] < lst[4]\n         \
    \           return lst[1]\n                end\n                if lst[1] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \         if lst[1] > lst[3]\n                if lst[3] < lst[4]\n           \
    \         return lst[3]\n                end\n                if lst[3] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \     end\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n      \
    \          if lst[2] < lst[4]\n                    return lst[2]\n           \
    \     end\n                if lst[2] > lst[4]\n                    return lst[\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehfhni6v.jl:1\nin expression starting at /tmp/tmpehfhni6v.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpodzgf9oc.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpodzgf9oc.jl:1\n\
    in expression starting at /tmp/tmpodzgf9oc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] > lst[2]\n            return lst[2]\n        end\n  \
    \      if lst[1] < lst[2]\n            return lst[1]\n        end\n    end\n \
    \   if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if l\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rfkil47.jl:1\nin expression starting at /tmp/tmp5rfkil47.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp012c79dd.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp012c79dd.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp012c79dd.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp012c79dd.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp012c79dd.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp012c79dd.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp012c79dd.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2] == lst[3]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 3\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 4\n        if lst[1] == lst[2] == lst[3] == lst[4] == lst[5]\n\
    \            return nothing\n        end\n    end\n    if length(lst) > 5\n  \
    \      if lst[1] == lst[2] == lst[3] == lst[4] == lst[5] == lst[6]\n         \
    \   return nothing\n        end\n    end\n    if length(lst) > 6\n        if lst[1]\
    \ == lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 7\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7] == lst[8]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 8\n        if\
    \ lst[1] == lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7] == lst[8]\
    \ == lst[9]\n            return nothing\n        end\n    end\n    if length\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2ukp9k3.jl:1\nin expression starting at /tmp/tmpu2ukp9k3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr2k1u4vm.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr2k1u4vm.jl:1\n\
    in expression starting at /tmp/tmpr2k1u4vm.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        for i in 1:length(lst)\n\
    \            if lst[i] < lst[i+1]\n                if lst[i] < lst[i+2]\n    \
    \                return lst[i]\n                end\n                if lst[i]\
    \ > lst[i+2]\n                    return lst[i+2]\n                end\n     \
    \       end\n            if lst[i] > lst[i+1]\n                if lst[i+1] < lst[i+2]\n\
    \                    return lst[i+1]\n                end\n                if\
    \ lst[i+1] > lst[i+2]\n                    return lst[i+2]\n                end\n\
    \            end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp3e4tf9hr.jl:78\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp3e4tf9hr.jl:78 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp3e4tf9hr.jl:77\\ntest set: Test\
    \ Failed at /tmp/tmp3e4tf9hr.jl:79\\n  Expression: candidate([5, 1, 4, 3, 2])\
    \ == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n [2] macro expansion\\n   @ /tmp/tmp3e4tf9hr.jl:79 [inlined]\\n\
    \ [3] macro expansion\\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n [4] top-level scope\\n   @ /tmp/tmp3e4tf9hr.jl:77\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1z52635q.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1z52635q.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1z52635q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1z52635q.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1z52635q.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1z52635q.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp1z52635q.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1z52635q.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1z52635q.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1z52635q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted = sort(lst)\n    if\
    \ sorted[1] == sorted[2]\n        return nothing\n    end\n    return sorted[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp8u27t65.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpp8u27t65.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpp8u27t65.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpp8u27t65.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpp8u27t65.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpp8u27t65.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpp8u27t65.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return minimum(lst)\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return next_smallest(lst[2:end])\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return minimum(lst[2:end])\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjfu1e_f.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjfu1e_f.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjfu1e_f.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmjfu1e_f.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjfu1e_f.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjfu1e_f.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpmjfu1e_f.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: -45 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmjfu1e_f.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmjfu1e_f.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjfu1e_f.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ykf9_hd.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ykf9_hd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ykf9_hd.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp4ykf9_hd.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ykf9_hd.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ykf9_hd.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp4ykf9_hd.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4ykf9_hd.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4ykf9_hd.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ykf9_hd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    s = sort(lst)\n    if s[1] == s[2]\n\
    \        return nothing\n    end\n    return s[2]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_idx\
    \ = findall(lst .== min_val)\n    lst = deleteat!(lst, min_val_idx)\n    return\
    \ minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk2pysnfn.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpk2pysnfn.jl:21\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpk2pysnfn.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpk2pysnfn.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmpk2pysnfn.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sorted = sort(lst)\n\
    \    for i in 2:length(sorted)\n        if sorted[i] != sorted[i-1]\n        \
    \    return sorted[i]\n        end\n    end\n    return nothing\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            for i in 3:length(lst)\n                if lst[i]\
    \ != lst[1]\n                    return lst[i]\n                end\n        \
    \    end\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7jym0qn.jl:55\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7jym0qn.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7jym0qn.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpx7jym0qn.jl:56\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7jym0qn.jl:56 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7jym0qn.jl:54\ntest set: Test\
    \ Failed at /tmp/tmpx7jym0qn.jl:59\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7jym0qn.jl:59 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7jym0qn.jl:54\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7jym0qn.jl:52\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min = lst[1]\n    min2 = lst[2]\n\
    \    for i in lst\n        if i < min\n            min2 = min\n            min\
    \ = i\n        end\n        if i < min2 && i > min\n            min2 = i\n   \
    \     end\n    end\n    if min2 == min\n        return nothing\n    end\n    return\
    \ min2\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_xlu0f5.jl:52\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_xlu0f5.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_xlu0f5.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpp_xlu0f5.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_xlu0f5.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_xlu0f5.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpp_xlu0f5.jl:57\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp_xlu0f5.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp_xlu0f5.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_xlu0f5.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_53d9w0e.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_53d9w0e.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_53d9w0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_53d9w0e.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_53d9w0e.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_53d9w0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_53d9w0e.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_53d9w0e.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_53d9w0e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_53d9w0e.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_53d9w0e.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_53d9w0e.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_53d9w0e.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2a5pzitz.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp2a5pzitz.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp2a5pzitz.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp2a5pzitz.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp2a5pzitz.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp2a5pzitz.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp2a5pzitz.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  min = lst[1]\n    min2 = lst[2]\n    for i in lst\n        if i < min\n   \
    \         min2 = min\n            min = i\n        end\n        if i > min &&\
    \ i < min2\n            min2 = i\n        end\n    end\n    return min2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7holab2_.jl:53\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7holab2_.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7holab2_.jl:48\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7holab2_.jl:46\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst = deleteat!(lst, min_idx)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqbfm_yrj.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n      @ Base ./reduce.jl:301\\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\\\
    n      @ Base ./reduce.jl:311\\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\\n      @ Base ./reduce.jl:345\\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\\n      @ Base ./reduce.jl:331\\n    [5]\
    \ reduce_empty_iter\\n      @ ./reduce.jl:357 [inlined]\\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\\n      @ Base\
    \ ./reduce.jl:353\\n    [7] _mapreduce\\n      @ ./reduce.jl:402 [inlined]\\n\
    \    [8] _mapreduce_dim\\n      @ ./reducedim.jl:330 [inlined]\\n    [9] #mapreduce#731\\\
    n      @ ./reducedim.jl:322 [inlined]\\n   [10] mapreduce\\n      @ ./reducedim.jl:322\
    \ [inlined]\\n   [11] #_minimum#753\\n      @ ./reducedim.jl:894 [inlined]\\n\
    \   [12] _minimum\\n      @ ./reducedim.jl:894 [inlined]\\n   [13] #_minimum#752\\\
    n      @ ./reducedim.jl:893 [inlined]\\n   [14] _minimum\\n      @ ./reducedim.jl:893\
    \ [inlined]\\n   [15] #minimum#750\\n      @ ./reducedim.jl:889 [inlined]\\n \
    \  [16] minimum\\n      @ ./reducedim.jl:889 [inlined]\\n   [17] next_smallest(lst::Vector{Int64})\\\
    n      @ Main /tmp/tmpqbfm_yrj.jl:21\\n   [18] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [19] macro expansion\\n      @ /tmp/tmpqbfm_yrj.jl:31 [inlined]\\\
    n   [20] macro expansion\\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [21] top-level scope\\n      @ /tmp/tmpqbfm_yrj.jl:27\\ntest\
    \ set: Error During Test at /tmp/tmpqbfm_yrj.jl:33\\n  Test threw exception\\\
    n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\\n  Stacktrace:\\n    [1] _empty_reduce_error()\\\
    n   "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkuj8fmj.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkuj8fmj.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkuj8fmj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkkuj8fmj.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkuj8fmj.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkuj8fmj.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkkuj8fmj.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkuj8fmj.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkuj8fmj.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkuj8fmj.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    if length(min_idx) == length(lst)\n        return\
    \ nothing\n    end\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp622m77ux.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp622m77ux.jl:23\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp622m77ux.jl:31 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp622m77ux.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp622m77ux.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp622m77ux.jl:23\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp622m77ux.jl:32 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7j2f4nji.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7j2f4nji.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7j2f4nji.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp7j2f4nji.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp7j2f4nji.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp7j2f4nji.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp7j2f4nji.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    if next_smallest == smallest\n        return nothing\n    end\n  \
    \  return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp75ktvytq.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp75ktvytq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp75ktvytq.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp75ktvytq.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min = lst[1]\n    second_min = lst[2]\n\
    \    for i in 3:length(lst)\n        if lst[i] < min\n            second_min =\
    \ min\n            min = lst[i]\n        elseif lst[i] < second_min\n        \
    \    second_min = lst[i]\n        end\n    end\n    return second_min\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7p3f5l0.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7p3f5l0.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7p3f5l0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe7p3f5l0.jl:38\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7p3f5l0.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7p3f5l0.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpe7p3f5l0.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe7p3f5l0.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe7p3f5l0.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7p3f5l0.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    lst = sort(lst)\n\
    \    for i in 2:length(lst)\n        if lst[i] != lst[i-1]\n            return\
    \ lst[i]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2xb6hzvn.jl:52\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xb6hzvn.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xb6hzvn.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2xb6hzvn.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xb6hzvn.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xb6hzvn.jl:50\ntest set: Test\
    \ Failed at /tmp/tmp2xb6hzvn.jl:57\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xb6hzvn.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xb6hzvn.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2xb6hzvn.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    if length(min_idx) == length(lst)\n        return\
    \ nothing\n    end\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwwld3fyl.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpwwld3fyl.jl:23\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpwwld3fyl.jl:31 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpwwld3fyl.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpwwld3fyl.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpwwld3fyl.jl:23\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpwwld3fyl.jl:32 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        smallest\
    \ = lst[1]\n        next_smallest = lst[2]\n    else\n        smallest = lst[2]\n\
    \        next_smallest = lst[1]\n    end\n    for i in 3:length(lst)\n       \
    \ if lst[i] < smallest\n            next_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < next_smallest\n            next_smallest =\
    \ lst[i]\n        end\n    end\n    return next_smallest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9erw5339.jl:43\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9erw5339.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9erw5339.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp9erw5339.jl:45\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9erw5339.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9erw5339.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9erw5339.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphkjkjzrh.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkjkjzrh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkjkjzrh.jl:46\ntest set: Test\
    \ Failed at /tmp/tmphkjkjzrh.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkjkjzrh.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkjkjzrh.jl:46\ntest set: Test\
    \ Failed at /tmp/tmphkjkjzrh.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphkjkjzrh.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphkjkjzrh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkjkjzrh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8kpxkdr2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8kpxkdr2.jl:1\n\
    in expression starting at /tmp/tmp8kpxkdr2.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        smallest\
    \ = lst[1]\n        next_smallest = lst[2]\n    else\n        smallest = lst[2]\n\
    \        next_smallest = lst[1]\n    end\n    for i in 3:length(lst)\n       \
    \ if lst[i] < smallest\n            next_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < next_smallest\n            next_smallest =\
    \ lst[i]\n        end\n    end\n    return next_smallest\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnh07nmdi.jl:43\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh07nmdi.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh07nmdi.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpnh07nmdi.jl:45\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnh07nmdi.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnh07nmdi.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnh07nmdi.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sort!(lst)\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4svmavmi.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp4svmavmi.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp4svmavmi.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp4svmavmi.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp4svmavmi.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp4svmavmi.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp4svmavmi.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_val = minimum(lst)\n \
    \   min_val_index = findall(x -> x == min_val, lst)\n    for i in min_val_index\n\
    \        deleteat!(lst, i)\n    end\n    return minimum(lst)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return nothing\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9pk_qo0.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9pk_qo0.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9pk_qo0.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpd9pk_qo0.jl:52\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9pk_qo0.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9pk_qo0.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpd9pk_qo0.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd9pk_qo0.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd9pk_qo0.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9pk_qo0.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpujjugzw4.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpujjugzw4.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpujjugzw4.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpujjugzw4.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpujjugzw4.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpujjugzw4.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpujjugzw4.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted_lst = sort(lst)\n \
    \   for i in 1:length(sorted_lst)\n        if i == length(sorted_lst)\n      \
    \      return nothing\n        end\n        if sorted_lst[i] != sorted_lst[i+1]\n\
    \            return sorted_lst[i+1]\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5])\
    \ == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    smallest =\
    \ lst[1]\n    second_smallest = lst[2]\n    for i in 3:length(lst)\n        if\
    \ lst[i] < smallest\n            second_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpava3wxfm.jl:41\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpava3wxfm.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpava3wxfm.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpava3wxfm.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    return\
    \ sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlfb0y8b.jl:29\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlfb0y8b.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlfb0y8b.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwlfb0y8b.jl:31\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlfb0y8b.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlfb0y8b.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlfb0y8b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    min_1 = lst[1]\n\
    \    min_2 = lst[2]\n    if min_1 > min_2\n        min_1, min_2 = min_2, min_1\n\
    \    end\n    for i in 3:length(lst)\n        if lst[i] < min_1\n            min_2\
    \ = min_1\n            min_1 = lst[i]\n        elseif lst[i] < min_2\n       \
    \     min_2 = lst[i]\n        end\n    end\n    return min_2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2] && lst[2] == lst[3]\n     \
    \       return nothing\n        end\n    end\n    if length(lst) > 3\n       \
    \ if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 4\n        if lst[1] ==\
    \ lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 5\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\
    \ && lst[5] == lst[6]\n            return nothing\n        end\n    end\n    if\
    \ length(lst) > 6\n        if lst[1] == lst[2] && lst[2] == lst[3] && lst[3] ==\
    \ lst[4] && lst[4] == lst[5] && lst[5] == lst[6] && lst[6] == lst[7]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 7\n        if\
    \ lst[1] == lst[2] && lst[2] == lst[3] && lst[3] == lst[4] && lst[4] == lst[5]\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1mpmvrn.jl:1\nin expression starting at /tmp/tmpg1mpmvrn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8nkc35k6.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp8nkc35k6.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp8nkc35k6.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmp8nkc35k6.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp8nkc35k6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmp8nkc35k6.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmp8nkc35k6.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            return lst[1]\n        end\n  \
    \      if lst[1] > lst[2]\n            return lst[2]\n        end\n        if\
    \ lst[1] == lst[2]\n            return next_smallest(lst[2:end])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpejpgt9jn.jl:51\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejpgt9jn.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejpgt9jn.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpejpgt9jn.jl:52\n  Expression: candidate([5, 1, 4, 3, 2]) ==\
    \ 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejpgt9jn.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejpgt9jn.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpejpgt9jn.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpejpgt9jn.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpejpgt9jn.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpejpgt9jn.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted = sort(lst)\n    if sorted[1]\
    \ == sorted[2]\n        return nothing\n    end\n    return sorted[2]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_value = minimum(lst)\n\
    \    min_index = findall(lst .== min_value)\n    lst = deleteat!(lst, min_index)\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyfg2optk.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyfg2optk.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpyfg2optk.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpyfg2optk.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpyfg2optk.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpyfg2optk.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpyfg2optk.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdh0syky4.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdh0syky4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdh0syky4.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpdh0syky4.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdh0syky4.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdh0syky4.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpdh0syky4.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdh0syky4.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdh0syky4.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdh0syky4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min = lst[1]\n    min2 = lst[2]\n\
    \    for i in 1:length(lst)\n        if lst[i] < min\n            min2 = min\n\
    \            min = lst[i]\n        end\n        if lst[i] < min2 && lst[i] > min\n\
    \            min2 = lst[i]\n        end\n    end\n    return min2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    min_val = minimum(lst)\n\
    \    min_idx = findall(lst .== min_val)\n    lst[min_idx] = maximum(lst)\n   \
    \ return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjemg68mw.jl:33\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpjemg68mw.jl:25\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpjemg68mw.jl:33 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmpjemg68mw.jl:32\\ntest set:\
    \ Error During Test at /tmp/tmpjemg68mw.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmpjemg68mw.jl:25\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmpjemg68mw.jl:34 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return lst[2]\n        end\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp34z3nqmh.jl:48\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34z3nqmh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34z3nqmh.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp34z3nqmh.jl:51\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34z3nqmh.jl:51 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34z3nqmh.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp34z3nqmh.jl:53\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp34z3nqmh.jl:53 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp34z3nqmh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp34z3nqmh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    return sort(lst)[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuimfvgss.jl:28\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuimfvgss.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuimfvgss.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpuimfvgss.jl:30\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuimfvgss.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuimfvgss.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuimfvgss.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted_lst = sort(lst)\n \
    \   if sorted_lst[1] == sorted_lst[2]\n        return nothing\n    end\n    return\
    \ sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    m = minimum(lst)\n    lst = filter(x\
    \ -> x > m, lst)\n    if length(lst) == 0\n        return nothing\n    end\n \
    \   return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findfirst(lst, min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sort!(lst)\n    for i in 2:length(lst)\n\
    \        if lst[i] != lst[i-1]\n            return lst[i]\n        end\n    end\n\
    \    return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min = lst[1]\n    min2 = lst[2]\n\
    \    for i in lst\n        if i < min\n            min2 = min\n            min\
    \ = i\n        end\n        if i < min2 && i > min\n            min2 = i\n   \
    \     end\n    end\n    if min2 == min\n        return nothing\n    end\n    return\
    \ min2\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    min_val = minimum(lst)\n\
    \    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst, min_idx)\n \
    \   return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in 3:length(lst)\n        if lst[i] < smallest\n       \
    \     next_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ lst[i] < next_smallest\n            next_smallest = lst[i]\n        end\n  \
    \  end\n    if next_smallest == smallest\n        return nothing\n    end\n  \
    \  return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjrfhhudf.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjrfhhudf.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjrfhhudf.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjrfhhudf.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_idx\
    \ = findall(lst .== min_val)\n    lst[min_val_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppedupqrq.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to possibly many locations is not supported;\
    \ perhaps use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\\n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmppedupqrq.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmppedupqrq.jl:28 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [9] top-level scope\\n     @ /tmp/tmppedupqrq.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmppedupqrq.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64)\\\
    n     @ Base ./indices.jl:261\\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\\n     @ Base ./multidimensional.jl:903\\\
    n   [3] _setindex!\\n     @ ./multidimensional.jl:894 [inlined]\\n   [4] setindex!\\\
    n     @ ./abstractarray.jl:1315 [inlined]\\n   [5] next_smallest(lst::Vector{Int64})\\\
    n     @ Main /tmp/tmppedupqrq.jl:20\\n   [6] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [7] macro expansion\\n     @ /tmp/tmppedupqrq.jl:29 [inlined]\\\
    n   [8] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    min_val = minimum(lst)\n \
    \   min_val_idx = findall(lst .== min_val)\n    lst = deleteat!(lst, min_val_idx)\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in lst[2:end]\n        if i < smallest\n            second_smallest\
    \ = smallest\n            smallest = i\n        elseif i < second_smallest ||\
    \ second_smallest == nothing\n            second_smallest = i\n        end\n \
    \   end\n    return second_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3cjfbyqm.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(::Real, !Matched::AbstractFloat) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\\
    n    isless(::Real, !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp3cjfbyqm.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp3cjfbyqm.jl:35 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp3cjfbyqm.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp3cjfbyqm.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([1, 1]) == nothing\\n  MethodError: no method matching isless(::Int64,\
    \ ::Nothing)\\n  Closest candidates are:\\n    isless(::Real, !Matched::AbstractFloat)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:185\\n    isless(::Real,\
    \ !Matched::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\\\
    n    isless(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:88\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Nothing)\\n     @ Base ./operators.jl:352\\\
    n   [2] next_smallest(lst::Vector{Int64})\\n     @ Main /tmp/tmp3cjfbyqm.jl:24\\\
    n   [3] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [4] macro expansion\\n     @ /tmp/tmp3cjfbyqm.jl:38 [inlined]\\\
    n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [6] top-level s"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    second_smallest\
    \ = nothing\n    for i in 2:length(lst)\n        if lst[i] < smallest\n      \
    \      second_smallest = smallest\n            smallest = lst[i]\n        elseif\
    \ second_smallest == nothing || lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo9l60q_3.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9l60q_3.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9l60q_3.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpo9l60q_3.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpo9l60q_3.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpo9l60q_3.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9l60q_3.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    smallest =\
    \ lst[1]\n    next_smallest = lst[2]\n    for i in 3:length(lst)\n        if lst[i]\
    \ < smallest\n            next_smallest = smallest\n            smallest = lst[i]\n\
    \        elseif lst[i] < next_smallest\n            next_smallest = lst[i]\n \
    \       end\n    end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgfzgz_t8.jl:41\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgfzgz_t8.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgfzgz_t8.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgfzgz_t8.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    lst = sort(lst)\n    if lst[1]\
    \ == lst[2]\n        return lst[3]\n    end\n    return lst[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu79f9h5u.jl:1\nin expression starting at /tmp/tmpu79f9h5u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    lst = sort(lst)\n    for i\
    \ in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n            return lst[i+1]\n\
    \        end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_idx\
    \ = findall(lst .== min_val)\n    lst = deleteat!(lst, min_val_idx)\n    return\
    \ minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2bczt7kz.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] next_smallest(lst::Vector{Int64})\n      @ Main /tmp/tmp2bczt7kz.jl:21\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmp2bczt7kz.jl:31 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmp2bczt7kz.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp2bczt7kz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 1]) == nothing\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] reduce_empty(op::Func"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bczt7kz.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_idx\
    \ = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzws7_ojv.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpzws7_ojv.jl:20\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzws7_ojv.jl:28 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpzws7_ojv.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpzws7_ojv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Int64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpzws7_ojv.jl:20\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpzws7_ojv.jl:29 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpzws7_ojv.jl:27\ntest"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzws7_ojv.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    if lst[1] <\
    \ lst[2]\n        return lst[2]\n    end\n    if lst[1] > lst[2]\n        return\
    \ lst[1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpke8m3za2.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpke8m3za2.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpke8m3za2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpke8m3za2.jl:39\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpke8m3za2.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpke8m3za2.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpke8m3za2.jl:41\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpke8m3za2.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpke8m3za2.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpke8m3za2.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    # your code here\n\
    \    if length(lst) < 2\n        return nothing\n    end\n    min = lst[1]\n \
    \   min2 = lst[2]\n    for i in lst\n        if i < min\n            min2 = min\n\
    \            min = i\n        elseif i < min2\n            min2 = i\n        end\n\
    \    end\n    if min == min2\n        return nothing\n    end\n    return min2\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaooh0rmx.jl:39\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: nothing == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaooh0rmx.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaooh0rmx.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     1      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaooh0rmx.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    min_val = minimum(lst)\n\
    \    min_idx = findall(lst .== min_val)\n    lst[min_idx] = Inf\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf3exn4x0.jl:33\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to possibly many locations is not supported; perhaps use\
    \ broadcasting `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64)\n     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf3exn4x0.jl:25\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpf3exn4x0.jl:33 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpf3exn4x0.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpf3exn4x0.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a\
    \ single value to possibly many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Float64, ::Int64)\n\
    \     @ Base ./indices.jl:261\n   [2] _unsafe_setindex!(#unused#::IndexLinear,\
    \ A::Vector{Int64}, x::Float64, I::Vector{Int64})\n     @ Base ./multidimensional.jl:903\n\
    \   [3] _setindex!\n     @ ./multidimensional.jl:894 [inlined]\n   [4] setindex!\n\
    \     @ ./abstractarray.jl:1315 [inlined]\n   [5] next_smallest(lst::Vector{Int64})\n\
    \     @ Main /tmp/tmpf3exn4x0.jl:25\n   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpf3exn4x0.jl:34 [inlined]\n\
    \   [8] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpf3exn4x0.jl"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3exn4x0.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if length(lst) == 2\n        if lst[1]\
    \ == lst[2]\n            return nothing\n        end\n    end\n    if lst[1] <\
    \ lst[2]\n        return lst[2]\n    end\n    for i in 2:length(lst)-1\n     \
    \   if lst[i] < lst[i+1] && lst[i] < lst[i-1]\n            return lst[i+1]\n \
    \       end\n    end\n    return nothing\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9n9i2btc.jl:39\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 4 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n9i2btc.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n9i2btc.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9n9i2btc.jl:42\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n9i2btc.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n9i2btc.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp9n9i2btc.jl:44\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n9i2btc.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n9i2btc.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9n9i2btc.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] != lst[2]\n            return min(lst)\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] != lst[2]\n \
    \           return min(lst)\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqm56jldl.jl:47\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching min(::Vector{Int64})\\n  Closest candidates are:\\n    min(::Any,\
    \ !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\\\
    n    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    ...\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpqm56jldl.jl:38\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm56jldl.jl:47 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm56jldl.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpqm56jldl.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate([5, 1, 4, 3, 2]) == 2\\n  MethodError: no method matching min(::Vector{Int64})\\\
    n  Closest candidates are:\\n    min(::Any, !Matched::Missing) at /shared/centos7/julia/1.7.3/share/julia/base/missing.jl:134\\\
    n    min(::Any, !Matched::Any) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:506\\\
    n    min(::Any, !Matched::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\\\
    n    ...\\n  Stacktrace:\\n   [1] next_smallest(lst::Vector{Int64})\\n     @ Main\
    \ /tmp/tmpqm56jldl.jl:38\\n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpqm56jldl.jl:48 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqm56jldl.jl:46\\ntest set:\
    \ Test Failed at /tmp/tmpqm56jldl.jl:51\\n  Expression: candidate([1,"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] == lst[2]\n            return nothing\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbgzaop6_.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbgzaop6_.jl:1\n\
    in expression starting at /tmp/tmpbgzaop6_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] < lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ > lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] < lst[2]\n            if lst[1] < lst[3]\n          \
    \      return lst[1]\n            end\n            if lst[1] > lst[3]\n      \
    \          return lst[3]\n            end\n        end\n        if lst[1] > lst[2]\n\
    \            if lst[2] < lst[3]\n                return lst[2]\n            end\n\
    \            if lst[2] > lst[3]\n                return lst[3]\n            end\n\
    \        end\n    end\n    if length(lst) > 3\n        if lst[1] < lst[2]\n  \
    \          if lst[1] < lst[3]\n                if lst[1] < lst[4]\n          \
    \          return lst[1]\n                end\n                if lst[1] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \         if lst[1] > lst[3]\n                if lst[3] < lst[4]\n           \
    \         return lst[3]\n                end\n                if lst[3] > lst[4]\n\
    \                    return lst[4]\n                end\n            end\n   \
    \     end\n        if lst[1] > lst[2]\n            if lst[2] < lst[3]\n      \
    \          if lst[2] < lst[4]\n                    return lst[2]\n           \
    \     end\n                if lst[2] > lst[4]\n                    return lst[\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpokffa3up.jl:1\nin expression starting at /tmp/tmpokffa3up.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    sorted_lst = sort(lst)\n    if sorted_lst[1]\
    \ == sorted_lst[2]\n        return nothing\n    end\n    return sorted_lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    if length(lst) == 2\n    \
    \    if lst[1] > lst[2]\n            return lst[1]\n        end\n        if lst[1]\
    \ < lst[2]\n            return lst[2]\n        end\n    end\n    if length(lst)\
    \ > 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \        if lst[1] > lst[2]\n            return lst[1]\n        end\n        if\
    \ lst[1] < lst[2]\n            return lst[2]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjzkoyaoy.jl:52\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzkoyaoy.jl:52 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzkoyaoy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjzkoyaoy.jl:55\n  Expression: candidate([1, 1, 1, 1, 0]) ==\
    \ 1\n   Evaluated: nothing == 1\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzkoyaoy.jl:55 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzkoyaoy.jl:50\ntest set: Test\
    \ Failed at /tmp/tmpjzkoyaoy.jl:57\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzkoyaoy.jl:57 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzkoyaoy.jl:50\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzkoyaoy.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ecja5__.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ecja5__.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ecja5__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ecja5__.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ecja5__.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ecja5__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ecja5__.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ecja5__.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ecja5__.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8ecja5__.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ecja5__.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ecja5__.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ecja5__.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    min_val = minimum(lst)\n    min_val_idx\
    \ = findall(lst .== min_val)\n    lst = deleteat!(lst, min_val_idx)\n    return\
    \ minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv436cfq5.jl:31\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n\
    \      @ Base ./reduce.jl:301\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:311\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:345\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(min)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:331\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:357 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:353\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:402 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:330 [inlined]\n    [9] #mapreduce#731\n      @ ./reducedim.jl:322\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:322 [inlined]\n   [11]\
    \ #_minimum#753\n      @ ./reducedim.jl:894 [inlined]\n   [12] _minimum\n    \
    \  @ ./reducedim.jl:894 [inlined]\n   [13] #_minimum#752\n      @ ./reducedim.jl:893\
    \ [inlined]\n   [14] _minimum\n      @ ./reducedim.jl:893 [inlined]\n   [15] #minimum#750\n\
    \      @ ./reducedim.jl:889 [inlined]\n   [16] minimum\n      @ ./reducedim.jl:889\
    \ [inlined]\n   [17] next_smallest(lst::Vector{Int64})\n      @ Main /tmp/tmpv436cfq5.jl:21\n\
    \   [18] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [19] macro expansion\n      @ /tmp/tmpv436cfq5.jl:31 [inlined]\n\
    \   [20] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [21] top-level scope\n      @ /tmp/tmpv436cfq5.jl:27\ntest set:\
    \ Error During Test at /tmp/tmpv436cfq5.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([1, 1]) == nothing\n  ArgumentError: reducing over an empty collection\
    \ is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n      @ Base ./reduce.jl:301\n\
    \    [2] reduce_empty(op::Func"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv436cfq5.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted = sort(lst)\n    if\
    \ sorted[1] == sorted[2]\n        return nothing\n    end\n    return sorted[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ == 0\n        return nothing\n    end\n    if length(lst) == 1\n        return\
    \ nothing\n    end\n    if length(lst) == 2\n        if lst[1] == lst[2]\n   \
    \         return nothing\n        end\n    end\n    sorted = sort(lst)\n    for\
    \ i in 1:length(sorted)-1\n        if sorted[i] != sorted[i+1]\n            return\
    \ sorted[i+1]\n        end\n    end\n    return nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    lst = sort(lst)\n    if lst[1] ==\
    \ lst[2]\n        return nothing\n    end\n    return lst[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    if lst[1] < lst[2]\n        return\
    \ lst[2]\n    else\n        return lst[1]\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzix8nuxw.jl:30\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzix8nuxw.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzix8nuxw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzix8nuxw.jl:32\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzix8nuxw.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzix8nuxw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzix8nuxw.jl:34\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzix8nuxw.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzix8nuxw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzix8nuxw.jl:35\n  Expression: candidate([-35, 34, 12, -45])\
    \ == -35\n   Evaluated: 34 == -35\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzix8nuxw.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzix8nuxw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzix8nuxw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a vector of integers.\n    Write a function\
    \ next_smallest() that returns the 2nd smallest element of the vector.\n    Return\
    \ nothing if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n\
    \    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n\
    \    nothing\n    >>> next_smallest([1, 1])\n    nothing\n    \"\"\"\nfunction\
    \ next_smallest(lst::Vector{Int64})::Union{Int64, Nothing} \n    if length(lst)\
    \ < 2\n        return nothing\n    end\n    smallest = lst[1]\n    next_smallest\
    \ = lst[2]\n    for i in lst[2:end]\n        if i < smallest\n            next_smallest\
    \ = smallest\n            smallest = i\n        elseif i < next_smallest\n   \
    \         next_smallest = i\n        end\n    end\n    return next_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn540lzhc.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn540lzhc.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn540lzhc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpn540lzhc.jl:40\n  Expression: candidate([1, 1]) == nothing\n\
    \   Evaluated: 1 == nothing\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn540lzhc.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn540lzhc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn540lzhc.jl:32\n"
  exit_code: 1
  status: SyntaxError
