name: HumanEval_145_order_by_points
language: jl
prompt: "\"\"\"\n    Write a function which sorts the given vector of integers\n \
  \   in ascending order according to the sum of their digits.\n    Note: if there\
  \ are several items with similar sum of their digits,\n    order them based on their\
  \ index in original vector.\n\n    For example:\n    >>> order_by_points([1, 11,\
  \ -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n\
  \    \"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if length(nums) == 0\n        return nums\n    end\n    sums =\
    \ [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\nend", "   \
    \ if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_points = []\n    for i in\
    \ 1:length(nums)\n        push!(nums_with_points, (nums[i], sum_digits(nums[i])))\n\
    \    end\n    sort!(nums_with_points, by = x -> x[2])\n    return [x[1] for x\
    \ in nums_with_points]\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # your code here\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return sortperm(sum(digits.(nums)),\
    \ 1:length(nums))\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # your code here\nend\n ", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return sortperm(sums)\n\
    end", "    return sortperm(sum(digits.(nums)), 1:length(nums))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\n    return nums\nend", "    if length(nums) == 0\n\
    \        return nums\n    end\n    nums_with_points = []\n    for i in 1:length(nums)\n\
    \        push!(nums_with_points, (nums[i], sum_of_digits(nums[i])))\n    end\n\
    \    sort!(nums_with_points, by = x -> x[2])\n    return [x[1] for x in nums_with_points]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    sums = [sum(digits(x)) for x in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # sort by sum of digits\n    # if sum\
    \ of digits is the same, sort by index\n    # if index is the same, sort by value\n\
    \    # sort!(nums, by = (x -> sum(digits(x)), x -> findall(nums .== x)[1], x ->\
    \ x))\n    sort!(nums, by = (x -> sum(digits(x)), x -> findall(nums .== x)[1],\
    \ x -> x))\nend", "    return sort(nums, by=x->(x, sum(digits(x))))\nend", " \
    \   if length(nums) == 0\n        return nums\n    end\n    sums = zeros(length(nums))\n\
    \    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n\
    \    return nums[sortperm(sums)]\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    sums = [sum(digits(nums[i])) for i in 1:length(nums)]\n   \
    \ sort!(sums)\n    ordered_nums = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n\
    \        ordered_nums[i] = nums[findfirst(sums, sum(digits(nums[i])))]\n     \
    \   sums[findfirst(sums, sum(digits(nums[i])))] = -1\n    end\n    return ordered_nums\n\
    end", "    return sortperm(sum(digits.(nums)), 1:length(nums))\nend", "    # TODO:\
    \ implement this function\n    return nums\nend", "    if length(nums) == 0\n\
    \        return nums\n    end\n    nums_with_sum = [sum(digits(nums[i])) for i\
    \ in 1:length(nums)]\n    nums_with_sum_and_index = [nums_with_sum[i] i for i\
    \ in 1:length(nums)]\n    sorted_nums_with_sum_and_index = sort(nums_with_sum_and_index,\
    \ by=x->x[1])\n    sorted_nums = [nums[sorted_nums_with_sum_and_index[i][2]] for\
    \ i in 1:length(nums)]\n    return sorted_nums\nend", "    # your code here\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code\
    \ here\nend", "    # your code here\n    return nums\nend", "    # your code here\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return sort(nums,\
    \ by=x->(x, sum(digits(x))))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = zeros(length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ []\n    end\n    sums = []\n    for i in nums\n        sum = 0\n        for\
    \ j in digits(i)\n            sum += j\n        end\n        push!(sums, sum)\n\
    \    end\n    sorted = sortperm(sums)\n    return nums[sorted]\nend", "    return\
    \ sort(nums, by=x->(x, sum(digits(x))))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    # YOUR CODE HERE\n    return nums\nend", "    return\
    \ sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    # TODO: implement\
    \ this function\n    return nums\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sortperm(sum(digits.(nums)), 1:length(nums))\nend", "    return\
    \ sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    inds = sortperm(sums)\n    return nums[inds]\nend", "    if isempty(nums)\n\
    \        return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    # sort\
    \ by sum of digits\n    nums = sort(nums, by=x->sum(digits(x)))\n    # sort by\
    \ index\n    nums = sort(nums, by=x->findall(nums, x)[1])\n    return nums\nend",
  "    if length(nums) == 0\n        return []\n    end\n    sums = []\n    for i\
    \ in nums\n        sum = 0\n        for j in digits(i)\n            sum += j\n\
    \        end\n        push!(sums, sum)\n    end\n    return sortperm(sums)\nend",
  "    # your code here\nend", "    if length(nums) == 0\n        return nums\n  \
    \  end\n    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    sums = [sum(digits(num)) for num in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # TODO: implement\
    \ me\n    return nums\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return nums[sortperm(sums)]\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_points = zeros(Int64, length(nums),\
    \ 2)\n    for i in 1:length(nums)\n        nums_with_points[i, 1] = nums[i]\n\
    \        nums_with_points[i, 2] = sum(digits(nums[i]))\n    end\n    sort!(nums_with_points,\
    \ by = x -> x[2])\n    return nums_with_points[:, 1]\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n\
    \    return nums[sortperm(sums)]\nend", "    nums_sorted = sort(nums, by = x ->\
    \ sum(digits(x)))\n    return nums_sorted\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your\
    \ code here\nend", "    return sort(nums, by = x -> sum(digits(x)), rev = false)\n\
    end", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    #\
    \ your code here\nend", "    if length(nums) == 0\n        return nums\n    end\n\
    \    sums = [sum(digits(n)) for n in nums]\n    return sortperm(sums)[nums]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by = x -> sum(digits(x)))\nend", "    if length(nums) == 0\n        return []\n\
    \    end\n    sums = [sum(digits(nums[i])) for i in 1:length(nums)]\n    return\
    \ sortperm(sums)[nums]\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = zeros(Int64, length(nums))\n    for i in 1:length(nums)\n\
    \        sums[i] = sum(digits(nums[i]))\n    end\n    return nums[sortperm(sums)]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # Your code\
    \ here\n    return nums\nend", "    sums = [sum(digits(num)) for num in nums]\n\
    \    return sortperm(sums, nums)\nend", "    # your code here\nend", "    return\
    \ sort(nums, by=x->(x, sum(digits(x))))\nend", "    if length(nums) == 0\n   \
    \     return nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n    return\
    \ nums[sortperm(sums)]\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = zeros(length(nums))\n    for\
    \ i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n    return\
    \ nums[sortperm(sums)]\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return sortperm(sums)[nums]\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    nums_with_sum = [(sum(digits(n)), n) for n in nums]\n    sorted_nums\
    \ = sort(nums_with_sum, by=x->x[1])\n    return [n[2] for n in sorted_nums]\n\
    end", "    # TODO: implement this function\n    return nums\nend", "    return\
    \ sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # TODO: implement\
    \ this function\n    return nums\nend", "    # TODO: implement this function\n\
    \    return sort(nums, by=x->sum(digits(x)))\nend", "    n = length(nums)\n  \
    \  if n == 0\n        return nums\n    end\n    sums = zeros(n)\n    for i in\
    \ 1:n\n        sums[i] = sum(digits(nums[i]))\n    end\n    inds = sortperm(sums)\n\
    \    return nums[inds]\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    # get the sum of digits of each element\
    \ in nums\n    sums = [sum(digits(n)) for n in nums]\n    # sort the sums\n  \
    \  sorted_sums = sort(sums)\n    # get the indices of the sorted sums\n    indices\
    \ = [findfirst(sums, sorted_sums[i]) for i in 1:length(sums)]\n    # sort nums\
    \ according to the indices\n    return [nums[i] for i in indices]\nend", "   \
    \ return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    # YOUR CODE\
    \ HERE\n    return nums\nend", "    if isempty(nums)\n        return []\n    end\n\
    \    nums_with_points = [(n, sum(digits(n))) for n in nums]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by=x -> x[2])\n    return [n for (n, _) in sorted_nums_with_points]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_sorted = sort(nums, by = x -> sum(digits(x)))\n\
    \    return nums_sorted\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend\n ", "    # your code here\nend", "  \
    \  if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return nums[sortperm(sums)]\nend", "    sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code here\n    return\
    \ nums\nend", "    if length(nums) == 0\n        return []\n    end\n    return\
    \ sort(nums, by = x -> (sum(digits(x)), x))\nend", "    return sort(nums, by =\
    \ x -> sum(digits(x)))\nend", "    # your code here\nend\n ", "    if length(nums)\
    \ == 0\n        return []\n    end\n    sums = [sum(digits(nums[i])) for i in\
    \ 1:length(nums)]\n    order = sortperm(sums)\n    return nums[order]\nend", " \
    \   # your code here\nend", "    if length(nums) == 0\n        return []\n   \
    \ end\n    sums = [sum(digits(x)) for x in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return nums[sortperm(sums)]\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    nums_with_sum = []\n    for i in 1:length(nums)\n       \
    \ push!(nums_with_sum, (nums[i], sum(digits(nums[i]))))\n    end\n    sort!(nums_with_sum,\
    \ by = x -> x[2])\n    return [nums_with_sum[i][1] for i in 1:length(nums_with_sum)]\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend",
  "    # your code here\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    # TODO: implement this function\n    return nums\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    nums_with_points = [(nums[i], sum(digits(nums[i])))\
    \ for i in 1:length(nums)]\n    sorted_nums_with_points = sort(nums_with_points,\
    \ by=x->x[2])\n    return [x[1] for x in sorted_nums_with_points]\nend", "   \
    \ if length(nums) == 0\n        return nums\n    end\n    return sort(nums, by\
    \ = x -> sum(digits(x)))\nend", "    # TODO: implement this function\n    return\
    \ nums\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\nend", " \
    \   # your code here\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    nums_with_sum = zeros(Int64,\
    \ length(nums))\n    for i in 1:length(nums)\n        nums_with_sum[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(nums_with_sum)]\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)),x))\nend", "    # sort by sum of digits\n    # if sum\
    \ of digits is the same, sort by index\n    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sortperm(sum(digits.(nums)), by=nums)\nend", "    return sort(nums, by = x ->\
    \ (sum(digits(x)), x))\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = []\n    for i in 1:length(nums)\n        points = 0\n        for j in 1:length(string(nums[i]))\n\
    \            points += parse(Int64, string(nums[i])[j])\n        end\n       \
    \ push!(nums_with_points, (nums[i], points, i))\n    end\n    sorted_nums = sort(nums_with_points,\
    \ by=x->(x[2], x[3]))\n    return [x[1] for x in sorted_nums]\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # TODO: implement this function\n\
    \    return nums\nend", "    # your code here\nend", "    return sort(nums, by=x->(x,\
    \ sum(digits(x))))\nend", "    if length(nums) == 0\n        return nums\n   \
    \ end\n    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    # your code here\nend", "    # sort by sum of digits\n    # if sum\
    \ of digits is the same, sort by index\n    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # TODO: implement the function\n\
    \    return nums\nend", "    # your code here\nend", "    if length(nums) == 0\n\
    \        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n   \
    \ indices = sortperm(sums)\n    return nums[indices]\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    # TODO:\
    \ implement this function\n    return sort(nums, by=x->sum(digits(x)))\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    sort!(sums,nums)\n    return nums\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your\
    \ code here\nend", "    sort(nums, by=x->(sum(digits(x)), findall(nums .== x)[1]))\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(Int64,\
    \ length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    # your code here\nend",
  "    # TODO: implement this function\n    return nums\nend", "    # your code here\n\
    end\n ", "    if length(nums) == 0\n        return nums\n    end\n    # sort by\
    \ sum of digits\n    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    # sort\
    \ by index\n    sorted_nums = sort(sorted_nums, by=x->findfirst(nums, x))\n  \
    \  return sorted_nums\nend", "    if length(nums) == 0\n        return []\n  \
    \  end\n    sums = [sum(digits(nums[i])) for i in 1:length(nums)]\n    return\
    \ sortperm(sums)[nums]\nend", "    if length(nums) == 0\n        return nums\n\
    \    end\n    sums = []\n    for i in nums\n        push!(sums, sum(digits(i)))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    # your code here\nend",
  "    if length(nums) == 0\n        return []\n    end\n    sums = []\n    for i\
    \ in nums\n        sum = 0\n        for j in digits(i)\n            sum += j\n\
    \        end\n        push!(sums, sum)\n    end\n    sort!(sums)\n    ordered\
    \ = []\n    for i in sums\n        for j in nums\n            if sum(digits(j))\
    \ == i\n                push!(ordered, j)\n                break\n           \
    \ end\n        end\n    end\n    return ordered\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n\
    \    return nums[sortperm(sums)]\nend", "    # your code here\nend", "    return\
    \ sort(nums, by = x -> sum(digits(x)))\nend", "    # your code here\nend", " \
    \   if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(n))\
    \ for n in nums]\n    return sortperm(sums)[nums]\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    return sortperm(sum.(digits.(nums)), 1:length(nums))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
