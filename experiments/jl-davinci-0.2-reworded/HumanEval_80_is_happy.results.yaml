name: HumanEval_80_is_happy
language: jl
results:
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i = 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    # check if the\
    \ string is at least 3 letters long\n    if length(s) < 3\n        return false\n\
    \    end\n    # check if the first 3 letters are distinct\n    if s[1] == s[2]\
    \ || s[1] == s[3] || s[2] == s[3]\n        return false\n    end\n    # check\
    \ if the rest of the letters are distinct\n    for i in 4:length(s)\n        if\
    \ s[i] == s[i-1] || s[i] == s[i-2] || s[i] == s[i-3]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4w856hv.jl:46\n  Expression: candidate(\"\
    iopaxpoi\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4w856hv.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4w856hv.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4w856hv.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i = 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i = 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)<3\n\
    \        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2]\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 3:length(s)\n        if s[i-2]\
    \ == s[i-1] || s[i-2] == s[i] || s[i-1] == s[i]\n            return false\n  \
    \      end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") ==\
    \ false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\") ==\
    \ false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\
    \t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\") == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    n = length(s)\n\
    \    if n < 3\n        return false\n    end\n    for i in 1:n-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)<3\n\
    \        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]==s[i+1]\
    \ || s[i]==s[i+2] || s[i+1]==s[i+2]\n            return false\n        end\n \
    \   end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = is_happy;\n\
    \t@test(candidate(\"a\") == false)\n\t@test(candidate(\"aa\") == false)\n\t@test(candidate(\"\
    abcd\") == true)\n\t@test(candidate(\"aabb\") == false)\n\t@test(candidate(\"\
    adb\") == true)\n\t@test(candidate(\"xyy\") == false)\n\t@test(candidate(\"iopaxpoi\"\
    ) == true)\n\t@test(candidate(\"iopaxioi\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a string s.\n    Your task is to check if the string\
    \ is hapjl or not.\n    A string is hapjl if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n\
    \    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n\
    \    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n\
    \    false\n    \"\"\"\nfunction is_happy(s::String)::Bool \n    if length(s)\
    \ < 3\n        return false\n    end\n    for i in 1:length(s)-2\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_happy;\n\t@test(candidate(\"a\") == false)\n\t@test(candidate(\"\
    aa\") == false)\n\t@test(candidate(\"abcd\") == true)\n\t@test(candidate(\"aabb\"\
    ) == false)\n\t@test(candidate(\"adb\") == true)\n\t@test(candidate(\"xyy\") ==\
    \ false)\n\t@test(candidate(\"iopaxpoi\") == true)\n\t@test(candidate(\"iopaxioi\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
