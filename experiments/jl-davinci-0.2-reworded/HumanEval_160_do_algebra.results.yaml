name: HumanEval_160_do_algebra
language: jl
results:
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz_ypdwot.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz_ypdwot.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz_ypdwot.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz_ypdwot.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_408bw0j.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_408bw0j.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_408bw0j.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_408bw0j.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7iuzp4_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx7iuzp4_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx7iuzp4_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7iuzp4_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplthf5lqv.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmplthf5lqv.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplthf5lqv.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplthf5lqv.jl:32\ntest set:\
    \ Error During Test at /tmp/tmplthf5lqv.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmplthf5lqv.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplthf5lqv.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplthf5lqv.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk2_eixvs.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk2_eixvs.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2_eixvs.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2_eixvs.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpk2_eixvs.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpk2_eixvs.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2_eixvs.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk2_eixvs.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgiy105zi.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgiy105zi.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgiy105zi.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgiy105zi.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp96ygx3bk.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp96ygx3bk.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp96ygx3bk.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96ygx3bk.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1a4eo4jq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a4eo4jq.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a4eo4jq.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1a4eo4jq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpg6vgkgpf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg6vgkgpf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg6vgkgpf.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg6vgkgpf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu2g8oo4n.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu2g8oo4n.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu2g8oo4n.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu2g8oo4n.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxlya75ev.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxlya75ev.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxlya75ev.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxlya75ev.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0246lse9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0246lse9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0246lse9.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0246lse9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsko4y25x.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsko4y25x.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsko4y25x.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpsko4y25x.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsko4y25x.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsko4y25x.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsko4y25x.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsko4y25x.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpae36px2q.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpae36px2q.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpae36px2q.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpae36px2q.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjjn62zyh.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjjn62zyh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjjn62zyh.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjn62zyh.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpb56iz1np.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb56iz1np.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb56iz1np.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb56iz1np.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn05ugs8f.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn05ugs8f.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn05ugs8f.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn05ugs8f.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaetz5ri7.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaetz5ri7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaetz5ri7.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaetz5ri7.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8tl4ush1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8tl4ush1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8tl4ush1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8tl4ush1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplwrnhddi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplwrnhddi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplwrnhddi.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwrnhddi.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = div(result, operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp32ygy26v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp32ygy26v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp32ygy26v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp32ygy26v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i = 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgiyb2kgs.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgiyb2kgs.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgiyb2kgs.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgiyb2kgs.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7o4x1n6i.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7o4x1n6i.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7o4x1n6i.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7o4x1n6i.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7o4x1n6i.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7o4x1n6i.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp7o4x1n6i.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7o4x1n6i.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7o4x1n6i.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o4x1n6i.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoty_h6ns.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoty_h6ns.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoty_h6ns.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoty_h6ns.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmproftkqu2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmproftkqu2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmproftkqu2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmproftkqu2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0cd1guxv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0cd1guxv.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0cd1guxv.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cd1guxv.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg9s6a_yw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg9s6a_yw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg9s6a_yw.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg9s6a_yw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = result ^ operand[i]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4_v7juhh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4_v7juhh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4_v7juhh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4_v7juhh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpph815l5n.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpph815l5n.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpph815l5n.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpph815l5n.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpccm38vzd.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpccm38vzd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpccm38vzd.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpccm38vzd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjyzpwvo4.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjyzpwvo4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjyzpwvo4.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyzpwvo4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwuick4y.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnwuick4y.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnwuick4y.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwuick4y.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkbmf86v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpkkbmf86v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpkkbmf86v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkbmf86v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3c_ft4gg.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3c_ft4gg.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3c_ft4gg.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3c_ft4gg.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvul708lc.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvul708lc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvul708lc.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvul708lc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc5yxoy8_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5yxoy8_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5yxoy8_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5yxoy8_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6w25qujr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6w25qujr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6w25qujr.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6w25qujr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2xsdy2s6.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2xsdy2s6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2xsdy2s6.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2xsdy2s6.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpza7y4a8_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpza7y4a8_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpza7y4a8_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpza7y4a8_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp30tc7jpc.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp30tc7jpc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp30tc7jpc.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30tc7jpc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptwurn4iw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptwurn4iw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptwurn4iw.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptwurn4iw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphl4fnqoh.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphl4fnqoh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphl4fnqoh.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphl4fnqoh.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpy156yn8v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy156yn8v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy156yn8v.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy156yn8v.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy156yn8v.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy156yn8v.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy156yn8v.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy156yn8v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqd1ycpdn.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqd1ycpdn.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqd1ycpdn.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqd1ycpdn.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq6oqs1rk.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpq6oqs1rk.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq6oqs1rk.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq6oqs1rk.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpq6oqs1rk.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpq6oqs1rk.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq6oqs1rk.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6oqs1rk.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmkccc_0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvmkccc_0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvmkccc_0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmkccc_0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpga_32mu7.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpga_32mu7.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpga_32mu7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpga_32mu7.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpga_32mu7.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpga_32mu7.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpga_32mu7.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpga_32mu7.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpga_32mu7.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpga_32mu7.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbrsup4c.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsbrsup4c.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsbrsup4c.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbrsup4c.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpoi2wadeb.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpoi2wadeb.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpoi2wadeb.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpoi2wadeb.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpoi2wadeb.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpoi2wadeb.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpoi2wadeb.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi2wadeb.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1wl5eyau.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wl5eyau.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wl5eyau.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1wl5eyau.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8ma9l34t.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ma9l34t.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ma9l34t.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ma9l34t.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppyjv6ly_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppyjv6ly_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppyjv6ly_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppyjv6ly_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp62opr3av.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp62opr3av.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp62opr3av.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp62opr3av.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp62opr3av.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp62opr3av.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp62opr3av.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62opr3av.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidyxh35j.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpidyxh35j.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpidyxh35j.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidyxh35j.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjb794u03.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjb794u03.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjb794u03.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpjb794u03.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpjb794u03.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpjb794u03.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpjb794u03.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjb794u03.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmgqflr_x.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmgqflr_x.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmgqflr_x.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmgqflr_x.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcfjrak3.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbcfjrak3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbcfjrak3.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcfjrak3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfcieo41l.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcieo41l.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcieo41l.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcieo41l.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcieo41l.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcieo41l.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfcieo41l.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfcieo41l.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfcieo41l.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcieo41l.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpamth8j8_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpamth8j8_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpamth8j8_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamth8j8_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpozn5_4bv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpozn5_4bv.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpozn5_4bv.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpozn5_4bv.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpozn5_4bv.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpozn5_4bv.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpozn5_4bv.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpozn5_4bv.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ul2d61a.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ul2d61a.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ul2d61a.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ul2d61a.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6j_nkuwh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6j_nkuwh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6j_nkuwh.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp6j_nkuwh.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp6j_nkuwh.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp6j_nkuwh.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp6j_nkuwh.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6j_nkuwh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdfvut2ga.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfvut2ga.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfvut2ga.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdfvut2ga.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfvut2ga.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfvut2ga.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdfvut2ga.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdfvut2ga.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdfvut2ga.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdfvut2ga.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjzx1dc7b.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjzx1dc7b.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjzx1dc7b.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjzx1dc7b.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcx4zx_bs.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcx4zx_bs.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcx4zx_bs.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcx4zx_bs.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk9bvdkga.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk9bvdkga.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk9bvdkga.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9bvdkga.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu1b7dbqt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu1b7dbqt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu1b7dbqt.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu1b7dbqt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpl5ffh_0k.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl5ffh_0k.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl5ffh_0k.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl5ffh_0k.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptj6r7ix1.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptj6r7ix1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptj6r7ix1.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptj6r7ix1.jl:32\ntest set:\
    \ Error During Test at /tmp/tmptj6r7ix1.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmptj6r7ix1.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptj6r7ix1.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptj6r7ix1.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpctn1t7e5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpctn1t7e5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpctn1t7e5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpctn1t7e5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgpg37tk.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxgpg37tk.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxgpg37tk.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgpg37tk.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp6i63yow.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp6i63yow.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp6i63yow.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpp6i63yow.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpp6i63yow.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpp6i63yow.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpp6i63yow.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6i63yow.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1sbjclq0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1sbjclq0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1sbjclq0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1sbjclq0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa1q8ffkj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa1q8ffkj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa1q8ffkj.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa1q8ffkj.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp61tqi1ld.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61tqi1ld.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61tqi1ld.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61tqi1ld.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl2bz2qic.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpl2bz2qic.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2bz2qic.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl2bz2qic.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpl2bz2qic.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpl2bz2qic.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl2bz2qic.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2bz2qic.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = div(result,\
    \ operand[i+1])\n        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmi4x8n1o.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpmi4x8n1o.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpmi4x8n1o.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmi4x8n1o.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfc0eujkw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfc0eujkw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfc0eujkw.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfc0eujkw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4eqzbsyy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4eqzbsyy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4eqzbsyy.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp4eqzbsyy.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp4eqzbsyy.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4eqzbsyy.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4eqzbsyy.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4eqzbsyy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptu6pb9i9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptu6pb9i9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptu6pb9i9.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptu6pb9i9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvdpw6of0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvdpw6of0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvdpw6of0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvdpw6of0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi83o7trh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi83o7trh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi83o7trh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi83o7trh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbyhqoq3l.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbyhqoq3l.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbyhqoq3l.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbyhqoq3l.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2_j1luyz.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_j1luyz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_j1luyz.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp2_j1luyz.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2_j1luyz.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2_j1luyz.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2_j1luyz.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_j1luyz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw80b6w5u.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw80b6w5u.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw80b6w5u.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw80b6w5u.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpup0717r8.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpup0717r8.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpup0717r8.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpup0717r8.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpup0717r8.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpup0717r8.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpup0717r8.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpup0717r8.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = floor(Int64, result^operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptrob5dly.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptrob5dly.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptrob5dly.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrob5dly.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmg1ju9i.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbmg1ju9i.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbmg1ju9i.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmg1ju9i.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwitcd2vt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwitcd2vt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwitcd2vt.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwitcd2vt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 2:length(operand)\n        if operator[i-1] == \"+\"\n         \
    \   result += operand[i]\n        elseif operator[i-1] == \"-\"\n            result\
    \ -= operand[i]\n        elseif operator[i-1] == \"*\"\n            result *=\
    \ operand[i]\n        elseif operator[i-1] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i])\n        elseif operator[i-1] == \"**\"\n            result\
    \ = floor(Int64, result ^ operand[i])\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7c_surr6.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7c_surr6.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7c_surr6.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7c_surr6.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbh8rv3sm.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbh8rv3sm.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbh8rv3sm.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbh8rv3sm.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz2pd_haj.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz2pd_haj.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz2pd_haj.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz2pd_haj.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxu84ac1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxu84ac1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxu84ac1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxu84ac1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuxxbhr10.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpuxxbhr10.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpuxxbhr10.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxxbhr10.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code goes here\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphdy9l7k7.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphdy9l7k7.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdy9l7k7.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphdy9l7k7.jl:32\ntest set:\
    \ Error During Test at /tmp/tmphdy9l7k7.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmphdy9l7k7.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphdy9l7k7.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphdy9l7k7.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwykrx1s3.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwykrx1s3.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwykrx1s3.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwykrx1s3.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsxjm1c3y.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsxjm1c3y.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsxjm1c3y.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpsxjm1c3y.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsxjm1c3y.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsxjm1c3y.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsxjm1c3y.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxjm1c3y.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9prxyrz1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9prxyrz1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9prxyrz1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9prxyrz1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = convert(Int64, result / operand[i+1])\n    \
    \    elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n      \
    \  end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsy52s4r0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsy52s4r0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsy52s4r0.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpsy52s4r0.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(2.3333333333333335)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:812 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpsy52s4r0.jl:35\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpsy52s4r0.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpsy52s4r0.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsy52s4r0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzxz1xvtt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzxz1xvtt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzxz1xvtt.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzxz1xvtt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38yw46tt.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp38yw46tt.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp38yw46tt.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38yw46tt.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpphxoqb8t.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphxoqb8t.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphxoqb8t.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpphxoqb8t.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphxoqb8t.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphxoqb8t.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpphxoqb8t.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpphxoqb8t.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpphxoqb8t.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpphxoqb8t.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxr2l5n8z.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxr2l5n8z.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxr2l5n8z.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxr2l5n8z.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjj193jrd.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjj193jrd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjj193jrd.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjj193jrd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0b7ki02j.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0b7ki02j.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0b7ki02j.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0b7ki02j.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpl84747_i.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpl84747_i.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpl84747_i.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpl84747_i.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpl84747_i.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpl84747_i.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpl84747_i.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl84747_i.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7zzxo8r.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpk7zzxo8r.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpk7zzxo8r.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7zzxo8r.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_33kjr3v.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_33kjr3v.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_33kjr3v.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_33kjr3v.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result = result ^ operand[i+1]\n        end\n    end\n \
    \   return result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\
    \t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zu6f7pd.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_zu6f7pd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_zu6f7pd.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp_zu6f7pd.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp_zu6f7pd.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp_zu6f7pd.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp_zu6f7pd.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zu6f7pd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result //= operand[i]\n        elseif operator[i-1] ==\
    \ \"**\"\n            result ^= operand[i]\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfsy3neij.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfsy3neij.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfsy3neij.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpfsy3neij.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfsy3neij.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpfsy3neij.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfsy3neij.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfsy3neij.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bj2zrp_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9bj2zrp_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9bj2zrp_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bj2zrp_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5s7wd186.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5s7wd186.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5s7wd186.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp5s7wd186.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp5s7wd186.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp5s7wd186.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp5s7wd186.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5s7wd186.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpko91ixw_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpko91ixw_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpko91ixw_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpko91ixw_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptuyj95ak.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptuyj95ak.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptuyj95ak.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptuyj95ak.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxz3tlwoh.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxz3tlwoh.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxz3tlwoh.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxz3tlwoh.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpy6rybfgi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy6rybfgi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy6rybfgi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpy6rybfgi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpy6rybfgi.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpy6rybfgi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpy6rybfgi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy6rybfgi.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxjlgcw9u.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxjlgcw9u.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxjlgcw9u.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjlgcw9u.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppz48lyw4.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppz48lyw4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppz48lyw4.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppz48lyw4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpszv3_vvo.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpszv3_vvo.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpszv3_vvo.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpszv3_vvo.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpszv3_vvo.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpszv3_vvo.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpszv3_vvo.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszv3_vvo.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2d5_54j8.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2d5_54j8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2d5_54j8.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2d5_54j8.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code goes here\n    return 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9n3rzga4.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n3rzga4.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n3rzga4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9n3rzga4.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n3rzga4.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n3rzga4.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp9n3rzga4.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9n3rzga4.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9n3rzga4.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9n3rzga4.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0j3lhxro.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0j3lhxro.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0j3lhxro.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j3lhxro.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpysjwnb98.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpysjwnb98.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpysjwnb98.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpysjwnb98.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = result ^ operand[i]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpucdsqop1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpucdsqop1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpucdsqop1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpucdsqop1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9wf_447p.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp9wf_447p.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp9wf_447p.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wf_447p.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpupafrlk8.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpupafrlk8.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpupafrlk8.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpupafrlk8.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpupafrlk8.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpupafrlk8.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpupafrlk8.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupafrlk8.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1gsvs6nw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1gsvs6nw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1gsvs6nw.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1gsvs6nw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgivbadts.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpgivbadts.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpgivbadts.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgivbadts.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprc74y_pm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprc74y_pm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprc74y_pm.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprc74y_pm.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6yxi80ca.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6yxi80ca.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6yxi80ca.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6yxi80ca.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpigpsghjw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpigpsghjw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpigpsghjw.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpigpsghjw.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpigpsghjw.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpigpsghjw.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpigpsghjw.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpigpsghjw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0mk_gi2n.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mk_gi2n.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mk_gi2n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0mk_gi2n.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mk_gi2n.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mk_gi2n.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp0mk_gi2n.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0mk_gi2n.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0mk_gi2n.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mk_gi2n.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ziwj94_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8ziwj94_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8ziwj94_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ziwj94_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptry2_m5i.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptry2_m5i.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptry2_m5i.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptry2_m5i.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8yynj97u.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8yynj97u.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8yynj97u.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8yynj97u.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5qgqd2ed.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5qgqd2ed.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5qgqd2ed.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qgqd2ed.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpviame8sw.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpviame8sw.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpviame8sw.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpviame8sw.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnzs8vmya.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnzs8vmya.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnzs8vmya.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnzs8vmya.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result //= operand[i+1]\n\
    \        elseif operator[i] == \"**\"\n            result ^= operand[i+1]\n  \
    \      end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2bpl4s65.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2bpl4s65.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2bpl4s65.jl:47\ntest set: Error\
    \ During Test at /tmp/tmp2bpl4s65.jl:50\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp2bpl4s65.jl:41\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp2bpl4s65.jl:50 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp2bpl4s65.jl:47\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bpl4s65.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr6wf6ek4.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr6wf6ek4.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr6wf6ek4.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpr6wf6ek4.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpr6wf6ek4.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpr6wf6ek4.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpr6wf6ek4.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6wf6ek4.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = floor(Int64, result ^ operand[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5sa8kd6c.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5sa8kd6c.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5sa8kd6c.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5sa8kd6c.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjihjl8zc.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpjihjl8zc.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpjihjl8zc.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjihjl8zc.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpebwfia0g.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpebwfia0g.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpebwfia0g.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebwfia0g.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd_z1usq4.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd_z1usq4.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd_z1usq4.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_z1usq4.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpou47mhaq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpou47mhaq.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpou47mhaq.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpou47mhaq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsqo5ihfo.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsqo5ihfo.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsqo5ihfo.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqo5ihfo.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd48ah2yy.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd48ah2yy.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd48ah2yy.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpd48ah2yy.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpd48ah2yy.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpd48ah2yy.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpd48ah2yy.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd48ah2yy.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = floor(Int64, result ^ operand[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprr078h1g.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprr078h1g.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprr078h1g.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprr078h1g.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp831crn93.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp831crn93.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp831crn93.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp831crn93.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu7nqwetu.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu7nqwetu.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu7nqwetu.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7nqwetu.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn4e4usi_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpn4e4usi_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpn4e4usi_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn4e4usi_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyqqp_5vr.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyqqp_5vr.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyqqp_5vr.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyqqp_5vr.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7thihlg.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpp7thihlg.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpp7thihlg.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7thihlg.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_x544ogf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_x544ogf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_x544ogf.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_x544ogf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8qq_6yvq.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8qq_6yvq.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8qq_6yvq.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qq_6yvq.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpumw2fbxf.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpumw2fbxf.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpumw2fbxf.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumw2fbxf.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1jwrclb5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1jwrclb5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1jwrclb5.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp1jwrclb5.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp1jwrclb5.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp1jwrclb5.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp1jwrclb5.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jwrclb5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result / operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd29dxw6k.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpd29dxw6k.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpd29dxw6k.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd29dxw6k.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbr0k8jfd.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbr0k8jfd.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbr0k8jfd.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbr0k8jfd.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5bmeikv.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5bmeikv.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5bmeikv.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5bmeikv.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp31asv7dh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp31asv7dh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp31asv7dh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp31asv7dh.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qvwb0y6.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3qvwb0y6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3qvwb0y6.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qvwb0y6.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4jxschbt.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jxschbt.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jxschbt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4jxschbt.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jxschbt.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jxschbt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp4jxschbt.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jxschbt.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jxschbt.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4jxschbt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp67l166yi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp67l166yi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp67l166yi.jl:46\ntest set: Error\
    \ During Test at /tmp/tmp67l166yi.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp67l166yi.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp67l166yi.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp67l166yi.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67l166yi.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6k_u78ue.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6k_u78ue.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6k_u78ue.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k_u78ue.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphrabrlzp.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphrabrlzp.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphrabrlzp.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrabrlzp.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzbw194ad.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzbw194ad.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzbw194ad.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzbw194ad.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = floor(Int64, result ^ operand[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdriwsdi.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzdriwsdi.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzdriwsdi.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdriwsdi.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = result \xF7 operand[i+1]\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdu3wbz4_.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpdu3wbz4_.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpdu3wbz4_.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdu3wbz4_.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfuhfd7t_.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuhfd7t_.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuhfd7t_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfuhfd7t_.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuhfd7t_.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuhfd7t_.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfuhfd7t_.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfuhfd7t_.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfuhfd7t_.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfuhfd7t_.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfdzuj6yf.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfdzuj6yf.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfdzuj6yf.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpfdzuj6yf.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpfdzuj6yf.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpfdzuj6yf.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpfdzuj6yf.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdzuj6yf.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpybe5310k.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpybe5310k.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpybe5310k.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpybe5310k.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7i4own2u.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7i4own2u.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7i4own2u.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7i4own2u.jl:32\ntest set:\
    \ Error During Test at /tmp/tmp7i4own2u.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmp7i4own2u.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7i4own2u.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7i4own2u.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = result ^ operand[i]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwlxdtp3c.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwlxdtp3c.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwlxdtp3c.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwlxdtp3c.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpub87vsn2.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpub87vsn2.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpub87vsn2.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpub87vsn2.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptv_gpktm.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptv_gpktm.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptv_gpktm.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv_gpktm.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnm3w4yld.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm3w4yld.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm3w4yld.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnm3w4yld.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm3w4yld.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm3w4yld.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpnm3w4yld.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnm3w4yld.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnm3w4yld.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnm3w4yld.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_epqlbp.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa_epqlbp.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa_epqlbp.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_epqlbp.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8jgnq1p0.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jgnq1p0.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jgnq1p0.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jgnq1p0.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_90vmh6.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu_90vmh6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu_90vmh6.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_90vmh6.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i])\n        elseif\
    \ operator[i-1] == \"**\"\n            result = floor(Int64, result ^ operand[i])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp87xfp1xu.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp87xfp1xu.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp87xfp1xu.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87xfp1xu.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = div(result, operand[i+1])\n        elseif operator[i]\
    \ == \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphyiqzxyz.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphyiqzxyz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphyiqzxyz.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyiqzxyz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp853yngnn.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp853yngnn.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp853yngnn.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp853yngnn.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6egrnoco.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6egrnoco.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6egrnoco.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6egrnoco.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6fgqeaa1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp6fgqeaa1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp6fgqeaa1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6fgqeaa1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result //= operand[i+1]\n        elseif operator[i] ==\
    \ \"**\"\n            result ^= operand[i+1]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpw6kld9zs.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw6kld9zs.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw6kld9zs.jl:46\ntest set: Error\
    \ During Test at /tmp/tmpw6kld9zs.jl:49\n  Test threw exception\n  Expression:\
    \ candidate([\"//\", \"*\"], [7, 3, 4]) == 8\n  InexactError: Int64(28//3)\n \
    \ Stacktrace:\n   [1] Integer\n     @ ./rational.jl:110 [inlined]\n   [2] convert\n\
    \     @ ./number.jl:7 [inlined]\n   [3] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpw6kld9zs.jl:40\n   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpw6kld9zs.jl:49 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpw6kld9zs.jl:46\nTest Summary:\
    \ | Pass  Fail  Error  Total\ntest set      |    1     1      1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6kld9zs.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\n    result = operand[1]\n\
    \    for i in 1:length(operator)\n        if operator[i] == \"+\"\n          \
    \  result += operand[i+1]\n        elseif operator[i] == \"-\"\n            result\
    \ -= operand[i+1]\n        elseif operator[i] == \"*\"\n            result *=\
    \ operand[i+1]\n        elseif operator[i] == \"//\"\n            result = floor(Int64,\
    \ result/operand[i+1])\n        elseif operator[i] == \"**\"\n            result\
    \ = result^operand[i+1]\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\"\
    , \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3,\
    \ 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0iwldrkb.jl:49\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0iwldrkb.jl:49 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0iwldrkb.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iwldrkb.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 2:length(operand)\n\
    \        if operator[i-1] == \"+\"\n            result += operand[i]\n       \
    \ elseif operator[i-1] == \"-\"\n            result -= operand[i]\n        elseif\
    \ operator[i-1] == \"*\"\n            result *= operand[i]\n        elseif operator[i-1]\
    \ == \"//\"\n            result = div(result, operand[i])\n        elseif operator[i-1]\
    \ == \"**\"\n            result ^= operand[i]\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyjqjbhd7.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpyjqjbhd7.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpyjqjbhd7.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjqjbhd7.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"],\
    \ [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5])\
    \ == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpquqxpy3d.jl:33\n  Test threw exception\n\
    \  Expression: candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpquqxpy3d.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquqxpy3d.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpquqxpy3d.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpquqxpy3d.jl:34\n  Test threw exception\n  Expression:\
    \ candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/number.jl:7\n\
    \    convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at /shared/centos7/julia/1.7.3/share/julia/base/twiceprecision.jl:262\n\
    \    ...\n  Stacktrace:\n   [1] do_algebra(operator::Vector{String}, operand::Vector{Int64})\n\
    \     @ Main /tmp/tmpquqxpy3d.jl:27\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpquqxpy3d.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/cento"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquqxpy3d.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ecjcbmz.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ecjcbmz.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ecjcbmz.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ecjcbmz.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp8jb0th03.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jb0th03.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jb0th03.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8jb0th03.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jb0th03.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jb0th03.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp8jb0th03.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8jb0th03.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8jb0th03.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jb0th03.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83xqs4g5.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp83xqs4g5.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp83xqs4g5.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83xqs4g5.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5lm5e34.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr5lm5e34.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr5lm5e34.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5lm5e34.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphptwg38d.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphptwg38d.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphptwg38d.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphptwg38d.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprodoy3x9.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprodoy3x9.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprodoy3x9.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprodoy3x9.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result/operand[i+1])\n        elseif\
    \ operator[i] == \"**\"\n            result = result^operand[i+1]\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\
    \t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpusa1u8zx.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpusa1u8zx.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpusa1u8zx.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusa1u8zx.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    # Your code here\n    return 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = do_algebra;\n\t@test(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]) == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"//\", \"*\"], [7, 3, 4]) == 8)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpbjie3csr.jl:34\n  Expression: candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]) == 37\n   Evaluated: 0 == 37\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjie3csr.jl:34 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjie3csr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbjie3csr.jl:35\n  Expression: candidate([\"+\", \"*\", \"\
    -\"], [2, 3, 4, 5]) == 9\n   Evaluated: 0 == 9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjie3csr.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjie3csr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbjie3csr.jl:36\n  Expression: candidate([\"//\", \"*\"], [7,\
    \ 3, 4]) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpbjie3csr.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpbjie3csr.jl:33\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjie3csr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = floor(Int64, result ^ operand[i+1])\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfvd6og83.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfvd6og83.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfvd6og83.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvd6og83.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputi1l6x1.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmputi1l6x1.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmputi1l6x1.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputi1l6x1.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given two vectors operator, and operand. The first vector\
    \ has basic algebra operations, and \n    the second vector is a vector of integers.\
    \ Use the two given vectors to build the algebric \n    expression and return\
    \ the evaluation of this expression.\n\n    The basic algebra operations:\n  \
    \  Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor\
    \ division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+',\
    \ '*', '-']\n    vector = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result\
    \ = 9\n\n    Note:\n        The length of operator vector is equal to the length\
    \ of operand vector minus one.\n        Operand is a vector of of non-negative\
    \ integers.\n        Operator vector has at least one operator, and operand vector\
    \ has at least two operands.\n\n    \"\"\"\nfunction do_algebra(operator::Vector{String},\
    \ operand::Vector{Int64})::Int64 \n    result = operand[1]\n    for i in 1:length(operator)\n\
    \        if operator[i] == \"+\"\n            result += operand[i+1]\n       \
    \ elseif operator[i] == \"-\"\n            result -= operand[i+1]\n        elseif\
    \ operator[i] == \"*\"\n            result *= operand[i+1]\n        elseif operator[i]\
    \ == \"//\"\n            result = floor(Int64, result / operand[i+1])\n      \
    \  elseif operator[i] == \"**\"\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend\nusing Test\n\n@testset begin\n\n\
    candidate = do_algebra;\n\t@test(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5])\
    \ == 37)\n\t@test(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) == 9)\n\t@test(candidate([\"\
    //\", \"*\"], [7, 3, 4]) == 8)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqkv6opuh.jl:48\n  Expression: candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]) == 9\n   Evaluated: 15 == 9\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqkv6opuh.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqkv6opuh.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     1      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqkv6opuh.jl:44\n"
  exit_code: 1
  status: SyntaxError
