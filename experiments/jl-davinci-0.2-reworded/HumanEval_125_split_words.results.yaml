name: HumanEval_125_split_words
language: jl
results:
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbdc10rlb.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpbdc10rlb.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbdc10rlb.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbdc10rlb.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpbdc10rlb.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpbdc10rlb.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpbdc10rlb.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpbdc10rlb.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpbdc10rlb.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe94ocwuk.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpe94ocwuk.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe94ocwuk.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe94ocwuk.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpe94ocwuk.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpe94ocwuk.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpe94ocwuk.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpe94ocwuk.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpe94ocwuk.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(i) for i in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc5_d8khz.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpc5_d8khz.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc5_d8khz.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc5_d8khz.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpc5_d8khz.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpc5_d8khz.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpc5_d8khz.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpc5_d8khz.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpc5_d8khz.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4c74s5ca.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp4c74s5ca.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4c74s5ca.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4c74s5ca.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4c74s5ca.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4c74s5ca.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4c74s5ca.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4c74s5ca.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4c74s5ca.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4c74s5ca.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvb0ft_x9.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvb0ft_x9.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvb0ft_x9.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvb0ft_x9.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpvb0ft_x9.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpvb0ft_x9.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpvb0ft_x9.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpvb0ft_x9.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpvb0ft_x9.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # YOUR CODE HERE\n    if contains(txt, \" \")\n        return split(txt,\
    \ \" \")\n    elseif contains(txt, \",\")\n        return split(txt, \",\")\n\
    \    else\n        return sum(isodd.(collect(txt)))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1zjf3eqi.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1zjf3eqi.jl:16\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1zjf3eqi.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zjf3eqi.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp1zjf3eqi.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1zjf3eqi.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1zjf3eqi.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1zjf3eqi.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp1zjf3eqi.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphqt128oy.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphqt128oy.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphqt128oy.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphqt128oy.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmphqt128oy.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphqt128oy.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphqt128oy.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphqt128oy.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmphqt128oy.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt)\n    elseif ',' in txt\n\
    \        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c) for\
    \ c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpep8ml_a2.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpep8ml_a2.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpep8ml_a2.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpep8ml_a2.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpep8ml_a2.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpep8ml_a2.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpep8ml_a2.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpep8ml_a2.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpep8ml_a2.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') != nothing\n        return split(txt, '\
    \ ')\n    elseif findfirst(txt, ',') != nothing\n        return split(txt, ',')\n\
    \    else\n        return sum(isodd.(lowercase(txt) .- 'a'))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbs8327bk.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbs8327bk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbs8327bk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbs8327bk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbs8327bk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbs8327bk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbs8327bk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbs8327bk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbs8327bk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbs8327bk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(occursin(i, txt) for i in 'abcdefghijklmnopqrstuvwxyz'[1:2:end])\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpp6ugs7qe.jl:19\nin expression\
    \ starting at /tmp/tmpp6ugs7qe.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_1fed5at.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_1fed5at.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_1fed5at.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_1fed5at.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_1fed5at.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp_1fed5at.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp_1fed5at.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp_1fed5at.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_1fed5at.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg84uq_4r.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpg84uq_4r.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg84uq_4r.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg84uq_4r.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpg84uq_4r.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpg84uq_4r.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpg84uq_4r.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpg84uq_4r.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpg84uq_4r.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnseosh5d.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnseosh5d.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnseosh5d.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnseosh5d.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpnseosh5d.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnseosh5d.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnseosh5d.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnseosh5d.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpnseosh5d.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt)\n        if !occursin(\",\", txt)\n  \
    \          return count(x -> x % 2 == 1, [ord(x) - ord('a') for x in txt])\n \
    \       else\n            return split(txt, \",\")\n        end\n    else\n  \
    \      return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx1h5ecbx.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpx1h5ecbx.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx1h5ecbx.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx1h5ecbx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpx1h5ecbx.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpx1h5ecbx.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpx1h5ecbx.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpx1h5ecbx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpx1h5ecbx.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count_odd_letters(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphawlntgn.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphawlntgn.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphawlntgn.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphawlntgn.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmphawlntgn.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmphawlntgn.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmphawlntgn.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmphawlntgn.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmphawlntgn.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(occursin('a':'z', txt)[1:2:end])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj2is2zpa.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpj2is2zpa.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj2is2zpa.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj2is2zpa.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpj2is2zpa.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpj2is2zpa.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpj2is2zpa.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpj2is2zpa.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpj2is2zpa.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(i) - ord('a') for i in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9rzmpjvi.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp9rzmpjvi.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9rzmpjvi.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9rzmpjvi.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp9rzmpjvi.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp9rzmpjvi.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp9rzmpjvi.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp9rzmpjvi.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp9rzmpjvi.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif occursin(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbmaxhlgg.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  UndefVarError: ord not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(i::Char)\\\
    n     @ Main ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\\
    n   [3] collect(itr::Base.Generator{String, var\"#1#2\"})\\n     @ Base ./array.jl:724\\\
    n   [4] split_words(txt::String)\\n     @ Main /tmp/tmpbmaxhlgg.jl:19\\n   [5]\
    \ macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpbmaxhlgg.jl:27 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpbmaxhlgg.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpbmaxhlgg.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  UndefVarError: ord\
    \ not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(i::Char)\\n     @ Main\
    \ ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] split_words(txt::String)\\\
    n     @ Main /tmp/tmpbmaxhlgg.jl:19\\n   [5] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [6] macro expansion\\n     @ /tmp/tmpbmaxhlgg.jl:28 [inlined]\\\
    n   [7] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmpbmaxhlgg.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpbmaxhlgg.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  UndefVarError:\
    \ ord not defined\\n  Stacktrace:\\n   [1] (::var\"#1#2\")(i::Char)\\n     @ Main\
    \ ./none:0\\n   [2] iterate\\n     @ ./generator.jl:47 [inlined]\\n   [3] collect(itr::Base.Generator{String,\
    \ var\"#1#2\"})\\n     @ Base ./array.jl:724\\n   [4] split_words(txt::String)\\\
    n     @ Main /tmp/tmpbmaxhlgg"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwgpdc71d.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwgpdc71d.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwgpdc71d.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwgpdc71d.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpwgpdc71d.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpwgpdc71d.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpwgpdc71d.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwgpdc71d.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpwgpdc71d.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1sjn4npf.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1sjn4npf.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1sjn4npf.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1sjn4npf.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp1sjn4npf.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1sjn4npf.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1sjn4npf.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1sjn4npf.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp1sjn4npf.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq4cgqggl.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpq4cgqggl.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq4cgqggl.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq4cgqggl.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpq4cgqggl.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpq4cgqggl.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpq4cgqggl.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpq4cgqggl.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpq4cgqggl.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        count\
    \ = 0\n        for i in 1:length(txt)\n            if islower(txt[i]) && i % 2\
    \ == 1\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi5cp4j2w.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi5cp4j2w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5cp4j2w.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5cp4j2w.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi5cp4j2w.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpi5cp4j2w.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi5cp4j2w.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi5cp4j2w.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpi5cp4j2w.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5cp4j2w.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxn_v9u3h.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxn_v9u3h.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxn_v9u3h.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxn_v9u3h.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpxn_v9u3h.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpxn_v9u3h.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpxn_v9u3h.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxn_v9u3h.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpxn_v9u3h.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm1ba6qmn.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpm1ba6qmn.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm1ba6qmn.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm1ba6qmn.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpm1ba6qmn.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpm1ba6qmn.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpm1ba6qmn.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpm1ba6qmn.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpm1ba6qmn.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmn859040.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmn859040.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmn859040.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmn859040.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmn859040.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmn859040.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmn859040.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmn859040.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmn859040.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmn859040.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaoj8bvny.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaoj8bvny.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaoj8bvny.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaoj8bvny.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaoj8bvny.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaoj8bvny.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaoj8bvny.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaoj8bvny.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaoj8bvny.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaoj8bvny.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj3zbrh4i.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj3zbrh4i.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3zbrh4i.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3zbrh4i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj3zbrh4i.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj3zbrh4i.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj3zbrh4i.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj3zbrh4i.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj3zbrh4i.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3zbrh4i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfxul_efp.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfxul_efp.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxul_efp.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxul_efp.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfxul_efp.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfxul_efp.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfxul_efp.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxul_efp.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfxul_efp.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxul_efp.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeb33ut4d.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpeb33ut4d.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeb33ut4d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeb33ut4d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeb33ut4d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeb33ut4d.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeb33ut4d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeb33ut4d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeb33ut4d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb33ut4d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu8eo9rqf.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu8eo9rqf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8eo9rqf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8eo9rqf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpu8eo9rqf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu8eo9rqf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu8eo9rqf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu8eo9rqf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpu8eo9rqf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu8eo9rqf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmr25te7v.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmr25te7v.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmr25te7v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmr25te7v.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmr25te7v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmr25te7v.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmr25te7v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmr25te7v.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmr25te7v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmr25te7v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp222t6ilh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp222t6ilh.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp222t6ilh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp222t6ilh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp222t6ilh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp222t6ilh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp222t6ilh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp222t6ilh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp222t6ilh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp222t6ilh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdm2bt18_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdm2bt18_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdm2bt18_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdm2bt18_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdm2bt18_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdm2bt18_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdm2bt18_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdm2bt18_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdm2bt18_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdm2bt18_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq_xmmbpj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpq_xmmbpj.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_xmmbpj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_xmmbpj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_xmmbpj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpq_xmmbpj.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq_xmmbpj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq_xmmbpj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpq_xmmbpj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_xmmbpj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(occursin.(r\"\\p{Ll}\", txt))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdc4x2rl5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdc4x2rl5.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdc4x2rl5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdc4x2rl5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdc4x2rl5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpdc4x2rl5.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdc4x2rl5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdc4x2rl5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpdc4x2rl5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc4x2rl5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuj86nxvv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuj86nxvv.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj86nxvv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj86nxvv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuj86nxvv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuj86nxvv.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuj86nxvv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuj86nxvv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuj86nxvv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuj86nxvv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy3chl1gt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy3chl1gt.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy3chl1gt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy3chl1gt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpy3chl1gt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpy3chl1gt.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy3chl1gt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy3chl1gt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpy3chl1gt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy3chl1gt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp569vvmc.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp569vvmc.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp569vvmc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp569vvmc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpp569vvmc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp569vvmc.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp569vvmc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp569vvmc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpp569vvmc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp569vvmc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1eufsdnz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1eufsdnz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eufsdnz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eufsdnz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1eufsdnz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1eufsdnz.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1eufsdnz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1eufsdnz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1eufsdnz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1eufsdnz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8n6clwuj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8n6clwuj.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8n6clwuj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8n6clwuj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8n6clwuj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8n6clwuj.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8n6clwuj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8n6clwuj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8n6clwuj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8n6clwuj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpssmmo8hl.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpssmmo8hl.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssmmo8hl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpssmmo8hl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpssmmo8hl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpssmmo8hl.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpssmmo8hl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpssmmo8hl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpssmmo8hl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpssmmo8hl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(i -> i %\
    \ 2 == 1, map(i -> i - ord('a'), map(i -> ord(i), txt)))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeu99ihh_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeu99ihh_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeu99ihh_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeu99ihh_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeu99ihh_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeu99ihh_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeu99ihh_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeu99ihh_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeu99ihh_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeu99ihh_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpasbgzojd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpasbgzojd.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasbgzojd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasbgzojd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpasbgzojd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpasbgzojd.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpasbgzojd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpasbgzojd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpasbgzojd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpasbgzojd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_n01oad6.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_n01oad6.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_n01oad6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_n01oad6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_n01oad6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_n01oad6.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_n01oad6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_n01oad6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_n01oad6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_n01oad6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbi4qkzcm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbi4qkzcm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbi4qkzcm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbi4qkzcm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbi4qkzcm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbi4qkzcm.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbi4qkzcm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbi4qkzcm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbi4qkzcm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbi4qkzcm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwcpsg7ak.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwcpsg7ak.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcpsg7ak.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcpsg7ak.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwcpsg7ak.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwcpsg7ak.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwcpsg7ak.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwcpsg7ak.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwcpsg7ak.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwcpsg7ak.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8aw4aquc.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8aw4aquc.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8aw4aquc.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8aw4aquc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8aw4aquc.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8aw4aquc.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8aw4aquc.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8aw4aquc.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8aw4aquc.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8aw4aquc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjvs2tnkr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjvs2tnkr.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvs2tnkr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvs2tnkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjvs2tnkr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjvs2tnkr.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjvs2tnkr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjvs2tnkr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjvs2tnkr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvs2tnkr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprsln00vd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprsln00vd.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsln00vd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsln00vd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprsln00vd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprsln00vd.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsln00vd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsln00vd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprsln00vd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprsln00vd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n        else\n  \
    \          return split(txt, ',')\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1fso54hk.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1fso54hk.jl:21\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1fso54hk.jl:29 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1fso54hk.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1fso54hk.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp1fso54hk.jl:18\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp1fso54hk.jl:30 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1fso54hk.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1fso54hk.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjz5ioajq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjz5ioajq.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz5ioajq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz5ioajq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjz5ioajq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjz5ioajq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz5ioajq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz5ioajq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjz5ioajq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjz5ioajq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return length(filter(x -> x % 2 == 1, [ord(c) - ord('a')\
    \ for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf1wd613j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpf1wd613j.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf1wd613j.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf1wd613j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf1wd613j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpf1wd613j.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf1wd613j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf1wd613j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf1wd613j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf1wd613j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpygppp5f2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygppp5f2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygppp5f2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygppp5f2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpygppp5f2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygppp5f2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygppp5f2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygppp5f2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpygppp5f2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygppp5f2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgitqwou6.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpgitqwou6.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgitqwou6.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgitqwou6.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgitqwou6.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpgitqwou6.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpgitqwou6.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpgitqwou6.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpgitqwou6.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') != nothing\n        return split(txt, '\
    \ ')\n    elseif findfirst(txt, ',') != nothing\n        return split(txt, ',')\n\
    \    else\n        return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9rf29940.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9rf29940.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9rf29940.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rf29940.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9rf29940.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9rf29940.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9rf29940.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rf29940.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9rf29940.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rf29940.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb27vhool.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb27vhool.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb27vhool.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb27vhool.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpb27vhool.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb27vhool.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb27vhool.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb27vhool.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpb27vhool.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb27vhool.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return length(filter(x\
    \ -> x % 2 == 1, [ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0730_jhe.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0730_jhe.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0730_jhe.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0730_jhe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0730_jhe.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp0730_jhe.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0730_jhe.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0730_jhe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp0730_jhe.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0730_jhe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptvvvubd2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptvvvubd2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptvvvubd2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptvvvubd2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptvvvubd2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptvvvubd2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptvvvubd2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptvvvubd2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptvvvubd2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptvvvubd2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwjihtg4f.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwjihtg4f.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjihtg4f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjihtg4f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwjihtg4f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwjihtg4f.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwjihtg4f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwjihtg4f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwjihtg4f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwjihtg4f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return length(filter(x -> x % 2 == 1, [ord(c) - ord('a')\
    \ for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpntvlusvh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpntvlusvh.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpntvlusvh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpntvlusvh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpntvlusvh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpntvlusvh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpntvlusvh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpntvlusvh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpntvlusvh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntvlusvh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i),\
    \ map(i -> ord(i) - ord('a'), txt))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnpqv8xxo.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnpqv8xxo.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnpqv8xxo.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnpqv8xxo.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpnpqv8xxo.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpnpqv8xxo.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpnpqv8xxo.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnpqv8xxo.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpnpqv8xxo.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qjlxxpj.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qjlxxpj.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qjlxxpj.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qjlxxpj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5qjlxxpj.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5qjlxxpj.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5qjlxxpj.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5qjlxxpj.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5qjlxxpj.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qjlxxpj.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt .- 'a')))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_29i75pq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_29i75pq.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_29i75pq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_29i75pq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_29i75pq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_29i75pq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_29i75pq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_29i75pq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_29i75pq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_29i75pq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkphsqt_o.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkphsqt_o.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkphsqt_o.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkphsqt_o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkphsqt_o.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkphsqt_o.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkphsqt_o.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkphsqt_o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkphsqt_o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkphsqt_o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5taammty.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5taammty.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5taammty.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5taammty.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5taammty.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5taammty.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5taammty.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5taammty.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5taammty.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5taammty.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(i -> i %\
    \ 2 == 1, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpizka2st4.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpizka2st4.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizka2st4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizka2st4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpizka2st4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpizka2st4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpizka2st4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpizka2st4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpizka2st4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizka2st4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8meopmq4.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8meopmq4.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8meopmq4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8meopmq4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8meopmq4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8meopmq4.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8meopmq4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8meopmq4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8meopmq4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8meopmq4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6qom7vb1.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6qom7vb1.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6qom7vb1.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6qom7vb1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6qom7vb1.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6qom7vb1.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6qom7vb1.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6qom7vb1.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6qom7vb1.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6qom7vb1.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpciu5z881.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpciu5z881.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpciu5z881.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpciu5z881.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpciu5z881.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpciu5z881.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpciu5z881.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpciu5z881.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpciu5z881.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpciu5z881.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(occursin('a':'z', txt)[1:2:end])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2g8a3oe3.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2g8a3oe3.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2g8a3oe3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2g8a3oe3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2g8a3oe3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2g8a3oe3.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2g8a3oe3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2g8a3oe3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2g8a3oe3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2g8a3oe3.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpygqjwhu_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygqjwhu_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygqjwhu_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygqjwhu_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpygqjwhu_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpygqjwhu_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpygqjwhu_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpygqjwhu_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpygqjwhu_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygqjwhu_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(i -> isodd(i) ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyxaxspgd.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpyxaxspgd.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyxaxspgd.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyxaxspgd.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpyxaxspgd.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpyxaxspgd.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpyxaxspgd.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpyxaxspgd.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpyxaxspgd.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp546zjio.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp546zjio.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp546zjio.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp546zjio.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpp546zjio.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpp546zjio.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpp546zjio.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpp546zjio.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpp546zjio.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp546zjio.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpx51htn66.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx51htn66.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx51htn66.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx51htn66.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx51htn66.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpx51htn66.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx51htn66.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx51htn66.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpx51htn66.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx51htn66.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(1 for i in\
    \ 1:length(txt) if i % 2 == 1 && islower(txt[i]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpurbuc7m7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpurbuc7m7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurbuc7m7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurbuc7m7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpurbuc7m7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpurbuc7m7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpurbuc7m7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpurbuc7m7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpurbuc7m7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpurbuc7m7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm6q4rjrd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpm6q4rjrd.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6q4rjrd.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm6q4rjrd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm6q4rjrd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm6q4rjrd.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6q4rjrd.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm6q4rjrd.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm6q4rjrd.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm6q4rjrd.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppy5ikkw7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppy5ikkw7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppy5ikkw7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppy5ikkw7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppy5ikkw7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppy5ikkw7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppy5ikkw7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppy5ikkw7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppy5ikkw7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppy5ikkw7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt4x_zdct.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpt4x_zdct.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4x_zdct.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4x_zdct.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt4x_zdct.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpt4x_zdct.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt4x_zdct.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt4x_zdct.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpt4x_zdct.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4x_zdct.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp42xz6wpq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp42xz6wpq.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp42xz6wpq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp42xz6wpq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp42xz6wpq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp42xz6wpq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp42xz6wpq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp42xz6wpq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp42xz6wpq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42xz6wpq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(occursin(lowercase[i],\
    \ txt) for i in 1:26)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoogo_bfb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoogo_bfb.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoogo_bfb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoogo_bfb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoogo_bfb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoogo_bfb.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoogo_bfb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoogo_bfb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoogo_bfb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoogo_bfb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzeopfwfq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzeopfwfq.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzeopfwfq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzeopfwfq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzeopfwfq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzeopfwfq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzeopfwfq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzeopfwfq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzeopfwfq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzeopfwfq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm8n9bg09.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm8n9bg09.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8n9bg09.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8n9bg09.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm8n9bg09.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm8n9bg09.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm8n9bg09.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm8n9bg09.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpm8n9bg09.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8n9bg09.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg0lutv8s.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg0lutv8s.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0lutv8s.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0lutv8s.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg0lutv8s.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg0lutv8s.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0lutv8s.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0lutv8s.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg0lutv8s.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0lutv8s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuvmpchl5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuvmpchl5.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvmpchl5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvmpchl5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuvmpchl5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuvmpchl5.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuvmpchl5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuvmpchl5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuvmpchl5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvmpchl5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(i) for i in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprvg0hsl6.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprvg0hsl6.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvg0hsl6.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvg0hsl6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprvg0hsl6.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmprvg0hsl6.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprvg0hsl6.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprvg0hsl6.jl:26\ntest set:\
    \ Error During Test at /tmp/tmprvg0hsl6.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvg0hsl6.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_cgyqmgz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_cgyqmgz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_cgyqmgz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cgyqmgz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_cgyqmgz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_cgyqmgz.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_cgyqmgz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_cgyqmgz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_cgyqmgz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_cgyqmgz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1pa05mnm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1pa05mnm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pa05mnm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1pa05mnm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1pa05mnm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1pa05mnm.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pa05mnm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1pa05mnm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1pa05mnm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1pa05mnm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt)\n        if !occursin(\",\", txt)\n  \
    \          return sum(i -> i % 2 == 1 ? 1 : 0, [ord(c) - ord('a') for c in txt])\n\
    \        else\n            return split(txt, \",\")\n        end\n    else\n \
    \       return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu6x61l3d.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu6x61l3d.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6x61l3d.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6x61l3d.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpu6x61l3d.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpu6x61l3d.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu6x61l3d.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu6x61l3d.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpu6x61l3d.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu6x61l3d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return length(filter(x -> x % 2 == 1, [ord(c) - ord('a')\
    \ for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn_jgkmsu.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpn_jgkmsu.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_jgkmsu.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_jgkmsu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn_jgkmsu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpn_jgkmsu.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpn_jgkmsu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn_jgkmsu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpn_jgkmsu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_jgkmsu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpri6d9c7g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpri6d9c7g.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpri6d9c7g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpri6d9c7g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpri6d9c7g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpri6d9c7g.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpri6d9c7g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpri6d9c7g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpri6d9c7g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpri6d9c7g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i->(i%2==1),\
    \ [ord(c)-ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gzgusmm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2gzgusmm.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gzgusmm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gzgusmm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2gzgusmm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp2gzgusmm.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2gzgusmm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2gzgusmm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp2gzgusmm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gzgusmm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmk__cwk5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmk__cwk5.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmk__cwk5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk__cwk5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmk__cwk5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmk__cwk5.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmk__cwk5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmk__cwk5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmk__cwk5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk__cwk5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpey1z7c7l.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpey1z7c7l.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey1z7c7l.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey1z7c7l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpey1z7c7l.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpey1z7c7l.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpey1z7c7l.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpey1z7c7l.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpey1z7c7l.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpey1z7c7l.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(i -> isodd(i), [ord(c) - ord('a') for c in txt])\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5y329_a9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5y329_a9.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5y329_a9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5y329_a9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5y329_a9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5y329_a9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5y329_a9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5y329_a9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5y329_a9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5y329_a9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyy3aae3b.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyy3aae3b.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyy3aae3b.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyy3aae3b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyy3aae3b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyy3aae3b.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyy3aae3b.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyy3aae3b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpyy3aae3b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyy3aae3b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(i) % 2\
    \ == 0 for i in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp442m4jyx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp442m4jyx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp442m4jyx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp442m4jyx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp442m4jyx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp442m4jyx.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp442m4jyx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp442m4jyx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp442m4jyx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp442m4jyx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp43fgcytf.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp43fgcytf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp43fgcytf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp43fgcytf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp43fgcytf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp43fgcytf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp43fgcytf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp43fgcytf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp43fgcytf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp43fgcytf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4ubf8va2.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Nothing to an object of type \n   \
    \ Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4ubf8va2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ubf8va2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ubf8va2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4ubf8va2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4ubf8va2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ubf8va2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ubf8va2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4ubf8va2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Nothing to an object of type \n    Union{Int64,\
    \ Vector{String}}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n  "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ubf8va2.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp91iw_vm0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp91iw_vm0.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp91iw_vm0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp91iw_vm0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp91iw_vm0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp91iw_vm0.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp91iw_vm0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp91iw_vm0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp91iw_vm0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91iw_vm0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpakqdiyqe.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpakqdiyqe.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakqdiyqe.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakqdiyqe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpakqdiyqe.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpakqdiyqe.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpakqdiyqe.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpakqdiyqe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpakqdiyqe.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpakqdiyqe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxqnspti.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphxqnspti.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxqnspti.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxqnspti.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphxqnspti.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphxqnspti.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphxqnspti.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphxqnspti.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphxqnspti.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxqnspti.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp02wqyvmh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp02wqyvmh.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp02wqyvmh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp02wqyvmh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp02wqyvmh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp02wqyvmh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp02wqyvmh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp02wqyvmh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp02wqyvmh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02wqyvmh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n        else\n  \
    \          return split(txt, \",\")\n        end\n    else\n        return split(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm_b1tc3w.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm_b1tc3w.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_b1tc3w.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_b1tc3w.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm_b1tc3w.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpm_b1tc3w.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm_b1tc3w.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm_b1tc3w.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpm_b1tc3w.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm_b1tc3w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpevtutket.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpevtutket.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpevtutket.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpevtutket.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpevtutket.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpevtutket.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpevtutket.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpevtutket.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpevtutket.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfyroaeip.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfyroaeip.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyroaeip.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyroaeip.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfyroaeip.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfyroaeip.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyroaeip.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyroaeip.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfyroaeip.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyroaeip.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvhp_1yll.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvhp_1yll.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhp_1yll.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhp_1yll.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvhp_1yll.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvhp_1yll.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvhp_1yll.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvhp_1yll.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvhp_1yll.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhp_1yll.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk9182un2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpk9182un2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9182un2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9182un2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk9182un2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpk9182un2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk9182un2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk9182un2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpk9182un2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk9182un2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuwnt5ep8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuwnt5ep8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuwnt5ep8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuwnt5ep8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuwnt5ep8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuwnt5ep8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuwnt5ep8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuwnt5ep8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuwnt5ep8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuwnt5ep8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(map(x -> x\
    \ % 2 == 1, map(x -> x - ord('a'), map(x -> ord(x), lowercase(txt)))))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj49ymoxz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj49ymoxz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj49ymoxz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj49ymoxz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj49ymoxz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj49ymoxz.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj49ymoxz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj49ymoxz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj49ymoxz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj49ymoxz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(c) % 2\
    \ == 0 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbrfq8pq8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbrfq8pq8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrfq8pq8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrfq8pq8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbrfq8pq8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbrfq8pq8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbrfq8pq8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbrfq8pq8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbrfq8pq8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrfq8pq8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoactxnob.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoactxnob.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoactxnob.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoactxnob.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoactxnob.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoactxnob.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoactxnob.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoactxnob.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoactxnob.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoactxnob.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpevafrdm9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpevafrdm9.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpevafrdm9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpevafrdm9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpevafrdm9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpevafrdm9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpevafrdm9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpevafrdm9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpevafrdm9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevafrdm9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnls9jz4x.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnls9jz4x.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnls9jz4x.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnls9jz4x.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpnls9jz4x.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnls9jz4x.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnls9jz4x.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnls9jz4x.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpnls9jz4x.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnls9jz4x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(ord(c) % 2 == 1 for c in txt)\n        else\n            return\
    \ split(txt, ',')\n        end\n    else\n        return split(txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp018gz83m.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp018gz83m.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp018gz83m.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp018gz83m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp018gz83m.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp018gz83m.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp018gz83m.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp018gz83m.jl:28\ntest set:\
    \ Error During Test at /tmp/tmp018gz83m.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp018gz83m.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(ord(c) % 2 == 1 for c in txt)\n        else\n            return\
    \ split(txt, ',')\n        end\n    else\n        return split(txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpggwff14j.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpggwff14j.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggwff14j.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggwff14j.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpggwff14j.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpggwff14j.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpggwff14j.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpggwff14j.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpggwff14j.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpggwff14j.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c)-ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgvtpw3y7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgvtpw3y7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvtpw3y7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvtpw3y7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgvtpw3y7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgvtpw3y7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgvtpw3y7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgvtpw3y7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgvtpw3y7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgvtpw3y7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(txt)\
    \ == 1\n        return 1\n    end\n    if length(txt) == 2\n        return 2\n\
    \    end\n    if length(txt) == 3\n        return 3\n    end\n    if length(txt)\
    \ == 4\n        return 4\n    end\n    if length(txt) == 5\n        return 5\n\
    \    end\n    if length(txt) == 6\n        return 6\n    end\n    if length(txt)\
    \ == 7\n        return 7\n    end\n    if length(txt) == 8\n        return 8\n\
    \    end\n    if length(txt) == 9\n        return 9\n    end\n    if length(txt)\
    \ == 10\n        return 10\n    end\n    if length(txt) == 11\n        return\
    \ 11\n    end\n    if length(txt) == 12\n        return 12\n    end\n    if length(txt)\
    \ == 13\n        return 13\n    end\n    if length(txt) == 14\n        return\
    \ 14\n    end\n    if length(txt) == 15\n        return 15\n    end\n    if length(txt)\
    \ == 16\n        return 16\n    end\n    if length(txt) == 17\n        return\
    \ 17\n    end\n    if length(txt) == 18\n        return 18\n    end\n    if length(txt)\
    \ == 19\n        return 19\n    end\n    if length(txt) == 20\n        return\
    \ 20\n    end\n    if length(txt) == 21\n        return 21\n    end\n    if length(txt)\
    \ == 22\n        return 22\n    end\n    if length(txt) == 23\n        return\
    \ 23\n    end\n    if length(txt) == 24\n        return 24\n    end\n    if length(txt)\
    \ == 25\n        return 25\n    end\n    if length(txt) == 26\n        return\
    \ 26\n    end\n    if length(txt) == 27\n        return 27\n    end\n    if length(txt)\
    \ == 28\n        return 28\n    end\n    if length(txt) == 29\n        return\
    \ 29\n    end\n    if length(txt) == 30\n        return 30\n    end\n    if length(txt)\
    \ == 31\n        return 31\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcp6jg9mq.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcp6jg9mq.jl:1\n\
    in expression starting at /tmp/tmpcp6jg9mq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpifcitmez.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpifcitmez.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpifcitmez.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpifcitmez.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpifcitmez.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpifcitmez.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpifcitmez.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpifcitmez.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpifcitmez.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpph3ckmsn.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpph3ckmsn.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpph3ckmsn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpph3ckmsn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpph3ckmsn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpph3ckmsn.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpph3ckmsn.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpph3ckmsn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpph3ckmsn.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpph3ckmsn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count_odd_letters(txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpibe8o41s.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpibe8o41s.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibe8o41s.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibe8o41s.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpibe8o41s.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpibe8o41s.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibe8o41s.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibe8o41s.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpibe8o41s.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibe8o41s.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i->(i%2==1),\
    \ [ord(c)-ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptcj0_fn_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptcj0_fn_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptcj0_fn_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcj0_fn_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptcj0_fn_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmptcj0_fn_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptcj0_fn_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptcj0_fn_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmptcj0_fn_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptcj0_fn_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(map(x -> x\
    \ % 2 == 1, map(x -> ord(x) - ord('a'), txt)))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmhpu81re.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmhpu81re.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhpu81re.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhpu81re.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmhpu81re.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpmhpu81re.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmhpu81re.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmhpu81re.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpmhpu81re.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmhpu81re.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt)\n        if !occursin(',', txt)\n      \
    \      return sum(ord(x) % 2 == 0 for x in txt)\n        else\n            return\
    \ split(txt, ',')\n        end\n    else\n        return split(txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl85lf6te.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpl85lf6te.jl:21\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl85lf6te.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl85lf6te.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpl85lf6te.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpl85lf6te.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl85lf6te.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl85lf6te.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpl85lf6te.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl85lf6te.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(i -> isodd(i), [ord(i) for i in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoj9ks9r5.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoj9ks9r5.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoj9ks9r5.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoj9ks9r5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoj9ks9r5.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpoj9ks9r5.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpoj9ks9r5.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoj9ks9r5.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpoj9ks9r5.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoj9ks9r5.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1bgonjyx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1bgonjyx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1bgonjyx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1bgonjyx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1bgonjyx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1bgonjyx.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1bgonjyx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1bgonjyx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1bgonjyx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1bgonjyx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeopb9uq8.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpeopb9uq8.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpeopb9uq8.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpeopb9uq8.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpeopb9uq8.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpeopb9uq8.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpeopb9uq8.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpeopb9uq8.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpeopb9uq8.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return sum(isodd.([ord(c) for c in txt]))\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwgev0w5o.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwgev0w5o.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgev0w5o.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgev0w5o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwgev0w5o.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpwgev0w5o.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwgev0w5o.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwgev0w5o.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwgev0w5o.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgev0w5o.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6g99i8b_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g99i8b_.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g99i8b_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g99i8b_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6g99i8b_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6g99i8b_.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6g99i8b_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6g99i8b_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6g99i8b_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6g99i8b_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if \" \" in txt\n        return split(txt, \" \")\n    elseif \"\
    ,\" in txt\n        return split(txt, \",\")\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf1gprsuu.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpf1gprsuu.jl:14\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpf1gprsuu.jl:27 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpf1gprsuu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf1gprsuu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpf1gprsuu.jl:14\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpf1gprsuu.jl:28 [inlined]\n\
    \   [6] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpf1gprsuu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpf1gprsuu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  use occursin(x,\
    \ y) for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] split_words(txt::String)\n     @ Main /tmp/tmpf1gprsuu.jl:14\n   [4] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpf1gprsuu.jl:29 [in"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf1gprsuu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3m_mmn2j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3m_mmn2j.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3m_mmn2j.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3m_mmn2j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3m_mmn2j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3m_mmn2j.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3m_mmn2j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3m_mmn2j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3m_mmn2j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3m_mmn2j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcq9pilax.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpcq9pilax.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcq9pilax.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcq9pilax.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcq9pilax.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpcq9pilax.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcq9pilax.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcq9pilax.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpcq9pilax.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcq9pilax.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if findfirst(txt, ' ') == nothing\n        if findfirst(txt, ',')\
    \ == nothing\n            return sum(i -> i % 2 == 1 ? 1 : 0, [ord(c) - ord('a')\
    \ for c in txt])\n        else\n            return split(txt, ',')\n        end\n\
    \    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyt9wuhpr.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching findfirst(::String, ::Char)\n  Closest candidates are:\n\
    \    findfirst(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n\
    \    findfirst(::AbstractString, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyt9wuhpr.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt9wuhpr.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt9wuhpr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyt9wuhpr.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching findfirst(::String, ::Char)\n  Closest candidates are:\n    findfirst(!Matched::Function,\
    \ ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1994\n    findfirst(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:104\n\
    \    findfirst(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:1910\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpyt9wuhpr.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyt9wuhpr.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyt9wuhpr.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpyt9wuhpr.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\""
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyt9wuhpr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg1759io_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg1759io_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg1759io_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg1759io_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg1759io_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpg1759io_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg1759io_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg1759io_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpg1759io_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg1759io_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpycvj78dg.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpycvj78dg.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpycvj78dg.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpycvj78dg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpycvj78dg.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpycvj78dg.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpycvj78dg.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpycvj78dg.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpycvj78dg.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycvj78dg.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7o_jtln8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7o_jtln8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7o_jtln8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7o_jtln8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7o_jtln8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7o_jtln8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7o_jtln8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7o_jtln8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7o_jtln8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o_jtln8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> isodd(x), [ord(c) - ord('a') for c in txt])\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxuch6blu.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpxuch6blu.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxuch6blu.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxuch6blu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxuch6blu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxuch6blu.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxuch6blu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxuch6blu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxuch6blu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuch6blu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(\" \", txt) && !occursin(\",\", txt)\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    elseif !occursin(\" \", txt)\n\
    \        return split(txt, \",\")\n    else\n        return split(txt)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvjjsuusx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvjjsuusx.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvjjsuusx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvjjsuusx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvjjsuusx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvjjsuusx.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvjjsuusx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvjjsuusx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvjjsuusx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjjsuusx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6zqnrk9x.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6zqnrk9x.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6zqnrk9x.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zqnrk9x.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6zqnrk9x.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6zqnrk9x.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6zqnrk9x.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zqnrk9x.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6zqnrk9x.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zqnrk9x.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(1 for c in\
    \ txt if c in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(c) - Int('a')))\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp8l62ll0t.jl:19\nin expression\
    \ starting at /tmp/tmp8l62ll0t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(map(x -> Int(x) - Int('a'), txt)))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph74shxdy.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph74shxdy.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph74shxdy.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph74shxdy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph74shxdy.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph74shxdy.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph74shxdy.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph74shxdy.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph74shxdy.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph74shxdy.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgav2m2kw.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpgav2m2kw.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgav2m2kw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgav2m2kw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgav2m2kw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgav2m2kw.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgav2m2kw.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgav2m2kw.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpgav2m2kw.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgav2m2kw.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8kxw25h0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp8kxw25h0.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8kxw25h0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8kxw25h0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8kxw25h0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8kxw25h0.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8kxw25h0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8kxw25h0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8kxw25h0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kxw25h0.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp66qdu5jm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmp66qdu5jm.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66qdu5jm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66qdu5jm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp66qdu5jm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp66qdu5jm.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp66qdu5jm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp66qdu5jm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp66qdu5jm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66qdu5jm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf2x545hh.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf2x545hh.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpf2x545hh.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf2x545hh.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpf2x545hh.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpf2x545hh.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpf2x545hh.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpf2x545hh.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpf2x545hh.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpf2x545hh.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"[a-zA-Z]\", txt)\n        if occursin(r\"\\s\",\
    \ txt)\n            return split(txt)\n        elseif occursin(r\",\", txt)\n\
    \            return split(txt, \",\")\n        else\n            return count(i\
    \ -> isodd(i), [ord(c) - ord('a') for c in txt])\n        end\n    else\n    \
    \    return 0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgx6jnz6u.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgx6jnz6u.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgx6jnz6u.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgx6jnz6u.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgx6jnz6u.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpgx6jnz6u.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgx6jnz6u.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgx6jnz6u.jl:30\ntest set:\
    \ Error During Test at /tmp/tmpgx6jnz6u.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx6jnz6u.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(r\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(occursin.(r\"\\p{Ll}\", txt))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9gq62mle.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9gq62mle.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gq62mle.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gq62mle.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9gq62mle.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9gq62mle.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9gq62mle.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9gq62mle.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9gq62mle.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gq62mle.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpebmfubtq.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpebmfubtq.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpebmfubtq.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpebmfubtq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpebmfubtq.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpebmfubtq.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpebmfubtq.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpebmfubtq.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpebmfubtq.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebmfubtq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9oeavjpe.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9oeavjpe.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9oeavjpe.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9oeavjpe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9oeavjpe.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp9oeavjpe.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9oeavjpe.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9oeavjpe.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp9oeavjpe.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9oeavjpe.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkfwzyuwi.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpkfwzyuwi.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkfwzyuwi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkfwzyuwi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkfwzyuwi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkfwzyuwi.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkfwzyuwi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkfwzyuwi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkfwzyuwi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfwzyuwi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbqlg2wn9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbqlg2wn9.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbqlg2wn9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbqlg2wn9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbqlg2wn9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbqlg2wn9.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbqlg2wn9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbqlg2wn9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbqlg2wn9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbqlg2wn9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeneiu27r.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeneiu27r.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeneiu27r.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeneiu27r.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeneiu27r.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeneiu27r.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeneiu27r.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeneiu27r.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeneiu27r.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeneiu27r.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(lowercase(txt)) .- 'a'))\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj6t57nu_.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj6t57nu_.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj6t57nu_.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj6t57nu_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj6t57nu_.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpj6t57nu_.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpj6t57nu_.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj6t57nu_.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpj6t57nu_.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6t57nu_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if !occursin(' ', txt) && !occursin(',', txt)\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    elseif !occursin(' ', txt)\n        return split(txt,\
    \ ',')\n    else\n        return split(txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3n1sgmkt.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3n1sgmkt.jl:19\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3n1sgmkt.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3n1sgmkt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3n1sgmkt.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3n1sgmkt.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3n1sgmkt.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3n1sgmkt.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3n1sgmkt.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3n1sgmkt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjmoq9twn.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjmoq9twn.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmoq9twn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmoq9twn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjmoq9twn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjmoq9twn.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjmoq9twn.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmoq9twn.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjmoq9twn.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmoq9twn.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphddxc5oz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphddxc5oz.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphddxc5oz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphddxc5oz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphddxc5oz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphddxc5oz.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphddxc5oz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphddxc5oz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphddxc5oz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphddxc5oz.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(ord(c) % 2 == 1 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe1uf6y7f.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpe1uf6y7f.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe1uf6y7f.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe1uf6y7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe1uf6y7f.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpe1uf6y7f.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpe1uf6y7f.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpe1uf6y7f.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpe1uf6y7f.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1uf6y7f.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.(collect(txt)))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ankaplf.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ankaplf.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ankaplf.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ankaplf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1ankaplf.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ankaplf.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ankaplf.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ankaplf.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1ankaplf.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ankaplf.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3gi_jur5.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3gi_jur5.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3gi_jur5.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3gi_jur5.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp3gi_jur5.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmp3gi_jur5.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmp3gi_jur5.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3gi_jur5.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp3gi_jur5.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp3gi_jur5.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphzlz3pmh.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphzlz3pmh.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzlz3pmh.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzlz3pmh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphzlz3pmh.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphzlz3pmh.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphzlz3pmh.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphzlz3pmh.jl:26\ntest set:\
    \ Error During Test at /tmp/tmphzlz3pmh.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzlz3pmh.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(c) % 2\
    \ == 0 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7gs1qe0b.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7gs1qe0b.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gs1qe0b.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gs1qe0b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7gs1qe0b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7gs1qe0b.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7gs1qe0b.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7gs1qe0b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7gs1qe0b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7gs1qe0b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(split(txt, \" \")) > 1\n        return split(txt, \"\
    \ \")\n    elseif length(split(txt, \",\")) > 1\n        return split(txt, \"\
    ,\")\n    else\n        return count(x -> x % 2 == 1, [ord(x) - ord('a') for x\
    \ in lowercase(txt)])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7q_gisa7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7q_gisa7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7q_gisa7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7q_gisa7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7q_gisa7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp7q_gisa7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7q_gisa7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7q_gisa7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp7q_gisa7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7q_gisa7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppeuyjy3a.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppeuyjy3a.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppeuyjy3a.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppeuyjy3a.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppeuyjy3a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmppeuyjy3a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppeuyjy3a.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppeuyjy3a.jl:26\ntest set:\
    \ Error During Test at /tmp/tmppeuyjy3a.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppeuyjy3a.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc1q6rwbx.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc1q6rwbx.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1q6rwbx.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1q6rwbx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc1q6rwbx.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpc1q6rwbx.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc1q6rwbx.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc1q6rwbx.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpc1q6rwbx.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1q6rwbx.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvwkn1mcv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvwkn1mcv.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwkn1mcv.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwkn1mcv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvwkn1mcv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvwkn1mcv.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvwkn1mcv.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvwkn1mcv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvwkn1mcv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwkn1mcv.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0\n        return 0\n    end\n    if length(txt)\
    \ == 1\n        return 1\n    end\n    if length(txt) == 2\n        return 2\n\
    \    end\n    if length(txt) == 3\n        return 3\n    end\n    if length(txt)\
    \ == 4\n        return 4\n    end\n    if length(txt) == 5\n        return 5\n\
    \    end\n    if length(txt) == 6\n        return 6\n    end\n    if length(txt)\
    \ == 7\n        return 7\n    end\n    if length(txt) == 8\n        return 8\n\
    \    end\n    if length(txt) == 9\n        return 9\n    end\n    if length(txt)\
    \ == 10\n        return 10\n    end\n    if length(txt) == 11\n        return\
    \ 11\n    end\n    if length(txt) == 12\n        return 12\n    end\n    if length(txt)\
    \ == 13\n        return 13\n    end\n    if length(txt) == 14\n        return\
    \ 14\n    end\n    if length(txt) == 15\n        return 15\n    end\n    if length(txt)\
    \ == 16\n        return 16\n    end\n    if length(txt) == 17\n        return\
    \ 17\n    end\n    if length(txt) == 18\n        return 18\n    end\n    if length(txt)\
    \ == 19\n        return 19\n    end\n    if length(txt) == 20\n        return\
    \ 20\n    end\n    if length(txt) == 21\n        return 21\n    end\n    if length(txt)\
    \ == 22\n        return 22\n    end\n    if length(txt) == 23\n        return\
    \ 23\n    end\n    if length(txt) == 24\n        return 24\n    end\n    if length(txt)\
    \ == 25\n        return 25\n    end\n    if length(txt) == 26\n        return\
    \ 26\n    end\n    if length(txt) == 27\n        return 27\n    end\n    if length(txt)\
    \ == 28\n        return 28\n    end\n    if length(txt) == 29\n        return\
    \ 29\n    end\n    if length(txt) == 30\n        return 30\n    end\n    if length(txt)\
    \ == 31\n        return 31\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph7zun67u.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7zun67u.jl:1\n\
    in expression starting at /tmp/tmph7zun67u.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkytci0oi.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkytci0oi.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkytci0oi.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkytci0oi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkytci0oi.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpkytci0oi.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkytci0oi.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkytci0oi.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpkytci0oi.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkytci0oi.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(x) for x in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzk29v19v.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpzk29v19v.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzk29v19v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzk29v19v.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzk29v19v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzk29v19v.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzk29v19v.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzk29v19v.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzk29v19v.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzk29v19v.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(i -> isodd(i) ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxz2yjqfb.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxz2yjqfb.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxz2yjqfb.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxz2yjqfb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxz2yjqfb.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxz2yjqfb.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxz2yjqfb.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxz2yjqfb.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxz2yjqfb.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxz2yjqfb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ count(x -> x in 'abcdefghijklmnopqrstuvwxyz' && isodd(Int(x) - Int('a')), txt)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9tzq1avm.jl:19\nin expression\
    \ starting at /tmp/tmp9tzq1avm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        count\
    \ = 0\n        for i in 1:length(txt)\n            if islower(txt[i]) && i % 2\
    \ == 1\n                count += 1\n            end\n        end\n        return\
    \ count\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnsx3i6gf.jl:33\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpnsx3i6gf.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsx3i6gf.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsx3i6gf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnsx3i6gf.jl:34\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpnsx3i6gf.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnsx3i6gf.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnsx3i6gf.jl:32\ntest set:\
    \ Error During Test at /tmp/tmpnsx3i6gf.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsx3i6gf.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, \" \")\n        return split(txt, \" \")\n   \
    \ elseif contains(txt, \",\")\n        return split(txt, \",\")\n    else\n  \
    \      return sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1smzf6m8.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1smzf6m8.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1smzf6m8.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1smzf6m8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1smzf6m8.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1smzf6m8.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1smzf6m8.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1smzf6m8.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1smzf6m8.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1smzf6m8.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp209z957y.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp209z957y.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp209z957y.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp209z957y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp209z957y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp209z957y.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp209z957y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp209z957y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp209z957y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp209z957y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6i4brc1d.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6i4brc1d.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i4brc1d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i4brc1d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6i4brc1d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6i4brc1d.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6i4brc1d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6i4brc1d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6i4brc1d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6i4brc1d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.(collect(txt) .- 'a'))\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu_71ds8r.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ]\\n  MethodError: Cannot `convert` an object of type \\n    Vector{SubString{String}}\
    \ to an object of type \\n    Union{Int64, Vector{String}}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpu_71ds8r.jl:15\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu_71ds8r.jl:27 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu_71ds8r.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpu_71ds8r.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\\\
    n  Stacktrace:\\n   [1] split_words(txt::String)\\n     @ Main /tmp/tmpu_71ds8r.jl:17\\\
    n   [2] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\\n   [3] macro expansion\\n     @ /tmp/tmpu_71ds8r.jl:28 [inlined]\\\
    n   [4] macro expansion\\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpu_71ds8r.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpu_71ds8r.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\\n  MethodError: Cannot\
    \ `convert` an object of type \\n    Vector{SubString{String}} to an object of\
    \ type \\n    Union{Int64, Vector{String}}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !M"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 4 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpu_71ds8r.jl:24\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_7g2xtid.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_7g2xtid.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7g2xtid.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7g2xtid.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_7g2xtid.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_7g2xtid.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_7g2xtid.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_7g2xtid.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_7g2xtid.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7g2xtid.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(i -> isodd(i), [ord(c) - ord('a') for c in txt])\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbx9q6178.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbx9q6178.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbx9q6178.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbx9q6178.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbx9q6178.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbx9q6178.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbx9q6178.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbx9q6178.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbx9q6178.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbx9q6178.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvb6b1k5b.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpvb6b1k5b.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvb6b1k5b.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvb6b1k5b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvb6b1k5b.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpvb6b1k5b.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvb6b1k5b.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvb6b1k5b.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpvb6b1k5b.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvb6b1k5b.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeqtn02s7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeqtn02s7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqtn02s7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqtn02s7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeqtn02s7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpeqtn02s7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqtn02s7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqtn02s7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpeqtn02s7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqtn02s7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpies5ko9y.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpies5ko9y.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpies5ko9y.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpies5ko9y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpies5ko9y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpies5ko9y.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpies5ko9y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpies5ko9y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpies5ko9y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpies5ko9y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd(ord(c)\
    \ - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfyxo165n.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfyxo165n.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyxo165n.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyxo165n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfyxo165n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpfyxo165n.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfyxo165n.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfyxo165n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpfyxo165n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyxo165n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ count(i -> isodd(i), [ord(i) for i in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbfzhn85g.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbfzhn85g.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfzhn85g.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfzhn85g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbfzhn85g.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpbfzhn85g.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbfzhn85g.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbfzhn85g.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpbfzhn85g.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfzhn85g.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(c) % 2\
    \ == 0 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb1mz289u.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb1mz289u.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1mz289u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1mz289u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpb1mz289u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpb1mz289u.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb1mz289u.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb1mz289u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpb1mz289u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1mz289u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaho7mn0y.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpaho7mn0y.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaho7mn0y.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaho7mn0y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaho7mn0y.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaho7mn0y.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaho7mn0y.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaho7mn0y.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaho7mn0y.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaho7mn0y.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd71l8kk4.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpd71l8kk4.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd71l8kk4.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd71l8kk4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd71l8kk4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpd71l8kk4.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpd71l8kk4.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd71l8kk4.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpd71l8kk4.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd71l8kk4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8uxe6ryu.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8uxe6ryu.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8uxe6ryu.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8uxe6ryu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8uxe6ryu.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp8uxe6ryu.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8uxe6ryu.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8uxe6ryu.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp8uxe6ryu.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8uxe6ryu.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph8q8psdr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph8q8psdr.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8q8psdr.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8q8psdr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph8q8psdr.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmph8q8psdr.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmph8q8psdr.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmph8q8psdr.jl:26\ntest set:\
    \ Error During Test at /tmp/tmph8q8psdr.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8q8psdr.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(isodd.([ord(c)\
    \ - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3gtkux4u.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3gtkux4u.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3gtkux4u.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3gtkux4u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3gtkux4u.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp3gtkux4u.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp3gtkux4u.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3gtkux4u.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp3gtkux4u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3gtkux4u.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> isodd(i)\
    \ ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5ervph0w.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5ervph0w.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ervph0w.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ervph0w.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5ervph0w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp5ervph0w.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5ervph0w.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5ervph0w.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp5ervph0w.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5ervph0w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_p563pu2.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_p563pu2.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_p563pu2.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_p563pu2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_p563pu2.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp_p563pu2.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_p563pu2.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_p563pu2.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp_p563pu2.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_p563pu2.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzf6dbkgm.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpzf6dbkgm.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzf6dbkgm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzf6dbkgm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzf6dbkgm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzf6dbkgm.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzf6dbkgm.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzf6dbkgm.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzf6dbkgm.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzf6dbkgm.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuydu014j.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuydu014j.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuydu014j.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuydu014j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuydu014j.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpuydu014j.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuydu014j.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuydu014j.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpuydu014j.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuydu014j.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(i -> i % 2\
    \ == 1 ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4z7b8au7.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4z7b8au7.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4z7b8au7.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4z7b8au7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4z7b8au7.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp4z7b8au7.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4z7b8au7.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4z7b8au7.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp4z7b8au7.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4z7b8au7.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpex3fdcuk.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpex3fdcuk.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex3fdcuk.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex3fdcuk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpex3fdcuk.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpex3fdcuk.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpex3fdcuk.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpex3fdcuk.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpex3fdcuk.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex3fdcuk.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(i -> isodd(i) ? 1 : 0, [ord(c) - ord('a') for c in txt])\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6enktbev.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6enktbev.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6enktbev.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6enktbev.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6enktbev.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp6enktbev.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6enktbev.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6enktbev.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp6enktbev.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6enktbev.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return sum(ord(c) % 2\
    \ == 0 for c in txt)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzv2s_d_d.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzv2s_d_d.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv2s_d_d.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv2s_d_d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzv2s_d_d.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpzv2s_d_d.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzv2s_d_d.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzv2s_d_d.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpzv2s_d_d.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzv2s_d_d.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(' ', txt)\n        return split(txt, ' ')\n    elseif\
    \ occursin(',', txt)\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ikwlw46.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ikwlw46.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ikwlw46.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ikwlw46.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1ikwlw46.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp1ikwlw46.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1ikwlw46.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1ikwlw46.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp1ikwlw46.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ikwlw46.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if contains(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ contains(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp68gtdfnl.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp68gtdfnl.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp68gtdfnl.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp68gtdfnl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp68gtdfnl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmp68gtdfnl.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp68gtdfnl.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp68gtdfnl.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp68gtdfnl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68gtdfnl.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if ' ' in txt\n        return split(txt, ' ')\n    elseif ',' in\
    \ txt\n        return split(txt, ',')\n    else\n        return count(i -> i %\
    \ 2 == 1, [ord(c) - ord('a') for c in txt])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaxwi3l1n.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaxwi3l1n.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaxwi3l1n.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaxwi3l1n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaxwi3l1n.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpaxwi3l1n.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpaxwi3l1n.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpaxwi3l1n.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpaxwi3l1n.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxwi3l1n.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(txt, ' ')\n        return split(txt, ' ')\n    elseif\
    \ occursin(txt, ',')\n        return split(txt, ',')\n    else\n        return\
    \ sum(isodd(ord(c) - ord('a')) for c in txt)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxvpd58m9.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ no method matching occursin(::String, ::Char)\n  Closest candidates are:\n \
    \   occursin(::Union{AbstractChar, AbstractString}, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n    occursin(::Any)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n  Stacktrace:\n\
    \   [1] split_words(txt::String)\n     @ Main /tmp/tmpxvpd58m9.jl:14\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvpd58m9.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvpd58m9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxvpd58m9.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: no method\
    \ matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ AbstractString}, !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:622\n\
    \    occursin(::Any) at /shared/centos7/julia/1.7.3/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpxvpd58m9.jl:14\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvpd58m9.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvpd58m9.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpxvpd58m9.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: no\
    \ method matching occursin(::String, ::Char)\n  Closest candidates are:\n    occursin(::Union{AbstractChar,\
    \ Abstra"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxvpd58m9.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if occursin(r\"\\s\", txt)\n        return split(txt)\n    elseif\
    \ occursin(\",\", txt)\n        return split(txt, \",\")\n    else\n        return\
    \ sum(isodd.([ord(c) - ord('a') for c in txt]))\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjn5ifnj0.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  MethodError:\
    \ Cannot `convert` an object of type \n    Vector{SubString{String}} to an object\
    \ of type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjn5ifnj0.jl:15\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjn5ifnj0.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjn5ifnj0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjn5ifnj0.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:218\n\
    \  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpjn5ifnj0.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjn5ifnj0.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjn5ifnj0.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjn5ifnj0.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  MethodError: Cannot\
    \ `convert` an object of type \n    Vector{SubString{String}} to an object of\
    \ type \n    Union{Int64, Vector{String}}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T at /shared/centos7/julia/1.7"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjn5ifnj0.jl:24\n"
  exit_code: 1
  status: SyntaxError
