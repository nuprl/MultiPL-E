name: HumanEval_0_has_close_elements
language: jl
results:
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    n = length(numbers)\n    for i in 1:n\n    \
    \    for j in 1:n\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i = 1:length(numbers)\n        for j = i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < threshold\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i = 1:length(numbers)\n        for j = i+1:length(numbers)\n\
    \            if abs(numbers[i] - numbers[j]) < threshold\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = has_close_elements;\n\t@test(candidate([1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) ==\
    \ true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == false)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1], 1.0) == true)\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == false)\n\
    end\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ i+1:length(numbers)\n            if abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Check if in given vector of numbers, are any two numbers closer\
    \ to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n    false\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n    true\n    \"\"\"\nfunction has_close_elements(numbers::Vector{Float64},\
    \ threshold::Float64)::Bool \n    for i in 1:length(numbers)\n        for j in\
    \ 1:length(numbers)\n            if i != j && abs(numbers[i] - numbers[j]) < threshold\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = has_close_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == true)\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == false)\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0], 0.95) == true)\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8)\
    \ == false)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == true)\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == true)\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1], 0.5) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
