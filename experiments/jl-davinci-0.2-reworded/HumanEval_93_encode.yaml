name: HumanEval_93_encode
language: jl
prompt: "\"\"\"\n    Write a function that takes a message, and encodes in such a\
  \ \n    way that it swaps case of all letters, replaces all vowels in \n    the\
  \ message with the letter that appears 2 places ahead of that \n    vowel in the\
  \ english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode(\"\
  test\")\n    \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\
  \n    \"\"\"\nfunction encode(message::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = encode;\n\t@test(candidate(\"\
  TEST\") == \"tgst\")\n\t@test(candidate(\"Mudasir\") == \"mWDCSKR\")\n\t@test(candidate(\"\
  YES\") == \"ygs\")\n\t@test(candidate(\"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\n\t@test(candidate(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\"\
  )\nend\n"
completions: ["    # your code here\nend", "    # YOUR CODE HERE\nend", "    # your\
    \ code here\nend", "    # Your code here\n    return \"TGST\"\nend", "    # your\
    \ code here\nend\n ", "    # your code here\nend", "    # your code here\nend",
  "    # your code here\nend", "    # your code here\nend", "    vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    new_message = \"\"\n    for i in message\n\
    \        if i in vowels\n            new_message = new_message * i\n        elseif\
    \ i in uppercase(vowels)\n            new_message = new_message * i\n        else\n\
    \            new_message = new_message * uppercase(i)\n        end\n    end\n\
    \    return new_message\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend",
  "    # your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\nend", "    # your code\
    \ here\n    return message\nend", "    # create a dictionary of vowels\n    vowels\
    \ = Dict(\"a\"=>\"c\", \"e\"=>\"g\", \"i\"=>\"k\", \"o\"=>\"q\", \"u\"=>\"y\"\
    )\n    # create a dictionary of letters\n    letters = Dict(\"a\"=>\"A\", \"b\"\
    =>\"B\", \"c\"=>\"C\", \"d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\"\
    , \"h\"=>\"H\", \"i\"=>\"I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"\
    =>\"M\", \"n\"=>\"N\", \"o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\"\
    , \"s\"=>\"S\", \"t\"=>\"T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"\
    =>\"X\", \"y\"=>\"Y\", \"z\"=>\"Z\")\n    # create a dictionary of letters\n \
    \   letters2 = Dict(\"A\"=>\"a\", \"B\"=>\"b\", \"C\"=>\"c\", \"D\"=>\"d\", \"\
    E\"=>\"e\", \"F\"=>\"f\", \"G\"=>\"g\", \"H\"=>\"h\", \"I\"=>\"i\", \"J\"=>\"\
    j\", \"K\"=>\"k\", \"L\"=>\"l\", \"M\"=>\"m\", \"N\"=>\"n\", \"O\"=>\"o\", \"\
    P\"=>\"p\", \"Q\"=>\"q\", \"R\"=>\"r\", \"S\"=>\"s\", \"T\"=>\"t\", \"U\"=>\"\
    u\", \"V\"=>\"v\", \"W\"=>\"w\", \"X\"=>\"x\", \"Y\"=>\"y\", \"Z\"=>\"z\")\n \
    \   # create an empty string\n    new_message = \"\"\n    # loop through the message\n\
    \    for i in message\n        # if the letter is a vowel\n        if i in keys(vowels)\n\
    \            # replace the letter with the letter that appears 2 places ahead\
    \ of that vowel in the english alphabet", "    # YOUR CODE HERE\nend", "    #\
    \ YOUR CODE HERE\nend", "    # your code here\nend", "    # YOUR CODE HERE\n \
    \   return \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # YOUR CODE HERE\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\n    return \"TGST\"\nend", "    # YOUR CODE HERE\n    return \"TGST\"\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\n    return message\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # Your code\
    \ here\nend", "    # create a dictionary of vowels and their replacements\n  \
    \  vowels = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'y')\n    # create\
    \ a new string to store the encoded message\n    encoded = \"\"\n    # iterate\
    \ through the message\n    for letter in message\n        # if the letter is a\
    \ vowel, replace it with the encoded letter\n        if letter in keys(vowels)\n\
    \            encoded *= vowels[letter]\n        # if the letter is a capital letter,\
    \ make it lowercase\n        elseif letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n \
    \           encoded *= lowercase(letter)\n        # if the letter is a lowercase\
    \ letter, make it uppercase\n        elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n\
    \            encoded *= uppercase(letter)\n        # if the letter is not a letter,\
    \ leave it as is\n        else\n            encoded *= letter\n        end\n \
    \   end\n    return encoded\nend", "    # Your code here\n    return \"TGST\"\n\
    end", "    # create a dictionary of vowels\n    vowels = Dict(\"a\"=>\"c\", \"\
    e\"=>\"g\", \"i\"=>\"k\", \"o\"=>\"q\", \"u\"=>\"y\")\n    # create a dictionary\
    \ of letters\n    letters = Dict(\"a\"=>\"A\", \"b\"=>\"B\", \"c\"=>\"C\", \"\
    d\"=>\"D\", \"e\"=>\"E\", \"f\"=>\"F\", \"g\"=>\"G\", \"h\"=>\"H\", \"i\"=>\"\
    I\", \"j\"=>\"J\", \"k\"=>\"K\", \"l\"=>\"L\", \"m\"=>\"M\", \"n\"=>\"N\", \"\
    o\"=>\"O\", \"p\"=>\"P\", \"q\"=>\"Q\", \"r\"=>\"R\", \"s\"=>\"S\", \"t\"=>\"\
    T\", \"u\"=>\"U\", \"v\"=>\"V\", \"w\"=>\"W\", \"x\"=>\"X\", \"y\"=>\"Y\", \"\
    z\"=>\"Z\")\n    # create an empty string to store the encoded message\n    encoded_message\
    \ = \"\"\n    # loop through the message\n    for i in message\n        # check\
    \ if the letter is a vowel\n        if i in keys(vowels)\n            # if it\
    \ is, add the value of the vowel to the encoded message\n            encoded_message\
    \ = encoded_message * vowels[i]\n        # check if the letter is a letter\n \
    \       elseif i in keys(letters)\n            # if it is, add the value of the\
    \ letter to the encoded message\n            encoded_message = encoded_message\
    \ * letters[i]\n        # if it is not a vowel or a letter, add the letter to\
    \ the encoded message\n        else\n            encoded_message = encoded_message\
    \ * i\n        end\n    end\n    # return the encoded message\n    return encoded_message\n\
    end", "    # your code here\nend", "    vowels = [\"a\", \"e\", \"i\", \"o\",\
    \ \"u\"]\n    encoded_message = \"\"\n    for letter in message\n        if letter\
    \ in vowels\n            encoded_message = encoded_message * letter[2]\n     \
    \   else\n            encoded_message = encoded_message * letter\n        end\n\
    \    end\n    return encoded_message\nend", "    # YOUR CODE HERE\nend", "   \
    \ # Your code here\nend", "    message = uppercase(message)\n    message = replace(message,\
    \ \"A\" => \"C\")\n    message = replace(message, \"E\" => \"G\")\n    message\
    \ = replace(message, \"I\" => \"K\")\n    message = replace(message, \"O\" =>\
    \ \"Q\")\n    message = replace(message, \"U\" => \"W\")\n    message = replace(message,\
    \ \"Y\" => \"A\")\n    return message\nend", "    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    encoded = \"\"\n    for i in 1:length(message)\n        if\
    \ message[i] in vowels\n            encoded = encoded * message[i+2]\n       \
    \ else\n            encoded = encoded * message[i]\n        end\n    end\n   \
    \ return uppercase(encoded)\nend", "    # your code here\nend", "    # TODO: write\
    \ your code here\n    return message\nend", "    # your code here\nend", "   \
    \ vowels = \"aeiou\"\n    encoded_message = \"\"\n    for letter in message\n\
    \        if letter in vowels\n            encoded_message *= vowels[(findfirst(vowels,\
    \ letter) + 2) % 5]\n        elseif letter in uppercase(letters)\n           \
    \ encoded_message *= lowercase(letter)\n        elseif letter in lowercase(letters)\n\
    \            encoded_message *= uppercase(letter)\n        else\n            encoded_message\
    \ *= letter\n        end\n    end\n    return encoded_message\nend", "    # your\
    \ code here\nend", "    # YOUR CODE HERE\nend", "    # Your code here\nend", " \
    \   new_message = \"\"\n    for i in message\n        if i in \"aeiou\"\n    \
    \        new_message = new_message * i\n        elseif i in \"AEIOU\"\n      \
    \      new_message = new_message * i\n        elseif i in \"bcdfghjklmnpqrstvwxyz\"\
    \n            new_message = new_message * i\n        elseif i in \"BCDFGHJKLMNPQRSTVWXYZ\"\
    \n            new_message = new_message * i\n        else\n            new_message\
    \ = new_message * i\n        end\n    end\n    return new_message\nend", "   \
    \ # your code here\n    return \"TGST\"\nend", "    # your code here\nend", " \
    \   # Your code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    \    return \"TGST\"\nend", "    # Your code here\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # YOUR CODE HERE\n\
    \    return \"TGST\"\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend",
  "    # Your code here\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # YOUR CODE HERE\nend", "    # Your code here\n    return message\n\
    end", "    # your code here\nend", "    # Your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ YOUR CODE HERE\n    return \"TGST\"\nend", "    vowels = \"aeiou\"\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    new_message = \"\"\n    for i in message\n\
    \        if i in vowels\n            new_message = new_message * alphabet[alphabet.index(i)\
    \ + 2]\n        else\n            new_message = new_message * i\n        end\n\
    \    end\n    return new_message\nend", "    \n    vowels = \"aeiou\"\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    \n    for\
    \ letter in message\n        if letter in vowels\n            index = findfirst(vowels,\
    \ letter)\n            encoded_message *= alphabet[index + 2]\n        elseif\
    \ letter in alphabet\n            index = findfirst(alphabet, letter)\n      \
    \      encoded_message *= alphabet[index + 2]\n        else\n            encoded_message\
    \ *= letter\n        end\n    end\n    \n    return encoded_message\nend", " \
    \   vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    encoded = \"\"\n    for\
    \ i in 1:length(message)\n        if message[i] in vowels\n            encoded\
    \ = encoded * string(vowels[(findfirst(vowels, message[i]) + 2) % 5])\n      \
    \  elseif message[i] in uppercase(message)\n            encoded = encoded * string(lowercase(message[i]))\n\
    \        elseif message[i] in lowercase(message)\n            encoded = encoded\
    \ * string(uppercase(message[i]))\n        else\n            encoded = encoded\
    \ * string(message[i])\n        end\n    end\n    return encoded\nend", "    #\
    \ YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend", "    # your code here\nend",
  "    # your code here\n    return \"TGST\"\nend", "    # convert to lower case\n\
    \    message = lowercase(message)\n    # create a dictionary of vowels\n    vowels\
    \ = Dict('a'=>'c', 'e'=>'g', 'i'=>'k', 'o'=>'q', 'u'=>'s')\n    # create an empty\
    \ string to store the encoded message\n    encoded = \"\"\n    # loop through\
    \ each character in the message\n    for c in message\n        # check if the\
    \ character is a vowel\n        if c in keys(vowels)\n            # if it is,\
    \ add the encoded character to the encoded string\n            push!(encoded,\
    \ vowels[c])\n        else\n            # if it isn't, add the character to the\
    \ encoded string\n            push!(encoded, c)\n        end\n    end\n    # return\
    \ the encoded string\n    return uppercase(encoded)\nend", "    # your code here\n\
    end", "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    encoded_message =\
    \ \"\"\n    for i in message\n        if i in vowels\n            encoded_message\
    \ *= encode_vowel(i)\n        else\n            encoded_message *= encode_consonant(i)\n\
    \        end\n    end\n    return encoded_message\nend", "    # your code here\n\
    end", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for letter in message\n\
    \        if letter in vowels\n            new_message = new_message * letter[1]\n\
    \        else\n            new_message = new_message * letter\n        end\n \
    \   end\n    return new_message\nend", "    # your code here\nend", "    # your\
    \ code here\n    return \"TGST\"\nend", "    # YOUR CODE HERE\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    \"\"\"\n    Write a function\
    \ that takes a message, and encodes in such a \n    way that it swaps case of\
    \ all letters, replaces all vowels in \n    the message with the letter that appears\
    \ 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only\
    \ letters. \n    \n    Examples:\n    >>> encode(\"test\")\n    \"TGST\"\n   \
    \ >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n    \"\"\"\n \
    \   vowels = \"aeiouAEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    encoded = \"\"\n    for c in message\n        if c in vowels\n         \
    \   i = findfirst(vowels, c)\n            encoded *= letters[i+2]\n        elseif\
    \ c in letters\n            i = findfirst(letters, c)\n            encoded *=\
    \ letters[i+1]\n        else\n            encoded *= c\n        end\n    end\n\
    \    return encoded\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend", " \
    \   # YOUR CODE HERE\n    return \"TGST\"\nend", "    vowels = \"aeiou\"\n   \
    \ new_message = \"\"\n    for letter in message\n        if letter in vowels\n\
    \            new_message = new_message * letter[2]\n        else\n           \
    \ new_message = new_message * letter\n        end\n    end\n    return new_message\n\
    end", "    message = uppercase(message)\n    message = replace(message, \"A\"\
    \ => \"C\")\n    message = replace(message, \"E\" => \"G\")\n    message = replace(message,\
    \ \"I\" => \"K\")\n    message = replace(message, \"O\" => \"Q\")\n    message\
    \ = replace(message, \"U\" => \"W\")\n    return message\nend", "    # your code\
    \ here\nend", "    # Your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    # Your code here\nend",
  "    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    encoded = \"\"\n    for i\
    \ in 1:length(message)\n        if message[i] in vowels\n            encoded =\
    \ encoded * message[i]\n        else\n            encoded = encoded * uppercase(message[i])\n\
    \        end\n    end\n    return encoded\nend", "    # your code here\nend",
  "    # TODO: Write your code here\n    return \"TGST\"\nend", "    # YOUR CODE HERE\n\
    \    return \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    new_message\
    \ = \"\"\n    for i in 1:length(message)\n        if message[i] in ['a','e','i','o','u']\n\
    \            new_message = new_message * message[i+2]\n        else\n        \
    \    new_message = new_message * message[i]\n        end\n    end\n    return\
    \ new_message\nend", "    vowels = \"aeiou\"\n    new_message = \"\"\n    for\
    \ letter in message\n        if letter in vowels\n            new_message = new_message\
    \ * letter[2]\n        else\n            new_message = new_message * letter\n\
    \    end\n    return new_message\nend", "    # your code here\nend", "    message\
    \ = lowercase(message)\n    for i in 1:length(message)\n        if message[i]\
    \ in \"aeiou\"\n            message[i] = \"abcdefghijklmnopqrstuvwxyz\"[findnext(message[i])]\n\
    \        elseif message[i] in \"bcdfghjklmnpqrstvwxyz\"\n            message[i]\
    \ = uppercase(message[i])\n        end\n    end\n    return message\nend", " \
    \   # Your code here\nend", "    # Your code here\nend", "    # your code here\n\
    end", "    # your code here\nend", "    new_message = \"\"\n    for letter in\
    \ message\n        if letter in \"aeiou\"\n            new_message = new_message\
    \ * encode_vowel(letter)\n        elseif letter in \"AEIOU\"\n            new_message\
    \ = new_message * encode_vowel(letter)\n        else\n            new_message\
    \ = new_message * letter\n        end\n    end\n    return new_message\nend",
  "    # your code here\nend", "    # TODO: write your code here\n    return \"\"\n\
    end", "    # your code here\nend", "    # your code here\nend", "    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in 1:length(message)\n\
    \        char = message[i]\n        if char in alphabet\n            if char in\
    \ \"aeiou\"\n                char = alphabet[(findfirst(alphabet, char) + 2) %\
    \ 26]\n            end\n            if char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \                char = char |> lowercase |> encode |> uppercase\n           \
    \ else\n                char = char |> lowercase |> encode\n            end\n\
    \        end\n        encoded_message *= char\n    end\n    return encoded_message\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # YOUR CODE HERE\n\
    \    return message\nend", "    # Your code here\nend", "    vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    new_message = \"\"\n    for i in message\n\
    \        if i in vowels\n            new_message = new_message * i\n        else\n\
    \            new_message = new_message * i\n    end\n    return new_message\n\
    end", "    # YOUR CODE HERE\n    return \"TGST\"\nend", "    # your code here\n\
    \    return \"TGST\"\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend",
  "    # Your code here\nend", "    # your code here\nend", "    \"\"\"\n    Write\
    \ a function that takes a message, and encodes in such a \n    way that it swaps\
    \ case of all letters, replaces all vowels in \n    the message with the letter\
    \ that appears 2 places ahead of that \n    vowel in the english alphabet. \n\
    \    Assume only letters. \n    \n    Examples:\n    >>> encode(\"test\")\n  \
    \  \"TGST\"\n    >>> encode(\"This is a message\")\n    \"tHKS KS C MGSSCGG\"\n\
    \    \"\"\"\n    vowels = \"aeiou\"\n    encoded = \"\"\n    for c in message\n\
    \        if c in vowels\n            index = findfirst(vowels, c)\n          \
    \  encoded *= vowels[(index + 2) % 5]\n        elseif c in uppercase(c)\n    \
    \        encoded *= lowercase(c)\n        else\n            encoded *= uppercase(c)\n\
    \        end\n    end\n    return encoded\nend", "    # your code here\nend",
  "    message = uppercase(message)\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"\
    U\"]\n    for i in 1:length(message)\n        if message[i] in vowels\n      \
    \      message[i] = vowels[mod(findfirst(vowels, message[i]) + 2, 5)]\n      \
    \  else\n            message[i] = lowercase(message[i])\n        end\n    end\n\
    \    return message\nend", "    # YOUR CODE HERE\n    return \"TGST\"\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return message\n\
    end", "    # your code here\nend", "    # your code here\nend", "    vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    alphabet = [\"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"]\n    encoded = \"\"\n    for letter in message\n        if letter in vowels\n\
    \            index = findfirst(vowels, letter)\n            encoded = encoded\
    \ * alphabet[index + 2]\n        else\n            encoded = encoded * letter\n\
    \        end\n    end\n    return encoded\nend", "    # your code here\nend",
  "    message = uppercase(message)\n    vowels = \"AEIOU\"\n    for i in 1:length(message)\n\
    \        if message[i] in vowels\n            message[i] = vowels[(findfirst(vowels,\
    \ message[i]) + 2) % 5]\n        end\n    end\n    return lowercase(message)\n\
    end", "    # YOUR CODE HERE\nend", "    vowels = \"aeiou\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded = \"\"\n    for c in message\n        if c in letters\n        \
    \    if c in vowels\n                encoded *= letters[(findfirst(vowels, c)\
    \ + 2) % 5]\n            else\n                encoded *= c\n        else\n  \
    \          encoded *= c\n    end\n    return encoded\nend", "    # YOUR CODE HERE\n\
    \    return \"TGST\"\nend", "    # TODO: Implement me!\n    return \"TGST\"\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    vowels = \"aeiou\"\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded = \"\"\n    for c in message\n\
    \        if c in vowels\n            index = findfirst(vowels, c)\n          \
    \  encoded *= alphabet[index + 2]\n        elseif c in alphabet\n            index\
    \ = findfirst(alphabet, c)\n            encoded *= alphabet[index + 2]\n     \
    \   else\n            encoded *= c\n        end\n    end\n    return encoded\n\
    end", "    # your code here\nend", "    # YOUR CODE HERE\n    return \"TGST\"\n\
    end", "    # your code here\nend", "    # your code here\n    return \"TGST\"\n\
    end", "    # your code here\nend", "    # Your code here\nend", "    # YOUR CODE\
    \ HERE\n    return \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\n    return \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE\
    \ HERE\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\n    return \"\
    TGST\"\nend", "    # your code here\nend", "    # your code here\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    encoded = \"\"\n    for char in message\n\
    \        if char in vowels\n            encoded *= encode_vowel(char)\n      \
    \  else\n            encoded *= encode_consonant(char)\n        end\n    end\n\
    \    return encoded\nend", "    # your code here\nend", "    # your code here\n\
    end", "    # TODO: implement this function\n    return \"\"\nend", "    vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    encoded_message = \"\"\n    for char in message\n        if char in vowels\n\
    \            index = findfirst(vowels, char)\n            encoded_message *= alphabet[index\
    \ + 2]\n        elseif char in alphabet\n            index = findfirst(alphabet,\
    \ char)\n            encoded_message *= alphabet[index + 2]\n        else\n  \
    \          encoded_message *= char\n        end\n    end\n    return uppercase(encoded_message)\n\
    end", "    # your code here\n    return \"TGST\"\nend", "    new_message = \"\"\
    \n    for i in message\n        if i in \"aeiou\"\n            new_message = new_message\
    \ * i[2:]\n        elseif i in \"AEIOU\"\n            new_message = new_message\
    \ * i[2:]\n        else\n            new_message = new_message * i\n        end\n\
    \    end\n    return new_message\nend", "    # YOUR CODE HERE\nend", "    # YOUR\
    \ CODE HERE\n    return \"TGST\"\nend", "    # your code here\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # Your code here\n    return \"TGST\"\nend", "    # your code here\n    return\
    \ \"TGST\"\nend", "    # your code here\nend", "    # YOUR CODE HERE\n    return\
    \ \"TGST\"\nend", "    # your code here\n    return \"TGST\"\nend", "    # your\
    \ code here\nend", "    # YOUR CODE HERE\nend", "    # YOUR CODE HERE\nend", " \
    \   # your code here\nend", "    # your code here\nend", "    # YOUR CODE HERE\n\
    end", "    # Your code here\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
