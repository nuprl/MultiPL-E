name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a vector of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ vector.\n    For example, if you are given \"Slices\" as the class and a vector\
  \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: ["    strength = 0\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        cap = 0\n        sm = 0\n        for letter in extension\n\
    \            if letter in string(uppercase(letter))\n                cap += 1\n\
    \            else\n                sm += 1\n            end\n        end\n   \
    \     if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # Your code here\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\nend", "    strengths = [sum(isupper.(ext)) - sum(islower.(ext))\
    \ for ext in extensions]\n    strongest_ext = extensions[argmax(strengths)]\n\
    \    return \"$class_name.$strongest_ext\"\nend", "    # your code here\n    return\
    \ \"\"\nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\n    return \"my_class.AA\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\nend", "    # your code here\n    return \"my_class.AA\"\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for i in 1:length(extensions)\n\
    \        ext = extensions[i]\n        CAP = 0\n        SM = 0\n        for j in\
    \ 1:length(ext)\n            if ext[j] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n     \
    \           CAP += 1\n            elseif ext[j] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                SM += 1\n            end\n        end\n        if CAP - SM >\
    \ strength\n            strength = CAP - SM\n            strongest_extension =\
    \ ext\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # Your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\n    return \"my_class.AA\"\nend", "    # your code here\nend", "    #\
    \ Your code here\n    return \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\nend", "    # Your code here\n    return \"my_class.AA\"\n\
    end", "    # Your code here\nend", "    # Your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        current_strength = count(isupper,\
    \ extension) - count(islower, extension)\n        if current_strength > strength\n\
    \            strength = current_strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # YOUR CODE HERE\n    return \"my_class.AA\"\nend", "    strength = 0\n   \
    \ for i in 1:length(extensions)\n        if strength < count_upper(extensions[i])\
    \ - count_lower(extensions[i])\n            strength = count_upper(extensions[i])\
    \ - count_lower(extensions[i])\n            strongest_extension = extensions[i]\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for i in 1:length(extensions)\n\
    \        extension = extensions[i]\n        cap = 0\n        sm = 0\n        for\
    \ j in 1:length(extension)\n            if extension[j] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \                cap += 1\n            elseif extension[j] in 'abcdefghijklmnopqrstuvwxyz'\n\
    \                sm += 1\n            end\n        end\n        if cap - sm >\
    \ strength\n            strength = cap - sm\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        CAP = sum(isupper.(extension))\n\
    \        SM = sum(islower.(extension))\n        if CAP - SM > strength\n     \
    \       strength = CAP - SM\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = 0\n        sm = 0\n        for letter in extension\n          \
    \  if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                cap += 1\n     \
    \       elseif letter in 'abcdefghijklmnopqrstuvwxyz'\n                sm += 1\n\
    \            end\n        end\n        if cap - sm > strength\n            strength\
    \ = cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    strengths = []\n\
    \    for i in 1:length(extensions)\n        strength = 0\n        for j in 1:length(extensions[i])\n\
    \            if isupper(extensions[i][j])\n                strength += 1\n   \
    \         else\n                strength -= 1\n            end\n        end\n\
    \        push!(strengths, strength)\n    end\n    max_strength = maximum(strengths)\n\
    \    max_index = findall(strengths .== max_strength)[1]\n    return class_name\
    \ * \".\" * extensions[max_index]\nend", "    # Your code here\n    return \"\
    my_class.AA\"\nend", "    # Your code here\n    return \"my_class.AA\"\nend",
  "    # your code here\nend", "    # your code here\n    return \"my_class.AA\"\n\
    end", "    # your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\nend", "    # your code here\n    return \"my_class.AA\"\nend", "    #\
    \ your code here\n    return \"my_class.AA\"\nend", "    # Your code here\n  \
    \  return \"my_class.AA\"\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\n    return \"\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\n    return \"my_class.AA\"\nend", "    # Your code here\n\
    \    return \"my_class.AA\"\nend", "    # Your code here\n    return \"my_class.AA\"\
    \nend", "    # Your code here\n    return \"my_class.AA\"\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        extension_strength = count(isupper, extension) - count(islower,\
    \ extension)\n        if extension_strength > strength\n            strength =\
    \ extension_strength\n            strongest_extension = extension\n        end\n\
    \    end\n    return class_name * \".\" * strongest_extension\nend", "    # Your\
    \ code here\nend", "    strength = -Inf\n    strongest_extension = \"\"\n    for\
    \ extension in extensions\n        cap = sum(isupper.(extension))\n        sm\
    \ = sum(islower.(extension))\n        if cap - sm > strength\n            strength\
    \ = cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    # your code here\n\
    end", "    # your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\n    return \"my_class.AA\"\nend", "    # Your code here\n    return \"\
    my_class.AA\"\nend", "    strength = 0\n    strongest_extension = \"\"\n    for\
    \ extension in extensions\n        cap = sum(isupper.(extension))\n        sm\
    \ = sum(islower.(extension))\n        if cap - sm > strength\n            strength\
    \ = cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    strength = 0\n\
    \    strongest_extension = \"\"\n    for extension in extensions\n        cap\
    \ = 0\n        sm = 0\n        for letter in extension\n            if letter\
    \ in string('A':'Z')\n                cap += 1\n            elseif letter in string('a':'z')\n\
    \                sm += 1\n            end\n        end\n        if cap - sm >\
    \ strength\n            strength = cap - sm\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        extension_strength = sum(isupper.(extension)) - sum(islower.(extension))\n\
    \        if extension_strength > strength\n            strength = extension_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ \"$class_name.$strongest_extension\"\nend", "    # your code here\nend", " \
    \   # Your code here\nend", "    # your code here\nend", "    # your code here\n\
    \    return \"my_class.AA\"\nend", "    # Your code here\nend", "    # your code\
    \ here\n    return \"my_class.AA\"\nend", "    # Your code here\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = [sum(isupper.(ext)) - sum(islower.(ext)) for ext in extensions]\n\
    \    return class_name * \".\" * extensions[argmax(strength)]\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # YOUR CODE HERE\n    return \"my_class.AA\"\nend", "    # Your code\
    \ here\nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension\
    \ in extensions\n        if strength < sum(isupper.(extension)) - sum(islower.(extension))\n\
    \            strength = sum(isupper.(extension)) - sum(islower.(extension))\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    # YOUR CODE HERE\n    return\
    \ \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension = \"\"\n \
    \   for extension in extensions\n        extension_strength = 0\n        for letter\
    \ in extension\n            if letter in string('A':'Z')\n                extension_strength\
    \ += 1\n            elseif letter in string('a':'z')\n                extension_strength\
    \ -= 1\n            end\n        end\n        if extension_strength > strength\n\
    \            strength = extension_strength\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # your code here\n    return \"my_class.AA\"\nend", "    strength =\
    \ 0\n    strongest_extension = \"\"\n    for extension in extensions\n       \
    \ cap = count(isupper, extension)\n        sm = count(islower, extension)\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # Your code here\n    return \"my_class.AA\"\nend", "    strength =\
    \ 0\n    strongest_extension = \"\"\n    for extension in extensions\n       \
    \ cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n    \
    \    if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # Your code here\n    return \"\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        extension_strength = count(isupper,\
    \ extension) - count(islower, extension)\n        if extension_strength > strength\n\
    \            strength = extension_strength\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    # Your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\nend", "    # Your code here\nend", "    strength = -Inf\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\nend", "    # YOUR\
    \ CODE HERE\n    return \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\nend", "    # Your code goes here\n    return \"my_class.AA\"\
    \nend", "    # your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\n    return \"my_class.AA\"\nend", "    # your code here\n    return \"\
    my_class.AA\"\nend", "    # Your code here\nend", "    # your code here\n    return\
    \ \"my_class.AA\"\nend", "    strength = -1\n    strongest_extension = \"\"\n\
    \    for extension in extensions\n        CAP = sum(extension .>= 'A' .& extension\
    \ .<= 'Z')\n        SM = sum(extension .>= 'a' .& extension .<= 'z')\n       \
    \ if CAP - SM > strength\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for i in 1:length(extensions)\n\
    \        ext = extensions[i]\n        CAP = sum(isupper.(ext))\n        SM = sum(islower.(ext))\n\
    \        if CAP - SM > strength\n            strength = CAP - SM\n           \
    \ strongest_extension = ext\n        end\n    end\n    return class_name * \"\
    .\" * strongest_extension\nend", "    strength = 0\n    strongest_extension =\
    \ \"\"\n    for extension in extensions\n        cap = 0\n        sm = 0\n   \
    \     for letter in extension\n            if letter in string('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n\
    \                cap += 1\n            else\n                sm += 1\n       \
    \     end\n        end\n        if cap - sm > strength\n            strength =\
    \ cap - sm\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name * \".\" * strongest_extension\nend", "    strength = 0\n\
    \    strongest_extension = \"\"\n    for extension in extensions\n        if extension\
    \ != \"\"\n            cap = sum(isupper.(extension))\n            sm = sum(islower.(extension))\n\
    \            if cap - sm > strength\n                strength = cap - sm\n   \
    \             strongest_extension = extension\n            end\n        end\n\
    \    end\n    return class_name * \".\" * strongest_extension\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = 0\n        sm = 0\n        for letter in extension\n            if letter\
    \ in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                cap += 1\n            elseif\
    \ letter in 'abcdefghijklmnopqrstuvwxyz'\n                sm += 1\n          \
    \  end\n        end\n        if cap - sm > strength\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n        end\n    end\n  \
    \  return class_name * \".\" * strongest_extension\nend", "    # YOUR CODE HERE\n\
    \    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    # Your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\n    return \"my_class.AA\"\nend", "    # YOUR CODE HERE\n    return \"\
    my_class.AA\"\nend", "    strengths = [sum(isupper.(ext)) - sum(islower.(ext))\
    \ for ext in extensions]\n    strongest_ext = extensions[argmax(strengths)]\n\
    \    return \"$class_name.$strongest_ext\"\nend", "    # Your code here\n    return\
    \ \"my_class.AA\"\nend", "    # Your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # YOUR CODE HERE\n    return \"my_class.AA\"\nend", "    strength = 0\n   \
    \ strongest_extension = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(x in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ for x in extension)\n        sm = sum(x in \"abcdefghijklmnopqrstuvwxyz\" for\
    \ x in extension)\n        if cap - sm > strength\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n        end\n    end\n  \
    \  return class_name * \".\" * strongest_extension\nend", "    # your code goes\
    \ here\n    return \"my_class.AA\"\nend", "    # your code here\n    return \"\
    my_class.AA\"\nend", "    # your code here\n    return \"my_class.AA\"\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        CAP = sum(isupper.(extension))\n        SM = sum(islower.(extension))\n\
    \        if CAP - SM > strength\n            strength = CAP - SM\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = -1\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for i in 1:length(extensions)\n\
    \        extension = extensions[i]\n        CAP = sum(isupper.(extension))\n \
    \       SM = sum(islower.(extension))\n        if CAP - SM > strength\n      \
    \      strength = CAP - SM\n            strongest_extension = extension\n    \
    \    end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\n    return \"my_class.AA\"\nend", "    # your code here\n\
    end", "    # Your code here\nend", "    # your code goes here\n    return \"\"\
    \nend", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in 1:length(extensions)\n        if strength < (count(isupper,\
    \ extensions[i]) - count(islower, extensions[i]))\n            strength = count(isupper,\
    \ extensions[i]) - count(islower, extensions[i])\n            strongest_extension\
    \ = extensions[i]\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = 0\n        sm = 0\n \
    \       for letter in extension\n            if letter in string('A':'Z')\n  \
    \              cap += 1\n            elseif letter in string('a':'z')\n      \
    \          sm += 1\n            end\n        end\n        if cap - sm > strength\n\
    \            strength = cap - sm\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strongest_extension = \"\"\n    strength = 0\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # Your code here\nend", "    # your\
    \ code here\n    return \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in 1:length(extensions)\n        if strength < (count(x ->\
    \ isupper(x), extensions[i]) - count(x -> islower(x), extensions[i]))\n      \
    \      strength = count(x -> isupper(x), extensions[i]) - count(x -> islower(x),\
    \ extensions[i])\n            strongest_extension = extensions[i]\n        end\n\
    \    end\n    return class_name * \".\" * strongest_extension\nend", "    # Your\
    \ code here\n    return \"my_class.AA\"\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in extensions\n        if strength < count_upper(i) - count_lower(i)\n\
    \            strength = count_upper(i) - count_lower(i)\n            strongest_extension\
    \ = i\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        extension_strength = sum(isupper.(extension)) - sum(islower.(extension))\n\
    \        if extension_strength > strength\n            strength = extension_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for i in 1:length(extensions)\n        cap = sum(isupper.(extensions[i]))\n\
    \        sm = sum(islower.(extensions[i]))\n        if cap - sm > strength\n \
    \           strength = cap - sm\n            strongest_extension = extensions[i]\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    # Your code here\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\n    return \"\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\n    return \"my_class.AA\"\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    strengths = [sum(isupper.(ext)) - sum(islower.(ext)) for ext in extensions]\n\
    \    strongest_extension = extensions[findmax(strengths)[2]]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    # Your code here\nend", "    strength = -Inf\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # Your code here\n    return \"my_class.AA\"\nend", "    # your code here\n\
    \    return \"my_class.AA\"\nend", "    strength = [length(uppercase(ext)) - length(lowercase(ext))\
    \ for ext in extensions]\n    max_strength = maximum(strength)\n    max_index\
    \ = findall(strength .== max_strength)[1]\n    return \"$class_name.$(extensions[max_index])\"\
    \nend", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # Your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # your code here\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n  \
    \      if cap - sm > strength\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name * \".\" * strongest_extension\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        extension_strength = sum(isupper.(extension)) - sum(islower.(extension))\n\
    \        if extension_strength > strength\n            strength = extension_strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ \"$class_name.$strongest_extension\"\nend", "    strength = -1\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        temp_strength = count(isupper,\
    \ extension) - count(islower, extension)\n        if temp_strength > strength\n\
    \            strength = temp_strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    # your code here\n    return \"my_class.AA\"\nend", "    # your code here\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    # Your code here\nend", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions\n     \
    \   cap = 0\n        sm = 0\n        for letter in extension\n            if letter\
    \ in string('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n                cap += 1\n        \
    \    elseif letter in string('abcdefghijklmnopqrstuvwxyz')\n                sm\
    \ += 1\n            end\n        end\n        if cap - sm > strength\n       \
    \     strength = cap - sm\n            strongest_extension = extension\n     \
    \   end\n    end\n    return class_name * \".\" * strongest_extension\nend", " \
    \   # your code here\nend", "    # your code here\n    return \"my_class.AA\"\n\
    end", "    strength = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions\n        cap = sum(isupper.(extension))\n        sm = sum(islower.(extension))\n\
    \        if cap - sm > strength\n            strength = cap - sm\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = 0\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        CAP = sum(isupper.(extension))\n\
    \        SM = sum(islower.(extension))\n        if CAP - SM > strength\n     \
    \       strength = CAP - SM\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions\n\
    \        CAP = sum(isupper.(extension))\n        SM = sum(islower.(extension))\n\
    \        if CAP - SM > strength\n            strength = CAP - SM\n           \
    \ strongest_extension = extension\n        end\n    end\n    return class_name\
    \ * \".\" * strongest_extension\nend", "    strength = -1\n    strongest_extension\
    \ = \"\"\n    for extension in extensions\n        cap = sum(isupper.(extension))\n\
    \        sm = sum(islower.(extension))\n        if cap - sm > strength\n     \
    \       strength = cap - sm\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name * \".\" * strongest_extension\nend",
  "    caps = [count(isupper,ext) for ext in extensions]\n    sms = [count(islower,ext)\
    \ for ext in extensions]\n    strengths = [caps[i] - sms[i] for i in 1:length(extensions)]\n\
    \    strongest_extension = extensions[argmax(strengths)]\n    return \"$class_name.$strongest_extension\"\
    \nend", "    # your code here\n    return \"my_class.AA\"\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # Your code here\n    return \"\
    my_class.AA\"\nend", "    # your code here\n    return \"my_class.AA\"\nend",
  "    # your code here\nend", "    # Your code here\n    return \"my_class.AA\"\n\
    end", "    # your code here\n    return class_name\nend", "    # your code here\n\
    \    return \"my_class.AA\"\nend", "    # your code here\n    return \"my_class.AA\"\
    \nend", "    # your code here\nend", "    # Your code here\n    return \"my_class.AA\"\
    \nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
