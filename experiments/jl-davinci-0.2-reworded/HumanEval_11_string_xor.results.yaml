name: HumanEval_11_string_xor
language: jl
results:
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string(int(a[i]) \u22BB int(b[i]))\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpirwjyz6m.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpirwjyz6m.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpirwjyz6m.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpirwjyz6m.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpirwjyz6m.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpirwjyz6m.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpirwjyz6m.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpirwjyz6m.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpirwjyz6m.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpirwjyz6m.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpirwjyz6m.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpirwjyz6m.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirwjyz6m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c *= \"0\"\n        else\n            c\
    \ *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    c = String[]\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(c, \"0\")\n        else\n        \
    \    push!(c, \"1\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c *= \"0\"\n        else\n            c\
    \ *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return join([(x == y ? \"0\" : \"1\") for (x, y) in\
    \ zip(a, b)])\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length.\"))\n    end\n    result = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n   \
    \     else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # convert to integer\n    a_int = parse(Int, a, base=2)\n\
    \    b_int = parse(Int, b, base=2)\n    # xor\n    xor_int = xor(a_int, b_int)\n\
    \    # convert back to string\n    xor_string = string(xor_int, base=2)\n    return\
    \ xor_string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfda6v7oq.jl:21\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"10010\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfda6v7oq.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfda6v7oq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfda6v7oq.jl:23\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"101\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfda6v7oq.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfda6v7oq.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfda6v7oq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String(length(a))\n    for i in 1:length(a)\n \
    \       if a[i] == b[i]\n            c[i] = \"0\"\n        else\n            c[i]\
    \ = \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgo6er1w9.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n    ...\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpgo6er1w9.jl:7\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo6er1w9.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo6er1w9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgo6er1w9.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmpgo6er1w9.jl:7\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgo6er1w9.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgo6er1w9.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpgo6er1w9.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Clos"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgo6er1w9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    output = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            output = output * \"0\"\n        else\n\
    \            output = output * \"1\"\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    # TODO: implement this function\n    return \"100\"\
    \nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp82j5kv42.jl:15\n  Expression: candidate(\"\
    111000\", \"101010\") == \"010010\"\n   Evaluated: \"100\" == \"010010\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82j5kv42.jl:15 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82j5kv42.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp82j5kv42.jl:16\n  Expression: candidate(\"1\", \"1\") == \"\
    0\"\n   Evaluated: \"100\" == \"0\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82j5kv42.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82j5kv42.jl:14\ntest set: Test\
    \ Failed at /tmp/tmp82j5kv42.jl:17\n  Expression: candidate(\"0101\", \"0000\"\
    ) == \"0101\"\n   Evaluated: \"100\" == \"0101\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp82j5kv42.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp82j5kv42.jl:14\nTest Summary:\
    \ | Fail  Total\ntest set      |    3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82j5kv42.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    result = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n        else\n\
    \            result *= \"1\"\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    c = String[]\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(c, \"0\")\n        else\n        \
    \    push!(c, \"1\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length.\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of the same length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length\"))\n    end\n    result = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n   \
    \     else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    c = \"\"\n    for i in 1:length(a)\n   \
    \     if a[i] == b[i]\n            c = c * \"0\"\n        else\n            c\
    \ = c * \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        c = c *\
    \ string(int(a[i]) \u22BB int(b[i]))\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg0c71fah.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  UndefVarError:\
    \ int not defined\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpg0c71fah.jl:9\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0c71fah.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0c71fah.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpg0c71fah.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  UndefVarError: int not defined\n  Stacktrace:\n\
    \   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpg0c71fah.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0c71fah.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0c71fah.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpg0c71fah.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  UndefVarError: int not defined\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmpg0c71fah.jl:9\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpg0c71fah.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg0c71fah.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0c71fah.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Strings\
    \ must be of equal length\")\n    end\n    c = String[]\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(c, \"0\")\n        else\n        \
    \    push!(c, \"1\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length.\")\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c = c * \"0\"\n        else\n          \
    \  c = c * \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = String[]\n    for i in 1:length(a)\n        push!(c,\
    \ xor(parse(Int, a[i]), parse(Int, b[i])))\n    end\n    return join(c)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsbqarcho.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ Cannot `convert` an object of type Int64 to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmpsbqarcho.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsbqarcho.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsbqarcho.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsbqarcho.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: Cannot `convert` an object\
    \ of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] push!(a::Vector{String}, item::Int64)\n     @\
    \ Base ./array.jl:994\n   [2] string_xor(a::String, b::String)\n     @ Main /tmp/tmpsbqarcho.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbqarcho.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Strings must be of equal length\"))\n    end\n    return join([(x == y ? \"0\"\
    \ : \"1\") for (x, y) in zip(a, b)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length\"))\n    end\n    c = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            c *= \"0\"\n        else\n\
    \            c *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length\"))\n    end\n    result = \"\"\n    for\
    \ i in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n   \
    \     else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Lengths\
    \ of inputs must be equal\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i = 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return join([xor(a[i], b[i]) for i in 1:length(a)])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuzferp2e.jl:14\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching xor(::Char, ::Char)\n  Closest candidates are:\n    xor(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main\
    \ ./none:0\n   [2] iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n\
    \     @ ./array.jl:724 [inlined]\n   [4] string_xor(a::String, b::String)\n  \
    \   @ Main /tmp/tmpuzferp2e.jl:7\n   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuzferp2e.jl:14 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuzferp2e.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpuzferp2e.jl:15\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching xor(::Char,\
    \ ::Char)\n  Closest candidates are:\n    xor(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \   [1] (::var\"#1#2\"{String, String})(i::Int64)\n     @ Main ./none:0\n   [2]\
    \ iterate\n     @ ./generator.jl:47 [inlined]\n   [3] collect\n     @ ./array.jl:724\
    \ [inlined]\n   [4] string_xor(a::String, b::String)\n     @ Main /tmp/tmpuzferp2e.jl:7\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpuzferp2e.jl:15 [inlined]\n\
    \   [7] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpuzferp2e.jl:13\ntest set:\
    \ Error During Test at /tmp/tmpuzferp2e.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ xor(::Char, ::Char)\n  Closest candidates are"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuzferp2e.jl:11\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of the same length\"))\n    end\n    result = \"\"\n    for i\
    \ in 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n     \
    \   else\n            result *= \"1\"\n        end\n    end\n    return result\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of equal length\")\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c = c * \"0\"\n        else\n          \
    \  c = c * \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Strings\
    \ must be of equal length\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length.\"))\n    end\n    result = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n        else\n\
    \            result *= \"1\"\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Inputs must be of equal length\"))\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length\"))\n    end\n    c = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            c *= \"0\"\n        else\n\
    \            c *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Input strings\
    \ must be of the same length.\")\n    end\n    result = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            result *= \"0\"\n        else\n        \
    \    result *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"a and b\
    \ must be of equal length\")\n    end\n    c = String(length(a))\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            c[i] = \"0\"\n        else\n\
    \            c[i] = \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8bimov_m.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"111000\", \"101010\") == \"010010\"\n  MethodError:\
    \ no method matching String(::Int64)\n  Closest candidates are:\n    String(!Matched::String)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n    String(!Matched::Vector{UInt8})\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n    String(!Matched::Symbol)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n    ...\n\
    \  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main /tmp/tmp8bimov_m.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bimov_m.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bimov_m.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8bimov_m.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"1\", \"1\") == \"0\"\n  MethodError: no method matching String(::Int64)\n\
    \  Closest candidates are:\n    String(!Matched::String) at /shared/centos7/julia/1.7.3/share/julia/base/boot.jl:363\n\
    \    String(!Matched::Vector{UInt8}) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:53\n\
    \    String(!Matched::Symbol) at /shared/centos7/julia/1.7.3/share/julia/base/strings/string.jl:83\n\
    \    ...\n  Stacktrace:\n   [1] string_xor(a::String, b::String)\n     @ Main\
    \ /tmp/tmp8bimov_m.jl:10\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8bimov_m.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8bimov_m.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp8bimov_m.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"0101\", \"0000\") == \"0101\"\n  MethodError: no method matching\
    \ String(::Int64)\n  Cl"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8bimov_m.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    c = String[]\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(c, \"0\")\n        else\n        \
    \    push!(c, \"1\")\n        end\n    end\n    return join(c)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    result = String[]\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            push!(result, \"0\")\n        else\n   \
    \         push!(result, \"1\")\n        end\n    end\n    return join(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
    111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\"\
    )\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    Input strings must be of equal length.\"))\n    end\n    c = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            c *= \"0\"\n        else\n\
    \            c *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"\
    101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        println(\"Error:\
    \ Strings must be of equal length\")\n        return\n    end\n    result = \"\
    \"\n    for i = 1:length(a)\n        if a[i] == b[i]\n            result = result\
    \ * \"0\"\n        else\n            result = result * \"1\"\n        end\n  \
    \  end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\
    \t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"\
    1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    return join([(x == y ? \"0\" : \"1\") for (x, y) in\
    \ zip(a, b)])\nend\nusing Test\n\n@testset begin\n\ncandidate = string_xor;\n\t\
    @test(candidate(\"111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\"\
    , \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    result = \"\"\n    for i in 1:length(a)\n        if\
    \ a[i] == b[i]\n            result *= \"0\"\n        else\n            result\
    \ *= \"1\"\n        end\n    end\n    return result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    result = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n        else\n\
    \            result *= \"1\"\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    c = \"\"\n    for i = 1:length(a)\n    \
    \    if a[i] == b[i]\n            c = c * \"0\"\n        else\n            c =\
    \ c * \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of equal length\"))\n    end\n    result = \"\"\n    for i in\
    \ 1:length(a)\n        if a[i] == b[i]\n            result *= \"0\"\n        else\n\
    \            result *= \"1\"\n        end\n    end\n    return result\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\"\
    , \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        throw(ArgumentError(\"\
    a and b must be of the same length\"))\n    end\n    c = \"\"\n    for i in 1:length(a)\n\
    \        if a[i] == b[i]\n            c *= \"0\"\n        else\n            c\
    \ *= \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\"\
    )\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    c = \"\"\n    for i in 1:length(a)\n        if a[i]\
    \ == b[i]\n            c = c * \"0\"\n        else\n            c = c * \"1\"\n\
    \        end\n    end\n    return c\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_xor;\n\t@test(candidate(\"111000\", \"101010\") == \"010010\")\n\t\
    @test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"0101\", \"0000\"\
    ) == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n \
    \   Perform binary XOR on these inputs and return result also as a string.\n \
    \   >>> string_xor(\"010\", \"110\")\n    \"100\"\n    \"\"\"\nfunction string_xor(a::String,\
    \ b::String)::String \n    if length(a) != length(b)\n        error(\"Inputs must\
    \ be of equal length\")\n    end\n    c = \"\"\n    for i in 1:length(a)\n   \
    \     if a[i] == b[i]\n            c = c * \"0\"\n        else\n            c\
    \ = c * \"1\"\n        end\n    end\n    return c\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_xor;\n\t@test(candidate(\"111000\", \"101010\")\
    \ == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\t@test(candidate(\"\
    0101\", \"0000\") == \"0101\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
