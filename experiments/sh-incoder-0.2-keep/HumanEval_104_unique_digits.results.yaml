language: sh
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 1 $((${#x}-1)))\n    do\n        if [[ ${x:$i:1} == 0\
    \ ]]\n        then\n            echo \"$output\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x} - 1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            echo \"$output\"\n            break\n        fi\n    done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x} - 1))); do\n        if [[ ${x[i]} -eq 0 ]];\
    \ then\n            x=${x::i}\n            break\n        fi\n    done\n    echo\
    \ \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1s97rhyp.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=\"${x:$i:1}\"\n        if [[ $digit =~ ^[0-9]+$ ]]; then\n           \
    \ if [[ ${#output[@]} -eq 0 ]]; then\n                output+=(\"$digit\")\n \
    \           else\n                if [[ ${output[${#output[@]}-1]} -eq $digit\
    \ ]]; then\n                    output+=(\"$digit\")\n                else\n \
    \                   output+=(\"$digit\" \"${output[${#output[@]}-1]}\")\n    \
    \            fi\n            fi\n        fi\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=0; i<${#output}; i++ )); do\n        if [[ ${output[$i]} -eq\
    \ 0 ]]; then\n            echo \"$output\"\n            break\n        fi\n  \
    \  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgd2roif2.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 1 $((${#x}-1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            output=$(echo \"$output\" | sed \"s/$i/0/g\")\n        fi\n\
    \    done\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x}-1)))\n    do\n        if [[ ${x:$i:1} == 0\
    \ ]]\n        then\n            echo \"$output\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=\"${x:$i:1}\"\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    ${x:$i:1}\")\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=0; i<${#output}; i++ )); do\n        if [[ ${output[$i]} -eq\
    \ 0 ]]; then\n            echo \"$output[$i]\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0gbro_bl.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ arr\n    local -a result\n    local -i i\n    local j\n    local k\n    local\
    \ len\n    local digit\n    local digit\n    local tmp\n    local tmp2\n    local\
    \ tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local\
    \ tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n  \
    \  local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x} - 1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            x=${x:0:$i}\n        fi\n    done\n    echo $x\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)\\([0-9]\\)/\\1\\\
    2/g' | sort -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 1 $((${#x}-1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            x=${x:0:$i}\n        fi\n    done\n    echo \"$x\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ count\n    count=0\n    while [[ $output != \"\" ]]; do\n        if [[ $output\
    \ != $((10#$output)) ]]; then\n            count=$((count+1))\n        fi\n  \
    \      output=$(echo \"$output\" | sed 's/\\([0-9]*\\)$/\\1/')\n    done\n   \
    \ if [[ $count -gt 0 ]]; then\n        echo \"$x\"\n    else\n        echo \"\
    $x\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3c11mxic.sh: line 19: 10#15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if (( ${digit:0:1} == 0 )) ; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\" | sort -n | uniq\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr3haxfhe.sh: line 18: ((: == 0 : syntax error: operand expected
    (error token is "== 0 ")

    /tmp/tmpr3haxfhe.sh: line 18: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    /tmp/tmpr3haxfhe.sh: line 18: ((: == 0 : syntax error: operand expected (error
    token is "== 0 ")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x}-1)))\n    do\n        if [[ ${x:$i:1} == 0\
    \ ]]\n        then\n            echo \"$output\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sort -u | sed 's/^ *//g')\n    echo\
    \ \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' ',' | sort -u | tr '.' ' ')\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local digit\n\
    \    local i\n    local output\n    local count\n    local digits_set\n    local\
    \ digits_sorted\n    local digits_sorted_index\n    local digits_sorted_index2\n\
    \    local digits_sorted_index3\n    local digits_sorted_index4\n    local digits_sorted_index5\n\
    \    local digits_sorted_index6\n    local digits_sorted_index7\n    local digits_sorted_index8\n\
    \    local digits_sorted_index9\n    local digits_sorted_index10\n    local digits_sorted_index11\n\
    \    local digits_sorted_index12\n    local digits_sorted_index13\n    local digits_sorted_index14\n\
    \    local digits_sorted_index15\n    local digits_sorted_index16\n    local digits_sorted_index17\n\
    \    local digits_sorted_index18\n    local digits_sorted_index19\n    local digits_sorted_index20\n\
    \    local digits_sorted_index21\n    local digits_sorted_index22\n    local digits_sorted_index23\n\
    \    local digits_sorted_index24\n    local digits_sorted_index25\n    local digits_sorted_index26\n\
    \    local digits_sorted_index27\n    local digits_sorted_index28\n    local digits_sorted_index29\n\
    \    local digits_sorted_index30\n    local digits_sorted_index31\n    local digits_sorted_index32\n\
    \    local digits_sorted_index33\n    local digits_sorted_index34\n    local digits_sorted_index35\n\
    \    local digits_sorted_index36\n    local digits_sorted_index37\n    local digits_sorted_index38\n\
    \    local digits_sorted_index39\n    local digits_sorted_index40\n    local digits_sorted_index41\n\
    \    local digits_sorted_index42\n    local digits_sorted_index43\n    local digits_sorted_index44\n\
    \    local digits_sorted_index45\n    local digits_sorted_index46\n    local digits_sorted_index47\n\
    \    local digits_sorted_index48\n    local digits_sorted_index49\n    local digits_sorted_index50\n\
    \    local digits_sorted_index51\n    local digits_sorted_index52\n    local digits_sorted_index53\n\
    \    local digits_sorted_index54\n    local digits_sorted_index55\n    local digits_sorted_index56\n\
    \    local digits_sorted_index57\n    local digits_sorted_index58\n    local digits_sorted_index59\n\
    \    local digits_sorted_index60\n    \n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ y\n    local -a z\n    local -a result\n    local -a tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n\
    \    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n\
    \    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n\
    \    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n\
    \    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n\
    \    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n\
    \    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n\
    \    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n\
    \    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n\
    \    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n\
    \    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n\
    \    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n\
    \    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n\
    \    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n\
    \    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n\
    \    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n\
    \    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ y\n    local -a result\n    local -a tmp\n    local -a count\n    local -i i\n\
    \    local j\n    local k\n    local len\n    local digit\n    local tmp\n   \
    \ local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    \    local tmp\n    local digit\n    local tmp\n    local digit\n    local tmp\n\
    \    local digit\n    local tmp\n    local digit\n    local tmp\n    local digit\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=1; i<${#output}; i++ )); do\n        if [[ ${output[$i]} ==\
    \ 0 ]]; then\n            echo \"${output[$i]}\"\n        fi\n    done\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    output=$(echo\
    \ \"$output\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' ',' | sort -u)\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ y\n    local -a z\n    local -a result\n    local -a tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n\
    \    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n\
    \    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n\
    \    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n\
    \    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n\
    \    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n\
    \    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n\
    \    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n\
    \    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n\
    \    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n\
    \    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n\
    \    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n\
    \    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n\
    \    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n\
    \    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n\
    \    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n\
    \    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    ${x:$i:1}\")\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    while\
    \ [ -n \"$output\" ]; do\n        local digit=\"$output\"\n        local index=0\n\
    \        while [ -n \"$digit\" ]; do\n            digit=$(echo \"$digit\" | sed\
    \ 's/\\([0-9]*\\)$/\\1/')\n            if [ -z \"$digit\" ]; then\n          \
    \      break\n            fi\n            ((index++))\n        done\n        if\
    \ [ \"$index\" -eq 0 ]; then\n            echo \"$digit\"\n        fi\n      \
    \  output=$(echo \"$output\" | sed \"s/$digit//\")\n    done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660032328
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=1; i<${#output}; i++ )); do\n        if [[ ${output[$i]} ==\
    \ 0 ]]; then\n            echo \"${output[$i]}\"\n        fi\n    done\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 1 $((${#x}-1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            output=$(echo \"$output\" | sed \"s/$i/0/g\")\n        fi\n\
    \    done\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    local i\n    for i in $x; do\n        if [[\
    \ $i =~ ^[0-9]+$ ]]; then\n            if (( ${#i} % 2 == 0 )); then\n       \
    \         output+=(\"$i\")\n            fi\n        fi\n    done\n    sort -u\
    \ <<< \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/\\1\\n/g' | sort\
    \ -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\" | sort -n | uniq\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    x=$1\n\
    \    local i\n    local j\n    local output\n    output=()\n    for ((i=0; i<${#x};\
    \ i++)); do\n        j=$((i+1))\n        if [[ ${x[i]} -eq ${x[j]} ]]; then\n\
    \            continue\n        fi\n        output+=(\"${x[i]}\")\n    done\n \
    \   echo \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3e6ho_ip.sh: line 21: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=0; i<${#output}; i++ )); do\n        if [[ ${output[$i]} -eq\
    \ 0 ]]; then\n            echo \"$output\"\n            break\n        fi\n  \
    \  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgd2roif2.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    sort -u <<<\"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=1; i<${#x}; i++ )); do\n        if [[ ${x[i]} -eq ${output}\
    \ ]]; then\n            x=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n      \
    \      output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n        fi\n    done\n\
    \    echo \"$x\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp8nxb9qam.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ arr\n    local -a res\n    local -i i\n    local j\n    local k\n    local len\n\
    \n    arr=( $1 )\n    len=${#arr[@]}\n    res=()\n    for ((i=0; i<len; i++));\
    \ do\n        j=0\n        k=0\n        while ((k<len) && (arr[k]>0)); do\n  \
    \          if ((arr[k]%10)==0) {\n                arr[k]=arr[k]/10\n         \
    \       j=$((j+1))\n            else\n                arr[k]=arr[k]%10\n     \
    \           k=$((k+1))\n            fi\n        done\n        if ((j>0)); then\n\
    \            res+=( ${arr[@]:$((i+1)):$j} )\n        fi\n    done\n    res=( \"\
    ${res[@]}\" )\n    sort -u <<< \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4_wyd1m6.sh: line 28: syntax error near unexpected token `==0''

    /tmp/tmp4_wyd1m6.sh: line 28: `            if ((arr[k]%10)==0) {''

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    x=$1\n\
    \    local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq\
    \ -d)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    x=$1\n\
    \    local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n      \
    \  local digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n          \
    \  output+=(\"${digit}\")\n        fi\n    done\n    echo ${output[@]}\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\" | sort -u | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    IFS=' ' read -ra arr <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr2 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr3 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr4 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr5 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr6 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr7 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr8 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr9 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr10 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr11 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr12 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr13\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr14 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr15 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr16 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr17 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr18\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr19 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr20 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr21 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr22 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr23\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr24 <<< \"${\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmmv08fwb.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmmv08fwb.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=0; i<${#output}; i++ )); do\n        if [[ ${output[$i]} % 2\
    \ == 0 ]]; then\n            echo \"$output[$i]\"\n        fi\n    done\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnv2qnff3.sh: line 18: conditional binary operator expected

    /tmp/tmpnv2qnff3.sh: line 18: syntax error near `%''

    /tmp/tmpnv2qnff3.sh: line 18: `        if [[ ${output[$i]} % 2 == 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ $digit =~ ^[[:digit:]]+$ ]]; then\n         \
    \   if [[ ${#output[*]} -eq 0 ]]; then\n                output+=(\"$digit\")\n\
    \            else\n                local found=0\n                for (( j=0;\
    \ j<${#output[*]}; j++ )); do\n                    if [[ ${output[$j]} -eq \"\
    $digit\" ]]; then\n                        found=1\n                        break\n\
    \                    fi\n                done\n                if [[ $found -eq\
    \ 0 ]]; then\n                    output+=(\"$digit\")\n                fi\n \
    \           fi\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    while\
    \ [ -n \"$output\" ]; do\n        echo \"$output\"\n        output=$(echo \"$output\"\
    \ | sed 's/\\([0-9]*\\)$/\\1/')\n    done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032328
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x}-1)) )\n    do\n        if [[ ${x:$i:1} == 0\
    \ ]]\n        then\n            echo \"$output\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local ret=()\n    local i\n    local j\n    local k\n    local digit\n    local\
    \ tmp\n    \n    for i in \"${x}\"; do\n        tmp=\"$(echo \"$i\" | sed 's/\\\
    ([0-9]\\)/\\1/g')\"\n        for j in \"${ret[@]}\"; do\n            if [[ \"\
    $j\" == \"$tmp\" ]]; then\n                ret=(\"${ret[@]:j:1})\"\n         \
    \       break\n            fi\n        done\n    done\n    \n    echo \"${ret[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbkwhv966.sh: line 34: syntax error near unexpected token `(''

    /tmp/tmpbkwhv966.sh: line 34: `candidate() {''

    /tmp/tmpbkwhv966.sh: line 35: unique_digits: command not found

    /tmp/tmpbkwhv966.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpbkwhv966.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' ',' | sort | uniq -d)\n    echo\
    \ \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort\
    \ -u | tr -d ' ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local i\n\
    \    local output\n    local count\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local ret=()\n    local i\n    local j\n    local k\n    local digit\n    local\
    \ tmp\n    \n    for i in \"${x}\"; do\n        tmp=()\n        for j in \"${ret[@]}\"\
    ; do\n            if [ \"${j}\" == \"${i}\" ]; then\n                tmp+=(\"\
    ${j}\")\n            fi\n        done\n        \n        for j in \"${tmp[@]}\"\
    ; do\n            digit=\"${j#?}\"\n            if [ \"${digit}\" == \"0\" ];\
    \ then\n                ret=(\"${ret[@]:0:$((${#ret[@]} - 1))}\" \"${j}\")\n \
    \               break\n            fi\n        done\n    done\n    \n    echo\
    \ \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x} - 1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            x=${x:0:$i}\n            output=$(echo \"$output\" | sed \"\
    s/$i/${x:$i:1}/g\")\n        fi\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ arr\n    local -i i\n    local -a ret\n    local -n digit\n    local -n digit2\n\
    \    local -n digit3\n    local -n digit4\n    local -n digit5\n    local -n digit6\n\
    \    local -n digit7\n    local -n digit8\n    local -n digit9\n    local -n digit10\n\
    \    local -n digit11\n    local -n digit12\n    local -n digit13\n    local -n\
    \ digit14\n    local -n digit15\n    local -n digit16\n    local -n digit17\n\
    \    local -n digit18\n    local -n digit19\n    local -n digit20\n    local -n\
    \ digit21\n    local -n digit22\n    local -n digit23\n    local -n digit24\n\
    \    local -n digit25\n    local -n digit26\n    local -n digit27\n    local -n\
    \ digit28\n    local -n digit29\n    local -n digit30\n    local -n digit31\n\
    \    local -n digit32\n    local -n digit33\n    local -n digit34\n    local -n\
    \ digit35\n    local -n digit36\n    local -n digit37\n    local -n digit38\n\
    \    local -n digit39\n    local -n digit40\n    local -n digit41\n    local -n\
    \ digit42\n    local -n digit43\n    local -n digit44\n    local -n digit45\n\
    \    local -n digit46\n    local -n digit47\n    local -n digit48\n    local -n\
    \ digit49\n    local -n digit50\n    local -n digit51\n    local -n digit52\n\
    \    local -n digit53\n    local -n digit54\n    local -n digit55\n    local -n\
    \ digit56\n    local -n digit57\n    local -n digit58\n    local -n digit59\n\
    \    local -n digit60\n    local -n digit61\n    local -n digit62\n    local -n\
    \ digit63\n    local -n digit64\n    local -n digit65\n    local -n digit66\n\
    \    local -n digit67\n    local -n digit68\n    local -n digit69\n    local -n\
    \ digit70\n    local \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local ret=()\n    local i=0\n    while [[ $i -lt ${#x} ]]; do\n        local\
    \ j=0\n        while [[ $j -lt ${#ret[@]} ]] && [[ ${x[$i]} -eq ${ret[$j]} ]];\
    \ do\n            j=$((j+1))\n        done\n        if [[ $j -eq ${#ret[@]} ]];\
    \ then\n            ret+=(\"${x[$i]}\")\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    /tmp/tmp4p8dp6gq.sh: line 18: [[: 15 33 1422 1: syntax error in expression (error
    token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    sort -u <<< \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' ',' | sort -u | tr '.' ' ')\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 0 $((${#x}-1))); do\n        if [[ ${x:$i:1} == 0 ]];\
    \ then\n            x=${x:0:$i}\n            output+=\" $x\"\n        fi\n   \
    \ done\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ count\n    count=0\n    while [[ $output != \"\" ]]; do\n        if [[ $output\
    \ != *[0-9]* ]]; then\n            count=$((count+1))\n        fi\n        output=$(echo\
    \ \"$output\" | sed 's/\\([0-9]*\\)$/\\1/')\n    done\n    if [[ $count -gt 0\
    \ ]]; then\n        echo \"$x\"\n    else\n        echo \"$x\"\n    fi\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660032328
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ arr\n    local -i i\n    local -a result\n\n    x=\"$1\"\n    arr=( $x )\n \
    \   IFS=', ' read -r -a arr <<< \"$x\"\n    result=()\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        (( ${arr[i]} % 2 == 0 )) && result+=( ${arr[i]} )\n    done\n\
    \    IFS=', ' echo \"${result[@]}\"\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local -a\
    \ arr\n    local -i i\n    local -a ret\n    local -a tmp\n    local -a tmp2\n\
    \    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n    local -a tmp6\n\
    \    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n    local -a tmp10\n\
    \    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n    local -a tmp14\n\
    \    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n    local -a tmp18\n\
    \    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n    local -a tmp22\n\
    \    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n    local -a tmp26\n\
    \    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n    local -a tmp30\n\
    \    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n    local -a tmp34\n\
    \    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n    local -a tmp38\n\
    \    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n    local -a tmp42\n\
    \    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n    local -a tmp46\n\
    \    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n    local -a tmp50\n\
    \    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n    local -a tmp54\n\
    \    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n    local -a tmp58\n\
    \    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n    local -a tmp62\n\
    \    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n    local -a tmp66\n\
    \    local -a tmp67\n    local -a tmp68\n    local -a tmp69\n    local -a tmp70\n\
    \    local \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/\\1 /g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    IFS=' ' read -ra arr <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr2 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr3 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr4 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr5 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr6 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr7 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr8 <<<\
    \ \"${output[*]}\"\n    IFS=' ' read -ra arr9 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr10 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr11 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr12 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr13\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr14 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr15 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr16 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr17 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr18\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr19 <<< \"${output[*]}\"\n    IFS='\
    \ ' read -ra arr20 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr21 <<< \"${output[*]}\"\
    \n    IFS=' ' read -ra arr22 <<< \"${output[*]}\"\n    IFS=' ' read -ra arr23\
    \ <<< \"${output[*]}\"\n    IFS=' ' read -ra arr24 <<< \"${\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmmv08fwb.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmmv08fwb.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local ret=()\n    local i\n    local j\n    local k\n    local len\n    local\
    \ digit\n    local tmp\n    \n    len=${#x}\n    for ((i=0; i<len; i++)); do\n\
    \        digit=${x:$i:1}\n        if [[ $digit =~ ^[0-9]+$ ]]; then\n        \
    \    tmp=${digit//[^0-9]}\n            if [[ $tmp =~ ^[0-9]+$ ]]; then\n     \
    \           j=$((i+1))\n                while [[ $j -le $len ]] && [[ $tmp =~\
    \ ^[0-9]+$ ]]; do\n                    if [[ $tmp -eq $((${tmp//[^0-9]}%2)) ]];\
    \ then\n                        ret+=(\"${x:$j:1}\")\n                    fi\n\
    \                    j=$((j+1))\n                done\n            fi\n      \
    \  fi\n    done\n    \n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' ',' | sort -u | tr '.' ' ')\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    output=$(echo\
    \ \"$output\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/ \\1 /g' | sort\
    \ -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for ((i=0; i<${#output}; i++)); do\n        if [[ ${output[$i]} -eq 0\
    \ ]]; then\n            echo \"$output\"\n            break\n        fi\n    done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0z7g9w_o.sh: line 18: [[: 15 33 1422 1: syntax error in expression
    (error token is "33 1422 1")

    '
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]\\)/\\1/g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=()\n    for (( i=0; i<${#x}; i++ )); do\n        local\
    \ digit=${x:$i:1}\n        if [[ ${digit:0:1} = 0 ]]; then\n            output+=(\"\
    $digit\")\n        fi\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -n | uniq -d)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sort -n | uniq -d)\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    output=$(echo\
    \ \"$output\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sort -u | tr -d '\\n')\n    echo \"\
    $output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort | uniq -d)\n  \
    \  echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for (( i=1; i<${#output}; i++ )); do\n        if [[ ${output[$i]} -eq\
    \ 0 ]]; then\n            output[$i]=\"1\"\n        fi\n    done\n    echo \"\
    ${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)$/\\1/')\n    local\
    \ i\n    for i in $(seq 1 $((${#x}-1)) )\n    do\n        if [[ ${x:$i:1} == 0\
    \ ]]\n        then\n            echo \"$output\"\n            break\n        fi\n\
    \    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr \" \" \"\\n\" | sort -u | tr \"\\\
    n\" \" \")\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | tr ' ' '\\n' | sort -u | tr '\\n' '\
    \ ')\n    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x\n    local digit\n\
    \    local ret\n    local i\n    local len\n    local tmp\n    local count\n\n\
    \    len=${#1}\n    if [ $len -gt 0 ]; then\n        echo \"$1\"\n    else\n \
    \       echo \"$1\"\n        return\n    fi\n\n    IFS=' ' read -r -a x <<< \"\
    $1\"\n    IFS=' ' read -r -a ret <<< \"$1\"\n    IFS=' ' read -r -a tmp <<< \"\
    $1\"\n    IFS=' ' read -r -a count <<< \"$1\"\n\n    for i in \"${!x[@]}\"; do\n\
    \        digit=${x[i]}\n        if [ \"${digit}\" -eq 0 ]; then\n            echo\
    \ \"$x[i]\"\n        fi\n    done\n\n    for i in \"${!x[@]}\"; do\n        digit=${x[i]}\n\
    \        if [ \"${digit}\" -eq 0 ]; then\n            echo \"$x[i]\"\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33,\
    \ 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\n\
    #\n# $1 is a space-separated list\nunique_digits() {\n    local x=\"$1\"\n   \
    \ local output\n    output=$(echo \"$x\" | sed 's/\\([0-9]*\\)//g' | sort -u)\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032323
