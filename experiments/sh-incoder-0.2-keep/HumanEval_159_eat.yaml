name: HumanEval_159_eat
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
  \ meals.\n# you should return an array of [ total number of eaten carrots after\
  \ your meals,\n# the number of carrots left after your meals ]\n# if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n# Example:\n# * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n\
  # * eat(1, 10, 10) -> [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number\
  \ : integer\n# the number of carrots that you have eaten.\n# @need : integer\n#\
  \ the number of carrots that you need to eat.\n# @remaining : integer\n# the number\
  \ of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n\
  # * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an\
  \ integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
tests: "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
  12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
  \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9\
  \ 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
completions: ["  local number=$1\n  local need=$2\n  local remaining=$3\n  local result\n\
    \  result=$((need-number))\n  if [ $result -eq 0 ]; then\n    result=$((need))\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0\
    \ ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result\
    \ -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0\
    \ ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result\
    \ -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0\
    \ ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=0\n  local left=0\n  local\
    \ carrots=0\n  while [ $carrots -lt $need ]; do\n    total=$((total+carrots))\n\
    \    left=$((left-carrots))\n    carrots=$((carrots+1))\n  done\n  echo \"$total\
    \ $left\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local\
    \ result\n  if [ $number -le $need ]\n  then\n    result=$(( $number - $need ))\n\
    \  else\n    result=$(( $need - $number ))\n  fi\n  if [ $result -le 0 ]\n  then\n\
    \    result=0\n  fi\n  if [ $result -gt $remaining ]\n  then\n    result=$remaining\n\
    \  fi\n  echo $result", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result\n  result=$((number-need))\n  if [ $result -eq 0 ]; then\n   \
    \ echo 0\n  else\n    echo $1\n  fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local result\n  result=$((need-number))\n  if [ $result -eq\
    \ 0 ]; then\n    result=$((need))\n  fi\n  echo $result", "  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local result\n  result=$((number-need))\n\
    \  result=$((result+remaining))\n  echo \"$result\"", "  local number=$1\n  local\
    \ need=$2\n  local remaining=$3\n  local result\n  if [ $number -lt $need ]\n\
    \  then\n    result=$(( $number + $remaining ))\n  else\n    result=$(( $number\
    \ - $need ))\n  fi\n  echo $result", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local result\n  result=()\n  while [ $number -lt $need ]; do\n\
    \    number=$(($number+$remaining))\n    remaining=$(($number-$need))\n    result=(\"\
    ${result[@]}\" \"$number\")\n  done\n  result=(\"${result[@]}\" \"$remaining\"\
    )\n  echo \"${result[@]}\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local total=0\n  while [ $remaining -gt 0 ]; do\n    total=$((total+need))\n\
    \    remaining=$((remaining-need))\n  done\n  echo \"$total\"\n  echo \"$remaining\"",
  "  local number=$1\n  local need=$2\n  local remaining=$3\n  local total=0\n  local\
    \ carrots=0\n  while ((carrots < need)); do\n    ((carrots += 1))\n    ((total\
    \ += 1))\n  done\n  ((remaining -= carrots))\n  ((total -= carrots))\n  echo $total\n\
    \  echo $remaining", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result\n  if [ $number -lt $need ]; then\n    result=$(( $number - $need\
    \ ))\n  else\n    result=$(( $need - $number ))\n  fi\n  if [ $result -eq 0 ];\
    \ then\n    echo 0\n  else\n    echo $1\n  fi", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local result\n  result=$((number-need))\n  result=$((result+remaining))\n\
    \  echo \"$result\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result\n  result=$((number-need))\n  if [ $result -eq 0 ]; then\n   \
    \ result=$((need))\n  fi\n  if [ $result -eq 0 ]; then\n    result=$((number))\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=$((need+remaining))\n  fi\n  echo\
    \ $result", "  local number=$1\n  local need=$2\n  local remaining=$3\n  local\
    \ result\n  result=()\n  while [ $remaining -gt 0 ]; do\n    local remaining=$((\
    \ $remaining - $need ))\n    result=( \"${result[@]}\" \"$remaining\" )\n  done\n\
    \  result=( \"${result[@]}\" \"$number\" )\n  echo \"${result[@]}\"", "  local\
    \ number=$1\n  local need=$2\n  local remaining=$3\n  local result\n  result=()\n\
    \  while [ $number -gt 0 ]; do\n    if [ $number -eq $need ]; then\n      result+=(\
    \ $number )\n      number=0\n    elif [ $number -eq $remaining ]; then\n     \
    \ result+=( $number )\n      number=0\n    else\n      result+=( 0 )\n    fi\n\
    \    number=$(( $number - 1 ))\n  done\n  result+=( $number )\n  result+=( 0 )\n\
    \  echo ${result[@]}", "    local number=$1\n    local need=$2\n    local remaining=$3\n\
    \    local result\n    if [ $number -lt $need ]\n    then\n        result=$((\
    \ $number + $remaining ))\n    else\n        result=$(( $number - $need ))\n \
    \   fi\n    echo $result", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result\n  result=()\n  while [ $number -lt $need ]; do\n    result+=(\
    \ $(( $number + $remaining )) )\n    number=$(( $number + $remaining ))\n    remaining=$((\
    \ $remaining - $number ))\n  done\n  if [ $remaining -gt 0 ]; then\n    result+=(\
    \ $remaining )\n  fi\n  echo \"${result[@]}\"", "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  local result\n  result=$((number-need))\n  if [ $result\
    \ -eq 0 ]; then\n    result=$((need))\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=$((number))\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result\
    \ -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0\
    \ ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result\
    \ -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n\
    \  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0\
    \ ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n\
    \  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n\
    \    result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [\
    \ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result -eq 0 ]; then\n  \
    \  result=0\n  fi\n  if [ $result -eq 0 ]; then\n    result=0\n  fi\n  if [ $result\
    \ -eq 0 ]; then\n", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  local result\n  result=$((need-number))\n  if [ $result -eq 0 ]; then\n   \
    \ echo 0\n  else\n    echo $1\n  fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  local result\n  if [ $number -eq $need ]\n  then\n    result=$((\
    \ $number - $need ))\n  else\n    result=$(( $number + $need - $remaining ))\n\
    \  fi\n  echo $result"]
stop_tokens:
- "\n}"
