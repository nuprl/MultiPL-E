name: HumanEval_34_unique
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Return sorted unique elements in a list\n# >>> unique([5,\
  \ 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n#\n# $1 is a space-separated\
  \ list\nunique() {\n"
tests: "}\n\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test"
completions: ["  local IFS=$1\n  local -a arr=()\n  local i item\n  for item in \"\
    ${arr[@]}\"; do\n    [[ $item != $item ]] || continue\n    i=$(( ${#arr[@]} -\
    \ 1 ))\n    while [[ ${arr[i]} != $item ]]; do\n      arr[i]=${arr[i+1]}\n   \
    \   i=$(( i - 1 ))\n    done\n    arr[i]=$item\n  done\n  IFS=$' \\t\\n'\n  echo\
    \ \"${arr[@]}\"", "    local IFS=$'\\n'\n    sort -u <<<\"$1\"", "    local IFS=\"\
    $1\"\n    local -a arr\n    local i len res\n    IFS=$'\\n' arr=($(sort -u <<<\"\
    $*\"))\n    len=${#arr[*]}\n    for ((i=0; i < len; i++)); do\n        res=\"\
    ${arr[i]}\"\n    done\n    echo \"${res}\"", "    local IFS=$1\n    local -a A\n\
    \    local i imax\n    local output\n\n    imax=${#A[@]}\n    for ((i = 0; i <\
    \ imax; i++)); do\n        if [[ ! ${A[i]} == ${A[i-1]} ]]; then\n           \
    \ output+=(\"${A[i]}\")\n        fi\n    done\n    echo \"${output[@]}\"", " \
    \   local IFS=$1\n    local -a arr=()\n    local i item\n    for item in $@; do\n\
    \        [[ $item != $item ]] || continue\n        arr+=(\"$item\")\n    done\n\
    \    arr=( \"${arr[@]}\" )\n    IFS=$IFS\n    sort -u <<<\"${arr[@]}\"", "   \
    \ local IFS=$'\\n'\n    sort -u <<<\"$1\"", "    local IFS=$'\\n'\n    local a\n\
    \    local n\n    local i\n    local j\n    local k\n    local t\n    local len\n\
    \    local sort\n    sort=0\n    IFS=$' \\t\\n'\n    for a in \"$@\"; do\n   \
    \     n=0\n        for (( i=0; i < ${#a}; i++ )); do\n            if [[ ${a}[${i}]\
    \ == \"${a}[${i}+1]\" ]]; then\n                (( n=n+1 ))\n            else\n\
    \                if (( n == 0 )); then\n                    sort=1\n         \
    \           a=\"${a}[${i}]\"\n                else\n                    a=\"${a}[${i}]\"\
    \n                    break\n                fi\n            fi\n        done\n\
    \    done\n    if [[ $sort -eq 1 ]]; then\n        echo \"$a\"\n    else\n   \
    \     echo \"$a\" | sort -u | tr '\\n' ' '\n    fi", "    local IFS=$1; shift;\
    \ echo \"$*\" | sort -u | tr -d '\\n'", "    local IFS=$1\n    local -a arr\n\
    \    local i seen result\n    IFS=$'\\n'\n    arr=($1)\n    seen=()\n    result=()\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        seen+=(\"$i\")\n    done\n  \
    \  seen=( \"${seen[@]}\" )\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if\
    \ [[ ${seen[i]} -eq ${i} ]]; then\n            result+=(\"${arr[i]}\")\n     \
    \   fi\n    done\n    echo \"${result[@]}\"", "    local IFS=$'\\n'\n    sort\
    \ -u <<<\"$1\"", "    local IFS=$1\n    local -a arr\n    local i len output\n\
    \    IFS=$'\\n'\n    arr=( $* )\n    len=${#arr[@]}\n    for ((i=0; i<len; i++));\
    \ do\n        if [[ ${arr[$i]} == ${arr[$((i+1))]} ]]; then\n            unset\
    \ arr[$i]\n        fi\n    done\n    output=$(IFS=' '; echo \"${arr[*]}\")\n \
    \   IFS=$IFS_ORIG\n    echo \"$output\"", '    local IFS=$1; shift; echo "$@"
    | tr " " "\n" | sort -u | tr "\n" " "', "    local IFS=$'\\n'\n    sort -u <<<\
    \ \"$1\"", "    local IFS=$'\\n'\n    sort -u <<<\"$1\"", "    local i seen sorted\n\
    \    seen=()\n    sorted=()\n    for i; do\n        [[ -z \"${seen[$i]}\" ]] &&\
    \ seen[$i]=1 || continue\n        sorted+=($i)\n    done\n    sorted=($(sort <<<\"\
    ${sorted[*]}\" | uniq))", "    local IFS=$'\\n'\n    sort -u <<<\"$1\"", "  local\
    \ IFS=$1\n  local -a arr=()\n  local i item\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    item=${arr[i]}\n    while [ -n \"${item}\" ]; do\n      arr+=(\"$item\"\
    )\n      item=${arr[i]}\n    done\n  done\n  IFS=$IFS\n  echo ${arr[@]}", "  \
    \  local IFS=$1; shift; echo \"$*\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '",
  "    local IFS=$'\\n'\n    sort -u <<<\"$1\"", "    local IFS=$'\\n'\n    sort -u\
    \ <<< \"$1\""]
stop_tokens:
- "\n}"
