language: sh
name: HumanEval_30_get_positive
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list[@]}\"; do\n        if [[ ${element} -gt 0 ]]; then\n           \
    \ positive+=(\"${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrgv4am_.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local numbers=$1\n  local positive=()\n  for number in $numbers; do\n \
    \   if [[ $number -gt 0 ]]; then\n      positive+=(\"$number\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    local i\n    for (( i =\
    \ 0; i < ${#list}; i++ )); do\n        if [[ ${list[i]} -gt 0 ]]; then\n     \
    \       positive+=(\"${list[i]}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpih4iu0iv.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local items=(\"${@}\")\n    local positive=()\n    for item in \"${items[@]}\"\
    ; do\n        if [[ ${item} -gt 0 ]]; then\n            positive+=(\"${item}\"\
    )\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n   \
    \ get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4\
    \ 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") =\
    \ \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7tci31om.sh: line 13: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local ret=()\n    for x in \"${arr[@]}\"; do\n \
    \       if (( x < 0 )); then\n            echo \"$x\"\n        else\n        \
    \    ret+=(\"$x\")\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0ylzjn19.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in ${list}; do\n        if [[ ${element} -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for number in $list;\
    \ do\n    if [[ $number -gt 0 ]]; then\n      positive+=(\"$number\")\n    fi\n\
    \  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=$1\n    local -a positive\n    local i j\n    for (( i=0;\
    \ i < ${#list[@]} && ${list[i]} > 0; i++ )); do\n        positive+=(\"${list[i]}\"\
    )\n    done\n    positive=(\"${positive[@]}\")\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp801cmtv5.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    /tmp/tmp801cmtv5.sh: line 13: ((: i < 0 &&  > 0: syntax error: operand expected
    (error token is "> 0")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=$1\n    local -a positive\n    local -a non_positive\n\
    \    local -a non_negative\n    local -a non_zero\n    local -a non_non_zero\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_negative\n    local -a non_non_positive\n\
    \    local -a non_non_negative\n    local -a non_non_positive\n    local -a non_non_negative\n\
    \    local -a non_non_positive\n    local -a non_non_\n}\n\ncandidate() {\n  \
    \  get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpngoaghh6.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [ $number -gt 0 ]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positives=()\n    for number in $numbers;\
    \ do\n        if (( number > 0 )); then\n            positives+=($number)\n  \
    \      fi\n    done\n    echo \"${positives[*]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive=()\n    for number in $numbers;\
    \ do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"$number\"\
    )\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n   \
    \ get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4\
    \ 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") =\
    \ \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positives=()\n    for number in $numbers;\
    \ do\n        if [[ $number -gt 0 ]]; then\n            positives+=($number)\n\
    \        fi\n    done\n    echo \"${positives[*]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local items=$1\n    local positive\n    positive=()\n    for item in\
    \ $items; do\n        if (( item > 0 )); then\n            positive+=(\"$item\"\
    )\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n   \
    \ get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4\
    \ 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") =\
    \ \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=','\n    local -a arr=( \"$@\" )\n    local ret=()\n    for\
    \ n in \"${arr[@]}\"; do\n        if [[ $n =~ ^-?[0-9]+$ ]]; then\n          \
    \  (( ret+=( \"$n\" ) ))\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\n\
    candidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1\
    \ -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local -n list=$1\n  local -a positive\n  local -i i\n  local -a tmp\n \
    \ local -n result\n  local -n item\n  local -n num\n  local -n num2\n  local -n\
    \ num3\n  local -n num4\n  local -n num5\n  local -n num6\n  local -n num7\n \
    \ local -n num8\n  local -n num9\n  local -n num10\n  local -n num11\n  local\
    \ -n num12\n  local -n num13\n  local -n num14\n  local -n num15\n  local -n num16\n\
    \  local -n num17\n  local -n num18\n  local -n num19\n  local -n num20\n  local\
    \ -n num21\n  local -n num22\n  local -n num23\n  local -n num24\n  local -n num25\n\
    \  local -n num26\n  local -n num27\n  local -n num28\n  local -n num29\n  local\
    \ -n num30\n  local -n num31\n  local -n num32\n  local -n num33\n  local -n num34\n\
    \  local -n num35\n  local -n num36\n  local -n num37\n  local -n num38\n  local\
    \ -n num39\n  local -n num40\n  local -n num41\n  local -n num42\n  local -n num43\n\
    \  local -n num44\n  local -n num45\n  local -n num46\n  local -n num47\n  local\
    \ -n num48\n  local -n num49\n  local -n num50\n  local -n num51\n  local -n num52\n\
    \  local -n num53\n  local -n num54\n  local -n num55\n  local -n num56\n  local\
    \ -n num57\n  local -n num58\n  local -n num59\n  local -n num60\n  local -n num61\n\
    \  local -n num62\n  local -n num63\n  local -n num64\n  local -n num65\n  local\
    \ -n num66\n  local -n num67\n  local -n num68\n  \n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpur1zynj3.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local -i n\n    for n in \"${arr[@]}\"; do\n   \
    \     if (( n >= 0 )); then\n            echo $n\n            return\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"\
    5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"\
    -1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbfyrgt8z.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for element in $list;\
    \ do\n    if [ \"$element\" -gt 0 ]; then\n      positive+=(\"$element\")\n  \
    \  fi\n  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positives=()\n    for number in $numbers;\
    \ do\n        if (( number > 0 )); then\n            positives+=($number)\n  \
    \      fi\n    done\n    echo \"${positives[*]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    positive=()\n\
    \    for i in $list; do\n        if (( i < 0 )); then\n            positive+=(\"\
    $i\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n\
    \    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local result=()\n    for element in $list; do\n\
    \        if [[ $element -gt 0 ]]; then\n            result+=(\"$element\")\n \
    \       fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local result=()\n    for element in $list; do\n\
    \        if [ \"$element\" -gt 0 ]; then\n            results+=(\"$element\")\n\
    \        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positives=()\n    for number in $numbers;\
    \ do\n        if [[ $number -gt 0 ]]; then\n            positives+=($number)\n\
    \        fi\n    done\n    echo \"${positives[*]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list}\"; do\n        if [[ ${element} -gt 0 ]]; then\n            positive+=(\"\
    ${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5vumr5oq.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positives=()\n    for number in $numbers;\
    \ do\n        if (( number > 0 )); then\n            positives+=($number)\n  \
    \      fi\n    done\n    echo \"${positives[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if (( element > 0 )); then\n            positive+=(\"$element\")\n  \
    \      fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list[@]}\"; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsl2yl1j2.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 2
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local i ret\n    for ((i=0; i < ${#arr[@]}; i++));\
    \ do\n        if [[ ${arr[$i]} -gt 0 ]]; then\n            ret=$ret\" \"${arr[$i]}\"\
    \n        fi\n    done\n    echo \"${ret}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdcdm_7xl.sh: line 29: unexpected EOF while looking for matching
    `"''

    /tmp/tmpdcdm_7xl.sh: line 33: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  local i\n  local result\n  local\
    \ j\n  local length\n  length=${#list[@]}\n  result=()\n  for i in $(seq 0 $((length\
    \ - 1)))\n  do\n    positive=0\n    for j in $(seq 0 $((length - 1)))\n    do\n\
    \      if [[ ${list[j]} -gt ${list[i]} ]]; then\n        positive=1\n        break\n\
    \      fi\n    done\n    if [[ $positive -eq 0 ]]; then\n      result+=(\"${list[i]}\"\
    )\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq0kzwmy6.sh: line 23: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [ \"$element\" -gt 0 ]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if [[ $element -gt 0 ]]; then\n            positive+=(\"$element\")\n\
    \        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [ \"$element\" -gt 0 ]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=' '\n    local -a arr=(\"${@}\")\n    local n\n    for n in\
    \ \"${arr[@]}\"; do\n        [[ $n =~ ^-?[0-9]+$ ]] || return 1\n    done\n}\n\
    \ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1\
    \ -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=','\n    local -a arr=(\"${@}\")\n    local ret=()\n    for\
    \ n in \"${arr[@]}\"; do\n        if (( n >= 0 )); then\n            ret+=(\"\
    $n\")\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptboda60n.sh: line 14: ((: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for element in ${list};\
    \ do\n    if [[ ${element} -gt 0 ]]; then\n      positive+=(\"${element}\")\n\
    \    fi\n  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local items=$1\n    local positive=()\n    for item in $items; do\n \
    \       if [[ $item -gt 0 ]]; then\n            positive+=(\"$item\")\n      \
    \  fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    local i\n    for ((i=1;\
    \ i<${#list}; i++)); do\n        local item=${list[i]}\n        if (( item > 0\
    \ )); then\n            positive+=(\"$item\")\n        fi\n    done\n    echo\
    \ \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate\
    \ \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate\
    \ \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  local i\n  local len\n\n  len=\"\
    ${#list}\"\n  for i in $(seq 0 $((len - 1)))\n  do\n    positive=\"$positive$((${list[i]}\
    \ >= 0 ? ${list[i]} : ${list[i]}+0))\"\n  done\n  echo \"$positive\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpueiidv7x.sh: line 18: -1 -2 4 5 6 >= 0 ? -1 -2 4 5 6 : -1 -2 4
    5 6+0: syntax error in expression (error token is "4 5 6 >= 0 ? -1 -2 4 5 6 :
    -1 -2 4 5 6+0")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local -i n\n    local -a positive\n    local -i\
    \ j\n    local -a tmp\n    local -i i\n\n    positive=()\n    n=0\n    for j in\
    \ \"${arr[@]}\"; do\n        if [[ $j -gt 0 ]]; then\n            positive+=(\"\
    $j\")\n            n=$((n + 1))\n        fi\n    done\n    if [[ $n -eq 0 ]];\
    \ then\n        echo \"$positive\"\n    else\n        tmp=()\n        for i in\
    \ \"${!positive[@]}\"; do\n            tmp+=(\"${positive[$i]}\")\n        done\n\
    \        positive=(\"${tmp[@]}\")\n    fi\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3iojhzpk.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local result\n    local i\n    for (( i = 0; i\
    \ < ${#list}; i++ )); do\n        if [[ ${list[i]} -gt 0 ]]; then\n          \
    \  result=\"${result} ${list[i]}\"\n        fi\n    done\n    echo \"${result}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9qopkn9r.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local i ret=()\n    for ((i=0; i < ${#arr[@]}; i++));\
    \ do\n        if [[ ${arr[$i]} -gt 0 ]]; then\n            ret+=(\"${arr[$i]}\"\
    )\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6w_w_c2a.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  local i\n  positive=()\n  for ((\
    \ i=0; i<${#list}; i++ )); do\n    if [[ ${list[i]} -gt 0 ]]; then\n      positive+=(\"\
    ${list[i]}\")\n    fi\n  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n\
    \    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4793h78l.sh: line 15: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    positive=()\n\
    \    for ((i=0; i < ${#list}; i++)); do\n        if [[ ${list[i]} -gt 0 ]]; then\n\
    \            positive+=(\"${list[i]}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8s8t62gr.sh: line 15: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for element in $list;\
    \ do\n    if [[ $element -gt 0 ]]; then\n      positive+=(\"$element\")\n    fi\n\
    \  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local ret=()\n    local -a tmp\n    for tmp in \"\
    ${arr[@]}\"; do\n        if [[ $tmp -gt 0 ]]; then\n            ret+=(\"$tmp\"\
    )\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpevkz6xep.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for number in $list;\
    \ do\n    if [[ $number -gt 0 ]]; then\n      positive+=(\"$number\")\n    fi\n\
    \  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in ${list}; do\n        if [[ ${element} -ge 0 ]]; then\n            positive+=(\"\
    ${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=', '\n    local -a arr\n    arr=($1)\n    local n\n    for\
    \ n in \"${arr[@]}\"; do\n        [[ $n =~ ^-?[0-9]+$ ]] || return 1\n    done\n\
    }\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3\
    \ 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    positive=()\n\
    \    for (( i=0; i<${#list}; i++ )); do\n        if [[ ${list[i]} -gt 0 ]]; then\n\
    \            positive+=(\"${list[i]}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzvmkakc8.sh: line 15: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=','\n    local -n list=$1\n    local ret=()\n    for item in\
    \ ${list[@]}; do\n        if [[ ${item} -gt 0 ]]; then\n            ret+=(\"${item}\"\
    )\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz0itu9fm.sh: line 11: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local items=(\"${@}\")\n    local positive=()\n    for item in \"${items[@]}\"\
    ; do\n        if (( item > 0 )); then\n            positive+=(\"$item\")\n   \
    \     fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb_24jo_r.sh: line 13: ((: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local i ret=()\n    for ((i=0; i < ${#arr[@]}; i++));\
    \ do\n        if (( ${arr[i]} < 0 )); then\n            ret+=(\"${arr[i]}\")\n\
    \        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8g71v3aa.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list[@]}\"; do\n        if [[ ${element} -gt 0 ]]; then\n           \
    \ positive+=(\"${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrgv4am_.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local -i n\n    local ret\n    for n in \"${arr[@]}\"\
    ; do\n        if (( n > 0 )); then\n            (( ret++ ))\n        fi\n    done\n\
    \    echo \"${ret}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate\
    \ \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate\
    \ \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcyc43uru.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 2
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=$1\n    local -a positive\n    local i\n    local j\n \
    \   local k\n    local len\n\n    len=${#list[@]}\n    for ((i = 0; i < len; i++));\
    \ do\n        if (( ${list[i]} < 0 )) ; then\n            positive+=(\"${list[i]}\"\
    )\n        fi\n    done\n\n    list=(${positive[@]})\n    len=${#list[@]}\n  \
    \  for ((i = 0; i < len; i++)); do\n        list[i]=${list[i]}\n    done\n\n \
    \   list=(${list[@]})\n    len=${#list[@]}\n    for ((i = 0; i < len; i++)); do\n\
    \        if (( ${list[i]} < 0 )) ; then\n            list[i]=0\n        fi\n \
    \   done\n\n    list=(${list[@]})\n    len=${#list[@]}\n    for ((i = 0; i < len;\
    \ i++)); do\n        if (( ${list[i]} < 0 )) ; then\n            list[i]=0\n \
    \       fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n    for ((i\
    \ = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n          \
    \  list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n\
    \            list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n\
    \            list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n\
    \            list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n\
    \            list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len; i++)); do\n        if (( ${list[i]} < 0 )) ; then\n\
    \            list[i]=0\n        fi\n    done\n\n    list=(${list[@]})\n    len=${#list[@]}\n\
    \    for ((i = 0; i < len\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7urxlgaa.sh: line 96: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7urxlgaa.sh: line 112: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for element in $list;\
    \ do\n    if [[ $element -gt 0 ]]; then\n      positive+=(\"$element\")\n    fi\n\
    \  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive=()\n    for number in $numbers;\
    \ do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"$number\"\
    )\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n   \
    \ get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4\
    \ 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") =\
    \ \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [ $number -gt 0 ]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if [[ $element -gt 0 ]]; then\n            positive+=(\"$element\")\n\
    \        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list[@]}\"; do\n        if [[ ${element} -gt 0 ]]; then\n           \
    \ positive+=(\"${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnrgv4am_.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=' '\n    local -a list=(\"${@}\")\n    local result=()\n  \
    \  for element in \"${list[@]}\"; do\n        if (( element > 0 )); then\n   \
    \         result+=(\"$element\")\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb2kr0ygm.sh: line 14: ((: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  local i\n  local len\n\n  len=\"\
    ${#list}\"\n  for ((i=1; i<=$((len-1)); i++)); do\n    if [[ ${list[i]} -gt 0\
    \ ]]; then\n      positive=\"${list[i]}\"\n      break\n    fi\n  done\n  echo\
    \ \"$positive\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"\
    5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"\
    -1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list}\"; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzemguv30.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local n\n    for n in \"${arr[@]}\"; do\n      \
    \  [[ $n =~ ^-?[0-9]+$ ]] || return 1\n    done\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuywzz3_1.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local ret=()\n    for val in \"${arr[@]}\"; do\n\
    \        if [[ $val > 0 ]]; then\n            ret+=(\"$val\")\n        fi\n  \
    \  done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9ux7c_cz.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for number in $list;\
    \ do\n    if [[ $number -gt 0 ]]; then\n      positive+=(\"$number\")\n    fi\n\
    \  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if (( element > 0 )); then\n            positive+=(\"$element\")\n  \
    \      fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=','\n    local -a list=(\"${@}\")\n    local ret=()\n    for\
    \ element in \"${list[@]}\"; do\n        if [[ ${element} -gt 0 ]]; then\n   \
    \         ((ret+=(\"${element}\")));\n        fi\n    done\n    echo \"${ret[@]}\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5icaxcbj.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n list=list\n    local -a positive=()\n    local -a tmp\n    local\
    \ i j\n    for ((i=0; i < ${#list[@]}; i++)); do\n        tmp=()\n        for\
    \ ((j=0; j < ${#list[@]}; j++)); do\n            if [[ ${list[$j]} -gt 0 ]]; then\n\
    \                tmp+=(\"${list[$j]}\")\n            fi\n        done\n      \
    \  positive+=(\"${tmp[@]}\")\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpabxluzsm.sh: line 10: local: warning: list: circular name reference

    /tmp/tmpabxluzsm.sh: line 10: warning: list: circular name reference

    /tmp/tmpabxluzsm.sh: line 16: warning: list: circular name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if (( element > 0 )); then\n            positive+=(\"$element\")\n  \
    \      fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    local j\n   \
    \ local len\n    local result\n\n    positive=()\n    len=\"${#list[@]}\"\n  \
    \  for ((i=1; i<=$((len-1)); i++)); do\n        if (( \"${list[i]}\" < 0 )); then\n\
    \            positive+=(\"${list[i]}\")\n        fi\n    done\n    len=\"${#positive[@]}\"\
    \n    for ((j=0; j<$len; j++)); do\n        result+=(\"${positive[j]}\")\n   \
    \ done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n\
    \    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    positive=()\n\
    \    for i in $list; do\n        if (( i < 0 )); then\n            positive+=(\"\
    $i\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n\
    \    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local -n arr=$1\n    local n\n    for n in \"${arr[@]}\"; do\n      \
    \  if [[ $n -gt 0 ]]; then\n            echo \"$n\"\n        fi\n    done\n}\n\
    \ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1\
    \ -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplwdjz33m.sh: line 10: local: `-1 -2 4 5 6'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in ${list}; do\n        if [[ ${element} -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list[@]}\"; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqoefbm3v.sh: line 14: ((: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local result\n    for element in $list; do\n \
    \       if (( element > 0 )); then\n            result=\"$result $element\"\n\
    \        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local IFS=','\n    local -a arr=( $1 )\n    local ret=()\n    for el\
    \ in \"${arr[@]}\"; do\n        if (( ${el} < 0 )); then\n            echo \"\
    ${el}\"\n        else\n            echo \"${el}\"\n            ret+=(\"${el}\"\
    )\n        fi\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5h8l8b_8.sh: line 14: ((: -1 -2 4 5 6 < 0 : syntax error in expression
    (error token is "4 5 6 < 0 ")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [ \"$element\" -gt 0 ]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for element in \"\
    ${list[@]}\"; do\n    if [[ ${element} -gt 0 ]]; then\n      positive+=(\"${element}\"\
    )\n    fi\n  done\n  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppzavuey9.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( $number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  positive=()\n  for item in $list;\
    \ do\n    if [[ $item -gt 0 ]]; then\n      positive+=(\"$item\")\n    fi\n  done\n\
    \  echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n   \
    \ [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n\
    \    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in \"${list}\"; do\n        if [[ ${element} -gt 0 ]]; then\n            positive+=(\"\
    ${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5vumr5oq.sh: line 14: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in ${list}; do\n        if [[ ${element} -gt 0 ]]; then\n            positive+=(\"\
    ${element}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if [[ $number -gt 0 ]]; then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if [[ $element -gt 0 ]]; then\n            positive+=(\"$element\")\n\
    \        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [[ $element -gt 0 ]]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive=()\n    for element in $list; do\n\
    \        if (( element > 0 )); then\n            positive+=(\"$element\")\n  \
    \      fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate() {\n    get_positive\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2 4 5 6\") = \"\
    4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9\
    \ 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in $numbers; do\n        if (( number > 0 )); then\n            positive+=(\"\
    $number\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n  local list=\"$1\"\n  local positive\n  local i\n  local len\n  len=\"${#list}\"\
    \n  for i in $(seq 0 $((len - 1)))\n  do\n    positive=\"$positive$((${list[i]}\
    \ > 0 ? ${list[i]} : 0))\"\n  done\n  echo \"$positive\"\n}\n\ncandidate() {\n\
    \    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv7jve1c9.sh: line 17: -1 -2 4 5 6 > 0 ? -1 -2 4 5 6 : 0: syntax
    error in expression (error token is "4 5 6 > 0 ? -1 -2 4 5 6 : 0")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if [ \"$element\" -gt 0 ]; then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    local i\n    local len\n \
    \   len=\"${#list}\"\n    for ((i = 0; i < len; i++)); do\n        positive=\"\
    $positive$((${list[i]} > 0 ? ${list[i]} : 0))\"\n    done\n    echo \"$positive\"\
    \n}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
    \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
    ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprfut4ifa.sh: line 16: -1 -2 4 5 6 > 0 ? -1 -2 4 5 6 : 0: syntax
    error in expression (error token is "4 5 6 > 0 ? -1 -2 4 5 6 : 0")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local list=\"$1\"\n    local positive\n    positive=()\n    for element\
    \ in $list; do\n        if (( element > 0 )); then\n            positive+=(\"\
    $element\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
- exit_code: 1
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local items=(\"${@}\")\n    local positives=()\n    for item in \"${items[@]}\"\
    ; do\n        if [[ ${item} -gt 0 ]]; then\n            positives+=(\"${item}\"\
    )\n        fi\n    done\n    echo \"${positives[@]}\"\n}\n\ncandidate() {\n  \
    \  get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"-1 -2\
    \ 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\")\
    \ = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq2ujli_p.sh: line 13: [[: -1 -2 4 5 6: syntax error in expression
    (error token is "4 5 6")

    '
  stdout: ''
  timestamp: 1660026216
- exit_code: 0
  program: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> get_positive([-1,\
    \ 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n#\n# $1 is a space-separated list\nget_positive()\
    \ {\n    local numbers=$1\n    local positive\n    positive=()\n    for number\
    \ in ${numbers[@]}; do\n        if [[ ${number} -gt 0 ]]; then\n            positive+=(\"\
    ${number}\")\n        fi\n    done\n    echo \"${positive[@]}\"\n}\n\ncandidate()\
    \ {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    -1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5 2 3 3 9 0 123 1 -10\"\
    ) = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\") = \"\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660026216
