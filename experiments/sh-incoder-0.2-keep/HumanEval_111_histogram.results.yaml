language: sh
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  \
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstr\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ max=0\n  local maxletter=''\n  local maxcount=0\n  local letter\n  local count\n\
    \  local i\n\n  for (( i=0; i<${#string}; i++ )); do\n    letter=${string:$i:1}\n\
    \    count=${#counts[@]}\n    counts[$letter]=$(( counts[$letter] + 1 ))\n   \
    \ if [ $count -gt $max ]; then\n      max=$count\n      maxletter=$letter\n  \
    \    maxcount=$count\n    fi\n  done\n\n  echo ${counts[$maxletter]}\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=$1\n  local counts=()\n  local\
    \ max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountletters=()\n  local maxcountletters_count=()\n  local maxcountletters_count_letters=()\n\
    \  local maxcountletters_count_letters_count=()\n  local maxcountletters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count=()\n  local maxcountletters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A counts\n\
    \  local letter\n  local count\n  local -a letters=()\n  local -a counts=()\n\n\
    \  while read -r letter; do\n    counts[$letter]=0\n  done < <(echo \"$histogram\"\
    \ | tr ' ' '\\n' | sort -u)\n\n  for letter in \"${!counts[@]}\"; do\n    count=\"\
    ${counts[$letter]}\"\n    if [ \"$count\" -gt 1 ]; then\n      counts[$letter]=$((\
    \ counts[$letter] - 1 ))\n    else\n      counts[$letter]=1\n    fi\n  done\n\n\
    \  while read -r letter; do\n    count=\"${counts[$letter]}\"\n    if [ \"$count\"\
    \ -eq 0 ]; then\n      echo \"$letter\"\n    fi\n  done < <(echo \"$histogram\"\
    \ | tr ' ' '\\n' | sort -u)\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfxhx36_7.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpfxhx36_7.sh: line 19: counts: cannot convert associative to indexed array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxString=\"\"\n    local maxCount=0\n    local maxCountString=\"\
    \"\n    local maxCountStringCount=0\n    local maxCountStringCountString=\"\"\n\
    \    local maxCountStringCountStringCount=0\n    local maxCountStringCountStringCountString=\"\
    \"\n    local maxCountStringCountStringCountStringCount=0\n    local maxCountStringCountStringCountStringCountString=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCount=0\n    local\
    \ maxCountStringCountStringCountStringCountStringCountString=\"\"\n    local maxCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountString=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountString=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=0\n\
    \    local maxCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCountStringCount=\"\
    \"\n    local maxCountStringCountStringCountStringCount\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ max=0\n  local maxstring=''\n  local maxcount=0\n  local maxcountstring=''\n\
    \  local maxcountstring2=''\n  local maxcountstring3=''\n  local maxcountstring4=''\n\
    \  local maxcountstring5=''\n  local maxcountstring6=''\n  local maxcountstring7=''\n\
    \  local maxcountstring8=''\n  local maxcountstring9=''\n  local maxcountstring10=''\n\
    \  local maxcountstring11=''\n  local maxcountstring12=''\n  local maxcountstring13=''\n\
    \  local maxcountstring14=''\n  local maxcountstring15=''\n  local maxcountstring16=''\n\
    \  local maxcountstring17=''\n  local maxcountstring18=''\n  local maxcountstring19=''\n\
    \  local maxcountstring20=''\n  local maxcountstring21=''\n  local maxcountstring22=''\n\
    \  local maxcountstring23=''\n  local maxcountstring24=''\n  local maxcountstring25=''\n\
    \  local maxcountstring26=''\n  local maxcountstring27=''\n  local maxcountstring28=''\n\
    \  local maxcountstring29=''\n  local maxcountstring30=''\n  local maxcountstring31=''\n\
    \  local maxcountstring32=''\n  local maxcountstring33=''\n  local maxcountstring34=''\n\
    \  local maxcountstring35=''\n  local maxcountstring36=''\n  local maxcountstring37=''\n\
    \  local maxcountstring38=''\n  local maxcountstring39=''\n  local maxcountstring40=''\n\
    \  local maxcountstring41=''\n  local maxcountstring42=''\n  local maxcountstring43=''\n\
    \  local maxcountstring44=''\n  local maxcountstring45=''\n  local maxcountstring46=''\n\
    \  local maxcountstring47=''\n  local maxcountstring48=''\n  local maxcountstring49=''\n\
    \  local maxcountstring50=''\n  local maxcountstring51=''\n  local maxcountstring52=''\n\
    \  local maxcountstring53=''\n  local maxcountstring54=''\n  local maxcountstring55=''\n\
    \  local maxcountstring56=''\n  local maxcountstring57=''\n  local maxcountstring58=''\n\
    \  local maxcountstring59=''\n  local maxcountstring60=''\n  local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            counts[$letter]=$((${counts[$letter]}\
    \ - 1))\n        fi\n    done\n    echo ${counts[*]}\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_sorted=()\n\
    \    local maxcountletters_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local count\n  \
    \  local letter\n    local counts\n    local max\n    local maxLetter\n    local\
    \ maxCount\n    local maxCountLetter\n    local maxCountLetterCount\n    local\
    \ maxCountLetterCountLetter\n    local maxCountLetterCountLetterCount\n    local\
    \ maxCountLetterCountLetterCountCount\n    local maxCountLetterCountLetterCountCountLetter\n\
    \    local maxCountLetterCountLetterCountCountLetterCount\n    local maxCountLetterCountLetterCountCountCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountCount\n    local\
    \ maxCountLetterCountLetterCountCountCountLetterCountCount\n    local maxCountLetterCountLetterCountCountCountLetterCountCountLetter\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCount\n  \
    \  local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCountLetterCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCountLetterCountLetterCountCountLetterCountCount\n\
    \    local maxCountLetterCountLetterCountCountCountLetterCountLetterCountLetterCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_sorted=()\n\
    \    local maxcountletters_sorted_reverse=()\n    local maxcountletters_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse=()\n    local maxcountletters_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse=()\n \
    \   local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=''\n  local maxcount=0\n  local letter\n  for\
    \ letter in $letters\n  do\n    counts[$letter]=$((${counts[$letter]} + 1))\n\
    \  done\n  for letter in $letters\n  do\n    counts[$letter]=$((${counts[$letter]}\
    \ / ${#letters}))\n  done\n  for letter in $letters\n  do\n    if [[ ${counts[$letter]}\
    \ -gt $max ]]; then\n      max=${counts[$letter]}\n      maxletter=$letter\n \
    \   fi\n  done\n  echo \"${maxletter} ${max}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local letter\n\
    \    local count\n    for letter in \"${string//[[:space:]]/}\"; do\n        count=\"\
    ${counts[$letter]}\"\n        if [[ -z \"$count\" ]]; then\n            count=1\n\
    \        else\n            count=$(( count + 1 ))\n        fi\n        counts[$letter]=$count\n\
    \        if [[ \"$count\" -gt \"$maxcount\" ]]; then\n            maxcount=$count\n\
    \            maxletter=$letter\n        fi\n    done\n    echo \"${counts[$maxletter]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        local count=\"${counts[$letter]}\"\n\
    \        if [[ -z \"$count\" ]]; then\n            count=1\n        else\n   \
    \         (( count++ ))\n        fi\n        counts[$letter]=$count\n        if\
    \ [[ \"$count\" -gt \"$maxcount\" ]]; then\n            maxcount=$count\n    \
    \        maxletter=$letter\n        fi\n    done\n    echo \"${maxletter}:${maxcount}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountletter\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in \"${letters[@]}\"; do\n\
    \        count=0\n        for count in \"${counts[@]}\"; do\n            if [[\
    \ \"${letter}\" == \"${count}\" ]]; then\n                count=$((${count}+1))\n\
    \                break\n            fi\n        done\n        counts+=(\"${letter}\"\
    \ \"${count}\")\n    done\n    local histo\n    histo=()\n    for count in \"\
    ${counts[@]}\"; do\n        histo+=(\"${count}\")\n    done\n    local histodict\n\
    \    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"; do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"; do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"; do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"; do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"; do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"; do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4gi6iqnf.sh: line 91: syntax error near unexpected token `}''

    /tmp/tmp4gi6iqnf.sh: line 91: `}''

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local count=0\n\
    \    local letter\n    local counts\n    local max\n    local maxCount\n    local\
    \ maxLetter\n    local maxCountLetter\n    local maxCountLetters\n    local maxCountLettersCount\n\
    \    local maxCountLettersCountLetter\n    local maxCountLettersCountLetters\n\
    \    local maxCountLettersCountLettersCount\n    local maxCountLettersCountLettersCountLetter\n\
    \    local maxCountLettersCountLettersCountLetters\n    local maxCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLetter\n    local maxCountLettersCountLettersCountLettersCountLetters\n\
    \    local maxCountLettersCountLettersCountLettersCountLetters\n    local maxCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLetter\n  \
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLetters\n   \
    \ local maxCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercount\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=mapfile\n    local -n\
    \ letters=$2\n    local -n counts=$3\n    local -n maxcount=$4\n    local -n maxletter=$5\n\
    \    local -n maxlettercount=$6\n    local -n maxlettercounts=$7\n    local -n\
    \ maxlettercountscount=$8\n    local -n maxlettercountscountcount=$9\n    local\
    \ -n maxlettercountscountcountcount=$10\n    local -n maxlettercountscountcountcountcount=$11\n\
    \    local -n maxlettercountscountcountcountcountcount=$12\n    local -n maxlettercountscountcountcountcountcountcount=$13\n\
    \    local -n maxlettercountscountcountcountcountcountcountcount=$14\n    local\
    \ -n maxlettercountscountcountcountcountcountcountcountcount=$15\n    local -n\
    \ maxlettercountscountcountcountcountcountcountcountcountcount=$16\n    local\
    \ -n maxlettercountscountcountcountcountcountcountcountcountcountcountcount=$17\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcount=$18\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcount=$19\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcount=$20\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$21\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$22\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$23\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$24\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$25\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=$26\n\
    \    local -n maxlettercountscountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt8oq11l6.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpt8oq11l6.sh: line 23: local: `a b b a0'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 24: local: `a b b a1'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 25: local: `a b b a2'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 26: local: `a b b a3'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 27: local: `a b b a4'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 28: local: `a b b a5'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 29: local: `a b b a6'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 30: local: `a b b a7'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 31: local: `a b b a8'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 32: local: `a b b a9'': invalid variable name for name
    reference

    /tmp/tmpt8oq11l6.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmpt8oq11l6.sh: line 39: local: `6'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        if (( ${counts[$letter]} > max )); then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if (( ${counts[$letter]} > maxcount )); then\n            maxcount=${counts[$letter]}\n\
    \        fi\n    done\n    echo ${maxletter} ${maxcount}\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi8ft28st.sh: line 27: ((: > maxcount : syntax error: operand expected
    (error token is "> maxcount ")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  \
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstr\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local count\n    local\
    \ max\n    local maxCount\n    local maxLetter\n    local maxCountLetter\n   \
    \ local maxCountLetters\n    local maxCountLettersCount\n    local maxCountLettersCountMax\n\
    \    local maxCountLettersCountMaxCount\n    local maxCountLettersCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCount\n    local maxCountLettersCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMax\n    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMax\n    local\
    \ maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\n\
    \    local maxCountLettersCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenlen=''\n    local maxcountstrlenstrlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstr\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local letter\n\
    \    for letter in \"${string//[[:space:]]/}\"; do\n        counts[$letter]=$((counts[$letter]+1))\n\
    \        if ((counts[$letter] > maxcount)) ; then\n            max=$((max+1))\n\
    \            maxletter=$letter\n            maxcount=$counts[$letter]\n      \
    \  fi\n    done\n    echo \"${maxletter} ${maxcount}\"\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=( )\n    local -a letters=(\
    \ )\n    local -a counts=( )\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcountsindex=( )\n    local -a maxlettersindex=( )\n    local\
    \ -a maxcountsvalues=( )\n    local -a maxlettersvalues=( )\n    local -a maxcountsvaluesindex=(\
    \ )\n    local -a maxlettersvaluesindex=( )\n    local -a maxcountsvaluesvalues=(\
    \ )\n    local -a maxlettersvaluesvalues=( )\n    local -a maxcountsvaluesvaluesindex=(\
    \ )\n    local -a maxlettersvaluesvaluesindex=( )\n    local -a maxcountsvaluesvaluesvalues=(\
    \ )\n    local -a maxlettersvaluesvaluesvalues=( )\n    local -a maxcountsvaluesvaluesvaluesindex=(\
    \ )\n    local -a maxlettersvaluesvaluesvaluesindex=( )\n    local -a maxcountsvaluesvaluesvaluesvalues=(\
    \ )\n    local -a maxlettersvaluesvaluesvaluesvalues=( )\n    local -a maxcountsvaluesvaluesvaluesvaluesindex=(\
    \ )\n    local -a maxlettersvaluesvaluesvaluesvaluesindex=( )\n    local -a maxcountsvaluesvaluesvaluesvaluesvalues=(\
    \ )\n    local -a maxlettersvaluesvaluesvaluesvaluesvalues=( )\n    local -a maxcountsvaluesvaluesvaluesvaluesvaluesindex=(\
    \ )\n    local -a maxlettersvaluesvaluesvaluesvaluesvaluesindex=( )\n    local\
    \ -a maxcountsvaluesvaluesvaluesvaluesvaluesvalues=( )\n    local -a maxlettersvaluesvaluesvaluesvaluesvaluesvalues=(\
    \ )\n    local -a maxcountsvaluesvaluesvaluesvaluesvaluesvaluesindex=( )\n   \
    \ local -a maxlettersvaluesvaluesvaluesvaluesvaluesvaluesindex=( )\n    local\
    \ -a maxcountsvaluesvaluesvaluesvaluesvaluesvaluesvalues=( )\n    local -a maxlettersvaluesvaluesvaluesvaluesvaluesvaluesvalues=(\
    \ )\n    local -a maxcountsvaluesvaluesvaluesvaluesvaluesvaluesvaluesindex=( )\n\
    \    local -a maxlettersvaluesvaluesvaluesvaluesvaluesvaluesvaluesindex=( )\n\
    \    local -a maxcountsvaluesvaluesvaluesvaluesvaluesvaluesvaluesvalues=( )\n\
    \    local -a maxlettersvaluesvaluesvaluesvaluesvaluesvaluesvaluesvaluesvalues=(\
    \ )\n\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_5n18n4a.sh: line 14: local: histogram: reference variable cannot
    be an array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountletters=()\n  local maxcountletters_sorted=()\n  local maxcountletters_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted=()\n  local maxcountletters_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=( )\n    local -a letters=(\
    \ )\n    local -a counts=( )\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcount=0\n    local -a maxletter=''\n    local -a maxcounts=(\
    \ )\n    local -a maxletters=( )\n    local -a maxcount=0\n    local -a maxletter=''\n\
    \    local -a maxcounts=( )\n    local -a maxletters=( )\n    local -a maxcount=0\n\
    \    local -a maxletter=''\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcount=0\n    local -a maxletter=''\n    local -a maxcounts=(\
    \ )\n    local -a maxletters=( )\n    local -a maxcount=0\n    local -a maxletter=''\n\
    \    local -a maxcounts=( )\n    local -a maxletters=( )\n    local -a maxcount=0\n\
    \    local -a maxletter=''\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcount=0\n    local -a maxletter=''\n    local -a maxcounts=(\
    \ )\n    local -a maxletters=( )\n    local -a maxcount=0\n    local -a maxletter=''\n\
    \    local -a maxcounts=( )\n    local -a maxletters=( )\n    local -a maxcount=0\n\
    \    local -a maxletter=''\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcount=0\n    local -a maxletter=''\n    local -a maxcounts=(\
    \ )\n    local -a maxletters=( )\n    local -a maxcount=0\n    local -a maxletter=''\n\
    \    local -a maxcounts=( )\n    local -a maxletters=( )\n    local -a maxcount=0\n\
    \    local -a maxletter=''\n    local -a maxcounts=( )\n    local -a maxletters=(\
    \ )\n    local -a maxcount=0\n    local -a maxletter=''\n    local -a maxcounts=(\
    \ )\n    local -a maxletters=\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0sg8xquf.sh: line 14: local: histogram: reference variable cannot
    be an array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A counts\n\
    \  local -n letter\n  local count\n  local countsKey\n  local countsValue\n  local\
    \ -n max\n  local -n maxKey\n  local -n maxValue\n  local -n maxCount\n  local\
    \ -n maxCountKey\n  local -n maxCountValue\n  local -n maxCountCount\n  local\
    \ -n maxCountCountKey\n  local -n maxCountCountValue\n  local -n maxCountCountCount\n\
    \  local -n maxCountCountCountKey\n  local -n maxCountCountCountValue\n  local\
    \ -n maxCountCountCountCount\n  local -n maxCountCountCountCountKey\n  local -n\
    \ maxCountCountCountCountValue\n  local -n maxCountCountCountCountCount\n  local\
    \ -n maxCountCountCountCountCountKey\n  local -n maxCountCountCountCountCountValue\n\
    \  local -n maxCountCountCountCountCountCount\n  local -n maxCountCountCountCountCountCountKey\n\
    \  local -n maxCountCountCountCountCountCountValue\n  local -n maxCountCountCountCountCountCountCount\n\
    \  local -n maxCountCountCountCountCountCountCountKey\n  local -n maxCountCountCountCountCountCountCountValue\n\
    \  local -n maxCountCountCountCountCountCountCountCount\n  local -n maxCountCountCountCountCountCountCountCountKey\n\
    \  local -n maxCountCountCountCountCountCountCountCountValue\n  local -n maxCountCountCountCountCountCountCountCountCount\n\
    \  local -n maxCountCountCountCountCountCountCountCountCountKey\n  local -n maxCountCountCountCountCountCountCountCountCountValue\n\
    \  local -n maxCountCountCountCountCountCountCountCountCount\n  local -n maxCountCountCountCountCountCountCountCountCountKey\n\
    \  local -n maxCountCountCountCountCountCountCountCountCountValue\n  local -n\
    \ maxCountCountCountCountCountCountCountCountCountCount\n  local -n maxCountCountCountCountCountCountCountCountCountCountKey\n\
    \  local -n maxCountCountCountCountCountCountCountCountCountCountValue\n  local\
    \ -n maxCountCountCountCountCountCountCountCountCountCountCount\n  local -n maxCountCountCountCountCountCountCountCountCountCountKey\n\
    \  local -n maxCountCountCountCount\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu0r6r1id.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in $letters\n    do\n     \
    \   counts[$letter]=$((counts[$letter]+1))\n    done\n    for letter in $letters\n\
    \    do\n        if [[ ${counts[$letter]} -gt 1 ]]\n        then\n           \
    \ counts[$letter]=$((counts[$letter]-1))\n        fi\n    done\n    local histo\n\
    \    histo=()\n    for letter in $letters\n    do\n        histo+=($letter)\n\
    \    done\n    for letter in $letters\n    do\n        if [[ ${counts[$letter]}\
    \ -eq 0 ]]\n        then\n            histo+=($letter)\n        fi\n    done\n\
    \    local histodict\n    histodict=()\n    for histo in \"${histo[@]}\"\n   \
    \ do\n        histodict+=(\"${histo}\")\n    done\n    local histodict\n    histodict=()\n\
    \    for histo in \"${histo[@]}\"\n    do\n        histodict+=(\"${histo}\")\n\
    \    done\n    local histodict\n    histodict=()\n    for histo in \"${histo[@]}\"\
    \n    do\n        histodict+=(\"${histo}\")\n    done\n    local histodict\n \
    \   histodict=()\n    for histo in \"${histo[@]}\"\n    do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"\n    do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n    for histo in \"${histo[@]}\"\n    do\n    \
    \    histodict+=(\"${histo}\")\n    done\n    local histodict\n    histodict=()\n\
    \    for histo in \"${histo[@]}\"\n    do\n        histodict+=(\"${histo}\")\n\
    \    done\n    local histodict\n    histodict=()\n    for histo in \"${histo[@]}\"\
    \n    do\n        histodict+=(\"${histo}\")\n    done\n    local histodict\n \
    \   histodict=()\n    for histo in \"${histo[@]}\"\n    do\n        histodict+=(\"\
    ${histo}\")\n    done\n    local histodict\n    histodict=()\n    for histo in\
    \ \"${histo[@]}\"\n    do\n        histodict+=(\"${histo}\")\n    done\n    local\
    \ histodict\n    histodict=()\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercount\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=''\n  local maxcount=0\n  local letter\n  local\
    \ count\n  for letter in \"${letters[@]}\"; do\n    count=0\n    for count in\
    \ \"${counts[@]}\"; do\n      if [[ \"$count\" -gt \"$maxcount\" ]] && [[ \"$letter\"\
    \ == \"$count\" ]]; then\n        maxcount=\"$count\"\n        maxletter=\"$letter\"\
    \n      fi\n    done\n    counts[$count]=\"$letter\"\n  done\n  echo \"${counts[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=histogram.$$\n  local -a\
    \ letters=(\"$@\")\n  local count\n  local letter\n  local counts\n  local -A\
    \ counts\n  for letter in \"${letters[@]}\"; do\n    count=0\n    for counts in\
    \ \"${histogram[@]}\"; do\n      [[ \"${counts[$letter]}\" -gt \"$count\" ]] &&\
    \ count=\"${counts[$letter]}\"\n    done\n    counts[$letter]=$count\n  done\n\
    \  unset count\n  unset letters\n  unset histogram.$$\n  printf '%s\\n' \"${!counts[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6nwlr724.sh: line 14: local: `histogram.879420'': invalid variable
    name for name reference

    /tmp/tmp6nwlr724.sh: line 29: unset: `histogram.879420'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_count_letters=()\n  local maxcountletters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters=()\n  local maxcountletters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters=()\n  local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n  local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A counts\n\
    \  local letter\n  local count\n  local -a letters=()\n  local -a counts=()\n\
    \  local -a sorted=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetters=()\n  local -a sortedCounts=()\n\
    \  local -a sortedLetters=()\n  local -a sortedCounts=()\n  local -a sortedLetters=()\n\
    \  local -a sortedCounts=()\n  local -a sortedLetter\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0v00176o.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp0v00176o.sh: line 19: counts: cannot convert associative to indexed array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/ }; do\n        counts[$letter]=$(( ${counts[$letter]}\
    \ + 1 ))\n        if [ ${counts[$letter]} -gt $max ]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [ ${counts[$letter]} -eq $max ]; then\n            counts[$letter]=$((\
    \ ${counts[$letter]} - 1 ))\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [ ${counts[$letter]} -eq 0 ]; then\n            counts[$letter]=1\n\
    \        fi\n    done\n    echo \"${counts[*]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyq1x74yp.sh: line 27: [: -eq: unary operator expected

    /tmp/tmpyq1x74yp.sh: line 32: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local letter\n    for letter in ${letters//[[:space:]]/};\
    \ do\n        counts[$letter]=$((${counts[$letter]}+1))\n    done\n    for letter\
    \ in ${counts[*]}; do\n        if [[ ${counts[$letter]} -gt ${maxcount} ]]; then\n\
    \            max=${counts[$letter]}\n            maxletter=$letter\n        fi\n\
    \    done\n    for letter in ${counts[*]}; do\n        if [[ ${counts[$letter]}\
    \ -eq ${max} ]]; then\n            if [[ ${counts[$letter]} -gt ${maxcountlettercount}\
    \ ]]; then\n                maxcountletter=${letter}\n                maxcountlettercount=${counts[$letter]}\n\
    \            fi\n        fi\n    done\n    echo \"${maxletter} ${maxcountlettercount}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letters=()\n    local maxcountletters_letters_count=()\n\
    \    local maxcountletters_letters_letters=()\n    local maxcountletters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_count=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_letters=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_letters_count=()\n \
    \   local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local letter\n\
    \    local count\n    for letter in \"${string}\" ; do\n        counts[$letter]=$((\
    \ ${counts[$letter]} + 1 ))\n    done\n    for letter in \"${!counts[@]}\" ; do\n\
    \        count=${counts[$letter]}\n        if [ \"$count\" -gt \"$maxcount\" ];\
    \ then\n            max=$count\n            maxletter=$letter\n            maxcount=$count\n\
    \        fi\n    done\n    echo \"$maxletter $maxcount\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpso_tj0y6.sh: line 22: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=\"\"\n\n  for letter in $string;\
    \ do\n    counts[$letter]=$(( ${counts[$letter]} + 1 ))\n  done\n\n  for letter\
    \ in ${!counts[*]}; do\n    local count=\"${counts[$letter]}\"\n    if [[ \"$count\"\
    \ -gt \"$max\" ]]; then\n      max=$count\n      maxletter=$letter\n    fi\n \
    \ done\n\n  echo \"$maxletter $max\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -n letters=$2\n\
    \    local -n counts=$3\n    local -n maxcount=$4\n    local -n maxletter=$5\n\
    \    local -n maxcountletter=$6\n\n    local -n maxlettercount=$7\n    local -n\
    \ maxlettercountletter=$8\n\n    local -n maxlettercountlettercount=$9\n\n   \
    \ local -n maxlettercountlettercountletter=$10\n\n    local -n maxlettercountlettercountlettercount=$11\n\
    \n    local -n maxlettercountlettercountlettercountletter=$12\n\n    local -n\
    \ maxlettercountlettercountlettercountlettercount=$13\n\n    local -n maxlettercountlettercountlettercountlettercountletter=$14\n\
    \n    local -n maxlettercountlettercountlettercountlettercountletter=$15\n\n \
    \   local -n maxlettercountlettercountlettercountlettercountlettercount=$16\n\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountletter=$17\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercount=$18\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercount=$19\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountletter=$20\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountletter=$21\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$22\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=$23\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=$24\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$25\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$26\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$27\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$28\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$29\n\
    \n    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqne7i4zm.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpqne7i4zm.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpqne7i4zm.sh: line 26: local: `a b b a0'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 28: local: `a b b a1'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 30: local: `a b b a2'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 32: local: `a b b a3'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 34: local: `a b b a4'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 36: local: `a b b a5'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 38: local: `a b b a6'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 40: local: `a b b a7'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 42: local: `a b b a8'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 44: local: `a b b a9'': invalid variable name for name
    reference

    /tmp/tmpqne7i4zm.sh: line 46: local: `0'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 48: local: `1'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 50: local: `2'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 52: local: `3'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 54: local: `4'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 56: local: `5'': invalid variable name for name reference

    /tmp/tmpqne7i4zm.sh: line 58: local: `6'': invalid'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A counts\n\
    \  local -A letters\n  local -A count\n  local -A letter\n  local -A counts\n\
    \  local -A letter\n  local -A count\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A counts\n \
    \ local -A counts\n  local -A counts\n  local -A counts\n  local -A count\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt6u7450b.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=histogram.$$\n    local\
    \ -a letters=()\n    local -a counts=()\n    local -a maxcount=0\n    local -a\
    \ maxletter=\n    local -a maxlettercount=\n    local -a maxlettercounts=()\n\
    \    local -a maxlettercountscount=\n    local -a maxlettercountscounts=()\n \
    \   local -a maxlettercountscountscount=\n    local -a maxlettercountscountscounts=()\n\
    \    local -a maxlettercountscountscountscount=\n    local -a maxlettercountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscount=\n    local -a maxlettercountscountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscountscount=\n    local -a maxlettercountscountscountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscountscountscount=\n    local -a\
    \ maxlettercountscountscountscountscountscountscounts=()\n    local -a maxlettercountscountscountscountscountscountscountscount=\n\
    \    local -a maxlettercountscountscountscountscountscountscountscounts=()\n \
    \   local -a maxlettercountscountscountscountscountscountscountscountscount=\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscountscount=\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscountscountscount=\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscountscountscountscounts=()\n\
    \    local -a maxlettercountscountscountscountscountscountscountscountscountscountscountscountscountscount=\n\
    \    local -a maxletter\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzvz14067.sh: line 14: local: `histogram.879443'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -n letters=$2\n\
    \    local -n counts=$3\n    local -n max=$4\n    local -n maxCount=0\n    local\
    \ -n maxLetter=''\n    local -n maxCountLetter=''\n    local -n maxCountLetterCount=0\n\
    \    local -n maxCountLetterCountMax=0\n    local -n maxCountLetterCountMaxIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n maxCountLetterCountMaxIndexIndex=0\n    local -n maxCountLetterCountMaxIndexIndex=0\n\
    \    local -n \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0uedj7j6.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp0uedj7j6.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp0uedj7j6.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp0uedj7j6.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp0uedj7j6.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp0uedj7j6.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp0uedj7j6.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 37: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 38: local: `0'': invalid variable name for name reference

    /tmp/tmp0uedj7j6.sh: line 39: local: `0'': invalid variable nam'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountletter\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local max=0\n    local maxstring=''\n    local maxcount=0\n    local maxcountstring=''\n\
    \    local maxcountstring2=''\n    local maxcountstring3=''\n    local maxcountstring4=''\n\
    \    local maxcountstring5=''\n    local maxcountstring6=''\n    local maxcountstring7=''\n\
    \    local maxcountstring8=''\n    local maxcountstring9=''\n    local maxcountstring10=''\n\
    \    local maxcountstring11=''\n    local maxcountstring12=''\n    local maxcountstring13=''\n\
    \    local maxcountstring14=''\n    local maxcountstring15=''\n    local maxcountstring16=''\n\
    \    local maxcountstring17=''\n    local maxcountstring18=''\n    local maxcountstring19=''\n\
    \    local maxcountstring20=''\n    local maxcountstring21=''\n    local maxcountstring22=''\n\
    \    local maxcountstring23=''\n    local maxcountstring24=''\n    local maxcountstring25=''\n\
    \    local maxcountstring26=''\n    local maxcountstring27=''\n    local maxcountstring28=''\n\
    \    local maxcountstring29=''\n    local maxcountstring30=''\n    local maxcountstring31=''\n\
    \    local maxcountstring32=''\n    local maxcountstring33=''\n    local maxcountstring34=''\n\
    \    local maxcountstring35=''\n    local maxcountstring36=''\n    local maxcountstring37=''\n\
    \    local maxcountstring38=''\n    local maxcountstring39=''\n    local maxcountstring40=''\n\
    \    local maxcountstring41=''\n    local maxcountstring42=''\n    local maxcountstring43=''\n\
    \    local maxcountstring44=''\n    local maxcountstring45=''\n    local maxcountstring46=''\n\
    \    local maxcountstring47=''\n    local maxcountstring48=''\n    local maxcountstring49=''\n\
    \    local maxcountstring50=''\n    local maxcountstring51=''\n    local maxcountstring52=''\n\
    \    local maxcountstring53=''\n    local maxcountstring54=''\n    local maxcountstring55=''\n\
    \    local maxcountstring56=''\n    local maxcountstring57=''\n    local maxcountstring58=''\n\
    \    local maxcountstring59=''\n    local maxcountstring60=''\n    local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountletters=()\n    local maxcountletters_count=()\n    local maxcountletters_count_letters=()\n\
    \    local maxcountletters_count_letters_count=()\n    local maxcountletters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count=()\n    local maxcountletters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letter\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountletters=()\n    local maxcountletters_sorted=()\n    local\
    \ maxcountletters_sorted_reverse=()\n    local maxcountletters_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse=()\n    local maxcountletters_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse=()\n \
    \   local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local str=$1\n  local counts=()\n  local max=0\n\
    \  local maxstr=''\n  local maxcount=0\n  local maxcountstr=''\n  local maxcountstrlen=0\n\
    \  local maxcountstrlenstr=''\n  local maxcountstrlenstrstr=''\n  local maxcountstrlenstrstr=''\n\
    \  local maxcountstrlenstrstrstr=''\n  local maxcountstrlenstrstrstrstr=''\n \
    \ local maxcountstrlenstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  local maxcountstrlenstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_letter=()\n    local maxcountletters_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n    local maxcountletters_letter_letter_letter_count=()\n\
    \    local maxcountletters_letter_letter_letter_letter=()\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letters=()\n  local maxcountletters_letters_count=()\n\
    \  local maxcountletters_letters_letters=()\n  local maxcountletters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=( )\n  local -a letters=(\
    \ )\n  local count=0\n  local max=0\n  local letter\n  local counts\n\n  while\
    \ read -r letter; do\n    count=0\n    counts=( )\n    for letter in \"${letters[@]}\"\
    ; do\n      (( counts[$letter]++ ))\n    done\n    counts[$letter]=$(( counts[$letter]++\
    \ ))\n    if [[ $count -gt $max ]]; then\n      max=$count\n      histogram[$letter]=$count\n\
    \    fi\n  done < <(echo \"$1\" | tr ' ' '\\n' | sort -u)\n\n  printf '%s\\n'\
    \ \"${histogram[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc_gvma9k.sh: line 14: local: histogram: reference variable cannot
    be an array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountletter\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=$1\n    local counts=()\n \
    \   local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n   \
    \ local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local count\n    local\
    \ max\n    local maxCount\n    local maxLetter\n    local maxLetterCount\n   \
    \ local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterIndexCount\n\
    \    local maxLetterIndexCountIndex\n    local maxLetterIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndex\n    local maxLetterIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndex\n    local maxLetterIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndex\n    local maxLetterIndexCountIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCount\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A count\n \
    \ local -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local\
    \ -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n\
    \ letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n\
    \  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local\
    \ -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n\
    \ count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n\
    \  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local\
    \ -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n\
    \ letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n\
    \  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local\
    \ -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n\
    \ count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n\
    \  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local\
    \ -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n\
    \ letter\n  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n\
    \  local -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local\
    \ -n count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n\
    \ count\n  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n\
    \  local -n letter\n  local -n count\n  local -n letter\n  local -n count\n  local\
    \ -n letter\n\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplktz9wfz.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmplktz9wfz.sh: line 17: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 19: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 21: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 23: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 25: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 27: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 29: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 31: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 33: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 35: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 37: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 39: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 41: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 43: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 45: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 47: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 49: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 51: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 53: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 55: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 57: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 59: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 61: local: count: reference variable cannot be an array

    /tmp/tmplktz9wfz.sh: line 63: local: count: reference variable cannot be '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=mapfile\n  local -n letters=$1\n\
    \  local -n counts=()\n  local -n max=0\n  local -n maxletter=\"\"\n  local -n\
    \ maxcount=0\n  local -n maxcountletter=\"\"\n  local -n maxcountletters=()\n\
    \  local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n \
    \ local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local\
    \ -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local -n\
    \ maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n\
    \  local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n \
    \ local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local\
    \ -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local -n\
    \ maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n\
    \  local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n \
    \ local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local\
    \ -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local -n\
    \ maxcountletters_count=()\n  local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n\
    \  local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n \
    \ local -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local\
    \ -n maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local -n\
    \ maxcountletters_letter=()\n  local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n\
    \  local -n maxcountletters_count=()\n  local -n maxcountletters_letter=()\n \
    \ local -n maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx8o8ilti.sh: line 15: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpx8o8ilti.sh: line 16: local: counts: reference variable cannot be an array

    /tmp/tmpx8o8ilti.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpx8o8ilti.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpx8o8ilti.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmpx8o8ilti.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpx8o8ilti.sh: line 21: local: maxcountletters: reference variable cannot
    be an array

    /tmp/tmpx8o8ilti.sh: line 22: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 23: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 24: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 25: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 26: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 27: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 28: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 29: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 30: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 31: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 32: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 33: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 34: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 35: local: maxcountletters_letter: reference variable
    cannot be an array

    /tmp/tmpx8o8ilti.sh: line 36: local: maxcountletters_count: reference variable
    cannot be an array

    /tmp/tmpx8o8i'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ max=0\n  local maxstring=''\n  local maxcount=0\n  local maxcountstring=''\n\
    \  local maxcountstring2=''\n  local maxcountstring3=''\n  local maxcountstring4=''\n\
    \  local maxcountstring5=''\n  local maxcountstring6=''\n  local maxcountstring7=''\n\
    \  local maxcountstring8=''\n  local maxcountstring9=''\n  local maxcountstring10=''\n\
    \  local maxcountstring11=''\n  local maxcountstring12=''\n  local maxcountstring13=''\n\
    \  local maxcountstring14=''\n  local maxcountstring15=''\n  local maxcountstring16=''\n\
    \  local maxcountstring17=''\n  local maxcountstring18=''\n  local maxcountstring19=''\n\
    \  local maxcountstring20=''\n  local maxcountstring21=''\n  local maxcountstring22=''\n\
    \  local maxcountstring23=''\n  local maxcountstring24=''\n  local maxcountstring25=''\n\
    \  local maxcountstring26=''\n  local maxcountstring27=''\n  local maxcountstring28=''\n\
    \  local maxcountstring29=''\n  local maxcountstring30=''\n  local maxcountstring31=''\n\
    \  local maxcountstring32=''\n  local maxcountstring33=''\n  local maxcountstring34=''\n\
    \  local maxcountstring35=''\n  local maxcountstring36=''\n  local maxcountstring37=''\n\
    \  local maxcountstring38=''\n  local maxcountstring39=''\n  local maxcountstring40=''\n\
    \  local maxcountstring41=''\n  local maxcountstring42=''\n  local maxcountstring43=''\n\
    \  local maxcountstring44=''\n  local maxcountstring45=''\n  local maxcountstring46=''\n\
    \  local maxcountstring47=''\n  local maxcountstring48=''\n  local maxcountstring49=''\n\
    \  local maxcountstring50=''\n  local maxcountstring51=''\n  local maxcountstring52=''\n\
    \  local maxcountstring53=''\n  local maxcountstring54=''\n  local maxcountstring55=''\n\
    \  local maxcountstring56=''\n  local maxcountstring57=''\n  local maxcountstring58=''\n\
    \  local maxcountstring59=''\n  local maxcountstring60=''\n  local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -a letters=()\n\
    \  local -a counts=()\n  local -a maxcounts=()\n  local -a maxletters=()\n  local\
    \ -a maxcountscount=()\n  local -a maxlettercount=()\n  local -a maxlettercountcount=()\n\
    \  local -a maxlettercountcountcount=()\n  local -a maxlettercountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcount=()\n  local -a maxlettercountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcount=()\n  local -a maxlettercountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcount=()\n  local\
    \ -a maxlettercountcountcountcountcountcountcountcountcountcount=()\n  local -a\
    \ maxlettercountcountcountcountcountcountcountcountcountcountcount=()\n  local\
    \ -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount=()\n\
    \  local -a maxlettercountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcountcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiywjo555.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=( )\n    local -n letters=(\
    \ )\n    local -n counts=( )\n    local -n max=0\n    local -n maxletter=''\n\
    \    local -n maxcount=0\n    local -n maxcountletter=''\n    local -n maxcountletters=(\
    \ )\n    local -n maxcountletters_length=( )\n    local -n maxcountletters_length_count=0\n\
    \    local -n maxcountletters_length_letter=''\n    local -n maxcountletters_length_letter_count=0\n\
    \    local -n maxcountletters_length_letter_counts=( )\n    local -n maxcountletters_length_letter_counts_length=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_count=0\n    local\
    \ -n maxcountletters_length_letter_counts_length_letter=''\n    local -n maxcountletters_length_letter_counts_length_letter_count=0\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts=( )\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_letter_counts_length_count=0\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter=''\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_count=0\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_count=0\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_letter=''\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_letter_count=0\n\
    \    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_letter_counts=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_letter_counts_length=(\
    \ )\n    local -n maxcountletters_length_letter_counts_length_letter_counts_length_letter_counts_length_letter_counts_length_count=0\n\
    \    local -n maxcountletters_length_letter_\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq0wmh6u7.sh: line 14: local: histogram: reference variable cannot
    be an array

    /tmp/tmpq0wmh6u7.sh: line 15: local: letters: reference variable cannot be an
    array

    /tmp/tmpq0wmh6u7.sh: line 16: local: counts: reference variable cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpq0wmh6u7.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpq0wmh6u7.sh: line 21: local: maxcountletters: reference variable cannot
    be an array

    /tmp/tmpq0wmh6u7.sh: line 22: local: maxcountletters_length: reference variable
    cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpq0wmh6u7.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 26: local: maxcountletters_length_letter_counts: reference
    variable cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 27: local: maxcountletters_length_letter_counts_length:
    reference variable cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpq0wmh6u7.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 31: local: maxcountletters_length_letter_counts_length_letter_counts:
    reference variable cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 32: local: maxcountletters_length_letter_counts_length_letter_counts_length:
    reference variable cannot be an array

    /tmp/tmpq0wmh6u7.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpq0wmh6u7.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpq0wmh6u7.sh: line 36: local: maxcountletters_length_letter_counts_length_letter_counts_length_letter_cou'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in $letters\n    do\n     \
    \   count=0\n        for count in \"${counts[@]}\"\n        do\n            if\
    \ [ \"$count\" -gt \"$count\" ]\n            then\n                count=$count\n\
    \            fi\n        done\n        counts[$letter]=$count\n    done\n    echo\
    \ \"${counts[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxstring=''\n    local maxcount=0\n    local maxcountstring=''\n\
    \    local maxcountstring2=''\n    local maxcountstring3=''\n    local maxcountstring4=''\n\
    \    local maxcountstring5=''\n    local maxcountstring6=''\n    local maxcountstring7=''\n\
    \    local maxcountstring8=''\n    local maxcountstring9=''\n    local maxcountstring10=''\n\
    \    local maxcountstring11=''\n    local maxcountstring12=''\n    local maxcountstring13=''\n\
    \    local maxcountstring14=''\n    local maxcountstring15=''\n    local maxcountstring16=''\n\
    \    local maxcountstring17=''\n    local maxcountstring18=''\n    local maxcountstring19=''\n\
    \    local maxcountstring20=''\n    local maxcountstring21=''\n    local maxcountstring22=''\n\
    \    local maxcountstring23=''\n    local maxcountstring24=''\n    local maxcountstring25=''\n\
    \    local maxcountstring26=''\n    local maxcountstring27=''\n    local maxcountstring28=''\n\
    \    local maxcountstring29=''\n    local maxcountstring30=''\n    local maxcountstring31=''\n\
    \    local maxcountstring32=''\n    local maxcountstring33=''\n    local maxcountstring34=''\n\
    \    local maxcountstring35=''\n    local maxcountstring36=''\n    local maxcountstring37=''\n\
    \    local maxcountstring38=''\n    local maxcountstring39=''\n    local maxcountstring40=''\n\
    \    local maxcountstring41=''\n    local maxcountstring42=''\n    local maxcountstring43=''\n\
    \    local maxcountstring44=''\n    local maxcountstring45=''\n    local maxcountstring46=''\n\
    \    local maxcountstring47=''\n    local maxcountstring48=''\n    local maxcountstring49=''\n\
    \    local maxcountstring50=''\n    local maxcountstring51=''\n    local maxcountstring52=''\n\
    \    local maxcountstring53=''\n    local maxcountstring54=''\n    local maxcountstring55=''\n\
    \    local maxcountstring56=''\n    local maxcountstring57=''\n    local maxcountstring58=''\n\
    \    local maxcountstring59=''\n    local maxcountstring60=''\n    local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_letters=()\n  local\
    \ maxcountletters_letters_count=()\n  local maxcountletters_letters_letter=()\n\
    \  local maxcountletters_letters_letters=()\n  local maxcountletters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letter=()\n  local maxcountletters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_count=()\n  local maxcountletters_letters_letters_letters_letter=()\n\
    \  local maxcountletters_letters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letter=()\n  local maxcountletters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_count=()\n  local\
    \ maxcountletters_letters_letters_letters_letters_letters_letter=()\n  local maxcountletters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \  local maxcountletters_letters_letters_letter\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_str=''\n\
    \    local maxcountletters_strs=()\n    local maxcountletters_strs_str=''\n  \
    \  local maxcountletters_strs_strs=()\n    local maxcountletters_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs=()\n    local maxcountletters_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs=()\n    local maxcountletters_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs=()\n    local maxcountletters_strs_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs=()\n    local maxcountletters_strs_strs_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs=()\n    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs=()\n    local\
    \ maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_str=''\n    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str=''\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs=()\n\
    \    local maxcountletters_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local count\n    local\
    \ letter\n    local counts\n    local max\n    local maxCount\n    local maxLetter\n\
    \    local maxCountLetter\n    local maxCountLetters\n    local maxLetters\n \
    \   local maxLettersCount\n    local maxLettersCountLetter\n    local maxLettersCountLetters\n\
    \    local maxLettersCountLettersCount\n    local maxLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLetters\n    local maxLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLetter\n    local maxLettersCountLettersCountLettersCountLetters\n\
    \    local maxLettersCountLettersCountLettersCountLetters\n    local maxLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLetter\n    local\
    \ maxLettersCountLettersCountLettersCountLettersCountLetters\n    local maxLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \    local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \    local maxLettersCount\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstr=''\n    local maxcountstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenlen=''\n    local maxcountstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenstrlenstrlenstrlen=''\n\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=mapfile\n  local -n letters=$2\n\
    \  local -n counts=$3\n  local -n maxcount=0\n  local -n maxletter=\n  local -n\
    \ maxlettercount=0\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n maxlettercount=\n  local -n maxletters=\n  local\
    \ -n maxlettercount=\n  local -n maxletters=\n  local -n maxlettercount=\n  local\
    \ -n maxletters=\n  local -n \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8qmdth6_.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmp8qmdth6_.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmp8qmdth6_.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 23: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 24: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 25: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 26: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 27: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 28: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 29: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 30: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 31: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 32: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 33: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 34: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 35: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 36: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 37: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 38: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 39: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 40: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 41: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 42: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 43: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 44: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line 45: local: `'': not a valid identifier

    /tmp/tmp8qmdth6_.sh: line '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_sorted=()\n\
    \  local maxcountletters_sorted_reversed=()\n  local maxcountletters_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed=()\n  local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=histogram.$$\n    local\
    \ -a letters=()\n    local -a counts=()\n    local -a maxcount=0\n    local -a\
    \ maxletter=()\n    local -a maxlettercount=()\n    local -a maxlettercounts=()\n\
    \    local -a maxlettercountss=()\n    local -a maxlettercountsss=()\n    local\
    \ -a maxlettercountssss=()\n    local -a maxlettercountsssss=()\n    local -a\
    \ maxlettercountssssss=()\n    local -a maxlettercountsssssss=()\n    local -a\
    \ maxlettercountssssssss=()\n    local -a maxlettercountsssssssss=()\n    local\
    \ -a maxlettercountssssssssss=()\n    local -a maxlettercountsssssssssss=()\n\
    \    local -a maxlettercountssssssssssss=()\n    local -a maxlettercountssssssssssssss=()\n\
    \    local -a maxlettercountsssssssssssssss=()\n    local -a maxlettercountssssssssssssssss=()\n\
    \    local -a maxlettercountsssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssss=()\n\
    \    local -a maxlettercountssssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssssss=()\n\
    \    local -a maxlettercountsssssssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssssssss=()\n\
    \    local -a maxlettercountssssssssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssssssss=()\n\
    \    local -a maxlettercountssssssssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssssssssss=()\n\
    \    local -a maxlettercountssssssssssssssssssssssssss=()\n    local -a maxlettercountssssssssssssssssssssssssss=()\n\
    \    local -a \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptez3v6dl.sh: line 14: local: `histogram.879509'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_count_letters=()\n  local maxcountletters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters=()\n  local maxcountletters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters=()\n  local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n  local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \  local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenlen=''\n    local maxcountstrlenstrlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlen\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local count\n  for letter in \"${letters[@]}\"\
    ; do\n    count=0\n    for count in \"${counts[@]}\"; do\n      if [[ \"${letter}\"\
    \ == \"${count}\" ]]; then\n        ((count++))\n        break\n      fi\n   \
    \ done\n    if [[ \"${count}\" -gt \"${maxcount}\" ]]; then\n      maxcount=\"\
    ${count}\"\n      maxcountletter=\"${letter}\"\n      maxcountlettercount=\"${count}\"\
    \n    fi\n    ((counts[${#counts[@]}]=\"${count}\"))\n  done\n  echo \"${maxcountletter}\
    \ ${maxcount}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in \"${letters[@]}\"; do\n\
    \        count=0\n        for count in \"${counts[@]}\"; do\n            if [\
    \ \"$count\" -eq \"$counts\" ]; then\n                count=$count\n         \
    \       break\n            fi\n        done\n        ((count++))\n        counts[$letter]=$count\n\
    \    done\n    echo \"${counts[@]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjisi78fw.sh: line 27: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in $letters\n    do\n        counts[$letter]=$((${counts[$letter]} + 1))\n \
    \       if [[ ${counts[$letter]} -gt $max ]]\n        then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in $letters\n\
    \    do\n        if [[ ${counts[$letter]} -eq $max ]]\n        then\n        \
    \    counts[$letter]=$((${counts[$letter]} - 1))\n        fi\n    done\n    echo\
    \ ${counts[*]}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local\
    \ maxcountletter=\"\"\n  local maxcountletters=()\n  local maxcountletters_sorted=()\n\
    \  local maxcountletters_sorted_reversed=()\n  local maxcountletters_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed=()\n  local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \  local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=mapfile\n    local -n\
    \ letters=$1\n    local -n counts=()\n    local -n max=0\n    local -n maxletter=\n\
    \    local -n maxcount=\n    local -n letter\n    local -n count\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        counts[$letter]=0\n    done\n    for\
    \ letter in ${letters//[[:space:]]/}; do\n        counts[$letter]+=1\n    done\n\
    \    for letter in ${!counts[*]}; do\n        count=${counts[$letter]}\n     \
    \   if (( count > max )); then\n            max=count\n            maxletter=$letter\n\
    \            maxcount=$count\n        fi\n    done\n    histogram[$maxletter]=$maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp41t5r9gg.sh: line 15: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp41t5r9gg.sh: line 16: local: counts: reference variable cannot be an array

    /tmp/tmp41t5r9gg.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmp41t5r9gg.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp41t5r9gg.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local count=0\n\
    \    local letter\n    local counts\n    local max=0\n    local maxLetter\n  \
    \  local maxCount\n    local maxCountLetter\n    local maxCountLetterCount\n \
    \   local maxCountLetterCountLetter\n    local maxCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetter\n    local maxCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetter\n    local maxCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetter\n    local\
    \ maxCountLetterCountLetterCountLetterCountLetterCountLetter\n    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in $letters\n    do\n     \
    \   count=0\n        for count in \"${counts[@]}\"\n        do\n            ((\
    \ count+1 ))\n        done\n        counts+=(\"$count\")\n    done\n    local\
    \ histo\n    histo=()\n    for count in \"${counts[@]}\"\n    do\n        histo+=(\"\
    $count\")\n    done\n    local key\n    local value\n    for (( i=0; i<${#histo[@]};\
    \ i++ ))\n    do\n        key=\"${histo[i]}\"\n        value=${histo[i+1]}\n \
    \       histo[i]=\"${value}\"\n        histo[i+1]=\"${key}\"\n    done\n    local\
    \ histoDict\n    histoDict=()\n    for (( i=0; i<${#histo[@]}; i++ ))\n    do\n\
    \        key=\"${histo[i]}\"\n        value=\"${histo[i+1]}\"\n        histoDict+=(\"\
    $key\":\"$value\")\n    done\n    echo \"${histoDict[@]}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660026140
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local letter\n    local count\n    for\
    \ letter in \"${string}\" ; do\n        counts[$letter]=$((${counts[$letter]}+1))\n\
    \    done\n    for letter in \"${!counts[@]}\" ; do\n        count=${counts[$letter]}\n\
    \        if [ \"$count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n\
    \            maxcountletter=$letter\n        fi\n    done\n    for letter in \"\
    ${!counts[@]}\" ; do\n        count=${counts[$letter]}\n        if [ \"$count\"\
    \ -gt \"$maxcountlettercount\" ]; then\n            maxcountlettercount=$count\n\
    \            maxcountletter=$letter\n        fi\n    done\n    echo \"${maxcountletter}=${maxcountlettercount}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwd76osky.sh: line 24: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local str=$1\n  local count\n  local letter\n\
    \  local counts\n  local max\n  local maxCount\n  local maxLetter\n  local maxCountLetter\n\
    \  local maxCountLetters\n  local maxLetters\n  local maxLettersCount\n  local\
    \ maxLettersCountLetter\n  local maxLettersCountLetters\n  local maxLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLetter\n  local maxLettersCountLettersCountLetters\n\
    \  local maxLettersCountLettersCountLettersCount\n  local maxLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLetters\n  local maxLettersCountLettersCountLettersCountLetters\n\
    \  local maxLettersCountLettersCountLettersCountLettersCount\n  local maxLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLetters\n  local maxLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxLettersCount\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=$1\n  local counts=()\n  local\
    \ max=0\n  local maxletter=''\n  local maxcount=0\n  local maxcountletter=''\n\
    \  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in \"${letters}\"; do\n        local count=\"${counts[$letter]}\"\n        if\
    \ [[ $count -gt $max ]]; then\n            max=$count\n            maxletter=$letter\n\
    \        fi\n        counts[$letter]=$((counts[$letter]+1))\n    done\n    for\
    \ letter in \"${!counts[@]}\"; do\n        local count=\"${counts[$letter]}\"\n\
    \        if [[ $count -eq $max ]]; then\n            echo \"$letter $count\"\n\
    \        fi\n    done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpevznp_11.sh: line 20: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local max=0\n  local maxletter=''\n  local maxcount=0\n  local maxcountletter=''\n\
    \  local maxcountlettercount=0\n  local letter\n  local count\n  local countletter\n\
    \  local countlettercount\n  local lettercount\n  local lettercountcount\n  local\
    \ i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local\
    \ p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local\
    \ w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local\
    \ d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local letter\n  local count\n  local countsCount\n  local maxCount\n  local\
    \ maxLetter\n  local maxCountLetter\n  local maxCountLetterCount\n  local maxCountLetterCountValue\n\
    \  local maxCountLetterCountValueCount\n  local maxCountLetterCountValueCountValue\n\
    \  local maxCountLetterCountValueCountValue\n  local maxCountLetterCountValueCountValueValue\n\
    \  local maxCountLetterCountValueCountValueValue\n  local maxCountLetterCountValueCountValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCountValueValueValue\n  local maxCountLetterCountValueCountValueValueValue\n\
    \  local maxCountLetterCountValueCount\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrlen=''\n\
    \    local maxcountstrlenstrlenlen=''\n    local maxcountstrlenstrlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n    local maxcountstrlenstrlenlenlenlenlenlenlen=''\n\
    \    local maxcountstrlenstr\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountletters=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local letter\n  local count\n  local countsCount\n  local maxCount\n  local\
    \ maxLetter\n  local maxCountLetter\n  local maxCountLetterCount\n  local maxCountLetterCountMax\n\
    \  local maxCountLetterCountMin\n  local maxCountLetterCountMaxMin\n  local maxCountLetterCountMaxMinMin\n\
    \  local maxCountLetterCountMaxMinMinMin\n  local maxCountLetterCountMaxMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMin\n  local maxCountLetterCountMaxMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMin\n\
    \  local maxCountLetterCountMaxMinMinMinMinMinMin\n  local maxCountLetterCountMaxMinMinMinMinMinMinMin\n\
    \  local maxCountLetterCount\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        else\n            counts[$letter]=$((${counts[$letter]} + 1))\n\
    \        fi\n    done\n    for letter in ${counts[*]}; do\n        if [[ ${counts[$letter]}\
    \ -gt $max ]]; then\n            max=${counts[$letter]}\n            maxletter=$letter\n\
    \        fi\n    done\n    echo ${counts[*]}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=histogram\n    local -a\
    \ letters=( $1 )\n    local counts=( )\n    local letter\n    local count\n  \
    \  for letter in \"${letters[@]}\"; do\n        counts[$letter]=0\n    done\n\
    \    for letter in \"${letters[@]}\"; do\n        counts[$letter]=$(( counts[$letter]\
    \ + 1 ))\n    done\n    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n\
    \        if [[ $count -gt 1 ]]; then\n            histogram[$letter]=$count\n\
    \        fi\n    done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp29y5njyw.sh: line 14: local: warning: histogram: circular name
    reference

    /tmp/tmp29y5njyw.sh: line 14: warning: histogram: circular name reference

    /tmp/tmp29y5njyw.sh: line 28: warning: histogram: circular name reference

    /tmp/tmp29y5njyw.sh: line 28: warning: histogram: circular name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local count\n    for letter in ${letters//[[:space:]]/};\
    \ do\n        counts[$letter]=$((${counts[$letter]} + 1))\n    done\n    for letter\
    \ in ${!counts[@]}; do\n        count=${counts[$letter]}\n        if (( count\
    \ > max )); then\n            max=count\n            maxletter=$letter\n     \
    \       maxcount=$count\n            maxcountletter=$letter\n            maxcountlettercount=$count\n\
    \        fi\n    done\n    echo \"${maxcountletter} ${maxcount}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local count\n    local\
    \ max\n    local maxCount\n    local maxLetter\n    local maxLetterCount\n   \
    \ local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    \n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxstring=\"\"\n    local maxcount=0\n    local maxcountstring=\"\
    \"\n    local maxcountstring2=\"\"\n    local maxcountstring3=\"\"\n    local\
    \ maxcountstring4=\"\"\n    local maxcountstring5=\"\"\n    local maxcountstring6=\"\
    \"\n    local maxcountstring7=\"\"\n    local maxcountstring8=\"\"\n    local\
    \ maxcountstring9=\"\"\n    local maxcountstring10=\"\"\n    local maxcountstring11=\"\
    \"\n    local maxcountstring12=\"\"\n    local maxcountstring13=\"\"\n    local\
    \ maxcountstring14=\"\"\n    local maxcountstring15=\"\"\n    local maxcountstring16=\"\
    \"\n    local maxcountstring17=\"\"\n    local maxcountstring18=\"\"\n    local\
    \ maxcountstring19=\"\"\n    local maxcountstring20=\"\"\n    local maxcountstring21=\"\
    \"\n    local maxcountstring22=\"\"\n    local maxcountstring23=\"\"\n    local\
    \ maxcountstring24=\"\"\n    local maxcountstring25=\"\"\n    local maxcountstring26=\"\
    \"\n    local maxcountstring27=\"\"\n    local maxcountstring28=\"\"\n    local\
    \ maxcountstring29=\"\"\n    local maxcountstring30=\"\"\n    local maxcountstring31=\"\
    \"\n    local maxcountstring32=\"\"\n    local maxcountstring33=\"\"\n    local\
    \ maxcountstring34=\"\"\n    local maxcountstring35=\"\"\n    local maxcountstring36=\"\
    \"\n    local maxcountstring37=\"\"\n    local maxcountstring38=\"\"\n    local\
    \ maxcountstring39=\"\"\n    local maxcountstring40=\"\"\n    local maxcountstring41=\"\
    \"\n    local maxcountstring42=\"\"\n    local maxcountstring43=\"\"\n    local\
    \ maxcountstring44=\"\"\n    local maxcountstring45=\"\"\n    local maxcountstring46=\"\
    \"\n    local maxcountstring47=\"\"\n    local maxcountstring48=\"\"\n    local\
    \ maxcountstring49=\"\"\n    local maxcountstring50=\"\"\n    local maxcountstring51=\"\
    \"\n    local maxcountstring52=\"\"\n    local maxcountstring53=\"\"\n    local\
    \ maxcountstring54=\"\"\n    local maxcountstring55=\"\"\n    local maxcountstring56=\"\
    \"\n    local maxcountstring57=\"\"\n    local maxcountstring58=\"\"\n    local\
    \ maxcountstring59=\"\"\n    local maxcountstring60=\"\"\n    local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n\n  while read -r letter; do\n\
    \    counts[$letter]=$(( counts[$letter]+1 ))\n  done <<< \"$string\"\n\n  for\
    \ letter in \"${!counts[@]}\"; do\n    if [[ ${counts[$letter]} -gt $max ]]; then\n\
    \      max=${counts[$letter]}\n      maxletter=$letter\n      maxcount=$max\n\
    \      maxcountletter=$letter\n      maxcountletters=()\n    fi\n  done\n\n  for\
    \ letter in \"${!counts[@]}\"; do\n    if [[ ${counts[$letter]} -eq $max ]]; then\n\
    \      maxcountletters+=(\"$letter\")\n    fi\n  done\n\n  echo \"${maxcountletters[@]}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqd3lsmrg.sh: line 24: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A count\n \
    \ local -n max\n  local -n maxCount\n  local -n maxCountKey\n  local -n maxCountKeyValue\n\
    \  local -n maxCountKeyValueCount\n  local -n maxCountKeyValueCountKey\n  local\
    \ -n maxCountKeyValueCountKeyValue\n  local -n maxCountKeyValueCountKeyValueCount\n\
    \  local -n maxCountKeyValueCountKeyValueCountKey\n  local -n maxCountKeyValueCountKeyValueCountKeyValue\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCount\n  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKey\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValue\n  local -n\
    \ maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCount\n  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKey\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValue\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCount\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValue\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCount\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCount\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCount\n\
    \  local -n maxCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValueCountKeyValue\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxg1csxu8.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -A counts\n\
    \    local letter\n    local count\n    local -a letters\n    local -a counts\n\
    \    local -a sorted\n    local -a sorted_counts\n    local -a sorted_letters\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    \    local -a sorted_counts\n    local -a sorted_counts\n    local -a sorted_counts\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiyulf_ha.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpiyulf_ha.sh: line 19: local: counts: cannot convert associative to indexed
    array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A count\n \
    \ local letter\n  local count\n  local -a letters=()\n\n  while read -r letter;\
    \ do\n    count[$letter]=0\n  done < <(echo \"$histogram\")\n\n  for letter in\
    \ \"${!count[@]}\"; do\n    count[$letter]=$(( count[$letter] + 1 ))\n  done\n\
    \n  while read -r letter; do\n    letters[${#letters[@]}]=\"$letter\"\n  done\
    \ < <(echo \"${!count[@]}\")\n\n  echo \"${letters[@]}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi3xuolh4.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpi3xuolh4.sh: line 21: count[$letter]: bad array subscript

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local maxcountletters_letter_count=()\n\
    \    local maxcountletters_letter_count=()\n    local max\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local count\n    local\
    \ letter\n    local counts\n    local max\n    local maxCount\n    local maxLetter\n\
    \    local maxCountLetter\n    local maxCountLetterCount\n    local maxCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCount\n    local maxCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCount\n    local maxCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCount\n    local maxCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetter\n    local\
    \ maxCountLetterCountLetterCountLetterCountLetterCountLetter\n    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCount\n \
    \   local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCount\n\
    \    local maxCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetterCountLetter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=histogram.$$\n    local\
    \ -a letters=( $1 )\n    local -a counts=()\n    local -a maxcount=0\n    local\
    \ -a maxletter=()\n    local -a maxlettercount=()\n    local -a maxlettercounts=()\n\
    \    local -a maxlettercountss=()\n    local -a maxlettercountsss=()\n    local\
    \ -a maxlettercountsst=()\n    local -a maxlettercountssts=()\n    local -a maxlettercountsstt=()\n\
    \    local -a maxlettercountsstts=()\n    local -a maxlettercountssttt=()\n  \
    \  local -a maxlettercountssttts=()\n    local -a maxlettercountsstttt=()\n  \
    \  local -a maxlettercountsstttts=()\n    local -a maxlettercountssttttt=()\n\
    \    local -a maxlettercountssttttts=()\n    local -a maxlettercountsstttttt=()\n\
    \    local -a maxlettercountsstttttts=()\n    local -a maxlettercountssttttttt=()\n\
    \    local -a maxlettercountssttttttts=()\n    local -a maxlettercountsstttttttt=()\n\
    \    local -a maxlettercountsstttttttts=()\n    local -a maxlettercountssttttttttt=()\n\
    \    local -a maxlettercountssttttttttts=()\n    local -a maxlettercountsstttttttttt=()\n\
    \    local -a maxlettercountsstttttttttts=()\n    local -a maxlettercountssttttttttttt=()\n\
    \    local -a maxlettercountsstttttttttts=()\n    local -a maxlettercountssttttttttttt=()\n\
    \    local -a maxlettercountssttttttttttts=()\n    local -a maxlettercountsstttttttttttt=()\n\
    \    local -a maxlettercountsstttttttttttts=()\n    local -a maxlettercountssttttttttttttt=()\n\
    \    local -a maxlettercountssttttttttttttts=()\n    \n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl9n_mnl5.sh: line 14: local: `histogram.879566'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local count\n\
    \    local letter\n    local counts\n    local max\n    local maxCount\n    local\
    \ maxLetter\n    local maxLetterCount\n    local maxLetterCountIndex\n    local\
    \ maxLetterIndex\n    local maxLetterIndexCount\n    local maxLetterIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCount\n    local maxLetterIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCount\n    local maxLetterIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCount\n    local maxLetterIndexCountIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCount\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n    local\
    \ maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    \    local maxLetterIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    for letter\
    \ in $letters\n    do\n        local count=0\n        for c in $letters\n    \
    \    do\n            if [ \"$c\" == \"$letter\" ]\n            then\n        \
    \        count=$((count+1))\n            fi\n        done\n        counts[$letter]=$count\n\
    \        if [ \"$count\" -gt \"$maxcount\" ]\n        then\n            max=$count\n\
    \            maxletter=$letter\n            maxcount=$count\n        fi\n    done\n\
    \    echo \"${counts[*]}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in $letters\n    do\n        counts[$letter]=$((counts[$letter]+1))\n      \
    \  if ((counts[$letter] > maxcount))\n        then\n            maxcount=$counts[$letter]\n\
    \            maxletter=$letter\n        fi\n    done\n    echo ${counts[$maxletter]}\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptj0sz4rf.sh: line 22: ((: 1[a]: syntax error: invalid arithmetic
    operator (error token is "[a]")

    /tmp/tmptj0sz4rf.sh: line 22: ((: 1[a]: syntax error: invalid arithmetic operator
    (error token is "[a]")

    /tmp/tmptj0sz4rf.sh: line 22: ((: 1[a]: syntax error: invalid arithmetic operator
    (error token is "[a]")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=mapfile\n    local -n\
    \ letters=$1\n    local -n counts=()\n    local -n max=0\n    local -n maxletter=\n\
    \    local -n maxcount=\n    local -n maxcountletter=\n    local -n maxcountlettercount=\n\
    \    local -n maxcountlettercount2=\n    local -n maxcountlettercount3=\n    local\
    \ -n maxcountlettercount4=\n    local -n maxcountlettercount5=\n    local -n maxcountlettercount6=\n\
    \    local -n maxcountlettercount7=\n    local -n maxcountlettercount8=\n    local\
    \ -n maxcountlettercount9=\n    local -n maxcountlettercount10=\n    local -n\
    \ maxcountlettercount11=\n    local -n maxcountlettercount12=\n    local -n maxcountlettercount13=\n\
    \    local -n maxcountlettercount14=\n    local -n maxcountlettercount15=\n  \
    \  local -n maxcountlettercount16=\n    local -n maxcountlettercount17=\n    local\
    \ -n maxcountlettercount18=\n    local -n maxcountlettercount19=\n    local -n\
    \ maxcountlettercount20=\n    local -n maxcountlettercount21=\n    local -n maxcountlettercount22=\n\
    \    local -n maxcountlettercount23=\n    local -n maxcountlettercount24=\n  \
    \  local -n maxcountlettercount25=\n    local -n maxcountlettercount26=\n    local\
    \ -n maxcountlettercount27=\n    local -n maxcountlettercount28=\n    local -n\
    \ maxcountlettercount29=\n    local -n maxcountlettercount30=\n    local -n maxcountlettercount31=\n\
    \    local -n maxcountlettercount32=\n    local -n maxcountlettercount33=\n  \
    \  local -n maxcountlettercount34=\n    local -n maxcountlettercount35=\n    local\
    \ -n maxcountlettercount36=\n    local -n maxcountlettercount37=\n    local -n\
    \ maxcountlettercount38=\n    local -n maxcountlettercount39=\n    local -n maxcountlettercount40=\n\
    \    local -n maxcountlettercount41=\n    local -n maxcountlettercount42\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzmszrx4i.sh: line 15: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpzmszrx4i.sh: line 16: local: counts: reference variable cannot be an array

    /tmp/tmpzmszrx4i.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpzmszrx4i.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 21: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 22: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 24: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 25: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 27: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 28: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 30: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 31: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 33: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 35: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 38: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 39: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 40: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 41: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 42: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 43: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 44: local: `'': not a valid identifier

    /tmp/tmpzmszrx4i.sh: line 45: local: `'': not a valid identifier

    /'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    for letter in $letters\n    do\n        local count=0\n        for c in\
    \ $letters\n        do\n            ((count+=1))\n            if [ \"$c\" = \"\
    $letter\" ]\n            then\n                count=1\n                break\n\
    \            fi\n        done\n        if [ \"$count\" -gt \"$maxcount\" ]\n \
    \       then\n            maxcount=$count\n            maxcountletter=$letter\n\
    \        fi\n        counts[$letter]=$count\n    done\n    for letter in $letters\n\
    \    do\n        if [ \"$counts[$letter]\" -gt \"$max\" ]\n        then\n    \
    \        max=$counts[$letter]\n            maxletter=$letter\n        fi\n   \
    \ done\n    echo \"$maxletter $maxcount\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1q4sl1es.sh: line 41: [: 1[a]: integer expression expected

    /tmp/tmp1q4sl1es.sh: line 41: [: 1[b]: integer expression expected

    /tmp/tmp1q4sl1es.sh: line 41: [: 1[b]: integer expression expected

    /tmp/tmp1q4sl1es.sh: line 41: [: 1[a]: integer expression expected

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountletter\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -A counts\n\
    \    local letter\n    local count\n    local -a letters\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \    local -a counts\n    local -a counts\n    local -a counts\n    local -a counts\n\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp339we0dk.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp339we0dk.sh: line 19: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 20: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 21: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 22: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 23: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 24: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 25: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 26: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 27: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 28: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 29: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 30: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 31: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 32: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 33: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 34: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 35: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 36: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 37: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 38: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 39: local: counts: cannot convert associative to indexed
    array

    /tmp/tmp339we0dk.sh: line 40: local: counts: cannot convert associative to indexed
    array

    /'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountletters=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  \
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstr\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in $letters\n    do\n        counts[$letter]=$((${counts[$letter]} + 1))\n \
    \       if [[ ${counts[$letter]} -gt $max ]]\n        then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in $letters\n\
    \    do\n        if [[ ${counts[$letter]} -eq $max ]]\n        then\n        \
    \    counts[$letter]=$((${counts[$letter]} - 1))\n        fi\n    done\n    for\
    \ letter in $letters\n    do\n        if [[ ${counts[$letter]} -eq 0 ]]\n    \
    \    then\n            counts[$letter]=1\n        fi\n    done\n    echo ${counts[*]}\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=''\n  local maxcount=0\n  local maxcountletter=''\n\
    \  local maxcountletters=''\n  local maxcountletters_all=''\n  local maxcountletters_allletters=''\n\
    \  local maxcountletters_allletters_all=''\n  local maxcountletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_all=''\n  local maxcountletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_all=''\n  local maxcountletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_all=''\n\
    \  local maxcountletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletters_allletter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/ }; do\n        counts[$letter]=$(( ${counts[$letter]}\
    \ + 1 ))\n        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            counts[$letter]=$((\
    \ ${counts[$letter]} - 1 ))\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq 0 ]]; then\n            counts[$letter]=1\n\
    \        fi\n    done\n    echo \"${counts[*]}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountlettercount=0\n    local letter\n    local count\n    for letter\
    \ in $letters\n    do\n        count=0\n        for letter in $letters\n     \
    \   do\n            if [ \"$letter\" == \"$letter\" ] 2>/dev/null\n          \
    \  then\n                count=$(( $count + 1 ))\n            fi\n        done\n\
    \        counts=( \"${counts[@]}\" \"$count\" )\n        if [ \"$count\" -gt \"\
    $maxcount\" ]\n        then\n            maxcount=$count\n            maxcountletter=$letter\n\
    \            maxcountlettercount=$count\n        fi\n    done\n    echo -n \"\
    $maxcountletter\"\n    for count in $counts\n    do\n        echo -n \" $count\"\
    \n    done\n    echo -n \"$maxcountlettercount\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local letter\n\
    \    local count\n    for letter in \"${string//[[:space:]]/}\"; do\n        counts[$letter]=$((${counts[$letter]}+1))\n\
    \    done\n    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n\
    \        if [ \"$count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n\
    \            maxletter=$letter\n        fi\n    done\n    echo \"${maxletter}\
    \ ${maxcount}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=$1\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=( )\n    local -a letters=(\
    \ )\n    local -a counts=( )\n    local -i max=0\n    local -i maxletter\n   \
    \ local -i maxcount\n    local letter\n    local count\n    local i\n    local\
    \ j\n    local k\n    local lettercount\n    local lettercounts\n    local countscount\n\
    \    local countscounts\n    local countscountscount\n    local countscountscounts\n\
    \    local countscountscountscount\n    local countscountscountscounts\n    local\
    \ countscountscountscountscount\n    local countscountscountscountscounts\n  \
    \  local countscountscountscountscountscount\n    local countscountscountscountscountscounts\n\
    \    local countscountscountscountscountscountscount\n    local countscountscountscountscountscountscounts\n\
    \    local countscountscountscountscountscountscountscount\n    local countscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscount\n    local countscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscountscountscountscountscountscount\n\
    \    local countscountscountscountscountscountscountscountscountscountscountscountscountscountscountscounts\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt6mcn64k.sh: line 14: local: histogram: reference variable cannot
    be an array

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -a histo\n\
    \    local -a histocount\n    local -a histoletters\n    local -a histoletterscount\n\
    \    local -a histoletterscountmax\n    local -a histoletterscountmaxindex\n \
    \   local -a histoletterscountmaxindex2\n    local -a histoletterscountmaxindex3\n\
    \    local -a histoletterscountmaxindex4\n    local -a histoletterscountmaxindex5\n\
    \    local -a histoletterscountmaxindex6\n    local -a histoletterscountmaxindex7\n\
    \    local -a histoletterscountmaxindex8\n    local -a histoletterscountmaxindex9\n\
    \    local -a histoletterscountmaxindex10\n    local -a histoletterscountmaxindex11\n\
    \    local -a histoletterscountmaxindex12\n    local -a histoletterscountmaxindex13\n\
    \    local -a histoletterscountmaxindex14\n    local -a histoletterscountmaxindex15\n\
    \    local -a histoletterscountmaxindex16\n    local -a histoletterscountmaxindex17\n\
    \    local -a histoletterscountmaxindex18\n    local -a histoletterscountmaxindex19\n\
    \    local -a histoletterscountmaxindex20\n    local -a histoletterscountmaxindex21\n\
    \    local -a histoletterscountmaxindex22\n    local -a histoletterscountmaxindex23\n\
    \    local -a histoletterscountmaxindex24\n    local -a histoletterscountmaxindex25\n\
    \    local -a histoletterscountmaxindex26\n    local -a histoletterscountmaxindex27\n\
    \    local -a histoletterscountmaxindex28\n    local -a histoletterscountmaxindex29\n\
    \    local -a histoletterscountmaxindex30\n    local -a histoletterscountmaxindex31\n\
    \    local -a histoletterscountmaxindex32\n    local -a histoletterscountmaxindex33\n\
    \    local -a histoletterscountmaxindex34\n    local -a histoletterscountmaxindex35\n\
    \    local -a histoletterscountmaxindex36\n    local -a histoletterscountmaxindex37\n\
    \    local -a histoletterscountmaxindex38\n    local -a histoletterscountmaxindex39\n\
    \    local -a histoletterscountmaxindex40\n    local -a histoletterscountmaxindex41\n\
    \    local -a histoletterscountmaxindex42\n    local -a histoletters\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp355r35mf.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=( )\n    local -n letters=(\
    \ )\n    local -n counts=( )\n    local -n max=0\n    local -n maxletter=''\n\
    \    local -n maxcount=0\n    local -n maxcountletter=''\n    local -n maxcountletters=(\
    \ )\n    local -n maxcountletters_len=0\n    local -n maxcountletters_lens=( )\n\
    \    local -n maxcountletters_lens_len=0\n    local -n maxcountletters_lens_lens=(\
    \ )\n    local -n maxcountletters_lens_lens_len=0\n    local -n maxcountletters_lens_lens_lens=(\
    \ )\n    local -n maxcountletters_lens_lens_lens_len=0\n    local -n maxcountletters_lens_lens_lens_lens=(\
    \ )\n    local -n maxcountletters_lens_lens_lens_lens_len=0\n    local -n maxcountletters_lens_lens_lens_lens_lens=(\
    \ )\n    local -n maxcountletters_lens_lens_lens_lens_lens_len=0\n    local -n\
    \ maxcountletters_lens_lens_lens_lens_lens_lens=( )\n    local -n maxcountletters_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local -n maxcountletters_lens_lens_lens_lens_lens_lens_len=0\n    local -n\
    \ maxcountletters_lens_lens_lens_lens_lens_lens_lens=( )\n    local -n maxcountletters_lens_lens_lens_lens_lens_lens_lens_len=0\n\
    \    local -n maxcountletters_lens_lens_lens_lens_lens_lens_lens_len=0\n    local\
    \ -n maxcountletters_lens_lens_lens_lens_lens_lens_lens_lens=( )\n    local -n\
    \ maxcountletters_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n    local -n\
    \ maxcountletters_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n    local -n\
    \ maxcountletters_lens_lens_lens_lens_lens_lens_lens_lens_len=0\n    local -n\
    \ maxcountletters_len\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnk73lq1k.sh: line 14: local: histogram: reference variable cannot
    be an array

    /tmp/tmpnk73lq1k.sh: line 15: local: letters: reference variable cannot be an
    array

    /tmp/tmpnk73lq1k.sh: line 16: local: counts: reference variable cannot be an array

    /tmp/tmpnk73lq1k.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 18: local: `'': not a valid identifier

    /tmp/tmpnk73lq1k.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpnk73lq1k.sh: line 21: local: maxcountletters: reference variable cannot
    be an array

    /tmp/tmpnk73lq1k.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 23: local: maxcountletters_lens: reference variable
    cannot be an array

    /tmp/tmpnk73lq1k.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 25: local: maxcountletters_lens_lens: reference variable
    cannot be an array

    /tmp/tmpnk73lq1k.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 27: local: maxcountletters_lens_lens_lens: reference
    variable cannot be an array

    /tmp/tmpnk73lq1k.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 29: local: maxcountletters_lens_lens_lens_lens: reference
    variable cannot be an array

    /tmp/tmpnk73lq1k.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 31: local: maxcountletters_lens_lens_lens_lens_lens:
    reference variable cannot be an array

    /tmp/tmpnk73lq1k.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 33: local: maxcountletters_lens_lens_lens_lens_lens_lens:
    reference variable cannot be an array

    /tmp/tmpnk73lq1k.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpnk73lq1k.sh: line 36: local: maxcountletters_lens_lens_lens_lens_lens_lens_lens:'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"${1}\"\n  local counts=()\n\
    \  local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountletter\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local letter\n\
    \    for letter in \"${letters}\"; do\n        counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in \"${counts[@]}\"\
    ; do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            counts[$letter]=$((${counts[$letter]}\
    \ - 1))\n        fi\n    done\n    echo \"${counts[@]}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw74k4oo_.sh: line 21: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local -n histogram=$1\n  local -A counts\n\
    \  local letter\n  local count\n  local countsKey\n  local countsValue\n  local\
    \ -a letters\n  local -a lettersCount\n  local -a lettersCountKey\n  local -a\
    \ lettersCountValue\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCountKeys\n\
    \  local -a lettersCountValues\n  local -a lettersCountKeys\n  local -a lettersCountValues\n\
    \  local -a lettersCountKeys\n  local -a lettersCountValues\n  local -a lettersCount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp29d3_c4g.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    for letter\
    \ in ${letters//[[:space:]]/}; do\n        counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            echo \"\
    $letter: ${counts[$letter]}\"\n        fi\n    done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=histogram.$$\n    local\
    \ -a letters=()\n    local -a counts=()\n    local -a maxcount=0\n    local -a\
    \ maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local -a maxletter=()\n    local\
    \ -a maxcount=()\n    local -a maxletter=()\n    local -a maxcount=()\n    local\
    \ -a maxletter=()\n    local -a maxcount=()\n    local \n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4d66sai4.sh: line 14: local: `histogram.879659'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercount\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local counts=()\n    local\
    \ max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n    local maxcountstr=''\n\
    \    local maxcountstr=''\n    local maxcountstr=''\n\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountletters=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letters=()\n  local maxcountletters_letters_count=()\n\
    \  local maxcountletters_letters_letters=()\n  local maxcountletters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters=()\n  local maxcountletters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \  local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \  local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=$1\n    local counts=()\n \
    \   local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountletters=()\n    local maxcountletters_sorted=()\n    local\
    \ maxcountletters_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local max\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local str=\"$1\"\n  local counts=()\n  local\
    \ max=0\n  local maxstr=''\n  local maxcount=0\n  local maxcountstr=''\n  local\
    \ maxcountstrlen=0\n  local maxcountstrlenstr=''\n  local maxcountstrlenstrlen=''\n\
    \  local maxcountstrlenstrlenlen=''\n  local maxcountstrlenstrlenlenlen=''\n \
    \ local maxcountstrlenstrlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local letter\n    local count\n    for letter in \"${letters}\" ; do\n  \
    \      count=0\n        for count in \"${counts[@]}\" ; do\n            if [ \"\
    $count\" == \"$letter\" ] ; then\n                count=$(( $count + 1 ))\n  \
    \              break\n            fi\n        done\n        counts[$letter]=$count\n\
    \    done\n    local histo\n    histo=()\n    for letter in \"${!counts[@]}\"\
    \ ; do\n        histo+=(\"$letter\" \"${counts[$letter]}\")\n    done\n    echo\
    \ ${histo[@]}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg84mumf5.sh: line 26: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountlettercount=0\n    local maxcountlettercountletter=''\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=''\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local counts=()\n \
    \   local max=0\n    local maxstr=\"\"\n    local maxcount=0\n    local maxcountstr=\"\
    \"\n    local maxcountstrlen=0\n    local maxcountstrlen2=0\n    local maxcountstrlen3=0\n\
    \    local maxcountstrlen4=0\n    local maxcountstrlen5=0\n    local maxcountstrlen6=0\n\
    \    local maxcountstrlen7=0\n    local maxcountstrlen8=0\n    local maxcountstrlen9=0\n\
    \    local maxcountstrlen10=0\n    local maxcountstrlen11=0\n    local maxcountstrlen12=0\n\
    \    local maxcountstrlen13=0\n    local maxcountstrlen14=0\n    local maxcountstrlen15=0\n\
    \    local maxcountstrlen16=0\n    local maxcountstrlen17=0\n    local maxcountstrlen18=0\n\
    \    local maxcountstrlen19=0\n    local maxcountstrlen20=0\n    local maxcountstrlen21=0\n\
    \    local maxcountstrlen22=0\n    local maxcountstrlen23=0\n    local maxcountstrlen24=0\n\
    \    local maxcountstrlen25=0\n    local maxcountstrlen26=0\n    local maxcountstrlen27=0\n\
    \    local maxcountstrlen28=0\n    local maxcountstrlen29=0\n    local maxcountstrlen30=0\n\
    \    local maxcountstrlen31=0\n    local maxcountstrlen32=0\n    local maxcountstrlen33=0\n\
    \    local maxcountstrlen34=0\n    local maxcountstrlen35=0\n    local maxcountstrlen36=0\n\
    \    local maxcountstrlen37=0\n    local maxcountstrlen38=0\n    local maxcountstrlen39=0\n\
    \    local maxcountstrlen40=0\n    local maxcountstrlen41=0\n    local maxcountstrlen42=0\n\
    \    local maxcountstrlen43=0\n    local maxcountstrlen44=0\n    local maxcountstrlen45=0\n\
    \    local maxcountstrlen46=0\n    local maxcountstrlen47=0\n    local maxcountstrlen48=0\n\
    \    local maxcountstrlen49=0\n    local maxcountstrlen50=0\n    local maxcountstrlen51=0\n\
    \    local maxcountstrlen52=0\n    local maxcountstrlen53=0\n\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -n letters=$2\n\
    \    local -n counts=$3\n    local -n maxcount=$4\n    local -n maxletter=$5\n\
    \    local -n maxcountletter=$6\n    local -n maxlettercount=$7\n    local -n\
    \ maxlettercountletter=$8\n    local -n maxlettercountlettercount=$9\n    local\
    \ -n maxlettercountlettercountletter=$10\n    local -n maxlettercountlettercountlettercount=$11\n\
    \    local -n maxlettercountlettercountlettercountletter=$12\n    local -n maxlettercountlettercountlettercountlettercount=$13\n\
    \    local -n maxlettercountlettercountlettercountlettercountletter=$14\n    local\
    \ -n maxlettercountlettercountlettercountlettercountlettercount=$15\n    local\
    \ -n maxlettercountlettercountlettercountlettercountlettercountletter=$16\n  \
    \  local -n maxlettercountlettercountlettercountlettercountlettercountlettercount=$17\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountletter=$18\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$19\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=$20\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$21\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$22\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$23\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$24\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$25\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$26\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$27\n\
    \    local -n maxlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=$28\n\
    \    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6k6zccxr.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmp6k6zccxr.sh: line 15: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 16: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 17: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 18: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 19: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 20: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 21: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 22: local: `'': not a valid identifier

    /tmp/tmp6k6zccxr.sh: line 23: local: `a b b a0'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 24: local: `a b b a1'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 25: local: `a b b a2'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 26: local: `a b b a3'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 27: local: `a b b a4'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 28: local: `a b b a5'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 29: local: `a b b a6'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 30: local: `a b b a7'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 31: local: `a b b a8'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 32: local: `a b b a9'': invalid variable name for name
    reference

    /tmp/tmp6k6zccxr.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 34: local: `1'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 35: local: `2'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 36: local: `3'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 37: local: `4'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 38: local: `5'': invalid variable name for name reference

    /tmp/tmp6k6zccxr.sh: line 39: local: `6'': invalid'
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local letter\n\
    \    for letter in \"${letters[@]}\"; do\n        counts[$letter]=$((counts[$letter]+1))\n\
    \        if (( counts[$letter] > max )); then\n            max=$counts[$letter]\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in \"${!counts[@]}\"\
    ; do\n        if (( counts[$letter] == max )); then\n            counts[$letter]=$((maxcount+1))\n\
    \        fi\n    done\n    echo \"${maxletter} ${maxcount}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_o38pt7z.sh: line 21: a b b a: syntax error in expression (error
    token is "b b a")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letters=()\n    local maxcountletters_letters_count=()\n\
    \    local maxcountletters_letters_letters=()\n    local maxcountletters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_count=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_letters=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters_letters_count=()\n \
    \   local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_letters_count=()\n\
    \    local \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    for letter\
    \ in ${letters//' '/}; do\n        counts[$letter]=$((${counts[$letter]} + 1))\n\
    \        if [[ ${counts[$letter]} -gt $max ]]; then\n            max=${counts[$letter]}\n\
    \            maxletter=$letter\n        fi\n    done\n    for letter in ${counts[*]};\
    \ do\n        if [[ ${counts[$letter]} -eq $max ]]; then\n            counts[$letter]=$((${counts[$letter]}\
    \ + 1))\n        else\n            counts[$letter]=$((${counts[$letter]} + 1))\n\
    \        fi\n    done\n    for letter in ${counts[*]}; do\n        if [[ ${counts[$letter]}\
    \ -gt $max ]]; then\n            max=${counts[$letter]}\n            maxletter=$letter\n\
    \        fi\n    done\n    echo ${counts[*]}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local str=$1\n  local counts=()\n  local max=0\n\
    \  local maxstr=''\n  local maxcount=0\n  local maxcountstr=''\n  local maxcountstrlen=0\n\
    \  local maxcountstrlenstr=''\n  local maxcountstrlenstrlen=''\n  local maxcountstrlenstrlenlen=''\n\
    \  local maxcountstrlenstrlenlenlen=''\n  local maxcountstrlenstrlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen=''\n\
    \  local maxcountstrlenstrlenlenlenlen=''\n  local maxcountstrlenstrlenlenlenlen\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=$1\n    local count\n    local\
    \ letter\n    local counts\n    local max\n    local maxCount\n    local maxLetter\n\
    \    local maxLetterCount\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCountIndex\n    local maxLetterIndex\n\
    \    local maxLetterCountIndex\n    local maxLetterIndex\n    local maxLetterCountIndex\n\
    \    local maxLetterIndex\n    local maxLetterCount\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026136
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountlettercount=0\n  local maxcountlettercountletter=\"\"\n  local\
    \ maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n  local maxcountlettercountlettercountletter\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_sorted=()\n\
    \    local maxcountletters_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed=()\n    local maxcountletters_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed=()\n\
    \    local maxcountletters_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_reversed_sorted_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=\"\"\n    local maxcount=0\n    local maxcountletter=\"\
    \"\n    local maxcountlettercount=0\n    local maxcountlettercountletter=\"\"\n\
    \    local maxcountlettercountlettercount=0\n    local maxcountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercount=0\n    local maxcountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercount=0\n    local\
    \ maxcountlettercountlettercountlettercountlettercountletter=\"\"\n    local maxcountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=\"\
    \"\n    local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \    local max\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local letters=\"$1\"\n  local counts=()\n \
    \ local max=0\n  local maxletter=\"\"\n  local maxcount=0\n  local maxcountletter=\"\
    \"\n  local maxcountletters=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ maxcountletters_letter=()\n  local maxcountletters_count=()\n  local maxcountletters_letter=()\n\
    \  local maxcountletters_count=()\n  local maxcountletters_letter=()\n  local\
    \ maxcountletters_count=()\n  local maxcountletters_letter=()\n  local maxcountletters_count=()\n\
    \  local maxcountletters_letter=()\n  local maxcountletters_count=()\n  local\
    \ \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_sorted=()\n\
    \    local maxcountletters_sorted_reverse=()\n    local maxcountletters_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted=()\n    local maxcountletters_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count=()\n    local\
    \ maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted=()\n    local\
    \ maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted=()\n\
    \    local maxcountletters_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_sorted_reverse_count_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local str=\"$1\"\n  local counts=()\n  local\
    \ letters=()\n  local max=0\n  local maxletter=''\n  local maxcount=0\n  local\
    \ maxcountletter=''\n  local maxcountlettercount=0\n  local maxcountlettercountletter=''\n\
    \  local maxcountlettercountlettercount=0\n  local maxcountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercount=0\n  local maxcountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercount=0\n \
    \ local maxcountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercount=0\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    \  local maxcountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountlettercountletter=''\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_count_letters=()\n    local maxcountletters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters=()\n    local maxcountletters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count=()\n    local\
    \ maxcountletters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters=()\n\
    \    local maxcountletters_\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local counts=()\n \
    \   local max=0\n    local maxstr=''\n    local maxcount=0\n    local maxcountstr=''\n\
    \    local maxcountstrlen=0\n    local maxcountstrlenstr=''\n    local maxcountstrlenstrstr=''\n\
    \    local maxcountstrlenstrstr=''\n    local maxcountstrlenstrstrstr=''\n   \
    \ local maxcountstrlenstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n\
    \    local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n  \
    \  local maxcountstrlenstrstrstrstrstrstrstrstrstrstrstrstrstrstrstr=''\n    local\
    \ maxcountstrlenstrstrstrstrstrstrstrstr\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local letter\n\
    \    local count\n    for letter in \"${string//[[:space:]]/}\"; do\n        counts[$letter]=$((${counts[$letter]}\
    \ || 1))\n    done\n    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n\
    \        if [[ $count -gt $max ]]; then\n            max=${count}\n          \
    \  maxletter=$letter\n        fi\n    done\n    echo \"${maxletter}=${max}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsb4gb7nh.sh: line 22: || 1: syntax error: operand expected (error
    token is "|| 1")

    '
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local count\n  local\
    \ letter\n  local counts\n  local max\n  local maxLetter\n  local maxCount\n \
    \ local maxCountLetter\n  local maxCountLetters\n  local maxCountLettersCount\n\
    \  local maxCountLettersCountLetter\n  local maxCountLettersCountLetters\n  local\
    \ maxCountLettersCountLettersCount\n  local maxCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLetters\n  local maxCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLetter\n  local maxCountLettersCountLettersCountLettersCountLetters\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCount\n  local maxCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCount\n\
    \  local maxCountLettersCountLettersCountLettersCountLettersCountLettersCountLettersCountLetter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026136
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local max=0\n    local maxstring=\"\"\n    local maxcount=0\n    local maxcountstring=\"\
    \"\n    local maxcountstring2=\"\"\n    local maxcountstring3=\"\"\n    local\
    \ maxcountstring4=\"\"\n    local maxcountstring5=\"\"\n    local maxcountstring6=\"\
    \"\n    local maxcountstring7=\"\"\n    local maxcountstring8=\"\"\n    local\
    \ maxcountstring9=\"\"\n    local maxcountstring10=\"\"\n    local maxcountstring11=\"\
    \"\n    local maxcountstring12=\"\"\n    local maxcountstring13=\"\"\n    local\
    \ maxcountstring14=\"\"\n    local maxcountstring15=\"\"\n    local maxcountstring16=\"\
    \"\n    local maxcountstring17=\"\"\n    local maxcountstring18=\"\"\n    local\
    \ maxcountstring19=\"\"\n    local maxcountstring20=\"\"\n    local maxcountstring21=\"\
    \"\n    local maxcountstring22=\"\"\n    local maxcountstring23=\"\"\n    local\
    \ maxcountstring24=\"\"\n    local maxcountstring25=\"\"\n    local maxcountstring26=\"\
    \"\n    local maxcountstring27=\"\"\n    local maxcountstring28=\"\"\n    local\
    \ maxcountstring29=\"\"\n    local maxcountstring30=\"\"\n    local maxcountstring31=\"\
    \"\n    local maxcountstring32=\"\"\n    local maxcountstring33=\"\"\n    local\
    \ maxcountstring34=\"\"\n    local maxcountstring35=\"\"\n    local maxcountstring36=\"\
    \"\n    local maxcountstring37=\"\"\n    local maxcountstring38=\"\"\n    local\
    \ maxcountstring39=\"\"\n    local maxcountstring40=\"\"\n    local maxcountstring41=\"\
    \"\n    local maxcountstring42=\"\"\n    local maxcountstring43=\"\"\n    local\
    \ maxcountstring44=\"\"\n    local maxcountstring45=\"\"\n    local maxcountstring46=\"\
    \"\n    local maxcountstring47=\"\"\n    local maxcountstring48=\"\"\n    local\
    \ maxcountstring49=\"\"\n    local maxcountstring50=\"\"\n    local maxcountstring51=\"\
    \"\n    local maxcountstring52=\"\"\n    local maxcountstring53=\"\"\n    local\
    \ maxcountstring54=\"\"\n    local maxcountstring55=\"\"\n    local maxcountstring56=\"\
    \"\n    local maxcountstring57=\"\"\n    local maxcountstring58=\"\"\n    local\
    \ maxcountstring59=\"\"\n    local maxcountstring60=\"\"\n    local maxcount\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=$1\n    local counts=()\n  \
    \  local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_count=()\n    local maxcountletters_letter=()\n\
    \    local maxcountletters_count=()\n    local maxcountletters_letter=()\n   \
    \ local maxcountletters_count=()\n    local maxcountletters_letter=()\n    local\
    \ maxcountletters_count=()\n    local maxcountletters_letter=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_count=()\n   \
    \ local maxcountletters_letter=()\n    local maxcountletters_count=()\n    local\
    \ maxcountletters_letter=()\n    local maxcountletters_\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026136
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -a histo\n\
    \    local -a histo2\n    local -i max\n    local -i i\n    local letter\n   \
    \ local count\n    local -a histo3\n    local -a histo4\n    local -a histo5\n\
    \    local -a histo6\n    local -a histo7\n    local -a histo8\n    local -a histo9\n\
    \    local -a histo10\n    local -a histo11\n    local -a histo12\n    local -a\
    \ histo13\n    local -a histo14\n    local -a histo15\n    local -a histo16\n\
    \    local -a histo17\n    local -a histo18\n    local -a histo19\n    local -a\
    \ histo20\n    local -a histo21\n    local -a histo22\n    local -a histo23\n\
    \    local -a histo24\n    local -a histo25\n    local -a histo26\n    local -a\
    \ histo27\n    local -a histo28\n    local -a histo29\n    local -a histo30\n\
    \    local -a histo31\n    local -a histo32\n    local -a histo33\n    local -a\
    \ histo34\n    local -a histo35\n    local -a histo36\n    local -a histo37\n\
    \    local -a histo38\n    local -a histo39\n    local -a histo40\n    local -a\
    \ histo41\n    local -a histo42\n    local -a histo43\n    local -a histo44\n\
    \    local -a histo45\n    local -a histo46\n    local -a histo47\n    local -a\
    \ histo48\n    local -a histo49\n    local -a histo50\n    local -a histo51\n\
    \    local -a histo52\n    local -a histo53\n    local -a histo54\n    local -a\
    \ histo55\n    local -a histo56\n    local -a histo57\n    local -a histo58\n\
    \    local -a histo59\n    local -a histo60\n    local -a histo61\n    local -a\
    \ histo62\n    local -a histo63\n    local -a histo64\n    local -a histo65\n\
    \    local -a histo66\n    local -a histo67\n    local -a histo68\n    local -a\
    \ histo69\n    local -a \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwpq58goz.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660026136
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -A counts\n\
    \    local letter\n    local count\n    local -a letters=()\n    local -a counts=()\n\
    \n    # Split string into array of single letters\n    for letter in $histogram;\
    \ do\n        letters+=(\"$letter\")\n    done\n\n    # Count occurrences of each\
    \ letter\n    for letter in \"${letters[@]}\"; do\n        counts[$letter]=0\n\
    \    done\n\n    # Count occurrences of each letter\n    for letter in \"${letters[@]}\"\
    ; do\n        counts[$letter]=$(( counts[$letter] + 1 ))\n    done\n\n    # Return\
    \ dictionary with the letter with the most occurrence\n    for letter in \"${!counts[@]}\"\
    ; do\n        count=${counts[$letter]}\n        if [ \"$count\" -gt \"${#counts[@]}\"\
    \ ]; then\n            count=\"${#counts[@]}\"\n        fi\n        counts[$letter]=$count\n\
    \    done\n\n    # Return dictionary with the letter with the most occurrence\n\
    \    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n \
    \       if [ \"$count\" -gt \"${#counts[@]}\" ]; then\n            count=\"${#counts[@]}\"\
    \n        fi\n        counts[$letter]=$count\n    done\n\n    # Return dictionary\
    \ with the letter with the most occurrence\n    for letter in \"${!counts[@]}\"\
    ; do\n        count=${counts[$letter]}\n        if [ \"$count\" -gt \"${#counts[@]}\"\
    \ ]; then\n            count=\"${#counts[@]}\"\n        fi\n        counts[$letter]=$count\n\
    \    done\n\n    # Return dictionary with the letter with the most occurrence\n\
    \    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n \
    \       if [ \"$count\" -gt \"${#counts[@]}\" ]; then\n            count=\"${#counts[@]}\"\
    \n        fi\n        counts[$letter]=$count\n    done\n\n    # Return dictionary\
    \ with the letter with the most occurrence\n    for letter in \"${!counts[@]}\"\
    ; do\n        count=${counts[$letter]}\n        if [ \"$count\" -gt \"${#counts[@]}\"\
    \ ]; then\n            count=\"${#counts[@]}\"\n        fi\n        counts[$letter]=$count\n\
    \    done\n\n    # Return dictionary with the letter with the most occurrence\n\
    \    for letter in \"${!counts[@]}\"; do\n        count=${counts[$letter]}\n\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp86k4uqzp.sh: line 85: syntax error near unexpected token `}''

    /tmp/tmp86k4uqzp.sh: line 85: `}''

    '
  stdout: ''
  timestamp: 1660026136
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local letters=\"${1}\"\n    local counts=()\n\
    \    local max=0\n    local maxletter=''\n    local maxcount=0\n    local maxcountletter=''\n\
    \    local maxcountlettercount=0\n    local letter\n    local count\n    for letter\
    \ in \"${letters}\"; do\n        counts[$letter]=0\n    done\n    for letter in\
    \ \"${!counts[@]}\"; do\n        count=\"${counts[$letter]}\"\n        if [ \"\
    $count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n            maxcountletter=$letter\n\
    \        fi\n        ((counts[$letter]+=1))\n    done\n    for letter in \"${!counts[@]}\"\
    ; do\n        count=\"${counts[$letter]}\"\n        if [ \"$count\" -gt \"$maxcount\"\
    \ ]; then\n            maxcount=$count\n            maxcountletter=$letter\n \
    \       fi\n    done\n    for letter in \"${!counts[@]}\"; do\n        count=\"\
    ${counts[$letter]}\"\n        if [ \"$count\" -gt \"$maxcount\" ]; then\n    \
    \        maxcount=$count\n            maxcountletter=$letter\n        fi\n   \
    \ done\n    for letter in \"${!counts[@]}\"; do\n        count=\"${counts[$letter]}\"\
    \n        if [ \"$count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n\
    \            maxcountletter=$letter\n        fi\n    done\n    for letter in \"\
    ${!counts[@]}\"; do\n        count=\"${counts[$letter]}\"\n        if [ \"$count\"\
    \ -gt \"$maxcount\" ]; then\n            maxcount=$count\n            maxcountletter=$letter\n\
    \        fi\n    done\n    for letter in \"${!counts[@]}\"; do\n        count=\"\
    ${counts[$letter]}\"\n        if [ \"$count\" -gt \"$maxcount\" ]; then\n    \
    \        maxcount=$count\n            maxcountletter=$letter\n        fi\n   \
    \ done\n    for letter in \"${!counts[@]}\"; do\n        count=\"${counts[$letter]}\"\
    \n        if [ \"$count\" -gt \"$maxcount\" ]; then\n            maxcount=$count\n\
    \            maxcountletter=$letter\n        fi\n    done\n    for letter in \"\
    ${!counts[@]}\"; do\n        count=\"${counts[$letter]}\"\n        if [ \"$count\"\
    \ -gt \"$maxcount\" ]; then\n            maxcount=$count\n            maxcountletter=$letter\n\
    \        fi\n    done\n    for letter in \"${!counts[@]}\"; do\n        count=\"\
    ${counts[$letter]}\"\n        if [ \"$count\" -gt \"$\n}\n\ncandidate() {\n  \
    \  histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfmbsl6dg.sh: line 101: unexpected EOF while looking for matching
    `"''

    /tmp/tmpfmbsl6dg.sh: line 105: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660026136
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local string=\"$1\"\n    local counts=()\n\
    \    local letters=()\n    local max=0\n    local maxletter=''\n    local maxcount=0\n\
    \    local maxcountletter=''\n    local maxcountletters=()\n    local maxcountletters_count=()\n\
    \    local maxcountletters_letter=()\n    local maxcountletters_letters=()\n \
    \   local maxcountletters_letters_count=()\n    local maxcountletters_letters_letter=()\n\
    \    local maxcountletters_letters_letters=()\n    local maxcountletters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letter=()\n    local maxcountletters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_count=0\n    local maxcountletters_letters_letters_letters_letter=()\n\
    \    local maxcountletters_letters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letters_letters_letter=()\n    local\
    \ maxcountletters_letters_letters_letters_letters_letters=()\n    local maxcountletters_letters_letters_letters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letter=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_count=0\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_letters_letters_letter=()\n\
    \    local maxcountletters_letters_letters_letters_letters_letters_letters_\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026135
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local -n histogram=$1\n    local -n letters=$2\n\
    \    local -n counts=$3\n    local -n max=$4\n    local -n maxCount=0\n    local\
    \ -n maxLetters=\"\"\n    local -n maxCountLetters=\"\"\n    local -n maxCountLettersCount=0\n\
    \    local -n maxCountLettersCountMax=0\n    local -n maxCountLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCount=0\n    local -n maxCountLettersCountMaxLettersCountMax=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLetters=\"\"\n    local -n\
    \ maxCountLettersCountMaxLettersCountMaxLettersCount=0\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMax=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\"\
    \n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCount=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMax=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMax=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMax=0\n\
    \    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetters=\"\
    \"\n    local -n maxCountLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLettersCountMaxLetter\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpljsjc279.sh: line 14: local: `a b b a'': invalid variable name
    for name reference

    /tmp/tmpljsjc279.sh: line 15: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 17: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 20: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 23: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 26: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 29: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 32: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 34: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpljsjc279.sh: line 36: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 37: local: `'': not a valid identifier

    /tmp/tmpljsjc279.sh: line 38: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660026136
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\
    # histogram('a b b a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a':\
    \ 2, 'b': 2}\n# histogram('b b b b a') == {'b': 4}\n# histogram('') == {}\n#\n\
    # $1 is a string\nhistogram() {\n    local str=\"$1\"\n    local count\n    local\
    \ max\n    local letter\n    local counts\n\n    counts=()\n    max=0\n    for\
    \ letter in $str; do\n        counts[$letter]=$((counts[$letter]+1))\n       \
    \ if ((counts[$letter]>max)); then\n            max=counts[$letter]\n        fi\n\
    \    done\n\n    for letter in $str; do\n        if ((counts[$letter]==max));\
    \ then\n            counts[$letter]=1\n        else\n            counts[$letter]=$((counts[$letter])+1)\n\
    \        fi\n    done\n\n    echo ${counts[*]}\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660026136
