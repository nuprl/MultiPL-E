name: HumanEval_44_change_base
language: humaneval_to_bash.py
prompt: "#!/bin/bash\n# Change numerical base of input number x to base.\n# return\
  \ string representation after the conversion.\n# base numbers are less than 10.\n\
  # >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7,\
  \ 2)\n# '111'\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n"
tests: "}\n\ncandidate() {\n    change_base \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"8\" \"3\") = \"22\" ]]\n    [[ $(candidate \"9\" \"3\") = \"\
  100\" ]]\n    [[ $(candidate \"234\" \"2\") = \"11101010\" ]]\n    [[ $(candidate\
  \ \"16\" \"2\") = \"10000\" ]]\n    [[ $(candidate \"8\" \"2\") = \"1000\" ]]\n\
  \    [[ $(candidate \"7\" \"2\") = \"111\" ]]\n    [[ $(candidate \"2\" \"3\") =\
  \ \"2\" ]]\n    [[ $(candidate \"3\" \"4\") = \"3\" ]]\n    [[ $(candidate \"4\"\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"5\" \"6\") = \"5\" ]]\n    [[ $(candidate\
  \ \"6\" \"7\") = \"6\" ]]\n    [[ $(candidate \"7\" \"8\") = \"7\" ]]\n}\n\nrun_test"
completions: ["    local x base\n    x=$1\n    base=$2\n    if [ $base -eq 0 ]; then\n\
    \        echo \"$x\"\n    elif [ $base -eq 1 ]; then\n        echo \"$((10#$x))\"\
    \n    elif [ $base -le 10 ]; then\n        echo \"$((10#$x))\"\n    else\n   \
    \     echo \"$((10#$x))\"\n    fi", "    local x base\n    x=$1\n    base=$2\n\
    \    if [ $x -lt 10 ]; then\n        echo \"$x\"\n    elif [ $base -lt 10 ]; then\n\
    \        echo \"$((10#$x))\"\n    else\n        echo \"$((10#$x%$base))\"\n  \
    \  fi", "  local x y base\n  x=$1\n  y=$2\n  base=$3\n  local res\n  res=$(echo\
    \ \"$x\" | bc)\n  res=$(echo \"$res\" | sed \"s/$base$/\\$base$y/\")\n  res=$(echo\
    \ \"$res\" | bc)\n  echo \"$res\"", "  local x y base\n  x=$1\n  y=$2\n  base=$3\n\
    \  if [ $x -lt 10 ]; then\n    x=$((10#$x))\n  fi\n  if [ $y -lt 10 ]; then\n\
    \    y=$((10#$y))\n  fi\n  x=$((10#$x))\n  y=$((10#$y))\n  while [ $x -le $y ];\
    \ do\n    echo $((10#$((10#$x)+$base))))\n    x=$((10#$((10#$x)+$base))))\n  done",
  "  local x base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$((\
    \ result * base ))\n  result=$(( result + x ))\n  echo $result", "    local x\
    \ base result\n    x=$1\n    base=$2\n    result=$(echo \"$x\" | bc)\n    while\
    \ [ $base -gt 0 ]; do\n        (( result = result * base ))\n        base=$((\
    \ base / 10 ))\n    done\n    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "    local x y base\n    x=$1\n    y=$2\n  \
    \  if [ $x -lt 10 ]; then\n        echo \"$x is less than 10\"\n    elif [ $y\
    \ -lt 10 ]; then\n        echo \"$y is less than 10\"\n    elif [ $x -gt 10 ];\
    \ then\n        echo \"$x is greater than 10\"\n    elif [ $y -gt 10 ]; then\n\
    \        echo \"$y is greater than 10\"\n    else\n        base=$(( $x / $y ))\n\
    \        echo \"$base is greater than 10\"\n    fi", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( x / base ))\n    if [ $x -eq 0 ]; then\n\
    \        result=0\n    fi\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result % 10 ))\n    echo \"$result\"", "  local x base\
    \ result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo \"$result\"", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "    local i j\n    local base=$1\n\
    \    local number=$2\n    local result\n    local digit\n    local tmp\n    local\
    \ digit2\n    local digit3\n    local digit4\n    local digit5\n    local digit6\n\
    \    local digit7\n    local digit8\n    local digit9\n    local digit10\n   \
    \ local digit11\n    local digit12\n    local digit13\n    local digit14\n   \
    \ local digit15\n    local digit16\n    local digit17\n    local digit18\n   \
    \ local digit19\n    local digit20\n    local digit21\n    local digit22\n   \
    \ local digit23\n    local digit24\n    local digit25\n    local digit26\n   \
    \ local digit27\n    local digit28\n    local digit29\n    local digit30\n   \
    \ local digit31\n    local digit32\n    local digit33\n    local digit34\n   \
    \ local digit35\n    local digit36\n    local digit37\n    local digit38\n   \
    \ local digit39\n    local digit40\n    local digit41\n    local digit42\n   \
    \ local digit43\n    local digit44\n    local digit45\n    local digit46\n   \
    \ local digit47\n    local digit48\n    local digit49\n    local digit50\n   \
    \ local digit51\n    local digit52\n    local digit53\n    local digit54\n   \
    \ local digit55\n    local digit56\n    local digit57\n    local digit58\n   \
    \ local digit59\n    local digit60\n    local digit61\n    local digit62\n   \
    \ local digit63\n    local digit64\n    local digit65\n    local digit66\n   \
    \ local digit67\n    local digit68\n    local digit69\n    local digit70\n   \
    \ local digit71\n    local digit72\n    local digit73\n    local digit74\n   \
    \ local digit75\n    local digit76\n    local digit77\n    local digit78\n   \
    \ local digit79\n    local digit80\n    local digit81\n    local digit82\n   \
    \ local digit83\n    local digit84\n    local digit85\n    local digit86\n   \
    \ local digit87\n    local digit88\n    local digit89\n    local digit90\n   \
    \ local digit91\n    local digit92\n    local digit93\n    local digit94\n   \
    \ local digit95\n    local digit96\n    local digit97\n    local digit", "  local\
    \ x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt 0 ];\
    \ do\n    result=$((result*base+x))\n    x=$((x-1))\n  done\n  echo $result",
  "    local x y base\n    x=$1\n    y=$2\n    base=$(( $x / $y ))\n    echo $(( $x\
    \ * $base ))", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x\
    \ / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc)\n  echo \"$result\" | bc -l | awk '{printf \"%d%0*d\", $2, length($1),\
    \ $1}'", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo\
    \ \"$x\" | bc | sed -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n \
    \   if [ \"$base\" -lt 10 ]; then\n        echo \"Base $base is too small\"\n\
    \        return 1\n    fi\n    if [ \"$base\" -gt 10 ]; then\n        echo \"\
    Base $base is too large\"\n        return 1\n    fi\n    local result\n    result=$((\
    \ x / $base ))\n    if [ \"$result\" -eq 0 ]; then\n        echo \"Base $base\
    \ is 0\"\n        return 0\n    fi\n    echo \"$result\"", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( x / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( ", "    local x base\n    x=$1\n    base=$2\n\
    \    local ret\n    if [ $base -eq 10 ]; then\n        if [ $x -eq 0 ]; then\n\
    \            ret='0'\n        else\n            ret=$((10#$x))\n        fi\n \
    \   else\n        if [ $x -eq 0 ]; then\n            ret=$((10#$x))\n        else\n\
    \            ret=$((10#$x)*$base)\n        fi\n    fi\n    echo \"$ret\"", " \
    \ local x base\n  x=$1\n  base=$2\n  (( x = x / base ))\n  (( x = x * base ))\n\
    \  echo $x", "    local x base result\n    x=$1\n    base=$2\n    result=$(( x\
    \ / base ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n \
    \   result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$(( ",
  "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n      \
    \  echo \"Base $base is too small\"\n        return 1\n    fi\n    local result\n\
    \    result=$(( x / base ))\n    if [ $result -eq 0 ]; then\n        echo \"Base\
    \ $base is too small\"\n        return 1\n    fi\n    local remainder\n    remainder=$((\
    \ x % base ))\n    if [ $remainder -eq 0 ]; then\n        echo \"Base $base is\
    \ too small\"\n        return 1\n    fi\n    local result\n    result=$(( result\
    \ * base ))\n    if [ $result -eq 0 ]; then\n        echo \"Base $base is too\
    \ small\"\n        return 1\n    fi\n    echo $(( result + 1 ))", "    local x\
    \ base\n    x=\"$1\"\n    base=\"$2\"\n    if [[ $base -lt 10 ]]; then\n     \
    \   echo \"$base: base must be less than 10\"\n        return 1\n    fi\n    if\
    \ [[ $x -lt 0 ]]; then\n        echo \"$x: input must be greater than 0\"\n  \
    \      return 1\n    fi\n    local result\n    result=0\n    while [[ $x -gt 0\
    \ ]]; do\n        result=$((result*base+x))\n        x=$((x-1))\n    done\n  \
    \  echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(echo\
    \ \"$x\" | bc)\n  echo \"$ret\" | bc | awk -v b=$base 'BEGIN{printf \"%0*d\",\
    \ b, $0}'", "    local i base\n    local str\n    local res\n    local digit\n\
    \    local digit2\n    local digit3\n    local digit4\n    local digit5\n    local\
    \ digit6\n    local digit7\n    local digit8\n    local digit9\n    local digit10\n\
    \    local digit11\n    local digit12\n    local digit13\n    local digit14\n\
    \    local digit15\n    local digit16\n    local digit17\n    local digit18\n\
    \    local digit19\n    local digit20\n    local digit21\n    local digit22\n\
    \    local digit23\n    local digit24\n    local digit25\n    local digit26\n\
    \    local digit27\n    local digit28\n    local digit29\n    local digit30\n\
    \    local digit31\n    local digit32\n    local digit33\n    local digit34\n\
    \    local digit35\n    local digit36\n    local digit37\n    local digit38\n\
    \    local digit39\n    local digit40\n    local digit41\n    local digit42\n\
    \    local digit43\n    local digit44\n    local digit45\n    local digit46\n\
    \    local digit47\n    local digit48\n    local digit49\n    local digit50\n\
    \    local digit51\n    local digit52\n    local digit53\n    local digit54\n\
    \    local digit55\n    local digit56\n    local digit57\n    local digit58\n\
    \    local digit59\n    local digit60\n    local digit61\n    local digit62\n\
    \    local digit63\n    local digit64\n    local digit65\n    local digit66\n\
    \    local digit67\n    local digit68\n    local digit69\n    local digit70\n\
    \    local digit71\n    local digit72\n    local digit73\n    local digit74\n\
    \    local digit75\n    local digit76\n    local digit77\n    local digit78\n\
    \    local digit79\n    local digit80\n    local digit81\n    local digit82\n\
    \    local digit83\n    local digit84\n    local digit85\n    local digit86\n\
    \    local digit87\n    local digit88\n    local digit89\n    local digit90\n\
    \    local digit91\n    local digit92\n    local digit93\n    local digit94\n\
    \    local digit95\n    local digit96\n    local digit97\n    local digit98\n\
    \    local digit99\n    local digit100\n", "  local x base result\n  x=$1\n  base=$2\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\"\
    \ -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n\
    \    fi\n    local result\n    result=$(echo \"$x\" | bc)\n    if [ \"$result\"\
    \ -eq 0 ]; then\n        echo \"Base must be greater than 0\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l)\n    if [ \"\
    $result\" -eq 0 ]; then\n        echo \"Base must be less than or equal to 10\"\
    \n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l\
    \ | sed 's/^0*//')\n    if [ \"$result\" -eq 0 ]; then\n        echo \"Base must\
    \ be less than or equal to 10\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc -l | sed 's/^0*//')\n    if [ \"$result\" -eq 0\
    \ ]; then\n        echo \"Base must be less than or equal to 10\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | sed 's/^0*//')\n\
    \    if [ \"$result\" -eq 0 ]; then\n        echo \"Base must be less than or\
    \ equal to 10\"\n        return 1\n    fi\n    local result\n    result=$(echo\
    \ \"$x\" | bc -l | sed 's/^0*//')\n    if [ \"$result\" -eq 0 ]; then\n      \
    \  echo \"Base must be less than or equal to 10\"\n        return 1\n    fi\n\
    \    local result\n    result=$(echo \"$x\" | bc -l | sed 's/^0*//')\n    if [\
    \ \"$result\" -eq 0 ]; then\n        echo \"Base must be less than or equal to\
    \ 10\"\n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" |\
    \ bc -l | sed 's/^0*//')\n    if [ \"$result\" -eq 0 ]; then\n        echo \"\
    Base must be less than or equal to 10\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc -l | sed 's/^0*//')\n    if [ \"$result\" -eq 0\
    \ ]; then\n        echo \"Base must be less than or equal to 10\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | sed 's/^0*//')\n\
    \    if [ \"$result\" -eq 0 ]; then\n        echo \"Base must be less than or\
    \ equal to 10\"\n        return 1\n    fi\n    local result\n    result=$(echo\
    \ \"$x\" | bc -l | sed 's/^0*", "    local x base\n    x=$1\n    base=$2\n   \
    \ local result\n    result=$(( x / base ))\n    result=$(( result * base ))\n\
    \    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result", "    local x base result\n    x=$1\n    base=$2\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n \
    \   result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( ", "  local x base\n  x=$1\n  base=$2\n  local ret\n  ret=$((\
    \ x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x ))\n  echo \"$ret\"",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n \
    \ result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result", " \
    \   local x base\n    x=$1\n    base=$2\n    local ret\n    if [ $base -lt 10\
    \ ]; then\n        echo \"Base $base is too small\"\n        return 1\n    fi\n\
    \    if [ $base -gt 10 ]; then\n        echo \"Base $base is too large\"\n   \
    \     return 1\n    fi\n    local i\n    for ((i=1; i<$(( $x / $base )); i++));\
    \ do\n        (( x /= $base ))\n    done\n    local j\n    for ((j=$(( $x / 10\
    \ )); j>0; j--)); do\n        (( x %= 10 ))\n    done\n    ret=$(( $x * $base\
    \ ))\n    echo $ret", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  local digit\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n\
    \  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n\
    \  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n\
    \  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n\
    \  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n\
    \  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n\
    \  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n\
    \  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n\
    \  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n", "    local x base\n    x=\"$1\"\
    \n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base $base\
    \ is too small\"\n        return 1\n    fi\n    if [ \"$base\" -gt 10 ]; then\n\
    \        echo \"Base $base is too large\"\n        return 1\n    fi\n    local\
    \ result\n    result=$(echo \"$x\" | bc)\n    if [ \"$result\" -eq \"$x\" ]; then\n\
    \        echo \"Base $base is correct\"\n    else\n        echo \"Base $base is\
    \ incorrect\"\n        return 1\n    fi", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=$(( x / base ))\n    result=$(( result * base ))\n\
    \    result=$(( result + x ))\n    echo \"$result\"", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( x / base ))\n    if [ $x -lt 10 ]; then\n\
    \        echo \"$result\"\n    else\n        echo \"$(( 10#$result ))\"\n    fi",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt\
    \ 0 ]; do\n    result=$(( $result * $base ))\n    x=$(( $x / $base ))\n  done\n\
    \  echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"\
    $base\" -lt 10 ]; then\n        echo \"Base $base is less than 10.\"\n       \
    \ return 1\n    fi\n    if [ \"$base\" -gt 2 ]; then\n        echo \"Base $base\
    \ is greater than 2.\"\n        return 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n\
    \        echo \"$x is less than 0.\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -gt $(( 10#$base )) ]; then\n        echo \"$x is greater than $base.\"\n  \
    \      return 1\n    fi\n    local ret=\"$x\"\n    while [ \"$ret\" -ge $(( 10#$base\
    \ )) ]; do\n        local rem=$(( $ret % $base ))\n        ret=$(( $ret + $base\
    \ ))\n        local tmp=\"$rem\"\n        if [ \"$tmp\" -eq 0 ]; then\n      \
    \      echo \"$ret is $tmp\"\n        else\n            echo \"$ret is $tmp\"\n\
    \        fi\n    done", "  local x base\n  x=$1\n  base=$2\n  local result\n \
    \ result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result +\
    \ x ))\n  echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local ret\n\
    \  ret=$(( x / base ))\n  x=$(( x % base ))\n  ret=$(( ret * base ))\n  ret=$((\
    \ ret + x ))\n  echo $ret", "    local x base result\n    x=$1\n    base=$2\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n \
    \   result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( ", "    local x base\n    x=$1\n    base=$2\n    if [ $base\
    \ -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return 1\n\
    \    fi\n    local result\n    result=$(( x / base ))\n    local remainder\n \
    \   remainder=$(( x % base ))\n    if [ $remainder -eq 0 ]; then\n        echo\
    \ \"$result\"\n    else\n        echo \"$result$(( base - 1 ))\"\n    fi", " \
    \   local x base\n    x=$1\n    base=$2\n    local ret\n    ret=`echo $x | bc\
    \ -l | awk '{print $1*$base}'`\n    echo \"$ret\"", "    local x base\n    x=$1\n\
    \    base=$2\n    local result\n    result=$(( x / base ))\n    local remainder\n\
    \    remainder=$(( x % base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + remainder ))\n    result=$(( result + 10 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n\
    \    result=$(( result + 1 ))\n    result=$(( result + 1 ))\n    result=$(( result\
    \ + 1 ))\n    result=$", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x y base\n  x=$1\n  y=$2\n  base=$3\n  ((\
    \ x /= base ))\n  (( x %= base ))\n  (( y /= base ))\n  (( y %= base ))\n  echo\
    \ $(( x * base + y ))", "  local x y base\n  x=$1\n  y=$2\n  base=$3\n  (( x =\
    \ x / base ))\n  (( y = y / base ))\n  (( x = x * base ))\n  (( y = y * base ))\n\
    \  echo $x\n  echo $y", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    echo $result", "    local x base result\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ $base -lt 10 ]; then\n        result=\"$(( x / $base ))\"\n   \
    \ else\n        result=\"$(( x / $base ))\"\n        result=\"$(( result * $base\
    \ ))\"\n    fi\n    echo \"$result\"", "  local x base result\n  x=$1\n  base=$2\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo \"$result\"", "    local x base result\n    x=$1\n    base=$2\n\
    \    result=$(( x / base ))\n    if [ $x -lt 10 ]; then\n        result=$(( result\
    \ * base ))\n    fi\n    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n\
    \  local result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"\
    $2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base must be less than\
    \ 10\"\n        return 1\n    fi\n    local result\n    result=$(echo \"$x\" |\
    \ bc)\n    echo \"$result\"", "    local i base\n    local str\n    local result\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d", "    local\
    \ x base result\n    x=$1\n    base=$2\n    result=$(( x / base ))\n    if [ $x\
    \ -gt $base ]; then\n        result=$(( $result * base ))\n    fi\n    echo \"\
    $result\"", "  local x base\n  x=$1\n  base=$2\n  local tmp\n  tmp=$(( x / base\
    \ ))\n  x=$(( x % base ))\n  echo $tmp", "    local x base result\n    x=$1\n\
    \    base=$2\n    result=$(( x / base ))\n    result=$(( result * base ))\n  \
    \  result=$(( result + x ))\n    result=$(( result / base ))\n    result=$(( result\
    \ * base ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n \
    \   result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( ", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "    local i j\n    local base=$1\n    local\
    \ number=$2\n    local result\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit\n    local digits\n    local\
    \ digit\n    local digits\n    local digit\n    local digits\n    local digit\n\
    \    local digits\n    local digit\n    local digits\n    local digit\n    local\
    \ digits\n    local digit\n    local digits\n    local digit\n    local digits\n\
    \    local digit\n    local digits\n    local digit", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base\
    \ $base is too small.\"\n        return 1\n    fi\n    if [ \"$base\" -gt 10 ];\
    \ then\n        echo \"Base $base is too large.\"\n        return 1\n    fi\n\
    \    local ret\n    ret=$(echo \"$x\" | bc)\n    echo \"$ret\"", "  local x base\n\
    \  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result\
    \ * base ))\n  result=$(( result + x ))\n  echo $result", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "    local x base result\n\
    \    x=$1\n    base=$2\n    result=$(( x / base ))\n    if [ $x -eq 0 ]; then\n\
    \        result=0\n    fi\n    echo $result", "    local x base result\n    x=$1\n\
    \    base=$2\n    result=$(( x / base ))\n    [ $x -lt $base ] && result=$(( result\
    \ * base ))\n    echo $result", "    local x y base\n    x=$1\n    y=$2\n    base=$((\
    \ $x / $y ))\n    echo $(( $x * $base ))", "    local x base result\n    x=$1\n\
    \    base=$2\n    result=$(( x / base ))\n    echo $result", "  local x base\n\
    \  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result\
    \ * base ))\n  result=$(( result + x ))\n  echo $result", "  local x base result\n\
    \  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n\
    \  result=$(( result + x ))\n  echo $result", "    local x base\n    x=\"$1\"\n\
    \    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base $base\
    \ is too small\"\n        return 1\n    fi\n    if [ \"$base\" -gt 10 ]; then\n\
    \        echo \"Base $base is too large\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -lt 0 ]; then\n        echo \"$x is too small\"\n        return 1\n \
    \   fi\n    if [ \"$x\" -gt 0 ]; then\n        echo \"$x is too large\"\n    \
    \    return 1\n    fi\n    local result\n    result=\"$(( x / $base ))\"\n   \
    \ local remainder\n    remainder=\"$(( x % $base ))\"\n    if [ \"$remainder\"\
    \ -eq 0 ]; then\n        echo \"$result\"\n    else\n        echo \"$result$((\
    \ base - 1 ))\"\n    fi", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "  local x base\n  x=$1\n  base=$2\n  local digit\n  local result\n\
    \  result=\"\"\n  while [ $x -gt 0 ]; do\n    digit=$(( $x / $base ))\n    result=$(($digit*$base+$result))\n\
    \    x=$(($x - $digit*$base))\n  done\n  echo $result", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo \"$result\"", "    local x base\n   \
    \ x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"\
    $base: base must be less than 10\"\n        return 1\n    fi\n    if [ \"$base\"\
    \ -gt 36 ]; then\n        echo \"$base: base must be less than 36\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc -l | awk '{print\
    \ $1 \"^\" $2}')\n    if [ \"$result\" != \"$x\" ]; then\n        echo \"$result\"\
    \n        return 1\n    fi", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n\
    \  result=$(echo \"$x\" | bc)\n  echo \"$result\" | bc -l | awk '{printf \"%0${base}d\\\
    n\", $0}'", "    local x base\n    x=$1\n    base=$2\n    local result\n    result=$((\
    \ x / base ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" |\
    \ bc)\n  echo \"$result\" | sed \"s/$base//\"", "    local x base result\n   \
    \ x=$1\n    base=$2\n    result=$(( x / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    echo\
    \ \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n \
    \   result=$(( x / base ))\n    local remainder\n    remainder=$(( x % base ))\n\
    \    if [ $remainder -gt 0 ]; then\n        result=$(( result + 1 ))\n    fi\n\
    \    echo $result", "    local x base result\n    x=$1\n    base=$2\n    result=$((\
    \ x / base ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$(( ",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt\
    \ 0 ]; do\n    result=$((result*base+x))\n    x=$((x-1))\n  done\n  echo $result",
  "    local x base\n    x=$1\n    base=$2\n    local ret\n    ret=$(( x / base ))\n\
    \    ret=$(( ret * base ))\n    ret=$(( ret + x % base ))\n    echo \"$ret\"",
  "    local x base result\n    x=$1\n    base=$2\n    result=$(( x / base ))\n  \
    \  result=$(( result * base ))\n    result=$(( result + x ))\n    result=$(( result\
    \ / base ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n \
    \   result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( ", "  local x\
    \ base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$(( result\
    \ * base ))\n  result=$(( result + x ))\n  echo $result", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x % base ))\n  echo $result", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "  local x base result\n  x=$1\n\
    \  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base result\n    x=\"$1\"\n\
    \    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"Base must\
    \ be less than 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 2 ]; then\n\
    \        echo \"Base must be less than 2\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -eq 0 ]; then\n        echo \"Cannot convert from base 0 to base $base\"\
    \n        return 1\n    fi\n    if [ \"$x\" -lt 0 ]; then\n        echo \"Cannot\
    \ convert negative numbers to base $base\"\n        return 1\n    fi\n    if [\
    \ \"$x\" -gt $((10#$base)) ]; then\n        echo \"Cannot convert base $base to\
    \ base $base\"\n        return 1\n    fi\n    result=$((10#$x))\n    while [ \"\
    $result\" -ge $base ]; do\n        result=$((result/10))\n    done\n    result=$((result*$base))\n\
    \    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local result\n \
    \ result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result +\
    \ x % base ))\n  echo $result", "    local x base\n    x=$1\n    base=$2\n   \
    \ if [ $base -lt 10 ]; then\n        echo \"Base $base is too small\"\n      \
    \  return 1\n    fi\n    if [ $base -gt 10 ]; then\n        echo \"Base $base\
    \ is too large\"\n        return 1\n    fi\n    if [ $x -lt 0 ]; then\n      \
    \  echo \"$x is negative\"\n        return 1\n    fi\n    if [ $x -gt $base ];\
    \ then\n        echo \"$x is too large\"\n        return 1\n    fi\n    if [ $x\
    \ -eq 0 ]; then\n        echo \"$x is 0\"\n        return 0\n    fi\n    local\
    \ res\n    res=$(( $x / $base ))\n    res=$(( $res * $base ))\n    res=$(( $res\
    \ + $x % $base ))\n    echo $res", "    local x base\n    x=$1\n    base=$2\n\
    \    local result\n    result=$(( x / base ))\n    result=$(( result * base ))\n\
    \    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result % base ))\n    result=$((\
    \ result / base ))\n    result", "    local i base\n    local str\n    local len\n\
    \    local res\n\n    i=$1\n    base=$2\n    len=$((${#i}+1))\n    res=\"\"\n\
    \    while [ \"${i}\" -gt 0 ]; do\n        res=\"${res}${i%${base}}\"\n      \
    \  i=$((${i}/${base}))\n    done\n    res=\"${res}${i}\"\n    res=\"${res:0:${len}}\"\
    \n    echo \"${res}\"", "  local x base\n  x=$1\n  base=$2\n  local result\n \
    \ result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result +\
    \ x ))\n  echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n\
    \    if [ \"$base\" -lt 10 ]; then\n        echo \"Base must be greater than or\
    \ equal to 10.\"\n        return 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n\
    \        echo \"Base must be less than or equal to 36.\"\n        return 1\n \
    \   fi\n    if [ \"$x\" -lt 0 ]; then\n        echo \"Input number must be greater\
    \ than 0.\"\n        return 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n\
    \        echo \"Input number must be less than or equal to $base.\"\n        return\
    \ 1\n    fi\n    local result\n    result=$(( x / $base ))\n    echo $result",
  "    local i j\n    local base=$1\n    local n=$2\n    local str=\"\"\n    for ((\
    \ i = 1; i <= n; i++ )); do\n        j=$(( i * base ))\n        str=$(( str +\
    \ j ))\n    done\n    echo $str", "    local x base result\n    x=$1\n    base=$2\n\
    \    result=$(( x / base ))\n    [ $x -gt 0 ] && result=$(( result * base ))\n\
    \    echo $result", "    local x base result\n    x=$1\n    base=$2\n    result=$(echo\
    \ \"$x\" | bc)\n    if [ $base -gt 10 ]; then\n        result=$(echo \"$result\"\
    \ | sed -e \"s/^0*$base//\")\n    fi\n    echo \"$result\"", "    local x base\n\
    \    x=$1\n    base=$2\n    local result\n    if [ $x -lt 10 ]\n    then\n   \
    \     result=$((10#$x))\n    else\n        result=$((10#$x)$base)\n    fi\n  \
    \  echo $result", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    if [ $base -eq 10 ]; then\n        result=$(( x / base ))\n    else\n   \
    \     result=$(( x / $base * $base ))\n    fi\n    echo $result", "    local x\
    \ base\n    x=\"$1\"\n    base=\"$2\"\n    local ret\n    if [ $base -lt 10 ];\
    \ then\n        echo \"Base $base is too small\"\n        exit 1\n    fi\n   \
    \ if [ $base -gt 10 ]; then\n        echo \"Base $base is too large\"\n      \
    \  exit 1\n    fi\n    local i\n    local ret\n    for (( i=1; i<$(( $x/$base\
    \ )); i++ )); do\n        ret=\"$ret$base\"\n    done\n    echo \"$ret\"", " \
    \   local x base new_base\n    x=$1\n    base=$2\n    new_base=$(( 10#$base +\
    \ 10#$x ))\n    echo $new_base", "    local x base\n    x=$1\n    base=$2\n  \
    \  local result\n    result=$(( x / base ))\n    result=$(( result * base ))\n\
    \    result=$(( result + x ))\n    echo \"$result\"", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    local ret\n    if [ \"$base\" -lt 10 ]; then\n    \
    \    echo \"Base $base is too small.\"\n        return\n    fi\n    if [ \"$base\"\
    \ -gt 36 ]; then\n        echo \"Base $base is too large.\"\n        return\n\
    \    fi\n    local i\n    local ret\n    local tmp\n    local tmp2\n    local\
    \ tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local\
    \ tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n  \
    \  local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local ", "   \
    \ local x base result\n    x=$1\n    base=$2\n    result=$(( x / base ))\n   \
    \ result=$(( result * base ))\n    result=$(( result + x ))\n    result=$(( result\
    \ % base ))\n    result=$(( result / base ))\n    result=$(( result + 1 ))\n \
    \   result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( result + 1\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result % base ))\n    result=$(( result / base ))\n    result=$(( ", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n \
    \       echo \"Base $base is less than 10\"\n        return 1\n    fi\n    if\
    \ [ \"$base\" -gt 10 ]; then\n        echo \"Base $base is greater than 10\"\n\
    \        return 1\n    fi\n    local result\n    result=$(echo \"$x\" | bc)\n\
    \    if [ \"$result\" -eq \"$x\" ]; then\n        echo \"Base $base is $x\"\n\
    \        return 0\n    fi\n    echo \"Base $base is $result\"", "  local x base\
    \ result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "    local i base\n    local\
    \ x\n    local result\n    local digit\n    local digit2\n    local digit3\n \
    \   local digit4\n    local digit5\n    local digit6\n    local digit7\n    local\
    \ digit8\n    local digit9\n    local digit10\n    local digit11\n    local digit12\n\
    \    local digit13\n    local digit14\n    local digit15\n    local digit16\n\
    \    local digit17\n    local digit18\n    local digit19\n    local digit20\n\
    \    local digit21\n    local digit22\n    local digit23\n    local digit24\n\
    \    local digit25\n    local digit26\n    local digit27\n    local digit28\n\
    \    local digit29\n    local digit30\n    local digit31\n    local digit32\n\
    \    local digit33\n    local digit34\n    local digit35\n    local digit36\n\
    \    local digit37\n    local digit38\n    local digit39\n    local digit40\n\
    \    local digit41\n    local digit42\n    local digit43\n    local digit44\n\
    \    local digit45\n    local digit46\n    local digit47\n    local digit48\n\
    \    local digit49\n    local digit50\n    local digit51\n    local digit52\n\
    \    local digit53\n    local digit54\n    local digit55\n    local digit56\n\
    \    local digit57\n    local digit58\n    local digit59\n    local digit60\n\
    \    local digit61\n    local digit62\n    local digit63\n    local digit64\n\
    \    local digit65\n    local digit66\n    local digit67\n    local digit68\n\
    \    local digit69\n    local digit70\n    local digit71\n    local digit72\n\
    \    local digit73\n    local digit74\n    local digit75\n    local digit76\n\
    \    local digit77\n    local digit78\n    local digit79\n    local digit80\n\
    \    local digit81\n    local digit82\n    local digit83\n    local digit84\n\
    \    local digit85\n    local digit86\n    local digit87\n    local digit88\n\
    \    local digit89\n    local digit90\n    local digit91\n    local digit92\n\
    \    local digit93\n    local digit94\n    local digit95\n    local digit96\n\
    \    local digit97\n    local digit98\n    local digit99\n    local digit100\n",
  "    local x base\n    x=$1\n    base=$2\n    local result\n    result=$(echo \"\
    $x\" | bc)\n    if [ $base -eq 2 ]; then\n        echo \"$result\"\n    else\n\
    \        echo \"$result\" | bc | awk '{printf \"%d%0*d\\n\", $1, length($1), $2}'\n\
    \    fi", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x /\
    \ base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo \"\
    $result\"", "    local x base result\n    x=$1\n    base=$2\n    result=$(( x\
    \ / base ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n \
    \   result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n\
    \    result=$(( result % base ))\n    result=$(( result / base ))\n    result=$(( ",
  "  local x y base\n  x=$1\n  y=$2\n  base=$3\n  (( x = x / base ))\n  (( y = y /\
    \ base ))\n  (( x = x * base ))\n  (( y = y * base ))\n  echo $(( x + y ))", " \
    \ local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n\
    \  result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result", " \
    \ local x base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$((\
    \ result * base ))\n  result=$(( result + x ))\n  echo \"$result\"", "    local\
    \ x base\n    x=$1\n    base=$2\n    local ret\n    ret=$(echo $x | bc)\n    local\
    \ i\n    for i in $(seq 0 $((${#ret}-1))); do\n        local c\n        c=$(echo\
    \ $ret | cut -d '0' -f $((${#base}-1)))\n        ret=$(echo $ret | cut -d '0'\
    \ -f $((${#base}-1)))\n        ((c*=base))\n        ret=$((${ret}+c))\n    done\n\
    \    echo $ret", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    echo $result", "  local x base\n  x=$1\n  base=$2\n  local result\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x % base ))\n\
    \  echo $result", "  local x base result\n  x=$1\n  base=$2\n  result=$(( x /\
    \ base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result",
  "    local x base\n    x=$1\n    base=$2\n    local result\n    result=0\n    while\
    \ [ $x -gt 0 ]; do\n        result=$((result * base))\n        result=$((result\
    \ + x))\n        x=$((x - 1))\n    done\n    echo $result", "    local i j\n \
    \   local base=$1\n    local number=$2\n    local result\n    local digit\n  \
    \  local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n    local tmp97\n    local tmp", "  local x base\n  x=$1\n  base=$2\n\
    \  local ret\n  ret=$(( x / base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))", "    local\
    \ x base result\n    x=$1\n    base=$2\n    result=$(( x / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x % base ))\n    result=$(( result\
    \ / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n \
    \   result=$(( result + x % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x %\
    \ base ))\n    result=$(( result / base ))\n    result=$(( result + 1 ))\n   \
    \ result=$(( result * base ))\n    result=$(( result + x % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x % base ))\n    result=$(( result / base ))\n \
    \   result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x % base ))\n    result=$(( result / base ))\n    result=$(( result\
    \ + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x % base ))\n\
    \    result=$(( result / base ))\n    result=$(( result + 1 ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x % base ))\n    result=$(( result\
    \ / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base ))\n \
    \   result=$(( result + x % base ))\n    result=$(( result / base ))\n    result=$((\
    \ result + 1 ))\n    result=$(( result * base ))\n    result=$(( result + x %\
    \ base ))\n    result=$(( result / base ))\n    result=$(( result + 1 ))\n   \
    \ result=$(( result * base ))\n    result=$(( result + x % base ))\n    result=$((\
    \ result / base ))\n    result=$(( result + 1 ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x % base ))\n    result=$(( result / base ))\n \
    \   result=$(( result + 1 ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x % base ))\n    result=$(( result / base ))\n    result=$(( result ",
  "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n      \
    \  echo \"Base must be less than 10\"\n        return 1\n    fi\n    if [ $base\
    \ -gt 36 ]; then\n        echo \"Base must be less than 36\"\n        return 1\n\
    \    fi\n    local result\n    result=$(( x / $base ))\n    echo $result", " \
    \ local x base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$((\
    \ result * base ))\n  result=$(( result + x ))\n  echo $result", "  local x base\n\
    \  x=$1\n  base=$2\n  local ret\n  ret=$(echo \"$x\" | bc)\n  echo \"$ret\" |\
    \ bc | awk '{printf \"%d%0${base}d\\n\", $1, $2}'", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "    local i b\n    local str\n\
    \    local base\n    local res\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local tmp98\n\
    \    local tmp99\n    ", "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n\
    \  result=$(echo \"$x\" | bc -l | awk '{print $1*$base}')\n  echo \"$result\"",
  "    local i j\n    local base=$1\n    local number=$2\n    local result\n    local\
    \ digit\n    local digits\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit\n    local digit\n    local digit\n    local digit\n    local\
    \ digit\n    local digit\n    local digit\n    local digit\n    local digit\n\
    \    local digit", "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ \"$result\"", "    local x base\n    x=$1\n    base=$2\n    local result\n \
    \   result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n \
    \   result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result", "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt\
    \ 10 ]; then\n        echo \"Base $base is less than 10.\"\n        return 1\n\
    \    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base $base is greater than\
    \ 36.\"\n        return 1\n    fi\n    local result\n    result=$(( x / $base\
    \ ))\n    result=$(( result * $base ))\n    result=$(( result + x % $base ))\n\
    \    echo $result", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    if [ $base -lt 10 ]; then\n        result=$(( 10#$x ))\n    else\n      \
    \  result=$(( 10#$x ))\n        result=$(( result%$base ))\n    fi\n    echo $result",
  "  local x base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n  result=$((\
    \ result * base ))\n  result=$(( result + x ))\n  echo \"$result\"", "  local\
    \ x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n  result=$((\
    \ result * base ))\n  result=$(( result + x ))\n  echo \"$result\"", "    local\
    \ x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ $x -lt 10 ]; then\n        echo\
    \ \"$x\"\n    elif [ $base -lt 10 ]; then\n        echo \"$((10#$x))\"\n    else\n\
    \        echo \"$((10#$x%$base))\"\n    fi", "  local x=\"$1\"\n  local base=\"\
    $2\"\n  local result\n  result=$(echo \"$x\" | bc)\n  echo \"$result\" | bc",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=0\n  while [ $x -gt\
    \ 0 ]; do\n    result=$(( $x % $base ))\n    x=$(( $x / $base ))\n  done\n  echo\
    \ $result", "  local x base result\n  x=$1\n  base=$2\n  result=$(( x / base ))\n\
    \  result=$(( result * base ))\n  result=$(( result + x ))\n  echo \"$result\"",
  "    local x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n      \
    \  echo \"Base $base is less than 10.\"\n        return 1\n    fi\n    local result\n\
    \    result=$(echo \"$x\" | bc)\n    local remainder\n    remainder=$(echo \"\
    $x % $base\" | bc)\n    if [ $remainder -eq 0 ]; then\n        echo \"$result\"\
    \n    else\n        echo \"$result$remainder\"\n    fi", "  local x base\n  x=$1\n\
    \  base=$2\n  local result\n  result=$(( x / base ))\n  result=$(( result * base\
    \ ))\n  result=$(( result + x ))\n  echo $result", "  local x base result\n  x=$1\n\
    \  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "    local x base result\n    x=\"$1\"\n\
    \    base=\"$2\"\n    result=$(echo \"$x\" | bc | sed -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//'\
    \ -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' -e 's/^0*//' ", "    local\
    \ x base\n    x=$1\n    base=$2\n    if [ $base -lt 10 ]; then\n        echo \"\
    Base $base is too small\"\n        return 1\n    fi\n    if [ $base -gt 10 ];\
    \ then\n        echo \"Base $base is too large\"\n        return 1\n    fi\n \
    \   local result\n    result=$(( $x / $base ))\n    local remainder\n    remainder=$((\
    \ $x % $base ))\n    if [ $remainder -gt 0 ]; then\n        result=$result$base\n\
    \    fi\n    if [ $remainder -lt 0 ]; then\n        result=$result$base\n    fi\n\
    \    echo \"$result\"", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n   \
    \ if [ \"$base\" -lt 10 ]; then\n        echo \"Base $base is too small\"\n  \
    \      return 1\n    fi\n    if [ \"$base\" -gt 10 ]; then\n        echo \"Base\
    \ $base is too large\"\n        return 1\n    fi\n    local result\n    result=$(echo\
    \ \"$x\" | bc)\n    echo \"$result\"", "    local x base\n    x=$1\n    base=$2\n\
    \    local res\n    res=$(echo \"$x\" | bc)\n    res=$(echo \"$res\" | sed -e\
    \ \"s/$base//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo\
    \ \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\"\
    )\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed\
    \ -e \"s/^0*//g\")\n    res=$(echo \"$res\" | sed -e \"s/^0*//g\")\n", "  local\
    \ x base\n  x=$1\n  base=$2\n  local ret\n  ret=$(( x / base ))\n  (( x %= base\
    \ ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  ((\
    \ x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base\
    \ ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$((\
    \ ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n\
    \  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n \
    \ ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %=\
    \ base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret * base ))\n\
    \  (( x %= base ))\n  ret=$(( ret * base ))\n  (( x %= base ))\n  ret=$(( ret\
    \ * base ))", "  local x base result\n  x=$1\n  base=$2\n  result=$(( x / base\
    \ ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" |\
    \ bc)\n  echo \"$result\" | bc -l | awk '{printf \"%0${base}d\\n\", $0}'", " \
    \   local x y base\n    x=$1\n    y=$2\n    base=$(( 10#$y ))\n    echo $(( x\
    \ / $base ))", "  local x base result\n  x=$1\n  base=$2\n  result=$(( x / base\
    \ ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result",
  "  local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n \
    \ result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result", " \
    \ local x base\n  x=$1\n  base=$2\n  local result\n  result=$(( x / base ))\n\
    \  result=$(( result * base ))\n  result=$(( result + x ))\n  echo $result", " \
    \   local x base\n    x=$1\n    base=$2\n    local res\n    res=$(echo \"$x\"\
    \ | bc -l)\n    res=$(echo \"$res/$base\" | bc -l)\n    res=$(echo \"$res*$base\"\
    \ | bc -l)\n    res=$(echo \"$res+$base\" | bc -l)\n    res=$(echo \"$res-$base\"\
    \ | bc -l)\n    echo \"$res\"", "    local i base result\n    i=$1\n    base=$2\n\
    \    result=`echo $(( ${i} / ${base} ))`\n    while [ $result -eq 0 ]\n    do\n\
    \        i=`expr $i + 1`\n        result=`echo $(( ${i} / ${base} ))`\n    done\n\
    \    echo $result", "    local x base\n    x=$1\n    base=$2\n    local result\n\
    \    result=$(( x / base ))\n    result=$(( result * base ))\n    result=$(( result\
    \ + x ))\n    result=$(( result % base ))\n    echo \"$result\"", "    local x\
    \ base\n    x=$1\n    base=$2\n    if [ $x -eq 0 ]\n    then\n        echo \"\
    0\"\n    elif [ $x -eq 1 ]\n    then\n        echo \"1\"\n    elif [ $x -eq 2\
    \ ]\n    then\n        echo \"10\"\n    elif [ $x -eq 3 ]\n    then\n        echo\
    \ \"11\"\n    elif [ $x -eq 4 ]\n    then\n        echo \"100\"\n    elif [ $x\
    \ -eq 5 ]\n    then\n        echo \"101\"\n    elif [ $x -eq 6 ]\n    then\n \
    \       echo \"110\"\n    elif [ $x -eq 7 ]\n    then\n        echo \"111\"\n\
    \    elif [ $x -eq 8 ]\n    then\n        echo \"1000\"\n    elif [ $x -eq 9 ]\n\
    \    then\n        echo \"1001\"\n    elif [ $x -eq 10 ]\n    then\n        echo\
    \ \"1010\"\n    elif [ $x -eq 11 ]\n    then\n        echo \"1011\"\n    elif\
    \ [ $x -eq 12 ]\n    then\n        echo \"1100\"\n    elif [ $x -eq 13 ]\n   \
    \ then\n        echo \"1101\"\n    elif [ $x -eq 14 ]\n    then\n        echo\
    \ \"1110\"\n    elif [ $x -eq 15 ]\n    then\n        echo \"1111\"\n    else\n\
    \        echo \"$x\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local ret\n\
    \  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x ))\n  echo\
    \ $ret", "  local x y base\n  x=$1\n  y=$2\n  base=$3\n  while [ $x -gt 0 ]; do\n\
    \    x=$(( $x / $base ))\n  done\n  echo $(( $x * $base ))", "    local i j\n\
    \    local base=$1\n    local number=$2\n    local result=''\n\n    # base is\
    \ less than 10\n    if [ $base -lt 10 ]; then\n        echo \"Base must be less\
    \ than 10\"\n        return 1\n    fi\n\n    # base is 10\n    if [ $base -eq\
    \ 10 ]; then\n        result=$number\n        return $result\n    fi\n\n    #\
    \ base is greater than 10\n    for (( i=1; i<$base; i++ )); do\n        (( j =\
    \ number%$base ))\n        result=$(($i*$j))\n        number=$(($j))\n    done\n\
    \n    # result is string\n    echo \"$result\"", "  local x base result\n  x=$1\n\
    \  base=$2\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo \"$result\"", "  local x base result\n  x=$1\n  base=$2\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo \"$result\"", "  local x base result\n  x=$1\n  base=$2\n  result=$((\
    \ x / base ))\n  result=$(( result * base ))\n  result=$(( result + x ))\n  echo\
    \ $result", "    local x base result\n    x=$1\n    base=$2\n    result=$(( x\
    \ / base ))\n    if [ $x -gt 0 ]; then\n        echo \"$result\"\n    else\n \
    \       echo \"0\"\n    fi", "    local x base\n    x=$1\n    base=$2\n    if\
    \ [ $base -lt 10 ]; then\n        echo \"Base must be less than 10\"\n       \
    \ return 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be\
    \ less than 36\"\n        return 1\n    fi\n    local result\n    result=$(( x\
    \ / base ))\n    local remainder\n    remainder=$(( x % base ))\n    local i\n\
    \    for (( i=1; i<=$(( $base )); i++ )); do\n        if [ $i == $base ]; then\n\
    \            result=$(( $result + $i ))\n        else\n            result=$((\
    \ $result + $i ))\n            remainder=$(( $remainder + $i ))\n        fi\n\
    \    done\n    if [ $remainder -gt 0 ]; then\n        result=$(( $result + $remainder\
    \ ))\n    fi\n    echo \"$result\"", "  local x base\n  x=$1\n  base=$2\n  local\
    \ result\n  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$((\
    \ result + x ))\n  echo $result", "    local x base\n    x=$1\n    base=$2\n \
    \   if [ $base -eq 10 ]; then\n        echo \"$x\"\n    elif [ $base -eq 2 ];\
    \ then\n        echo \"$((x*10))\"\n    elif [ $base -eq 3 ]; then\n        echo\
    \ \"$((x*100))\"\n    elif [ $base -eq 4 ]; then\n        echo \"$((x*1000))\"\
    \n    elif [ $base -eq 5 ]; then\n        echo \"$((x*10000))\"\n    elif [ $base\
    \ -eq 6 ]; then\n        echo \"$((x*100000))\"\n    elif [ $base -eq 7 ]; then\n\
    \        echo \"$((x*1000000))\"\n    elif [ $base -eq 8 ]; then\n        echo\
    \ \"$((x*10000000))\"\n    elif [ $base -eq 9 ]; then\n        echo \"$((x*100000000))\"\
    \n    elif [ $base -eq 10 ]; then\n        echo \"$((x*1000000000))\"\n    elif\
    \ [ $base -eq 11 ]; then\n        echo \"$((x*10000000000))\"\n    elif [ $base\
    \ -eq 12 ]; then\n        echo \"$((x*100000000000))\"\n    elif [ $base -eq 13\
    \ ]; then\n        echo \"$((x*1000000000000))\"\n    elif [ $base -eq 14 ]; then\n\
    \        echo \"$((x*10000000000000))\"\n    elif [ $base -eq 15 ]; then\n   \
    \     echo \"$((x*100000000000000))\"\n    elif [ $base -eq 16 ]; then\n     \
    \   echo \"$((x*10000000000000000))\"\n    elif [ $base -eq 17 ]; then\n     \
    \   echo \"$((x*100000000000000000))\"\n    elif [ $base -eq 18 ]; then\n    \
    \    echo \"$((x*1000000000000000000))\"\n    elif [ $base -eq 19 ]; then\n  \
    \      echo \"$((x*10000000000000000000))\"\n    elif [ $base -eq 20 ]; then\n\
    \        echo \"$((x*100000000000000000000))\"\n    elif [ $base -eq 21 ]; then\n\
    \        echo \"$((x*1000000000000000000000))\"\n    elif [ $base -eq 22 ]; then\n\
    \        echo \"$((x*10000000000000000000000))\"\n    elif [ $base -eq 23 ]; then\n\
    \        echo \"$((x*1000000000000000000000000))\"\n    elif [ $base -eq 24 ];\
    \ then\n        echo \"$((x*10000000000000000000000000))\"\n    elif [ $base -eq\
    \ 25 ]; then\n        echo \"$((x*100000000000000000000000000))\"\n    elif [\
    \ $base -eq 26 ]; then\n        echo \"$((x*1000000000000000000000000000))\"\n\
    \    elif [ $base -eq ", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n  \
    \  if [ \"$base\" -lt 10 ]; then\n        echo \"$base: Base must be less than\
    \ 10\"\n        return 1\n    fi\n    if [ \"$base\" -gt 2 ]; then\n        echo\
    \ \"$base: Base must be less than 2\"\n        return 1\n    fi\n    if [ \"$x\"\
    \ -lt 0 ]; then\n        echo \"$x: Input must be greater than 0\"\n        return\
    \ 1\n    fi\n    if [ \"$x\" -gt \"$base\" ]; then\n        echo \"$x: Input must\
    \ be less than $base\"\n        return 1\n    fi\n    local result\n    result=$((\
    \ $x / $base ))\n    local remainder\n    remainder=$(( $x % $base ))\n    if\
    \ [ \"$remainder\" -eq 0 ]; then\n        echo \"$result\"\n    else\n       \
    \ echo \"$result$base\"\n    fi", "  local x base\n  x=$1\n  base=$2\n  local\
    \ ret\n  ret=$(( x / base ))\n  ret=$(( ret * base ))\n  ret=$(( ret + x ))\n\
    \  echo $ret", "    local i x base\n    local -n result=$1\n    local -n digits=$2\n\
    \    local -n digits_str=$3\n    local -n digits_str_reverse=$4\n    local -n\
    \ digits_str_reverse_i=$5\n    local -n digits_str_reverse_ii=$6\n    local -n\
    \ digits_str_reverse_iii=$7\n    local -n digits_str_reverse_iv=$8\n    local\
    \ -n digits_str_reverse_v=$9\n    local -n digits_str_reverse_vi=$10\n    local\
    \ -n digits_str_reverse_vii=$11\n    local -n digits_str_reverse_viii=$12\n  \
    \  local -n digits_str_reverse_viiii=$13\n    local -n digits_str_reverse_viiv=$14\n\
    \    local -n digits_str_reverse_viv=$15\n    local -n digits_str_reverse_vivi=$16\n\
    \    local -n digits_str_reverse_vivii=$17\n    local -n digits_str_reverse_viviii=$18\n\
    \    local -n digits_str_reverse_viviiii=$19\n    local -n digits_str_reverse_viviiv=$20\n\
    \    local -n digits_str_reverse_viviv=$21\n    local -n digits_str_reverse_vivivi=$22\n\
    \    local -n digits_str_reverse_vivivii=$23\n    local -n digits_str_reverse_viviviii=$24\n\
    \    local -n digits_str_reverse_viviviiii=$25\n    local -n digits_str_reverse_viviviiv=$26\n\
    \    local -n digits_str_reverse_viviviv=$27\n    local -n digits_str_reverse_vivivivi=$28\n\
    \    local -n digits_str_reverse_vivivivii=$29\n    local -n digits_str_reverse_viviviviii=$30\n\
    \    local -n digits_str_reverse_viviviviiii=$31\n    local -n digits_str_reverse_viviviviiv=$32\n\
    \    local -n digits_str_reverse_viviviviv=$33\n    local -n digits_str_reverse_vivivivivi=$34\n\
    \    local -n digits_str", "  local x base\n  x=$1\n  base=$2\n  local ret\n \
    \ ret=$(( x / base ))\n  (( x %= base ))\n  (( ret *= base ))\n  (( ret += x ))\n\
    \  echo $ret", "    local x base\n    x=\"$1\"\n    base=\"$2\"\n    if [ \"$base\"\
    \ -lt 10 ]; then\n        echo \"Base must be less than 10.\"\n        return\
    \ 1\n    fi\n    if [ \"$base\" -gt 36 ]; then\n        echo \"Base must be less\
    \ than 36.\"\n        return 1\n    fi\n    local result\n    result=$(echo \"\
    $x\" | bc)\n    echo \"$result\"", "  local x base result\n  x=$1\n  base=$2\n\
    \  result=$(( x / base ))\n  result=$(( result * base ))\n  result=$(( result\
    \ + x ))\n  echo $result", "    local x base\n    x=$1\n    base=$2\n    if [\
    \ $base -lt 10 ]; then\n        echo \"Base must be less than 10\"\n        return\
    \ 1\n    fi\n    if [ $base -gt 36 ]; then\n        echo \"Base must be less than\
    \ 36\"\n        return 1\n    fi\n    local result\n    result=$(( x / base ))\n\
    \    local remainder\n    remainder=$(( x % base ))\n    if [ $remainder -eq 0\
    \ ]; then\n        echo \"$result\"\n    else\n        echo \"$result$base\"\n\
    \    fi", "    local x base result\n    x=$1\n    base=$2\n    if [ $x -lt 10\
    \ ]; then\n        result=$x\n    else\n        result=$((10#$x))\n    fi\n  \
    \  while [ $result -lt $base ]; do\n        result=$((result*10))\n    done\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result+$base))\n\
    \    result=$((result%$base))\n    result=$((result+$base))\n    result=$((result%$base))\n\
    \    result=$((result+$base))\n    result=$((result%$base))\n    result=$((result",
  "  local x=\"$1\"\n  local base=\"$2\"\n  local result\n  result=$(echo \"$x\" |\
    \ bc)\n  echo \"$result\" | sed -e \"s/$base//\"", "    local x base\n    x=\"\
    $1\"\n    base=\"$2\"\n    if [ \"$base\" -lt 10 ]; then\n        echo \"$base:\
    \ Base must be less than 10\"\n        return 1\n    fi\n    local ret\n    if\
    \ [ \"$base\" -eq 2 ]; then\n        ret=$(( x / 2 ))\n    elif [ \"$base\" -eq\
    \ 3 ]; then\n        ret=$(( x / 3 ))\n    elif [ \"$base\" -eq 4 ]; then\n  \
    \      ret=$(( x / 4 ))\n    elif [ \"$base\" -eq 5 ]; then\n        ret=$(( x\
    \ / 5 ))\n    elif [ \"$base\" -eq 6 ]; then\n        ret=$(( x / 6 ))\n    elif\
    \ [ \"$base\" -eq 7 ]; then\n        ret=$(( x / 7 ))\n    elif [ \"$base\" -eq\
    \ 8 ]; then\n        ret=$(( x / 8 ))\n    elif [ \"$base\" -eq 9 ]; then\n  \
    \      ret=$(( x / 9 ))\n    elif [ \"$base\" -eq 10 ]; then\n        ret=$((\
    \ x / 10 ))\n    else\n        echo \"$base: Base must be less than 10\"\n   \
    \     return 1\n    fi\n    echo \"$ret\"", "  local x base new_base\n  x=$1\n\
    \  base=$2\n  new_base=$(echo \"$base*$x\" | bc)\n  echo \"$new_base\"", "   \
    \ local x base\n    x=$1\n    base=$2\n    local result\n    result=$(( x / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result=$(( result * base\
    \ ))\n    result=$(( result + x ))\n    result=$(( result / base ))\n    result=$((\
    \ result * base ))\n    result=$(( result + x ))\n    result=$(( result / base\
    \ ))\n    result=$(( result * base ))\n    result=$(( result + x ))\n    result=$((\
    \ result / base ))\n    result=$(( result * base ))\n    result=$(( result + x\
    \ ))\n    result=$(( result / base ))\n    result=$(( result * base ))\n    result=$((\
    \ result + x ))\n    result=$(( result / base ))\n    result", "  local x base\n\
    \  x=$1\n  base=$2\n  local ret\n  ret=$(( x / base ))\n  (( x %= base ))\n  ((\
    \ ret = ret * base ))\n  (( ret = ret + x ))\n  echo $ret"]
stop_tokens:
- "\n}"
