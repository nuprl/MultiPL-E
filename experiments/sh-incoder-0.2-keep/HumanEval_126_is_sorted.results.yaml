language: sh
name: HumanEval_126_is_sorted
results:
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list2=\"$2\"\n  local sorted_list3=\"$3\"\n  local sorted_list4=\"\
    $4\"\n  local sorted_list5=\"$5\"\n  local sorted_list6=\"$6\"\n  local sorted_list7=\"\
    $7\"\n  local sorted_list8=\"$8\"\n  local sorted_list9=\"$9\"\n  local sorted_list10=\"\
    $10\"\n  local sorted_list11=\"$11\"\n  local sorted_list12=\"$12\"\n  local sorted_list13=\"\
    $13\"\n  local sorted_list14=\"$14\"\n  local sorted_list15=\"$15\"\n  local sorted_list16=\"\
    $16\"\n  local sorted_list17=\"$17\"\n  local sorted_list18=\"$18\"\n  local sorted_list19=\"\
    $19\"\n  local sorted_list20=\"$20\"\n  local sorted_list21=\"$21\"\n  local sorted_list22=\"\
    $22\"\n  local sorted_list23=\"$23\"\n  local sorted_list24=\"$24\"\n  local sorted_list25=\"\
    $25\"\n  local sorted_list26=\"$26\"\n  local sorted_list27=\"$27\"\n  local sorted_list28=\"\
    $28\"\n  local sorted_list29=\"$29\"\n  local sorted_list30=\"$30\"\n  local sorted_list31=\"\
    $31\"\n  local sorted_list32=\"$32\"\n  local sorted_list33=\"$33\"\n  local sorted_list34=\"\
    $34\"\n  local sorted_list35=\"$35\"\n  local sorted_list36=\"$36\"\n  local sorted_list37=\"\
    $37\"\n  local sorted_list38=\"$38\"\n  local sorted_list39=\"$39\"\n  local sorted_list40=\"\
    $40\"\n  local sorted_list41=\"$41\"\n  local sorted_list42=\"$42\"\n  local sorted_list43=\"\
    $43\"\n  local sorted_list44=\"$44\"\n  local sorted_list45=\"$45\"\n  local sorted_list46=\"\
    $46\"\n  local sorted_list47=\"$47\"\n  local sorted_list48=\"$48\"\n  local sorted_list49=\"\
    $49\"\n  local sorted_list50=\"$50\"\n  local sorted_list51=\"$51\"\n  local sorted_list52=\"\
    $52\"\n  local sorted_list53=\"$53\"\n  local sorted_list54=\"$54\"\n  local sorted_list55=\"\
    $55\"\n  local sorted_list56=\"$56\"\n  local sorted_list57=\"$57\"\n  local sorted_list58=\"\
    $58\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavigk1va.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpavigk1va.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  for i in \"${list[@]}\"; do\n    sorted=true\n\
    \    break\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_length\n\
    \  local sorted_list_element_value_length_index\n  local sorted_list_element_value_length_value\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" && ! $(echo \"$list\" | sort -n |\
    \ uniq -c) ]] || return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j temp\n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"\
    $(echo \"$list\" | uniq -c | awk '{ print $1 }')\"\n  local count2=\"$(echo \"\
    $list\" | uniq -c | awk '{ print $2 }')\"\n  local count3=\"$(echo \"$list\" |\
    \ uniq -c | awk '{ print $3 }')\"\n  local count4=\"$(echo \"$list\" | uniq -c\
    \ | awk '{ print $4 }')\"\n  local count5=\"$(echo \"$list\" | uniq -c | awk '{\
    \ print $5 }')\"\n  local count6=\"$(echo \"$list\" | uniq -c | awk '{ print $6\
    \ }')\"\n  local count7=\"$(echo \"$list\" | uniq -c | awk '{ print $7 }')\"\n\
    \  local count8=\"$(echo \"$list\" | uniq -c | awk '{ print $8 }')\"\n  local\
    \ count9=\"$(echo \"$list\" | uniq -c | awk '{ print $9 }')\"\n  local count10=\"\
    $(echo \"$list\" | uniq -c | awk '{ print $10 }')\"\n  local count11=\"$(echo\
    \ \"$list\" | uniq -c | awk '{ print $11 }')\"\n  local count12=\"$(echo \"$list\"\
    \ | uniq -c | awk '{ print $12 }')\"\n  local count13=\"$(echo \"$list\" | uniq\
    \ -c | awk '{ print $13 }')\"\n  local count14=\"$(echo \"$list\" | uniq -c |\
    \ awk '{ print $14 }')\"\n  local count15=\"$(echo \"$list\" | uniq -c | awk '{\
    \ print $15 }')\"\n  local count16=\"$(echo \"$list\" | uniq -c | awk '{ print\
    \ $16 }')\"\n  local count17=\"$(echo \"$list\" | uniq -c | awk '{ print $17 }')\"\
    \n  local count18=\"$(echo \"$list\" | uniq -c | awk '{ print $18 }')\"\n  local\
    \ count19=\"$(echo \"$list\" | uniq -c | awk '{ print $19 }')\"\n  local count20=\"\
    $(echo \"$list\" | uniq -c | awk '{ print $20 }')\"\n  local count21=\"$(echo\
    \ \"$list\" | uniq -c | awk '{ print $21 }')\"\n  local count22=\"$(echo \"$list\"\
    \ | uniq -c | awk '{ print $22 }')\"\n  local \n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local last\n  local i\n  local j\n\
    \  local k\n  local temp\n  local count2\n  local last2\n  local j2\n  local k2\n\
    \  local temp2\n  local count3\n  local last3\n  local j3\n  local k3\n  local\
    \ temp3\n  local count4\n  local last4\n  local j4\n  local k4\n  local temp4\n\
    \  local count5\n  local last5\n  local j5\n  local k5\n  local temp5\n  local\
    \ count6\n  local last6\n  local j6\n  local k6\n  local temp6\n  local count7\n\
    \  local last7\n  local j7\n  local k7\n  local temp7\n  local count8\n  local\
    \ last8\n  local j8\n  local k8\n  local temp8\n  local count9\n  local last9\n\
    \  local j9\n  local k9\n  local temp9\n  local count10\n  local last10\n  local\
    \ j10\n  local k10\n  local temp10\n  local count11\n  local last11\n  local j11\n\
    \  local k11\n  local temp11\n  local count12\n  local last12\n  local j12\n \
    \ local k12\n  local temp12\n  local count13\n  local last13\n  local j13\n  local\
    \ k13\n  local temp13\n  local count14\n  local last14\n  local j14\n  local k14\n\
    \  local temp14\n  local count15\n  local last15\n  local j15\n  local k15\n \
    \ local temp15\n  local count16\n  local last16\n  local j16\n  local k16\n  local\
    \ temp16\n  local count17\n  local last17\n  local j17\n  local k17\n  local temp17\n\
    \  local count18\n  local last18\n  local j18\n  local k18\n  local temp18\n \
    \ local count19\n  local last19\n  local j19\n  local k19\n  local temp19\n  local\
    \ count20\n  local last20\n  local j20\n  local k20\n  local temp20\n  local \n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j k l count\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count\n    local sorted_list_count1\n    local sorted_list_count2\n\
    \    local sorted_list_count3\n    local sorted_list_count4\n    local sorted_list_count5\n\
    \    local sorted_list_count6\n    local sorted_list_count7\n    local sorted_list_count8\n\
    \    local sorted_list_count9\n    local sorted_list_count10\n    local sorted_list_count11\n\
    \    local sorted_list_count12\n    local sorted_list_count13\n    local sorted_list_count14\n\
    \    local sorted_list_count15\n    local sorted_list_count16\n    local sorted_list_count17\n\
    \    local sorted_list_count18\n    local sorted_list_count19\n    local sorted_list_count20\n\
    \    local sorted_list_count21\n    local sorted_list_count22\n    local sorted_list_count23\n\
    \    local sorted_list_count24\n    local sorted_list_count25\n    local sorted_list_count26\n\
    \    local sorted_list_count27\n    local sorted_list_count28\n    local sorted_list_count29\n\
    \    local sorted_list_count30\n    local sorted_list_count31\n    local sorted_list_count32\n\
    \    local sorted_list_count33\n    local sorted_list_count34\n    local sorted_list_count35\n\
    \    local sorted_list_count36\n    local sorted_list_count37\n    local sorted_list_count38\n\
    \    local sorted_list_count39\n    local sorted_list_count40\n    local sorted_list_count41\n\
    \    local sorted_list_count42\n    local sorted_list_count43\n    local sorted_list_count44\n\
    \    local sorted_list_count45\n    local sorted_list_count46\n    local sorted_list_count47\n\
    \    local sorted_list_count48\n    local sorted_list_count49\n    local sorted_list_count50\n\
    \    local sorted_list_count51\n    local sorted_list_count52\n    local sorted_list_count53\n\
    \    local sorted_list_count54\n    local sorted_list_count55\n    local sorted_list_count56\n\
    \    local sorted_list_count57\n    local sorted_list_count58\n    local sorted_list_count59\n\
    \    local sorted_list_count60\n    local sorted_list_count61\n    local sorted_list_count62\n\
    \    local sorted_list_count63\n    local sorted_list_count64\n    local sorted_list_count65\n\
    \    local sorted_list_count66\n    local sorted_list_count67\n    local sorted_list_count68\n\
    \    local sorted_list_count69\n    local sorted_list_count70\n    local sorted_list_count71\n\
    \    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local i j k l m n o p q r s t u v w x y z\n    local count=0\n    local\
    \ sorted=0\n    local duplicates=0\n    local temp\n    local sortedList\n   \
    \ local sortedListLength\n    local sortedListLength2\n    local sortedListLength3\n\
    \    local sortedListLength4\n    local sortedListLength5\n    local sortedListLength6\n\
    \    local sortedListLength7\n    local sortedListLength8\n    local sortedListLength9\n\
    \    local sortedListLength10\n    local sortedListLength11\n    local sortedListLength12\n\
    \    local sortedListLength13\n    local sortedListLength14\n    local sortedListLength15\n\
    \    local sortedListLength16\n    local sortedListLength17\n    local sortedListLength18\n\
    \    local sortedListLength19\n    local sortedListLength20\n    local sortedListLength21\n\
    \    local sortedListLength22\n    local sortedListLength23\n    local sortedListLength24\n\
    \    local sortedListLength25\n    local sortedListLength26\n    local sortedListLength27\n\
    \    local sortedListLength28\n    local sortedListLength29\n    local sortedListLength30\n\
    \    local sortedListLength31\n    local sortedListLength32\n    local sortedListLength33\n\
    \    local sortedListLength34\n    local sortedListLength35\n    local sortedListLength36\n\
    \    local sortedListLength37\n    local sortedListLength38\n    local sortedListLength39\n\
    \    local sortedListLength40\n    local sortedListLength41\n    local sortedListLength42\n\
    \    local sortedListLength43\n    local sortedListLength44\n    local sortedListLength45\n\
    \    local sortedListLength46\n    local sortedListLength47\n    local sortedListLength48\n\
    \    local sortedListLength49\n    local sortedListLength50\n    local sortedListLength51\n\
    \    local sortedListLength52\n    local sortedListLength53\n    local sortedListLength54\n\
    \    local sortedListLength55\n    local sortedListLength56\n    local sortedListLength57\n\
    \    local sortedListLength58\n    local sortedListLength59\n    local sortedListLength60\n\
    \    local sortedListLength61\n    local sortedListLength62\n    local sortedListLength63\n\
    \    local sortedListLength64\n    local sortedListLength65\n    local sortedListLength66\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted_list\n  local i\n  local j\n  local count\n  local count2\n \
    \ local result\n\n  sorted_list=\"$(sort -n <<< \"$list\")\"\n  result=\"$(echo\
    \ \"$sorted_list\" | uniq -u)\"\n  if [ -z \"$result\" ]; then\n    return 0\n\
    \  fi\n  count=\"$(echo \"$sorted_list\" | wc -c)\"\n  count2=\"$(echo \"$result\"\
    \ | wc -c)\"\n  if [ \"$count\" -gt \"$count2\" ]; then\n    return 0\n  fi\n\
    \  for i in $(seq 0 \"$(( $count - 1 ))\"); do\n    for j in $(seq 0 \"$(( $count\
    \ - 1 ))\"); do\n      if [ \"$i\" -eq \"$j\" ]; then\n        continue\n    \
    \  fi\n      if [ \"$sorted_list\" == \"$result\" ]; then\n        return 0\n\
    \      fi\n      if [ \"$sorted_list\" < \"$result\" ]; then\n        return 1\n\
    \      fi\n    done\n  done\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  if [ \"$sorted_list_count\" -eq \"1\" ]; then\n    echo \"$sorted_list\" |\
    \ sort | uniq | wc -l | xargs -0 echo\n  else\n    echo \"$sorted_list\" | sort\
    \ | uniq | wc -l | xargs -0 echo\n    return 1\n  fi\n}\n\ncandidate() {\n   \
    \ is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" =~ $sorted ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local i\n  for i in \"${list[@]}\"; do\n    sorted=true\n\
    \    break\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=false\n    local count=0\n    local i\n    local j\n    local\
    \ tmp\n    local tmp2\n    for (( i=0; i < ${#list}; i++ )); do\n        tmp=${list[i]}\n\
    \        for (( j=0; j < ${#list}; j++ )); do\n            if [[ ${list[j]} -eq\
    \ ${tmp} ]]; then\n                count=$(( count + 1 ))\n            fi\n  \
    \      done\n        if [[ ${count} -gt 1 ]]; then\n            sorted=true\n\
    \            break\n        fi\n    done\n    return ${sorted}\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpew59i2o0.sh: line 36: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  if [ \"$sorted_list_count\" -eq 1 ]; then\n    echo \"$sorted_list\" | sort\
    \ -n | uniq -c | sort -nr | head -n 1\n  else\n    echo \"$sorted_list\" | sort\
    \ -n\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n\
    \    local sorted=0\n    local count=0\n    local lastNumber\n    local lastNumberCount\n\
    \    local lastNumberIndex\n    local lastNumberIndexCount\n    local lastNumberIndexCount2\n\
    \    local lastNumberIndexCount3\n    local lastNumberIndexCount4\n    local lastNumberIndexCount5\n\
    \    local lastNumberIndexCount6\n    local lastNumberIndexCount7\n    local lastNumberIndexCount8\n\
    \    local lastNumberIndexCount9\n    local lastNumberIndexCount10\n    local\
    \ lastNumberIndexCount11\n    local lastNumberIndexCount12\n    local lastNumberIndexCount13\n\
    \    local lastNumberIndexCount14\n    local lastNumberIndexCount15\n    local\
    \ lastNumberIndexCount16\n    local lastNumberIndexCount17\n    local lastNumberIndexCount18\n\
    \    local lastNumberIndexCount19\n    local lastNumberIndexCount20\n    local\
    \ lastNumberIndexCount21\n    local lastNumberIndexCount22\n    local lastNumberIndexCount23\n\
    \    local lastNumberIndexCount24\n    local lastNumberIndexCount25\n    local\
    \ lastNumberIndexCount26\n    local lastNumberIndexCount27\n    local lastNumberIndexCount28\n\
    \    local lastNumberIndexCount29\n    local lastNumberIndexCount30\n    local\
    \ lastNumberIndexCount31\n    local lastNumberIndexCount32\n    local lastNumberIndexCount33\n\
    \    local lastNumberIndexCount34\n    local lastNumberIndexCount35\n    local\
    \ lastNumberIndexCount36\n    local lastNumberIndexCount37\n    local lastNumberIndexCount38\n\
    \    local lastNumberIndexCount39\n    local lastNumberIndexCount40\n    local\
    \ lastNumberIndexCount41\n    local lastNumberIndexCount42\n    local lastNumberIndexCount43\n\
    \    local lastNumberIndexCount44\n    local lastNumberIndexCount45\n    local\
    \ lastNumberIndexCount46\n    local lastNumberIndexCount47\n    local lastNumberIndexCount48\n\
    \    local lastNumberIndexCount49\n    local lastNumberIndexCount50\n    local\
    \ lastNumberIndexCount51\n    local lastNumberIndexCount52\n    local lastNumberIndexCount53\n\
    \    local lastNumberIndexCount54\n    local lastNumberIndexCount55\n    local\
    \ lastNumberIndexCount56\n    local lastNumberIndexCount57\n    local lastNumberIndexCount58\n\
    \    local lastNumberIndexCount59\n    local lastNumberIndexCount60\n\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" =~ ^[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\\
    .[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return\
    \ 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[\
    \ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n \
    \ [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] ||\
    \ return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] ||\
    \ return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n\
    \  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~\
    \ ^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\\
    .[0-9]+\\.[0-9]+\\.[0-9]+$ ]] || return 1\n  [[ \"$list\" =~ ^[0-9]+\\.[0-9]+\\\
    .\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvtvvu6a5.sh: line 36: syntax error in conditional expression

    /tmp/tmpvtvvu6a5.sh: line 37: syntax error near `}''

    /tmp/tmpvtvvu6a5.sh: line 37: `}''

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j k l count\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \  local sorted=false\n  local sorted=false\n  local sorted=false\n  local sorted=false\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j k l count\n  local sorted=\"yes\"\n  local duplicates=\"no\"\n \
    \ local last\n  local count\n  local tmp\n\n  for i in \"${!list}\"; do\n    count=0\n\
    \    last=\"${list[i]}\"\n    for j in \"${!list}\"; do\n      if [ \"${list[j]}\"\
    \ == \"${last}\" ]; then\n        ((count++))\n      else\n        if [ \"${count}\"\
    \ -gt 1 ]; then\n          duplicates=\"yes\"\n          break\n        fi\n \
    \     fi\n    done\n    if [ \"${count}\" -gt 1 ]; then\n      sorted=\"no\"\n\
    \      break\n    fi\n  done\n\n  if [ \"${sorted}\" == \"yes\" ]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i imax\n  imax=\"${#list}\"\n  for (( i=0; i<${imax}; i++ )); do\n \
    \   local j\n    for (( j=0; j<i; j++ )); do\n      if [[ ${list[j]} -gt ${list[i]}\
    \ ]]; then\n        echo \"${list[j]} > ${list[i]}\"\n        return 1\n     \
    \ fi\n    done\n  done\n  echo \"${list}\"\n  return 0\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"${#sorted_list}\"\n  local sorted_list_index=0\n\
    \  local sorted_list_count2=0\n  local sorted_list_count3=0\n  local sorted_list_count4=0\n\
    \  local sorted_list_count5=0\n  local sorted_list_count6=0\n  local sorted_list_count7=0\n\
    \  local sorted_list_count8=0\n  local sorted_list_count9=0\n  local sorted_list_count10=0\n\
    \  local sorted_list_count11=0\n  local sorted_list_count12=0\n  local sorted_list_count13=0\n\
    \  local sorted_list_count14=0\n  local sorted_list_count15=0\n  local sorted_list_count16=0\n\
    \  local sorted_list_count17=0\n  local sorted_list_count18=0\n  local sorted_list_count19=0\n\
    \  local sorted_list_count20=0\n  local sorted_list_count21=0\n  local sorted_list_count22=0\n\
    \  local sorted_list_count23=0\n  local sorted_list_count24=0\n  local sorted_list_count25=0\n\
    \  local sorted_list_count26=0\n  local sorted_list_count27=0\n  local sorted_list_count28=0\n\
    \  local sorted_list_count29=0\n  local sorted_list_count30=0\n  local sorted_list_count31=0\n\
    \  local sorted_list_count32=0\n  local sorted_list_count33=0\n  local sorted_list_count34=0\n\
    \  local sorted_list_count35=0\n  local sorted_list_count36=0\n  local sorted_list_count37=0\n\
    \  local sorted_list_count38=0\n  local sorted_list_count39=0\n  local sorted_list_count40=0\n\
    \  local sorted_list_count41=0\n  local sorted_list_count42=0\n  local sorted_list_count43=0\n\
    \  local sorted_list_count44=0\n  local sorted_list_count45=0\n  local sorted_list_count46=0\n\
    \  local sorted_list_count47=0\n  local sorted_list_count48=0\n  local sorted_list_count49=0\n\
    \  local sorted_list_count50=0\n  local sorted_list_count51=0\n  local sorted_list_count52=0\n\
    \  local sorted_list_count53=0\n  local sorted_list_count54=0\n  local sorted_list_count55=0\n\
    \  local sorted_list_count56=0\n  local sorted_list_count57=0\n  local sorted_list_count58=0\n\
    \  local sorted_list_count59=0\n  local sorted_list_count60=0\n  local sorted_list_count61=0\n\
    \  local sorted_list_count62=0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_count\n \
    \ local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=()\n\
    \  local list=\"$1\"\n  local i\n  local j\n  local count\n  local last\n  local\
    \ tmp\n  local tmp2\n  local tmp3\n  local tmp4\n  local tmp5\n  local tmp6\n\
    \  local tmp7\n  local tmp8\n  local tmp9\n  local tmp10\n  local tmp11\n  local\
    \ tmp12\n  local tmp13\n  local tmp14\n  local tmp15\n  local tmp16\n  local tmp17\n\
    \  local tmp18\n  local tmp19\n  local tmp20\n  local tmp21\n  local tmp22\n \
    \ local tmp23\n  local tmp24\n  local tmp25\n  local tmp26\n  local tmp27\n  local\
    \ tmp28\n  local tmp29\n  local tmp30\n  local tmp31\n  local tmp32\n  local tmp33\n\
    \  local tmp34\n  local tmp35\n  local tmp36\n  local tmp37\n  local tmp38\n \
    \ local tmp39\n  local tmp40\n  local tmp41\n  local tmp42\n  local tmp43\n  local\
    \ tmp44\n  local tmp45\n  local tmp46\n  local tmp47\n  local tmp48\n  local tmp49\n\
    \  local tmp50\n  local tmp51\n  local tmp52\n  local tmp53\n  local tmp54\n \
    \ local tmp55\n  local tmp56\n  local tmp57\n  local tmp58\n  local tmp59\n  local\
    \ tmp60\n  local tmp61\n  local tmp62\n  local tmp63\n  local tmp64\n  local tmp65\n\
    \  local tmp66\n  local tmp67\n  local tmp68\n  local tmp69\n  local tmp70\n \
    \ local tmp71\n  local tmp72\n  local tmp73\n  local tmp74\n  local tmp75\n  local\
    \ tmp76\n  local tmp77\n  local tmp78\n  local tmp79\n  local tmp80\n  local tmp81\n\
    \  local tmp82\n  local tmp83\n  local tmp84\n  local tmp85\n  local tmp86\n \
    \ local tmp87\n  local tmp88\n  local tmp89\n  local tmp90\n  local tmp91\n  local\
    \ tmp92\n  local tmp93\n  local tmp94\n  local tmp95\n  local tmp96\n  local tmp97\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$sorted\"\
    \ | wc -c)\"\n    [ \"$count\" -gt 1 ] || return 0\n    local last=\"$sorted\"\
    \n    while [ \"$last\" != \"$list\" ]; do\n        local first=\"$list\"\n  \
    \      local i\n        for (( i=1; i<$count; i++ )); do\n            local j\n\
    \            for (( j=0; j<i; j++ )); do\n                if [ \"$last\" == \"\
    $sorted\" ]; then\n                    return 0\n                fi\n        \
    \        local k\n                for (( k=0; k<j; k++ )); do\n              \
    \      local m\n                    for (( m=0; m<k; m++ )); do\n            \
    \            if [ \"$sorted\" == \"$list\" ]; then\n                         \
    \   return 0\n                        fi\n                        local n\n  \
    \                      for (( n=0; n<m; n++ )); do\n                         \
    \   if [ \"$sorted\" == \"$list\" ]; then\n                                return\
    \ 0\n                            fi\n                            if [ \"$sorted\"\
    \ == \"$list\" ]; then\n                                return 0\n           \
    \                 fi\n                            if [ \"$sorted\" == \"$list\"\
    \ ]; then\n                                return 0\n                        \
    \    fi\n                            if [ \"$sorted\" == \"$list\" ]; then\n \
    \                               return 0\n                            fi\n   \
    \                         if [ \"$sorted\" == \"$list\" ]; then\n            \
    \                    return 0\n                            fi\n              \
    \              if [ \"$sorted\" == \"$list\" ]; then\n                       \
    \         return 0\n                            fi\n                         \
    \   if [ \"$sorted\" == \"$list\" ]; then\n                                return\
    \ 0\n                            fi\n                            if [ \"$sorted\"\
    \ == \"$list\" ]; then\n                                return 0\n           \
    \                 fi\n                            if [ \"$sorted\" == \"$list\"\
    \ ]; then\n                                return 0\n                        \
    \    fi\n                            if [ \"$sorted\" == \"$list\" ]; then\n \
    \                               return 0\n                            fi\n   \
    \                         if [ \"$sorted\" == \"$list\" ]; then\n            \
    \                    return 0\n                            fi\n              \
    \              if [ \"$sorted\" == \"$list\" ]; then\n                       \
    \         return 0\n                            fi\n                         \
    \   if [ \"$sorted\" == \"$list\" ]; then\n                                return\
    \ 0\n                            fi\n                            if [ \"$sorted\"\
    \ == \"$list\" ]; then\n                                return 0\n           \
    \                 fi\n                            if [ \"$sorted\" == \"$list\"\
    \ ]; then\n                                return 0\n                        \
    \    fi\n                            if [ \"$sorted\" == \"$list\" ]; then\n \
    \                               return 0\n                            fi\n   \
    \                         if [ \"$sorted\" == \"$list\" ]; then\n            \
    \                    return 0\n                            fi\n              \
    \              if [ \"$sorted\" == \"$list\" ]; then\n                       \
    \         return 0\n                            fi\n                         \
    \   if [ \"$sorted\" == \"$list\" ]; then\n                                return\
    \ 0\n                            fi\n                            if [ \"$sorted\"\
    \ == \"$list\" ]; then\n                                return \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnna5_fu8.sh: line 99: syntax error near unexpected token `}''

    /tmp/tmpnna5_fu8.sh: line 99: `}''

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  for i in \"${list[@]}\"; do\n    sorted=true\n\
    \    break\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l |\
    \ tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\" -eq \"$(echo \"$sorted_list\"\
    \ | wc -l | tr -d '[:space:]')\" ]] || return 1\n  local sorted_list_count=\"\
    $(echo \"$sorted_list\" | sort -u | wc -l | tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\"\
    \ -eq \"$(echo \"$sorted_list\" | wc -l | tr -d '[:space:]')\" ]] || return 1\n\
    \  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l | tr -d\
    \ '[:space:]')\"\n  [[ \"$sorted_list_count\" -eq \"$(echo \"$sorted_list\" |\
    \ wc -l | tr -d '[:space:]')\" ]] || return 1\n  local sorted_list_count=\"$(echo\
    \ \"$sorted_list\" | sort -u | wc -l | tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\"\
    \ -eq \"$(echo \"$sorted_list\" | wc -l | tr -d '[:space:]')\" ]] || return 1\n\
    \  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l | tr -d\
    \ '[:space:]')\"\n  [[ \"$sorted_list_count\" -eq \"$(echo \"$sorted_list\" |\
    \ wc -l | tr -d '[:space:]')\" ]] || return 1\n  local sorted_list_count=\"$(echo\
    \ \"$sorted_list\" | sort -u | wc -l | tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\"\
    \ -eq \"$(echo \"$sorted_list\" | wc -l | tr -d '[:space:]')\" ]] || return 1\n\
    \  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l | tr -d\
    \ '[:space:]')\"\n  [[ \"$sorted_list_count\" -eq \"$(echo \"$sorted_list\" |\
    \ wc -l | tr -d '[:space:]')\" ]] || return 1\n  local sorted_list_count=\"$(echo\
    \ \"$sorted_list\" | sort -u | wc -l | tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\"\
    \ -eq \"$(echo \"$sorted_list\" | wc -\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5g3lhmws.sh: line 33: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5g3lhmws.sh: line 58: unexpected argument to conditional binary operator

    /tmp/tmp5g3lhmws.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_length=${#sorted_list[@]}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_value\n\n  while (( $sorted_list_index\
    \ < $sorted_list_length )); do\n    sorted_list_value=${sorted_list[$sorted_list_index]}\n\
    \    sorted_list_count=$(( $sorted_list_count + 1 ))\n    sorted_list_index=$((\
    \ $sorted_list_index + 1 ))\n\n    if [ $sorted_list_count -gt 1 ]; then\n   \
    \   if [ \"$sorted_list_value\" != \"${sorted_list[$sorted_list_index-1]}\" ];\
    \ then\n        return False\n      fi\n    fi\n  done\n\n  return True\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgnuu19ha.sh: line 35: return: True: numeric argument required

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count\n  local i\n  local j\n  local sorted\n  local last\n  local last2\n\
    \  local last3\n  local last4\n  local last5\n  local last6\n  local last7\n \
    \ local last8\n  local last9\n  local last10\n  local last11\n  local last12\n\
    \  local last13\n  local last14\n  local last15\n  local last16\n  local last17\n\
    \  local last18\n  local last19\n  local last20\n  local last21\n  local last22\n\
    \  local last23\n  local last24\n  local last25\n  local last26\n  local last27\n\
    \  local last28\n  local last29\n  local last30\n  local last31\n  local last32\n\
    \  local last33\n  local last34\n  local last35\n  local last36\n  local last37\n\
    \  local last38\n  local last39\n  local last40\n  local last41\n  local last42\n\
    \  local last43\n  local last44\n  local last45\n  local last46\n  local last47\n\
    \  local last48\n  local last49\n  local last50\n  local last51\n  local last52\n\
    \  local last53\n  local last54\n  local last55\n  local last56\n  local last57\n\
    \  local last58\n  local last59\n  local last60\n  local last61\n  local last62\n\
    \  local last63\n  local last64\n  local last65\n  local last66\n  local last67\n\
    \  local last68\n  local last69\n  local last70\n  local last71\n  local last72\n\
    \  local last73\n  local last74\n  local last75\n  local last76\n  local last77\n\
    \  local last78\n  local last79\n  local last80\n  local last81\n  local last82\n\
    \  local last83\n  local last84\n  local last85\n  local last86\n  local last87\n\
    \  local last88\n  local last89\n  local last90\n  local last91\n  local last92\n\
    \  local last93\n  local last94\n  local last95\n  local last96\n  local last97\n\
    \  local last98\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count=0\n  local sorted=0\n  local last\n  local i\n\n  for i in $list;\
    \ do\n    last=\"$i\"\n  done\n\n  for i in $list; do\n    if [ \"$i\" != \"$last\"\
    \ ]; then\n      count=$((count+1))\n      if [ \"$count\" -gt 1 ]; then\n   \
    \     sorted=0\n        break\n      fi\n    fi\n    last=\"$i\"\n  done\n\n \
    \ if [ \"$sorted\" -eq 1 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_min=\"$(echo \"$sorted_list\" | sort | uniq | head\
    \ -n 1)\"\n  local sorted_list_count_max=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | tail -n 1)\"\n  local sorted_list_count_equal=\"$(echo \"$sorted_list\" |\
    \ sort | uniq | wc -l | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | head -n 1 | wc -l | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | wc -l | tr -d ' ')\"\n  local\
    \ sorted_list_count_equal_min=\"$(echo \"$sorted_list\" | sort | uniq | head -n\
    \ 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    $(echo \"$sorted_list\" | sort | uniq | head -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    $(echo \"$sorted_list\" | sort | uniq | head -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    $(echo \"$sorted_list\" | sort | uniq | head -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    $(echo \"$sorted_list\" | sort | uniq | head -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    $(echo \"$sorted_list\" | sort | uniq | head -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_max=\"\
    $(echo \"$sorted_list\" | sort | uniq | tail -n 1 | tr -d ' ')\"\n  local sorted_list_count_equal_min=\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpov78fluj.sh: line 57: unexpected EOF while looking for matching
    `"''

    /tmp/tmpov78fluj.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local last=\n  local i\n  for i in\
    \ $list; do\n    ((count++))\n    if [ \"$last\" != \"$i\" ]; then\n      if [\
    \ \"$sorted\" = false ]; then\n        sorted=true\n      fi\n      last=\"$i\"\
    \n    fi\n  done\n  if [ \"$sorted\" = false ]; then\n    return 1\n  else\n \
    \   return 0\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count\" -gt 1 ]] && return 0\n  local sorted_list_sorted=\"\
    $(echo \"$sorted_list\" | sort -n | uniq | wc -l)\"\n  [[ \"$sorted_list_sorted\"\
    \ -eq \"$sorted_list_count\" ]] && return 0\n  return 1\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list2=\"\"\n    local sorted_list3=\"\"\n    local sorted_list4=\"\
    \"\n    local sorted_list5=\"\"\n    local sorted_list6=\"\"\n    local sorted_list7=\"\
    \"\n    local sorted_list8=\"\"\n    local sorted_list9=\"\"\n    local sorted_list10=\"\
    \"\n    local sorted_list11=\"\"\n    local sorted_list12=\"\"\n    local sorted_list13=\"\
    \"\n    local sorted_list14=\"\"\n    local sorted_list15=\"\"\n    local sorted_list16=\"\
    \"\n    local sorted_list17=\"\"\n    local sorted_list18=\"\"\n    local sorted_list19=\"\
    \"\n    local sorted_list20=\"\"\n    local sorted_list21=\"\"\n    local sorted_list22=\"\
    \"\n    local sorted_list23=\"\"\n    local sorted_list24=\"\"\n    local sorted_list25=\"\
    \"\n    local sorted_list26=\"\"\n    local sorted_list27=\"\"\n    local sorted_list28=\"\
    \"\n    local sorted_list29=\"\"\n    local sorted_list30=\"\"\n    local sorted_list31=\"\
    \"\n    local sorted_list32=\"\"\n    local sorted_list33=\"\"\n    local sorted_list34=\"\
    \"\n    local sorted_list35=\"\"\n    local sorted_list36=\"\"\n    local sorted_list37=\"\
    \"\n    local sorted_list38=\"\"\n    local sorted_list39=\"\"\n    local sorted_list40=\"\
    \"\n    local sorted_list41=\"\"\n    local sorted_list42=\"\"\n    local sorted_list43=\"\
    \"\n    local sorted_list44=\"\"\n    local sorted_list45=\"\"\n    local sorted_list46=\"\
    \"\n    local sorted_list47=\"\"\n    local sorted_list48=\"\"\n    local sorted_list49=\"\
    \"\n    local sorted_list50=\"\"\n    local sorted_list51=\"\"\n    local sorted_list52=\"\
    \"\n    local sorted_list53=\"\"\n    local sorted_list54=\"\"\n    local sorted_list55=\"\
    \"\n    local sorted_list56=\"\"\n    local sorted_list57=\"\"\n    local sorted_list58=\"\
    \"\n    local sorted_list59=\"\"\n    local sorted_list60=\"\"\n    local sorted_list61=\"\
    \"\n    local sorted_list62=\"\"\n    local sorted_list63=\"\"\n    local sorted_list64=\"\
    \"\n    local sorted_list65=\"\"\n    local sorted_list66=\"\"\n    local sorted_list67=\"\
    \"\n    local sorted_list68=\"\"\n    local sorted_list69=\"\"\n    local sorted_list70=\"\
    \"\n    local sorted_list71=\"\"\n    local sorted_list72=\"\"\n    local sorted_list73=\"\
    \"\n    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]  || return 0\n  return 1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=( $1\
    \ )\n  local count=0\n  local last\n  local first\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_length=${#sorted_list[@]}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_value\n  local sorted_list_value_count\n\
    \  local sorted_list_value_index\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_value_length\n  local sorted_list_value_length\n  local sorted_list_value_length\n\
    \  local sorted_list_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_duplicates=0\n  local sorted_list_duplicate_count=0\n\
    \  local sorted_list_duplicate_counts=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_length=()\n\
    \  local sorted_list_duplicate_counts_length=()\n  local sorted_list_duplicate_counts_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$sorted\" == \"$list\" ]]\
    \ || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  for i in \"${list[@]}\"; do\n    sorted=true\n\
    \    break\n  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local numbers=$1\n\
    \    local sorted=0\n    local last\n    local count\n    local i\n    local j\n\
    \    local k\n    local count2\n    local count3\n    local count4\n    local\
    \ count5\n    local count6\n    local count7\n    local count8\n    local count9\n\
    \    local count10\n    local count11\n    local count12\n    local count13\n\
    \    local count14\n    local count15\n    local count16\n    local count17\n\
    \    local count18\n    local count19\n    local count20\n    local count21\n\
    \    local count22\n    local count23\n    local count24\n    local count25\n\
    \    local count26\n    local count27\n    local count28\n    local count29\n\
    \    local count30\n    local count31\n    local count32\n    local count33\n\
    \    local count34\n    local count35\n    local count36\n    local count37\n\
    \    local count38\n    local count39\n    local count40\n    local count41\n\
    \    local count42\n    local count43\n    local count44\n    local count45\n\
    \    local count46\n    local count47\n    local count48\n    local count49\n\
    \    local count50\n    local count51\n    local count52\n    local count53\n\
    \    local count54\n    local count55\n    local count56\n    local count57\n\
    \    local count58\n    local count59\n    local count60\n    local count61\n\
    \    local count62\n    local count63\n    local count64\n    local count65\n\
    \    local count66\n    local count67\n    local count68\n    local count69\n\
    \    local count70\n    local count71\n    local count72\n    local count73\n\
    \    local count74\n    local count75\n    local count76\n    local count77\n\
    \    local count78\n    local count79\n    local count80\n    local count81\n\
    \    local count82\n    local count83\n    local count84\n    local count85\n\
    \    local count86\n    local count87\n    local count88\n    local count89\n\
    \    local count90\n    local count91\n    local count92\n    local count93\n\
    \    local count94\n    local count95\n    local count96\n    local count97\n\
    \    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\"\
    \ = \"$sorted\" ]] || return 0\n    return 1\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list_count=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count2=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count3=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count4=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count5=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count6=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count7=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count8=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count9=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count10=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count11=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count12=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count13=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count14=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count15=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count16=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count17=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count18=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count19=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count20=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count21=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count22=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count23=$(( ${#sorted_list[@]}\
    \ - 1 ))\n    local sorted_list_count24=$(( ${#sorted_list[@]} - 1 ))\n    local\
    \ sorted_list_count25=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_count26=$((\
    \ ${#sorted_list[@]} - 1 ))\n    local sorted_list_count27=$(( ${#sorted_\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnetacgm0.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpnetacgm0.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local i\n  local j\n  local\
    \ sorted_list_count\n  local sorted_list_count_max\n  local sorted_list_count_min\n\
    \  local sorted_list_count_diff\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local\
    \ sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local\
    \ sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local\
    \ sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local\
    \ sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local\
    \ sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local sorted_list_count_diff_max\n\
    \  local sorted_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_count\n \
    \ local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=true\n\
    \  local list=$(echo \"$1\" | tr ' ' '\\n' | sort -n)\n  local count=0\n  local\
    \ last\n  local i\n  for i in $list; do\n    last=$i\n    count=$((count+1))\n\
    \  done\n  if [ \"$count\" -gt 1 ]; then\n    sorted=false\n  fi\n  echo \"$sorted\"\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]  || return 0\n  return 1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local last\n  local i\n  for i in \"\
    ${list}\"; do\n    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((count--))\n\
    \      sorted=true\n      if [ \"$count\" -eq 0 ]; then\n        break\n     \
    \ fi\n    fi\n    last=\"$i\"\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted_list=\"$2\"\n    local count\n    local i\n    local j\n  \
    \  local sorted\n    local tmp\n\n    sorted=false\n    for ((i=0; i<${#list};\
    \ i++)); do\n        count=0\n        for ((j=0; j<${#sorted_list}; j++)); do\n\
    \            if [[ ${sorted_list[j]} == ${list[i]} ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ ${count} -gt 1 ]]; then\n       \
    \     sorted=true\n            break\n        fi\n    done\n    if [[ ${sorted}\
    \ = true ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_2=\"$(echo \"$sorted_list\" | sort | uniq -d | wc\
    \ -l)\"\n  [[ \"$sorted_list_count\" -eq \"$sorted_list_count_2\" ]]\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local i j prev prev2 prev3 prev4 prev5 prev6 prev7 prev8 prev9 prev10\n\
    \    local count\n    local sorted\n    local tmp\n\n    sorted=false\n    count=0\n\
    \    for ((i=0; i<${#list}; i++)); do\n        if [[ ${list[i]} == ${list[i+1]}\
    \ ]]; then\n            ((count++))\n        fi\n    done\n    if [[ ${count}\
    \ -gt 1 ]]; then\n        sorted=true\n    elif [[ ${count} == 0 ]]; then\n  \
    \      sorted=true\n    else\n        for ((i=0; i<${#list}; i++)); do\n     \
    \       if [[ ${list[i]} -gt ${list[i+1]} ]]; then\n                sorted=true\n\
    \                break\n            fi\n        done\n    fi\n    if [[ ${sorted}\
    \ == true ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | gtr -s \" \")\"\n  local sorted_list_count_not_unique_not_sorted=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \")\"\
    \n  local sorted_list_count_not_unique_not_sorted_not_unique=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" | gtr -s \" \")\"\n\n  if\
    \ [[ $sorted_list_count -gt 1 ]]; then\n    return 0\n  elif [[ $sorted_list_count_not_unique\
    \ -gt 1 ]]; then\n    return 1\n  elif [[ $sorted_list_count_not_unique_not_sorted\
    \ -gt 1 ]]; then\n    return 1\n  elif [[ $sorted_list_count_not_unique_not_sorted_not_unique\
    \ -gt 1 ]]; then\n    return 1\n  else\n    return 0\n  fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpphh9wezd.sh: line 19: gtr: command not found

    /tmp/tmpphh9wezd.sh: line 20: gtr: command not found

    /tmp/tmpphh9wezd.sh: line 20: gtr: command not found

    /tmp/tmpphh9wezd.sh: line 21: gtr: command not found

    /tmp/tmpphh9wezd.sh: line 21: gtr: command not found

    /tmp/tmpphh9wezd.sh: line 21: gtr: command not found

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == *\"$sorted\"\
    * ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l |\
    \ tr -d '[:space:]')\"\n  [[ \"$sorted_list_count\" -eq \"$(echo \"$sorted_list\"\
    \ | wc -l | tr -d '[:space:]')\" ]] || return 1\n  local sorted_list_sorted=\"\
    $(echo \"$sorted_list\" | sort -n | tr -d '[:space:]')\"\n  [[ \"$sorted_list_sorted\"\
    \ == \"$sorted_list\" ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count2=\"$(echo \"$sorted_list\" | sort | uniq -d | wc -l)\"\
    \n  if [ \"$sorted_list_count\" -eq \"$sorted_list_count2\" ]; then\n    echo\
    \ \"True\"\n  else\n    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list_count=$(( ${#sorted_list[@]} - 1 ))\n    local sorted_list_index=0\n\
    \    local sorted_list_count2=0\n    local sorted_list_index2=0\n    local sorted_list_count3=0\n\
    \    local sorted_list_index3=0\n    local sorted_list_count4=0\n    local sorted_list_index4=0\n\
    \    local sorted_list_count5=0\n    local sorted_list_index5=0\n    local sorted_list_count6=0\n\
    \    local sorted_list_index6=0\n    local sorted_list_count7=0\n    local sorted_list_index7=0\n\
    \    local sorted_list_count8=0\n    local sorted_list_index8=0\n    local sorted_list_count9=0\n\
    \    local sorted_list_index9=0\n    local sorted_list_count10=0\n    local sorted_list_index10=0\n\
    \    local sorted_list_count11=0\n    local sorted_list_index11=0\n    local sorted_list_count12=0\n\
    \    local sorted_list_index12=0\n    local sorted_list_count13=0\n    local sorted_list_index13=0\n\
    \    local sorted_list_count14=0\n    local sorted_list_index14=0\n    local sorted_list_count15=0\n\
    \    local sorted_list_index15=0\n    local sorted_list_count16=0\n    local sorted_list_index16=0\n\
    \    local sorted_list_count17=0\n    local sorted_list_index17=0\n    local sorted_list_count18=0\n\
    \    local sorted_list_index18=0\n    local sorted_list_count19=0\n    local sorted_list_index19=0\n\
    \    local sorted_list_count20=0\n    local sorted_list_index20=0\n    local sorted_list_count21=0\n\
    \    local sorted_list_index21=0\n    local sorted_list_count22=0\n    local sorted_list_index22=0\n\
    \    local sorted_list_count23=0\n    local sorted_list_index23=0\n    local sorted_list_count24=0\n\
    \    local sorted_list_index24=0\n    local sorted_list_count25=0\n    local sorted_list_index25=0\n\
    \    local sorted_list_count26=0\n    local sorted_list_index26=0\n    local sorted_list_count27=0\n\
    \    local sorted_list_index27=0\n    local sorted_list_count28=0\n    local sorted_list_index28=0\n\
    \    local sorted_list_count29=0\n    local sorted_list_index29=0\n    local sorted_list_count30=0\n\
    \    local sorted_list_index30=0\n    local sorted_list_count31=0\n    local sorted_list_index31=0\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=1\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_index\n \
    \ local sorted_list_element_value_length\n  local sorted_list_element_value_length_index\n\
    \  local sorted_list_element_value_length_value\n  local sorted_list_element_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count_index\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \  local sorted_list_element_value_length_value_count\n  local sorted_list_element_value_length_value_count\n\
    \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" ==\
    \ \"$sorted\" ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list_to_check=$1\n\
    \    local sorted_list=\"\"\n    local sorted_list_count=0\n    local sorted_list_index=0\n\
    \    local sorted_list_length=$((${#list_to_check} - 1))\n    local sorted_list_duplicates=0\n\
    \    local sorted_list_duplicate_index=0\n    local sorted_list_duplicate_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number=$((${#list_to_check} - 1))\n \
    \   local sorted_list_duplicate_number_index=0\n    local sorted_list_duplicate_number_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count=0\n    local sorted_list_duplicate_number_count_index=0\n\
    \    local sorted_list_duplicate_number_count_length=$((${#list_to_check} - 1))\n\
    \    local sorted_list_duplicate_number_count_number=$((${#list_to_check} - 1))\n\
    \    local sorted_list_duplicate_number_count_number_index=0\n    local sorted_list_duplicate_number_count_number_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count=0\n    local\
    \ sorted_list_duplicate_number_count_number_count_index=0\n    local sorted_list_duplicate_number_count_number_count_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_index=0\n\
    \    local sorted_list_duplicate_number_count_number_count_number_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count_index=0\n\
    \    local sorted_list_duplicate_number_count_number_count_number_count_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count_number=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count_number_index=0\n\
    \    local sorted_list_duplicate_number_count_number_count_number_count_number_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count_number_count=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_number_count_number_count_number_count_index=0\n\
    \    local sorted_list_duplicate_number_count_number_count_number_count_number_count_length=$((${#list_to_check}\
    \ - 1))\n    local sorted_list_duplicate_number_count_\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local count\n    local i\n    local sorted\n    local last\n    local first\n\
    \    local last2\n    local last3\n    local last4\n    local last5\n    local\
    \ last6\n    local last7\n    local last8\n    local last9\n    local last10\n\
    \    local last11\n    local last12\n    local last13\n    local last14\n    local\
    \ last15\n    local last16\n    local last17\n    local last18\n    local last19\n\
    \    local last20\n    local last21\n    local last22\n    local last23\n    local\
    \ last24\n    local last25\n    local last26\n    local last27\n    local last28\n\
    \    local last29\n    local last30\n    local last31\n    local last32\n    local\
    \ last33\n    local last34\n    local last35\n    local last36\n    local last37\n\
    \    local last38\n    local last39\n    local last40\n    local last41\n    local\
    \ last42\n    local last43\n    local last44\n    local last45\n    local last46\n\
    \    local last47\n    local last48\n    local last49\n    local last50\n    local\
    \ last51\n    local last52\n    local last53\n    local last54\n    local last55\n\
    \    local last56\n    local last57\n    local last58\n    local last59\n    local\
    \ last60\n    local last61\n    local last62\n    local last63\n    local last64\n\
    \    local last65\n    local last66\n    local last67\n    local last68\n    local\
    \ last69\n    local last70\n    local last71\n    local last72\n    local last73\n\
    \    local last74\n    local last75\n    local last76\n    local last77\n    local\
    \ last78\n    local last79\n    local last80\n    local last81\n    local last82\n\
    \    local last83\n    local last84\n    local last85\n    local last86\n    local\
    \ last87\n    local last88\n    local last89\n    local last90\n    local last91\n\
    \    local last92\n    local last93\n    local last94\n    local last95\n    local\
    \ last96\n    local last97\n    local last98\n    \n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  [[ \"$list\" == *\"$sorted\"*\
    \ ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n    [ \"$count\" -eq \"$list\" ] || return 1\n    [ \"$sorted\"\
    \ = \"$list\" ] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_not_zero=\"$(echo \"$sorted_list_count\" | grep -q\
    \ 0)\"\n  local sorted_list_count_not_one=\"$(echo \"$sorted_list_count\" | grep\
    \ -q 1)\"\n  local sorted_list_count_not_equal=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 2)\"\n  local sorted_list_count_not_sorted=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 3)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 4)\"\n  local sorted_list_count_not_sorted=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 5)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 6)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 7)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 8)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 9)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 10)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 11)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 12)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 13)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 14)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 15)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 16)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 17)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 18)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 19)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 20)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 21)\"\n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list_count\"\
    \ | grep -q 22)\"\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list2=\"$2\"\n  local sorted_list3=\"$3\"\n  local sorted_list4=\"\
    $4\"\n  local sorted_list5=\"$5\"\n  local sorted_list6=\"$6\"\n  local sorted_list7=\"\
    $7\"\n  local sorted_list8=\"$8\"\n  local sorted_list9=\"$9\"\n  local sorted_list10=\"\
    $10\"\n  local sorted_list11=\"$11\"\n  local sorted_list12=\"$12\"\n  local sorted_list13=\"\
    $13\"\n  local sorted_list14=\"$14\"\n  local sorted_list15=\"$15\"\n  local sorted_list16=\"\
    $16\"\n  local sorted_list17=\"$17\"\n  local sorted_list18=\"$18\"\n  local sorted_list19=\"\
    $19\"\n  local sorted_list20=\"$20\"\n  local sorted_list21=\"$21\"\n  local sorted_list22=\"\
    $22\"\n  local sorted_list23=\"$23\"\n  local sorted_list24=\"$24\"\n  local sorted_list25=\"\
    $25\"\n  local sorted_list26=\"$26\"\n  local sorted_list27=\"$27\"\n  local sorted_list28=\"\
    $28\"\n  local sorted_list29=\"$29\"\n  local sorted_list30=\"$30\"\n  local sorted_list31=\"\
    $31\"\n  local sorted_list32=\"$32\"\n  local sorted_list33=\"$33\"\n  local sorted_list34=\"\
    $34\"\n  local sorted_list35=\"$35\"\n  local sorted_list36=\"$36\"\n  local sorted_list37=\"\
    $37\"\n  local sorted_list38=\"$38\"\n  local sorted_list39=\"$39\"\n  local sorted_list40=\"\
    $40\"\n  local sorted_list41=\"$41\"\n  local sorted_list42=\"$42\"\n  local sorted_list43=\"\
    $43\"\n  local sorted_list44=\"$44\"\n  local sorted_list45=\"$45\"\n  local sorted_list46=\"\
    $46\"\n  local sorted_list47=\"$47\"\n  local sorted_list48=\"$48\"\n  local sorted_list49=\"\
    $49\"\n  local sorted_list50=\"$50\"\n  local sorted_list51=\"$51\"\n  local sorted_list52=\"\
    $52\"\n  local sorted_list53=\"$53\"\n  local sorted_list54=\"$54\"\n  local sorted_list55=\"\
    $55\"\n  local sorted_list56=\"$56\"\n  local sorted_list57=\"$57\"\n  local sorted_list58=\"\
    $58\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavigk1va.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpavigk1va.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -u)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" != \"$sorted\"\
    \ ]] || return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list_length=${#1}\n\
    \  local sorted_length=${#1}\n  local i\n  local j\n  local sorted_list\n  local\
    \ sorted_list_length\n  local sorted_list_i\n  local sorted_list_j\n  local sorted_list_i_index\n\
    \  local sorted_list_j_index\n  local sorted_list_i_length\n  local sorted_list_j_length\n\
    \  local sorted_list_i_element\n  local sorted_list_j_element\n  local sorted_list_i_element_index\n\
    \  local sorted_list_j_element_index\n  local sorted_list_i_element_value\n  local\
    \ sorted_list_j_element_value\n  local sorted_list_i_element_value_index\n  local\
    \ sorted_list_j_element_value_index\n  local sorted_list_i_element_value_length\n\
    \  local sorted_list_j_element_value_length\n  local sorted_list_i_element_value_length_index\n\
    \  local sorted_list_j_element_value_length_index\n  local sorted_list_i_element_value_length_index_value\n\
    \  local sorted_list_j_element_value_length_index_value\n  local sorted_list_i_element_value_length_index_value_length\n\
    \  local sorted_list_j_element_value_length_index_value_length\n  local sorted_list_i_element_value_length_index_value_length_index\n\
    \  local sorted_list_j_element_value_length_index_value_length_index\n  local\
    \ sorted_list_i_element_value_length_index_value_length_index_value\n  local sorted_list_j_element_value_length_index_value_length_index_value\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length_index\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index_value_length_index\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length_index_value_length_index\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_j_element_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_i_element_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\n    local i=\n    local j=\n    local count=\n    local last=\n\
    \    local lastCount=\n    local lastLast=\n    local lastLastCount=\n    local\
    \ lastLastLast=\n    local lastLastLastCount=\n    local lastLastLastLast=\n \
    \   local lastLastLastLastCount=\n    local lastLastLastLastLast=\n    local lastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLast=\n    local lastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLast=\n    local lastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLastLastLastLastLastLastLastCount=\n    local lastLastLastLastLastLastLastLastLastLastLastLastLastCount=\n\
    \    local lastLastLastLastLastLast\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j count tmp\n  count=0\n  for (( i=0; i<${#list}; i++ )); do\n   \
    \ for (( j=0; j<${#list}; j++ )); do\n      if [[ ${list[i]} -gt ${list[j]} ]];\
    \ then\n        (( count++ ))\n      fi\n    done\n  done\n  if (( count > 1 ));\
    \ then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list_length=${#sorted_list[@]}\n    local sorted_list_count=0\n\
    \    local sorted_list_index=0\n    local sorted_list_count2=0\n    local sorted_list_index2=0\n\
    \    local sorted_list_count3=0\n    local sorted_list_index3=0\n    local sorted_list_count4=0\n\
    \    local sorted_list_index4=0\n    local sorted_list_count5=0\n    local sorted_list_index5=0\n\
    \    local sorted_list_count6=0\n    local sorted_list_index6=0\n    local sorted_list_count7=0\n\
    \    local sorted_list_index7=0\n    local sorted_list_count8=0\n    local sorted_list_index8=0\n\
    \    local sorted_list_count9=0\n    local sorted_list_index9=0\n    local sorted_list_count10=0\n\
    \    local sorted_list_index10=0\n    local sorted_list_count11=0\n    local sorted_list_index11=0\n\
    \    local sorted_list_count12=0\n    local sorted_list_index12=0\n    local sorted_list_count13=0\n\
    \    local sorted_list_index13=0\n    local sorted_list_count14=0\n    local sorted_list_index14=0\n\
    \    local sorted_list_count15=0\n    local sorted_list_index15=0\n    local sorted_list_count16=0\n\
    \    local sorted_list_index16=0\n    local sorted_list_count17=0\n    local sorted_list_index17=0\n\
    \    local sorted_list_count18=0\n    local sorted_list_index18=0\n    local sorted_list_count19=0\n\
    \    local sorted_list_index19=0\n    local sorted_list_count20=0\n    local sorted_list_index20=0\n\
    \    local sorted_list_count21=0\n    local sorted_list_index21=0\n    local sorted_list_count22=0\n\
    \    local sorted_list_index22=0\n    local sorted_list_count23=0\n    local sorted_list_index23=0\n\
    \    local sorted_list_count24=0\n    local sorted_list_index24=0\n    local sorted_list_count25=0\n\
    \    local sorted_list_index25=0\n    local sorted_list_count26=0\n    local sorted_list_index26=0\n\
    \    local sorted_list_count27=0\n    local sorted_list_index27=0\n    local sorted_list_count28=0\n\
    \    local sorted_list_index28=0\n    local sorted_list_count29=0\n    local sorted_list_index29=0\n\
    \    local sorted_list_count30=0\n    local sorted_list_index30=0\n    local sorted_list_count31=0\n\
    \    local sorted_list_index31=0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_minus_one=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | awk '{print $1 - 1}')\"\n  local sorted_list_count_minus_two=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 2}')\"\n  local sorted_list_count_minus_three=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 3}')\"\n  local\
    \ sorted_list_count_minus_four=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 4}')\"\n  local sorted_list_count_minus_five=\"$(echo \"\
    $sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 5}')\"\n  local sorted_list_count_minus_six=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 6}')\"\n  local\
    \ sorted_list_count_minus_seven=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 7}')\"\n  local sorted_list_count_minus_eight=\"$(echo \"\
    $sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 8}')\"\n  local sorted_list_count_minus_nine=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 9}')\"\n  local\
    \ sorted_list_count_minus_ten=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 10}')\"\n  local sorted_list_count_minus_eleven=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 11}')\"\n  local sorted_list_count_minus_twelve=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 12}')\"\n  local\
    \ sorted_list_count_minus_thirteen=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l | awk '{print $1 - 13}')\"\n  local sorted_list_count_minus_fourteen=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 14}')\"\n  local sorted_list_count_minus_fifteen=\"\
    $(echo \"$\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp59me593j.sh: line 54: unexpected EOF while looking for matching
    `"''

    /tmp/tmp59me593j.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_value\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n  local\
    \ sorted_list_value_length_value\n  local sorted_list_value_length_index\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_count=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count2=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count3=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count4=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count5=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count6=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count7=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count8=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count9=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count10=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count11=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count12=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count13=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count14=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count15=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count16=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count17=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count18=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count19=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count20=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count21=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count22=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count23=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count24=$(( ${#sorted_list[@]}\
    \ - 1 ))\n  local sorted_list_count25=$(( ${#sorted_list[@]} - 1 ))\n  local sorted_list_count26=$((\
    \ ${#sorted_list[@]} - 1 ))\n  local sorted_list_count27=$(( ${#sorted_\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpioq41blf.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpioq41blf.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort <<<\"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]] ||\
    \ return 1\n  [[ \"$list\" == \"$sorted\" ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  [[ \"$sorted\" == \"$list\" ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local item\n  local count\n  local i\n  local j\n  local\
    \ last_item\n  local last_count\n  local last_i\n  local last_j\n  local last_last_item\n\
    \  local last_last_count\n  local last_last_i\n  local last_last_j\n  for (( i\
    \ = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo \"${list[i]}\"\
    \ | wc -c)\n    if [[ ${count} -eq 1 ]]; then\n      sorted=true\n      break\n\
    \    fi\n  done\n  if [[ ${sorted} = true ]]; then\n    return 0\n  fi\n  for\
    \ (( i = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo \"\
    ${list[i]}\" | wc -c)\n    if [[ ${count} -gt 1 ]]; then\n      sorted=false\n\
    \      break\n    fi\n  done\n  if [[ ${sorted} = true ]]; then\n    return 0\n\
    \  fi\n  for (( i = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo\
    \ \"${list[i]}\" | wc -c)\n    if [[ ${count} -eq 1 ]]; then\n      sorted=true\n\
    \      break\n    fi\n  done\n  if [[ ${sorted} = true ]]; then\n    return 0\n\
    \  fi\n  for (( i = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo\
    \ \"${list[i]}\" | wc -c)\n    if [[ ${count} -gt 1 ]]; then\n      sorted=false\n\
    \      break\n    fi\n  done\n  if [[ ${sorted} = true ]]; then\n    return 0\n\
    \  fi\n  for (( i = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo\
    \ \"${list[i]}\" | wc -c)\n    if [[ ${count} -eq 1 ]]; then\n      sorted=true\n\
    \      break\n    fi\n  done\n  if [[ ${sorted} = true ]]; then\n    return 0\n\
    \  fi\n  for (( i = 0; i < ${#list}; i++ )); do\n    item=${list[i]}\n    count=$(echo\
    \ \"${list[i]}\" | wc -c)\n    if [[ ${count} -gt 1 ]]; then\n      sorted=false\n\
    \      break\n    fi\n  done\n  if [[ ${sorted} = true ]]; then\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvtm0m269.sh: line 95: syntax error near unexpected token `}''

    /tmp/tmpvtm0m269.sh: line 95: `}''

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count\n  local i\n  local last\n  local sorted\n  local sorted2\n  local\
    \ sorted3\n  local sorted4\n  local sorted5\n  local sorted6\n  local sorted7\n\
    \  local sorted8\n  local sorted9\n  local sorted10\n  local sorted11\n  local\
    \ sorted12\n  local sorted13\n  local sorted14\n  local sorted15\n  local sorted16\n\
    \  local sorted17\n  local sorted18\n  local sorted19\n  local sorted20\n  local\
    \ sorted21\n  local sorted22\n  local sorted23\n  local sorted24\n  local sorted25\n\
    \  local sorted26\n  local sorted27\n  local sorted28\n  local sorted29\n  local\
    \ sorted30\n  local sorted31\n  local sorted32\n  local sorted33\n  local sorted34\n\
    \  local sorted35\n  local sorted36\n  local sorted37\n  local sorted38\n  local\
    \ sorted39\n  local sorted40\n  local sorted41\n  local sorted42\n  local sorted43\n\
    \  local sorted44\n  local sorted45\n  local sorted46\n  local sorted47\n  local\
    \ sorted48\n  local sorted49\n  local sorted50\n  local sorted51\n  local sorted52\n\
    \  local sorted53\n  local sorted54\n  local sorted55\n  local sorted56\n  local\
    \ sorted57\n  local sorted58\n  local sorted59\n  local sorted60\n  local sorted61\n\
    \  local sorted62\n  local sorted63\n  local sorted64\n  local sorted65\n  local\
    \ sorted66\n  local sorted67\n  local sorted68\n  local sorted69\n  local sorted70\n\
    \  local sorted71\n  local sorted72\n  local sorted73\n  local sorted74\n  local\
    \ sorted75\n  local sorted76\n  local sorted77\n  local sorted78\n  local sorted79\n\
    \  local sorted80\n  local sorted81\n  local sorted82\n  local sorted83\n  local\
    \ sorted84\n  local sorted85\n  local sorted86\n  local sorted87\n  local sorted88\n\
    \  local sorted89\n  local sorted90\n  local sorted91\n  local sorted92\n  local\
    \ sorted93\n  local sorted94\n  local sorted95\n  local sorted96\n  local sorted97\n\
    \  local sorted98\n  local sorted99\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  [[ \"$list\" =~ $sorted ]] ||\
    \ return 1\n  [[ \"$list\" =~ $sorted && \"$list\" != $sorted ]] || return 0\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_length=${#sorted_list}\n    local sorted_list_count=1\n\
    \    local sorted_list_index=0\n    local sorted_list_item\n    local sorted_list_item_count\n\
    \    local sorted_list_item_value\n    local sorted_list_item_value_index\n  \
    \  local sorted_list_item_value_length\n    local sorted_list_item_value_count\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_item_value_count\n    local sorted_list_item_value_length\n\
    \    local sorted_list_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_value\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" =~ $sorted ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n\n  while (( $sorted_list_index\
    \ < $sorted_list_length )); do\n    sorted_list_element=${sorted_list[$sorted_list_index]}\n\
    \    sorted_list_count=$(( $sorted_list_count + 1 ))\n    if (( $sorted_list_count\
    \ > 1 )); then\n      (( $sorted_list_index == 0 )) && return 0\n      (( $sorted_list_element\
    \ > ${sorted_list[$sorted_list_index-1]} )) && return 0\n    fi\n    (( $sorted_list_element\
    \ < ${sorted_list[$sorted_list_index]} )) && return 0\n    (( $sorted_list_index\
    \ == $sorted_list_length )) && return 1\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+1]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index-1]}\
    \ )) && return 0\n    (( $sorted_list_element == ${sorted_list[$sorted_list_index-1]}\
    \ )) && return 0\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+1]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index+2]}\
    \ )) && return 0\n    (( $sorted_list_element == ${sorted_list[$sorted_list_index+2]}\
    \ )) && return 0\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+3]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index+4]}\
    \ )) && return 0\n    (( $sorted_list_element == ${sorted_list[$sorted_list_index+4]}\
    \ )) && return 0\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+5]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index+6]}\
    \ )) && return 0\n    (( $sorted_list_element == ${sorted_list[$sorted_list_index+6]}\
    \ )) && return 0\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+7]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index+8]}\
    \ )) && return 0\n    (( $sorted_list_element == ${sorted_list[$sorted_list_index+8]}\
    \ )) && return 0\n    (( $sorted_list_element > ${sorted_list[$sorted_list_index+9]}\
    \ )) && return 0\n    (( $sorted_list_element < ${sorted_list[$sorted_list_index+10]}\
    \ )) && return \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_rnxilki.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmp_rnxilki.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  local count\n  local j\n  local k\n  local\
    \ temp\n  local count2\n  local count3\n  local count4\n  local count5\n  local\
    \ count6\n  local count7\n  local count8\n  local count9\n  local count10\n  local\
    \ count11\n  local count12\n  local count13\n  local count14\n  local count15\n\
    \  local count16\n  local count17\n  local count18\n  local count19\n  local count20\n\
    \  local count21\n  local count22\n  local count23\n  local count24\n  local count25\n\
    \  local count26\n  local count27\n  local count28\n  local count29\n  local count30\n\
    \  local count31\n  local count32\n  local count33\n  local count34\n  local count35\n\
    \  local count36\n  local count37\n  local count38\n  local count39\n  local count40\n\
    \  local count41\n  local count42\n  local count43\n  local count44\n  local count45\n\
    \  local count46\n  local count47\n  local count48\n  local count49\n  local count50\n\
    \  local count51\n  local count52\n  local count53\n  local count54\n  local count55\n\
    \  local count56\n  local count57\n  local count58\n  local count59\n  local count60\n\
    \  local count61\n  local count62\n  local count63\n  local count64\n  local count65\n\
    \  local count66\n  local count67\n  local count68\n  local count69\n  local count70\n\
    \  local count71\n  local count72\n  local count73\n  local count74\n  local count75\n\
    \  local count76\n  local count77\n  local count78\n  local count79\n  local count80\n\
    \  local count81\n  local count82\n  local count83\n  local count84\n  local count85\n\
    \  local count86\n  local count87\n  local count88\n  local count89\n  local count90\n\
    \  local count91\n  local count92\n  local count93\n  local count94\n  local count95\n\
    \  local count96\n  local count97\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=( $(sort\
    \ -n <<< \"$1\") )\n  local length=${#sorted[@]}\n  local i=0\n  while [ $i -lt\
    \ $length ]; do\n    local j=$((i+1))\n    if [[ $sorted[$i] -gt $sorted[$j] ]];\
    \ then\n      return 0\n    fi\n    i=$j\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpivy1h4ww.sh: line 22: [[: 5[0]: syntax error: invalid arithmetic
    operator (error token is "[0]")

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=false\n    local count=0\n    local item\n    for item; do\n\
    \        if [ \"$item\" -gt \"$list\" ]; then\n            sorted=true\n     \
    \       break\n        fi\n        count=$((count+1))\n    done\n    if [ \"$count\"\
    \ -gt 1 ]; then\n        sorted=false\n    fi\n    echo \"$sorted\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=()\n\
    \  local i\n  for i in $@; do\n    sorted+=(\"$i\")\n  done\n  local count\n \
    \ for (( count = 0; count < ${#sorted[@]}; count++ )); do\n    (( sorted[count]\
    \ == sorted[count-1] )) && return 0\n  done\n  return 1\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_length\n\
    \  local sorted_list_element_value_length_index\n  local sorted_list_element_value_length_value\n\
    \  local sorted_list_element_value_length_value_index\n  local sorted_list_element_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_index\n  local sorted_list_element_value_length_value_length_value\n\
    \  local sorted_list_element_value_length_value_length_value_index\n  local sorted_list_element_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_index\n  local\
    \ sorted_list_element_value_length_value_length_value_length_value\n  local sorted_list_element_value_length_value_length_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_index\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length\n\
    \  local sorted_list_element_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\n\
    \  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=()\n\
    \  local i\n  for i in $@; do\n    sorted+=(\"$i\")\n  done\n  local count\n \
    \ count=0\n  for i in \"${sorted[@]}\"; do\n    ((count++))\n  done\n  (( count\
    \ == ${#sorted[@]} ))\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_minus_one=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | awk '{print $1 - 1}')\"\n  local sorted_list_count_minus_two=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 2}')\"\n  local sorted_list_count_minus_three=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 3}')\"\n  local\
    \ sorted_list_count_minus_four=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 4}')\"\n  local sorted_list_count_minus_five=\"$(echo \"\
    $sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 5}')\"\n  local sorted_list_count_minus_six=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 6}')\"\n  local\
    \ sorted_list_count_minus_seven=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 7}')\"\n  local sorted_list_count_minus_eight=\"$(echo \"\
    $sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 8}')\"\n  local sorted_list_count_minus_nine=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 9}')\"\n  local\
    \ sorted_list_count_minus_ten=\"$(echo \"$sorted_list\" | sort | uniq | wc -l\
    \ | awk '{print $1 - 10}')\"\n  local sorted_list_count_minus_eleven=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 11}')\"\n  local sorted_list_count_minus_twelve=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 12}')\"\n  local\
    \ sorted_list_count_minus_thirteen=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l | awk '{print $1 - 13}')\"\n  local sorted_list_count_minus_fourteen=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $1 - 14}')\"\n  local sorted_list_count_minus_fifteen=\"\
    $(echo \"$\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp59me593j.sh: line 54: unexpected EOF while looking for matching
    `"''

    /tmp/tmp59me593j.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"${#sorted_list}\"\n  local sorted_list_index\n\
    \  local sorted_list_count2\n  local sorted_list_index2\n  local sorted_list_count3\n\
    \  local sorted_list_index3\n  local sorted_list_count4\n  local sorted_list_index4\n\
    \  local sorted_list_count5\n  local sorted_list_index5\n  local sorted_list_count6\n\
    \  local sorted_list_index6\n  local sorted_list_count7\n  local sorted_list_index7\n\
    \  local sorted_list_count8\n  local sorted_list_index8\n  local sorted_list_count9\n\
    \  local sorted_list_index9\n  local sorted_list_count10\n  local sorted_list_index10\n\
    \  local sorted_list_count11\n  local sorted_list_index11\n  local sorted_list_count12\n\
    \  local sorted_list_index12\n  local sorted_list_count13\n  local sorted_list_index13\n\
    \  local sorted_list_count14\n  local sorted_list_index14\n  local sorted_list_count15\n\
    \  local sorted_list_index15\n  local sorted_list_count16\n  local sorted_list_index16\n\
    \  local sorted_list_count17\n  local sorted_list_index17\n  local sorted_list_count18\n\
    \  local sorted_list_index18\n  local sorted_list_count19\n  local sorted_list_index19\n\
    \  local sorted_list_count20\n  local sorted_list_index20\n  local sorted_list_count21\n\
    \  local sorted_list_index21\n  local sorted_list_count22\n  local sorted_list_index22\n\
    \  local sorted_list_count23\n  local sorted_list_index23\n  local sorted_list_count24\n\
    \  local sorted_list_index24\n  local sorted_list_count25\n  local sorted_list_index25\n\
    \  local sorted_list_count26\n  local sorted_list_index26\n  local sorted_list_count27\n\
    \  local sorted_list_index27\n  local sorted_list_count28\n  local sorted_list_index28\n\
    \  local sorted_list_count29\n  local sorted_list_index29\n  local sorted_list_count30\n\
    \  local sorted_list_index30\n  local sorted_list_count31\n  local sorted_list_index31\n\
    \  local sorted_list_count32\n  local sorted_list_index32\n  local sorted_list_count33\n\
    \  local sorted_list_index33\n  local sorted_list_count34\n  local sorted_list_index34\n\
    \  local sorted_list_count35\n  local sorted_list_index35\n  local sorted_list_count36\n\
    \  local sorted_list_index\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]  || return 0\n  return 1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list2=\"$2\"\n  local sorted_list3=\"$3\"\n  local sorted_list4=\"\
    $4\"\n  local sorted_list5=\"$5\"\n  local sorted_list6=\"$6\"\n  local sorted_list7=\"\
    $7\"\n  local sorted_list8=\"$8\"\n  local sorted_list9=\"$9\"\n  local sorted_list10=\"\
    $10\"\n  local sorted_list11=\"$11\"\n  local sorted_list12=\"$12\"\n  local sorted_list13=\"\
    $13\"\n  local sorted_list14=\"$14\"\n  local sorted_list15=\"$15\"\n  local sorted_list16=\"\
    $16\"\n  local sorted_list17=\"$17\"\n  local sorted_list18=\"$18\"\n  local sorted_list19=\"\
    $19\"\n  local sorted_list20=\"$20\"\n  local sorted_list21=\"$21\"\n  local sorted_list22=\"\
    $22\"\n  local sorted_list23=\"$23\"\n  local sorted_list24=\"$24\"\n  local sorted_list25=\"\
    $25\"\n  local sorted_list26=\"$26\"\n  local sorted_list27=\"$27\"\n  local sorted_list28=\"\
    $28\"\n  local sorted_list29=\"$29\"\n  local sorted_list30=\"$30\"\n  local sorted_list31=\"\
    $31\"\n  local sorted_list32=\"$32\"\n  local sorted_list33=\"$33\"\n  local sorted_list34=\"\
    $34\"\n  local sorted_list35=\"$35\"\n  local sorted_list36=\"$36\"\n  local sorted_list37=\"\
    $37\"\n  local sorted_list38=\"$38\"\n  local sorted_list39=\"$39\"\n  local sorted_list40=\"\
    $40\"\n  local sorted_list41=\"$41\"\n  local sorted_list42=\"$42\"\n  local sorted_list43=\"\
    $43\"\n  local sorted_list44=\"$44\"\n  local sorted_list45=\"$45\"\n  local sorted_list46=\"\
    $46\"\n  local sorted_list47=\"$47\"\n  local sorted_list48=\"$48\"\n  local sorted_list49=\"\
    $49\"\n  local sorted_list50=\"$50\"\n  local sorted_list51=\"$51\"\n  local sorted_list52=\"\
    $52\"\n  local sorted_list53=\"$53\"\n  local sorted_list54=\"$54\"\n  local sorted_list55=\"\
    $55\"\n  local sorted_list56=\"$56\"\n  local sorted_list57=\"$57\"\n  local sorted_list58=\"\
    $58\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavigk1va.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpavigk1va.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \  if [ \"$sorted_list_count\" -eq 1 ]; then\n    echo \"$sorted_list\" | sort\
    \ -n | uniq -d | wc -l\n  else\n    echo \"$sorted_list\" | sort -n | uniq -d\
    \ | wc -l\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_index\n \
    \ local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n  local\
    \ sorted_list_index=0\n  local sorted_list_element\n  local sorted_list_element_count\n\
    \  local sorted_list_element_index\n  local sorted_list_element_value\n  local\
    \ sorted_list_element_value_count\n  local sorted_list_element_value_index\n \
    \ local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_value_count\n  local sorted_list_element_value_count\n\
    \  local sorted_list_element_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l)\"\n    if [ \"$sorted_list_count\" -eq \"1\" ]; then\n        echo \"$sorted_list\"\
    \ | sort -n | uniq -d | wc -l\n    else\n        echo \"$sorted_list\" | sort\
    \ -n | uniq -d | wc -l\n        echo \"$sorted_list\" | sort -n | uniq -d | wc\
    \ -l\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" ==\
    \ \"$sorted\" ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$sorted\" == \"$list\" ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | wc -w)\"\n  [[ \"$list\" != \"$sorted\" ]] || return 0\n  [[ \"$count\" -gt\
    \ 1 ]] || return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_length=${#sorted_list}\n  local i\n  local j\n  local sorted_list_count\n\
    \  local sorted_list_count_max\n  local sorted_list_count_min\n  local sorted_list_count_diff\n\
    \  local sorted_list_count_diff_max\n  local sorted_list_count_diff_min\n  local\
    \ sorted_list_count_diff_diff\n  local sorted_list_count_diff_diff_max\n  local\
    \ sorted_list_count_diff_diff_min\n  local sorted_list_count_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_max\n  local sorted_list_count_diff_diff_diff_min\n\
    \  local sorted_list_count_diff_diff_diff_diff\n  local sorted_list_count_diff_diff_diff_diff_max\n\
    \  local sorted_list_count_diff_diff_diff_diff_min\n  local sorted_list_count_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_max\n  local sorted_list_count_diff_diff_diff_diff_diff_min\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_max\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_min\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_max\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_min\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_max\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_min\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_max\n  local\
    \ sorted_list_count_diff_diff_diff_diff_diff_diff_diff_min\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_max\n  local\
    \ sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_min\n  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_max\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_min\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_max\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_min\n\
    \  local sorted_list_count_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff\n\
    \  local sorted_list_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local i count\n    local sorted\n    local last\n    local first\n\n   \
    \ sorted=false\n    first=${list[0]}\n    last=${list[-1]}\n    for ((i=0; i<${#list[@]};\
    \ i++)); do\n        count=$((${list[i]}+i))\n        if [[ $count -gt $((${#list[@]}-1))\
    \ ]]; then\n            sorted=true\n            break\n        fi\n    done\n\
    \    if [[ $sorted == true ]]; then\n        echo \"$list is sorted\"\n    else\n\
    \        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp7ks02do.sh: line 25: list: bad array subscript

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" = \"\
    $sorted\" ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"${#sorted_list}\"\n  local sorted_list_count_unique=\"\
    ${sorted_list_count}\"\n  local sorted_list_count_unique_sorted=\"0\"\n  local\
    \ sorted_list_count_unique_sorted_count=\"0\"\n  local sorted_list_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted=\"0\"\n  local\
    \ sorted_list_count_unique_sorted_count_unique_sorted_count=\"0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted=\"\
    0\"\n  local sorted_list_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique_sorted_count_unique\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \  local sorted_list_count2=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count3=\"\
    $(echo \"$sorted_list\" | uniq -d)\"\n  local sorted_list_count4=\"$(echo \"$sorted_list\"\
    \ | uniq -u)\"\n  local sorted_list_count5=\"$(echo \"$sorted_list\" | uniq -u)\"\
    \n  local sorted_list_count6=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count7=\"\
    $(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count8=\"$(echo \"$sorted_list\"\
    \ | uniq -u)\"\n  local sorted_list_count9=\"$(echo \"$sorted_list\" | uniq -u)\"\
    \n  local sorted_list_count10=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local\
    \ sorted_list_count11=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count12=\"\
    $(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count13=\"$(echo \"\
    $sorted_list\" | uniq -u)\"\n  local sorted_list_count14=\"$(echo \"$sorted_list\"\
    \ | uniq -u)\"\n  local sorted_list_count15=\"$(echo \"$sorted_list\" | uniq -u)\"\
    \n  local sorted_list_count16=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local\
    \ sorted_list_count17=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count18=\"\
    $(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count19=\"$(echo \"\
    $sorted_list\" | uniq -u)\"\n  local sorted_list_count20=\"$(echo \"$sorted_list\"\
    \ | uniq -u)\"\n  local sorted_list_count21=\"$(echo \"$sorted_list\" | uniq -u)\"\
    \n  local sorted_list_count22=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local\
    \ sorted_list_count23=\"$(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count24=\"\
    $(echo \"$sorted_list\" | uniq -u)\"\n  local sorted_list_count25=\"$(echo \"\
    $sorted_list\" | uniq -u)\"\n  local sorted_list_count26=\"$(echo \"$sorted_list\"\
    \ | uniq -u)\"\n  local sorted_list_count27=\"$(echo \"$sorted_list\" | uniq -u)\"\
    \n  local sorted_list_count28=\"$(echo \"$sorted_list\" | uniq -u)\"\n\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_equal=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l | gtr -s \" \")\"\n  local sorted_list_count_not_equal=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l | gtr -s \" \")\"\n  local sorted_list_count_not_equal_or_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \")\"\
    \n\n  if [ \"$sorted_list_count\" -eq \"1\" ]; then\n    return 0\n  elif [ \"\
    $sorted_list_count_equal\" -eq \"1\" ]; then\n    return 1\n  elif [ \"$sorted_list_count_not_equal\"\
    \ -eq \"1\" ]; then\n    return 0\n  elif [ \"$sorted_list_count_not_equal_or_equal\"\
    \ -eq \"1\" ]; then\n    return 1\n  else\n    return 0\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzrffadwh.sh: line 19: gtr: command not found

    /tmp/tmpzrffadwh.sh: line 20: gtr: command not found

    /tmp/tmpzrffadwh.sh: line 21: gtr: command not found

    /tmp/tmpzrffadwh.sh: line 21: gtr: command not found

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | awk '{print $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique\" | awk '{print $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique_is_less_than_or_equal_to_one\" | awk '{print\
    \ $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one\"\
    \ | awk '{print $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one\"\
    \ | awk '{print $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one\"\
    \ | awk '{print $1}')\"\n  local sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one=\"\
    $(echo \"$sorted_list_count_not_unique_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_is_less_than_or_equal_to_one_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsm3zsxn_.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmpsm3zsxn_.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j count prev tmp\n  count=0\n  prev=-1\n  for ((i=0; i<${#list}; i++));\
    \ do\n    count=$((count+1))\n    prev=$((prev+1))\n    if [[ $((i-1)) -eq 0 ]];\
    \ then\n      tmp=$list[i]\n    else\n      tmp=$list[i]\n      for ((j=$((i-1));\
    \ j>=0; j--)); do\n        if [[ $((j+1)) -eq ${#list} ]]; then\n          break\n\
    \        fi\n        if [[ $((j+1)) -eq $((i-1)) ]]; then\n          tmp=$list[j]\n\
    \          break\n        fi\n        if [[ $((list[j]>list[j+1])) ]]; then\n\
    \          tmp=$list[j]\n          break\n        fi\n      done\n    fi\n   \
    \ if [[ $((count-prev)) -eq 0 ]]; then\n      echo \"$tmp\"\n      break\n   \
    \ fi\n  done\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l\
    \ | tr -d ' ')\"\n    local sorted_list_count_2=\"$(echo \"$sorted_list\" | sort\
    \ -u | wc -l | tr -d ' ')\"\n    if [ \"$sorted_list_count\" -eq \"$sorted_list_count_2\"\
    \ ]; then\n        echo \"True\"\n    else\n        echo \"False\"\n    fi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=( $(sort\
    \ -n \"$1\") )\n  local length=${#sorted[@]}\n  local i\n  for i in $(seq 0 $((length\
    \ - 1)))\n  do\n    local j\n    for j in $(seq 0 $((length - 1)))\n    do\n \
    \     if [ \"$i\" -eq \"$j\" ] || [ \"$sorted[$i]\" -gt \"$sorted[$j]\" ]; then\n\
    \        echo \"$sorted[$i] is greater than $sorted[$j]\"\n        exit 0\n  \
    \    fi\n    done\n  done\n  echo \"$1 is sorted\"\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_length=${#sorted_list[@]}\n  local i\n  local j\n  local\
    \ sorted_list_count\n  local sorted_list_count_max\n  local sorted_list_count_min\n\
    \  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local\
    \ sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n\
    \  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n  local\
    \ sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n\
    \  local sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local\
    \ sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n\
    \  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local\
    \ sorted_list_count_min_index\n  local sorted_list_count_max_value\n  local sorted_list_count_min_value\n\
    \  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local\
    \ sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n\
    \  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n  local\
    \ sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n\
    \  local sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local\
    \ sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n\
    \  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local\
    \ sorted_list_count_min_index\n  local sorted_list_count_max_value\n  local sorted_list_count_min_value\n\
    \  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local\
    \ sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n\
    \  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n  local\
    \ sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local sorted_list_count_min_index\n\
    \  local sorted_list_count_max_value\n  local sorted_list_count_min_value\n  local\
    \ sorted_list_count_max_index\n  local sorted_list_count_min_index\n  local sorted_list_count_max_value\n\
    \  local sorted_list_count_min_value\n  local sorted_list_count_max_index\n  local\
    \ sorted_list_count_min_index\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list2=\"$2\"\n  local sorted_list3=\"$3\"\n  local sorted_list4=\"\
    $4\"\n  local sorted_list5=\"$5\"\n  local sorted_list6=\"$6\"\n  local sorted_list7=\"\
    $7\"\n  local sorted_list8=\"$8\"\n  local sorted_list9=\"$9\"\n  local sorted_list10=\"\
    $10\"\n  local sorted_list11=\"$11\"\n  local sorted_list12=\"$12\"\n  local sorted_list13=\"\
    $13\"\n  local sorted_list14=\"$14\"\n  local sorted_list15=\"$15\"\n  local sorted_list16=\"\
    $16\"\n  local sorted_list17=\"$17\"\n  local sorted_list18=\"$18\"\n  local sorted_list19=\"\
    $19\"\n  local sorted_list20=\"$20\"\n  local sorted_list21=\"$21\"\n  local sorted_list22=\"\
    $22\"\n  local sorted_list23=\"$23\"\n  local sorted_list24=\"$24\"\n  local sorted_list25=\"\
    $25\"\n  local sorted_list26=\"$26\"\n  local sorted_list27=\"$27\"\n  local sorted_list28=\"\
    $28\"\n  local sorted_list29=\"$29\"\n  local sorted_list30=\"$30\"\n  local sorted_list31=\"\
    $31\"\n  local sorted_list32=\"$32\"\n  local sorted_list33=\"$33\"\n  local sorted_list34=\"\
    $34\"\n  local sorted_list35=\"$35\"\n  local sorted_list36=\"$36\"\n  local sorted_list37=\"\
    $37\"\n  local sorted_list38=\"$38\"\n  local sorted_list39=\"$39\"\n  local sorted_list40=\"\
    $40\"\n  local sorted_list41=\"$41\"\n  local sorted_list42=\"$42\"\n  local sorted_list43=\"\
    $43\"\n  local sorted_list44=\"$44\"\n  local sorted_list45=\"$45\"\n  local sorted_list46=\"\
    $46\"\n  local sorted_list47=\"$47\"\n  local sorted_list48=\"$48\"\n  local sorted_list49=\"\
    $49\"\n  local sorted_list50=\"$50\"\n  local sorted_list51=\"$51\"\n  local sorted_list52=\"\
    $52\"\n  local sorted_list53=\"$53\"\n  local sorted_list54=\"$54\"\n  local sorted_list55=\"\
    $55\"\n  local sorted_list56=\"$56\"\n  local sorted_list57=\"$57\"\n  local sorted_list58=\"\
    $58\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavigk1va.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpavigk1va.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | wc -w)\"\n  [[ \"$sorted\" == \"$list\" ]] || return 1\n  [[ \"$count\" -gt\
    \ 1 ]] || return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -c | awk '{print $1}')\"\n  [[ \"$count\" -gt 1 ]]\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort <<<\"$list\")\"\n  local count=\"$(echo \"$list\" |\
    \ uniq | wc -l)\"\n  [[ \"$count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"${#sorted_list}\"\n  local sorted_list_count2=\"\
    ${sorted_list_count}\"\n  local sorted_list_count3=\"${sorted_list_count2}\"\n\
    \  local sorted_list_count4=\"${sorted_list_count3}\"\n  local sorted_list_count5=\"\
    ${sorted_list_count4}\"\n  local sorted_list_count6=\"${sorted_list_count5}\"\n\
    \  local sorted_list_count7=\"${sorted_list_count6}\"\n  local sorted_list_count8=\"\
    ${sorted_list_count7}\"\n  local sorted_list_count9=\"${sorted_list_count8}\"\n\
    \  local sorted_list_count10=\"${sorted_list_count9}\"\n  local sorted_list_count11=\"\
    ${sorted_list_count10}\"\n  local sorted_list_count12=\"${sorted_list_count11}\"\
    \n  local sorted_list_count13=\"${sorted_list_count12}\"\n  local sorted_list_count14=\"\
    ${sorted_list_count13}\"\n  local sorted_list_count15=\"${sorted_list_count14}\"\
    \n  local sorted_list_count16=\"${sorted_list_count15}\"\n  local sorted_list_count17=\"\
    ${sorted_list_count16}\"\n  local sorted_list_count18=\"${sorted_list_count17}\"\
    \n  local sorted_list_count19=\"${sorted_list_count18}\"\n  local sorted_list_count20=\"\
    ${sorted_list_count19}\"\n  local sorted_list_count21=\"${sorted_list_count20}\"\
    \n  local sorted_list_count22=\"${sorted_list_count21}\"\n  local sorted_list_count23=\"\
    ${sorted_list_count22}\"\n  local sorted_list_count24=\"${sorted_list_count23}\"\
    \n  local sorted_list_count25=\"${sorted_list_count24}\"\n  local sorted_list_count26=\"\
    ${sorted_list_count25}\"\n  local sorted_list_count27=\"${sorted_list_count26}\"\
    \n  local sorted_list_count28=\"${sorted_list_count27}\"\n  local sorted_list_count29=\"\
    ${sorted_list_count28}\"\n  local sorted_list_count30=\"${sorted_list_count29}\"\
    \n  local sorted_list_count31=\"${sorted_list_count30}\"\n  local sorted_list_count32=\"\
    ${sorted_list_count31}\"\n  local sorted_list_count33=\"${sorted_list_count32}\"\
    \n  local sorted_list_count34=\"${sorted_list_count33}\"\n  local sorted_list_count35=\"\
    ${sorted_list_count34}\"\n  local sorted_list_count36=\"${sorted_list_count35}\"\
    \n  local sorted_list_count37=\"${sorted_list_count36}\"\n  local sorted_list_count38=\"\
    ${sorted_list_count37}\"\n  local sorted_list_count39=\"${sorted_list_count38}\"\
    \n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_element\n\n  while read -r sorted_list_element;\
    \ do\n    sorted_list_count=$(( $sorted_list_count + 1 ))\n    if [ \"$sorted_list_count\"\
    \ -gt \"$sorted_list_length\" ]; then\n      return 0\n    fi\n    if [ \"$sorted_list_element\"\
    \ -gt \"$sorted_list[$sorted_list_index]\" ]; then\n      sorted_list_index=$((\
    \ $sorted_list_index + 1 ))\n    fi\n  done <<< \"$sorted_list\"\n  return 1\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6oq6i500.sh: line 28: [: 5[0]: integer expression expected

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_value\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_length\n  local sorted_list_value_count\n  local sorted_list_value_length\n\
    \  local sorted_list_value_count\n  local sorted_list_value_length\n  local sorted_list_value_count\n\
    \  local sorted_list_value_\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -u)\"\n  [[ \"$count\" -gt 1 ]] && return 0\n  [[ \"$list\" = \"$sorted\"\
    \ ]] && return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  for i in \"${list[@]}\"; do\n    sorted=true\n\
    \    break\n  done\n  echo \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \    local sorted_list_count_is_1=\"$(echo \"$sorted_list_count\" | grep -Eq \"\
    1\")\"\n    local sorted_list_count_is_2=\"$(echo \"$sorted_list_count\" | grep\
    \ -Eq \"2\")\"\n    local sorted_list_count_is_3=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"3\")\"\n    local sorted_list_count_is_4=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"4\")\"\n    local sorted_list_count_is_5=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"5\")\"\n    local sorted_list_count_is_6=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"6\")\"\n    local sorted_list_count_is_7=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"7\")\"\n    local sorted_list_count_is_8=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"8\")\"\n    local sorted_list_count_is_9=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"9\")\"\n    local sorted_list_count_is_10=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"10\")\"\n    local sorted_list_count_is_11=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"11\")\"\n    local sorted_list_count_is_12=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"12\")\"\n    local sorted_list_count_is_13=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"13\")\"\n    local sorted_list_count_is_14=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"14\")\"\n    local sorted_list_count_is_15=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"15\")\"\n    local sorted_list_count_is_16=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"16\")\"\n    local sorted_list_count_is_17=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"17\")\"\n    local sorted_list_count_is_18=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"18\")\"\n    local sorted_list_count_is_19=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"19\")\"\n    local sorted_list_count_is_20=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"20\")\"\n    local sorted_list_count_is_21=\"$(echo \"$sorted_list_count\"\
    \ | grep -Eq \"21\")\"\n    local sorted_list_count_is_22=\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyp3gccuu.sh: line 61: unexpected EOF while looking for matching
    `"''

    /tmp/tmpyp3gccuu.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j prev tmp\n  local sorted=\"yes\"\n  local count\n  local count2\n\
    \  local count3\n  local count4\n  local count5\n  local count6\n  local count7\n\
    \  local count8\n  local count9\n  local count10\n  local count11\n  local count12\n\
    \  local count13\n  local count14\n  local count15\n  local count16\n  local count17\n\
    \  local count18\n  local count19\n  local count20\n  local count21\n  local count22\n\
    \  local count23\n  local count24\n  local count25\n  local count26\n  local count27\n\
    \  local count28\n  local count29\n  local count30\n  local count31\n  local count32\n\
    \  local count33\n  local count34\n  local count35\n  local count36\n  local count37\n\
    \  local count38\n  local count39\n  local count40\n  local count41\n  local count42\n\
    \  local count43\n  local count44\n  local count45\n  local count46\n  local count47\n\
    \  local count48\n  local count49\n  local count50\n  local count51\n  local count52\n\
    \  local count53\n  local count54\n  local count55\n  local count56\n  local count57\n\
    \  local count58\n  local count59\n  local count60\n  local count61\n  local count62\n\
    \  local count63\n  local count64\n  local count65\n  local count66\n  local count67\n\
    \  local count68\n  local count69\n  local count70\n  local count71\n  local count72\n\
    \  local count73\n  local count74\n  local count75\n  local count76\n  local count77\n\
    \  local count78\n  local count79\n  local count80\n  local count81\n  local count82\n\
    \  local count83\n  local count84\n  local count85\n  local count86\n  local count87\n\
    \  local count88\n  local count89\n  local count90\n  local count91\n  local count92\n\
    \  local count93\n  local count94\n  local count95\n  local count96\n  local count97\n\
    \  local count98\n  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_count=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_1=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_2=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_3=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_4=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_5=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_6=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_7=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_8=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_9=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_10=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_11=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_12=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_13=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_14=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_15=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_16=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_17=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_18=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_19=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_20=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_21=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_22=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_23=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_24=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_25=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count_26=$((${#sorted_list[@]} / 2))\n  local sorted_list_count_27=$((${#sorted_list[@]}\
    \ / 2))\n  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | wc -w)\"\n  [[ \"$list\" == *\"$sorted\"* ]] || return 1\n  [[ \"$count\"\
    \ -gt 1 ]] || return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local i\n  for i in $list; do\n   \
    \ ((count++))\n    if [ \"$i\" == \"$list\" ]; then\n      sorted=true\n     \
    \ break\n    fi\n  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local count=0\n  local last\n  local i\n  for i in \"\
    ${list[@]}\"; do\n    last=\"$i\"\n  done\n  for i in \"${list[@]}\"; do\n   \
    \ if [ \"$i\" == \"$last\" ]; then\n      ((count++))\n      if [ \"$count\" -gt\
    \ 1 ]; then\n        sorted=true\n        break\n      fi\n    fi\n  done\n  echo\
    \ \"$sorted\"\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \  if [ \"$sorted_list_count\" -eq \"1\" ]; then\n    echo \"$sorted_list\" >\
    \ /dev/null\n  else\n    echo \"False\" > /dev/null\n  fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list_length=${#sorted_list[@]}\n    local sorted_list_count=0\n\
    \    local sorted_list_index=0\n    local sorted_list_value\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_length\n    local sorted_list_value_length\n\
    \    local sorted_list_value_length\n    local sorted_list_\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local count\n    local i\n    local last\n    local sorted\n    local tmp\n\
    \n    sorted=false\n    last=-1\n    for i in \"${list[@]}\"; do\n        if [\
    \ \"$i\" == \"$last\" ]; then\n            ((count++))\n        else\n       \
    \     if [ \"$count\" -gt 1 ]; then\n                sorted=false\n          \
    \      break\n            fi\n            last=\"$i\"\n            count=1\n \
    \       fi\n    done\n\n    if [ \"$sorted\" = true ]; then\n        echo \"$list\
    \ is sorted\"\n    else\n        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0fwt6rtu.sh: line 30: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" = \"\
    $sorted\" ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" != \"\
    $sorted\" ]] || return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local item\n  local last\n  local i\n\
    \n  for i in \"${list}\"; do\n    item=\"$i\"\n    last=\"$i\"\n    count=$((count+1))\n\
    \  done\n\n  for i in \"${list}\"; do\n    if [ \"$i\" != \"$last\" ]; then\n\
    \      if [ \"$count\" -gt 1 ]; then\n        sorted=true\n        break\n   \
    \   else\n        sorted=false\n        break\n      fi\n    fi\n    last=\"$i\"\
    \n    count=$((count+1))\n  done\n\n  echo \"$sorted\"\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local i\n  for i in \"${list}\"; do\n    sorted=true\n\
    \    break\n  done\n  if [ \"$sorted\" = true ]; then\n    return 0\n  else\n\
    \    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count\n    local sorted_list_count1\n    local sorted_list_count2\n\
    \    local sorted_list_count3\n    local sorted_list_count4\n    local sorted_list_count5\n\
    \    local sorted_list_count6\n    local sorted_list_count7\n    local sorted_list_count8\n\
    \    local sorted_list_count9\n    local sorted_list_count10\n    local sorted_list_count11\n\
    \    local sorted_list_count12\n    local sorted_list_count13\n    local sorted_list_count14\n\
    \    local sorted_list_count15\n    local sorted_list_count16\n    local sorted_list_count17\n\
    \    local sorted_list_count18\n    local sorted_list_count19\n    local sorted_list_count20\n\
    \    local sorted_list_count21\n    local sorted_list_count22\n    local sorted_list_count23\n\
    \    local sorted_list_count24\n    local sorted_list_count25\n    local sorted_list_count26\n\
    \    local sorted_list_count27\n    local sorted_list_count28\n    local sorted_list_count29\n\
    \    local sorted_list_count30\n    local sorted_list_count31\n    local sorted_list_count32\n\
    \    local sorted_list_count33\n    local sorted_list_count34\n    local sorted_list_count35\n\
    \    local sorted_list_count36\n    local sorted_list_count37\n    local sorted_list_count38\n\
    \    local sorted_list_count39\n    local sorted_list_count40\n    local sorted_list_count41\n\
    \    local sorted_list_count42\n    local sorted_list_count43\n    local sorted_list_count44\n\
    \    local sorted_list_count45\n    local sorted_list_count46\n    local sorted_list_count47\n\
    \    local sorted_list_count48\n    local sorted_list_count49\n    local sorted_list_count50\n\
    \    local sorted_list_count51\n    local sorted_list_count52\n    local sorted_list_count53\n\
    \    local sorted_list_count54\n    local sorted_list_count55\n    local sorted_list_count56\n\
    \    local sorted_list_count57\n    local sorted_list_count58\n    local sorted_list_count59\n\
    \    local sorted_list_count60\n    local sorted_list_count61\n    local sorted_list_count62\n\
    \    local sorted_list_count63\n    local sorted_list_count64\n    local sorted_list_count65\n\
    \    local sorted_list_count66\n    local sorted_list_count67\n    local sorted_list_count68\n\
    \    local sorted_list_count69\n    local sorted_list_count70\n    local sorted_list_count71\n\
    \    local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"${#sorted_list}\"\n    local sorted_list_index=0\n\
    \    local sorted_list_length=\"${#sorted_list}\"\n\n    while ((sorted_list_index\
    \ < sorted_list_length)); do\n        local current_number=\"${sorted_list[$sorted_list_index]}\"\
    \n        ((sorted_list_index++))\n\n        if ((sorted_list_index == sorted_list_count));\
    \ then\n            ((sorted_list_index--))\n            break\n        fi\n\n\
    \        local next_number=\"${sorted_list[$sorted_list_index]}\"\n        ((sorted_list_index++))\n\
    \n        if ((current_number < next_number)); then\n            ((sorted_list_index--))\n\
    \            break\n        fi\n    done\n\n    ((sorted_list_length--))\n\n \
    \   if ((sorted_list_length == 0)); then\n        echo \"True\"\n    else\n  \
    \      echo \"False\"\n    fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count=0\n  local last\n  local sorted=0\n  local i\n  for i in $list;\
    \ do\n    ((count++))\n    if [ \"$i\" == \"$last\" ]; then\n      ((sorted++))\n\
    \    else\n      sorted=0\n    fi\n    last=\"$i\"\n  done\n  if [ \"$sorted\"\
    \ -eq \"$count\" ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  local sorted_list_count_minus_one=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | awk '{print $1}')\"\n  local sorted_list_count_minus_two=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '{print $2}')\"\n  local sorted_list_count_minus_three=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $3}')\"\n  local sorted_list_count_minus_four=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $4}')\"\n  local sorted_list_count_minus_five=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $5}')\"\n  local sorted_list_count_minus_six=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $6}')\"\n  local sorted_list_count_minus_seven=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $7}')\"\n  local sorted_list_count_minus_eight=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $8}')\"\n  local sorted_list_count_minus_nine=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $9}')\"\n  local sorted_list_count_minus_ten=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $10}')\"\n  local\
    \ sorted_list_count_minus_eleven=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l | awk '{print $11}')\"\n  local sorted_list_count_minus_twelve=\"$(echo \"\
    $sorted_list\" | sort | uniq | wc -l | awk '{print $12}')\"\n  local sorted_list_count_minus_thirteen=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | awk '{print $13}')\"\n  local\
    \ sorted_list_count_minus_fourteen=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l | awk '{print $14}')\"\n  local sorted_list_count_minus_fifteen=\"$(echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | awk '\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkgx9m_dp.sh: line 33: unexpected EOF while looking for matching
    `''''

    /tmp/tmpkgx9m_dp.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n    [ \"$count\" -gt 1 ] || return 0\n    [ \"$list\"\
    \ = \"$sorted\" ] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l)\"\n    local sorted_list_count_not_unique=\"$(echo \"$sorted_list\" | sort\
    \ | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_not_unique_not_sorted=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \")\"\
    \n    local sorted_list_count_not_unique_not_sorted_not_unique=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" | gtr -s \" \")\"\n    local\
    \ sorted_list_count_not_unique_not_sorted_not_unique_not_sorted=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s\
    \ \" \")\"\n    local sorted_list_count_not_unique_not_sorted_not_unique_not_sorted_not_unique=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" |\
    \ gtr -s \" \" | gtr -s \" \" | gtr -s \" \")\"\n    local sorted_list_count_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_sorted=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" |\
    \ gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s \" \")\"\n    local sorted_list_count_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_sorted_not_unique=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" |\
    \ gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s \" \")\"\n\
    \    local sorted_list_count_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_sorted=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \" |\
    \ gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr -s \" \" | gtr\
    \ -s \" \")\"\n    local sorted_list_count_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_sorted_not_unique_not_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgwlx6rus.sh: line 19: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 20: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 20: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 21: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 21: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 21: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 22: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 22: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 22: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 22: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 23: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 23: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 23: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 23: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 23: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 24: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 25: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    /tmp/tmpgwlx6rus.sh: line 26: gtr: command not found

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"${#sorted_list}\"\n  local sorted_list_index=0\n\
    \  local sorted_list_count2=0\n  local sorted_list_index2=0\n  local sorted_list_count3=0\n\
    \  local sorted_list_index3=0\n  local sorted_list_count4=0\n  local sorted_list_index4=0\n\
    \  local sorted_list_count5=0\n  local sorted_list_index5=0\n  local sorted_list_count6=0\n\
    \  local sorted_list_index6=0\n  local sorted_list_count7=0\n  local sorted_list_index7=0\n\
    \  local sorted_list_count8=0\n  local sorted_list_index8=0\n  local sorted_list_count9=0\n\
    \  local sorted_list_index9=0\n  local sorted_list_count10=0\n  local sorted_list_index10=0\n\
    \  local sorted_list_count11=0\n  local sorted_list_index11=0\n  local sorted_list_count12=0\n\
    \  local sorted_list_index12=0\n  local sorted_list_count13=0\n  local sorted_list_index13=0\n\
    \  local sorted_list_count14=0\n  local sorted_list_index14=0\n  local sorted_list_count15=0\n\
    \  local sorted_list_index15=0\n  local sorted_list_count16=0\n  local sorted_list_index16=0\n\
    \  local sorted_list_count17=0\n  local sorted_list_index17=0\n  local sorted_list_count18=0\n\
    \  local sorted_list_index18=0\n  local sorted_list_count19=0\n  local sorted_list_index19=0\n\
    \  local sorted_list_count20=0\n  local sorted_list_index20=0\n  local sorted_list_count21=0\n\
    \  local sorted_list_index21=0\n  local sorted_list_count22=0\n  local sorted_list_index22=0\n\
    \  local sorted_list_count23=0\n  local sorted_list_index23=0\n  local sorted_list_count24=0\n\
    \  local sorted_list_index24=0\n  local sorted_list_count25=0\n  local sorted_list_index25=0\n\
    \  local sorted_list_count26=0\n  local sorted_list_index26=0\n  local sorted_list_count27=0\n\
    \  local sorted_list_index27=0\n  local sorted_list_count28=0\n  local sorted_list_index28=0\n\
    \  local sorted_list_count29=0\n  local sorted_list_index29=0\n  local sorted_list_count30=0\n\
    \  local sorted_list_index30=0\n  local sorted_list_count31=0\n  local sorted_list_index31=0\n\
    \  local sorted_list_count32=0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | wc -c)\"\n    [ \"$count\" -eq \"$sorted\" ] || return 1\n    return 0\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list_to_test=$1\n\
    \  local sorted_list\n  local i\n  local count\n  sorted_list=$( sort <<<\"$list_to_test\"\
    \ )\n  count=0\n  for (( i=0; i<${#list_to_test}; i++ )); do\n    if [[ ${list_to_test[i]}\
    \ == ${sorted_list[i]} ]]; then\n      count=$(( count + 1 ))\n    fi\n  done\n\
    \  if [[ ${count} -gt 1 ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\
    \ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  sorted_list_count=$(echo \"$sorted_list\" |\
    \ sort | uniq | wc -l)\n  if [ \"$sorted_list_count\" -eq 1 ]; then\n    echo\
    \ \"$sorted_list\" | sort | uniq | wc -l | xargs -0 echo -ne \"1\\n$sorted_list\"\
    \ | sort | uniq | wc -l | xargs -0 echo -ne \"0\\n\"\n  else\n    echo \"$sorted_list\"\
    \ | sort | uniq | wc -l | xargs -0 echo -ne \"1\\n$sorted_list\" | sort | uniq\
    \ | wc -l | xargs -0 echo -ne \"0\\n\"\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  if [ \"$sorted_list_count\" -eq \"1\" ]; then\n    echo \"True\"\n  else\n\
    \    echo \"False\"\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local i\n  local j\n  local\
    \ sorted_list_sorted=false\n  local sorted_list_duplicates=false\n  local sorted_list_duplicates_count=0\
    \ # number of duplicates\n  local sorted_list_duplicates_index=0\n  local sorted_list_duplicates_index2=0\n\
    \  local sorted_list_duplicates_index3=0\n  local sorted_list_duplicates_index4=0\n\
    \  local sorted_list_duplicates_index5=0\n  local sorted_list_duplicates_index6=0\n\
    \  local sorted_list_duplicates_index7=0\n  local sorted_list_duplicates_index8=0\n\
    \  local sorted_list_duplicates_index9=0\n  local sorted_list_duplicates_index10=0\n\
    \  local sorted_list_duplicates_index11=0\n  local sorted_list_duplicates_index12=0\n\
    \  local sorted_list_duplicates_index13=0\n  local sorted_list_duplicates_index14=0\n\
    \  local sorted_list_duplicates_index15=0\n  local sorted_list_duplicates_index16=0\n\
    \  local sorted_list_duplicates_index17=0\n  local sorted_list_duplicates_index18=0\n\
    \  local sorted_list_duplicates_index19=0\n  local sorted_list_duplicates_index20=0\n\
    \  local sorted_list_duplicates_index21=0\n  local sorted_list_duplicates_index22=0\n\
    \  local sorted_list_duplicates_index23=0\n  local sorted_list_duplicates_index24=0\n\
    \  local sorted_list_duplicates_index25=0\n  local sorted_list_duplicates_index26=0\n\
    \  local sorted_list_duplicates_index27=0\n  local sorted_list_duplicates_index28=0\n\
    \  local sorted_list_duplicates_index29=0\n  local sorted_list_duplicates_index30=0\n\
    \  local sorted_list_duplicates_index31=0\n  local sorted_list_duplicates_index32=0\n\
    \  local sorted_list_duplicates_index33=0\n  local sorted_list_duplicates_index34=0\n\
    \  local sorted_list_duplicates_index35=0\n  local sorted_list_duplicates_index36=0\n\
    \  local sorted_list_duplicates_index37=0\n  local sorted_list_duplicates_index38=0\n\
    \  local sorted_list_duplicates_index39=0\n  local sorted_list_duplicates_index40=0\n\
    \  local sorted_list_duplicates_index41=0\n  local sorted_list_duplicates_index42=0\n\
    \  local sorted_list_duplicates_index43=0\n  local sorted_list_duplicates_index44=0\n\
    \  local sorted_list_duplicates_index45=0\n  local sorted_list_duplicates_index46\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \  if [ \"$sorted_list_count\" -eq \"1\" ]; then\n    echo \"$sorted_list\" |\
    \ sort -n -k 1 > /dev/null\n  else\n    echo \"$sorted_list\" | sort -n -k 1 >\
    \ /dev/null\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=false\n  local count=0\n  local last=\n  local i\n  for i in\
    \ $list; do\n    ((count++))\n    if [ \"$last\" != \"$i\" ]; then\n      ((sorted=true))\n\
    \    fi\n    last=\"$i\"\n  done\n  if [ \"$sorted\" = true ]; then\n    return\
    \ 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j k count\n  local sorted=\"yes\"\n  local sorted=\"no\"\n  local\
    \ last\n  local last2\n  local last3\n  local last4\n  local last5\n  local last6\n\
    \  local last7\n  local last8\n  local last9\n  local last10\n  local last11\n\
    \  local last12\n  local last13\n  local last14\n  local last15\n  local last16\n\
    \  local last17\n  local last18\n  local last19\n  local last20\n  local last21\n\
    \  local last22\n  local last23\n  local last24\n  local last25\n  local last26\n\
    \  local last27\n  local last28\n  local last29\n  local last30\n  local last31\n\
    \  local last32\n  local last33\n  local last34\n  local last35\n  local last36\n\
    \  local last37\n  local last38\n  local last39\n  local last40\n  local last41\n\
    \  local last42\n  local last43\n  local last44\n  local last45\n  local last46\n\
    \  local last47\n  local last48\n  local last49\n  local last50\n  local last51\n\
    \  local last52\n  local last53\n  local last54\n  local last55\n  local last56\n\
    \  local last57\n  local last58\n  local last59\n  local last60\n  local last61\n\
    \  local last62\n  local last63\n  local last64\n  local last65\n  local last66\n\
    \  local last67\n  local last68\n  local last69\n  local last70\n  local last71\n\
    \  local last72\n  local last73\n  local last74\n  local last75\n  local last76\n\
    \  local last77\n  local last78\n  local last79\n  local last80\n  local last81\n\
    \  local last82\n  local last83\n  local last84\n  local last85\n  local last86\n\
    \  local last87\n  local last88\n  local last89\n  local last90\n  local last91\n\
    \  local last92\n  local last93\n  local last94\n  local last95\n  local last96\n\
    \  local last97\n  \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_length=${#sorted_list}\n    local sorted_list_count=0\n\
    \    local sorted_list_index=0\n    local sorted_list_value\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_length\n    local\
    \ sorted_list_value_count\n    local sorted_list_value_length\n    local sorted_list_value_count\n\
    \    local sorted_list_value_length\n    local sorted_list_value_count\n    local\
    \ sorted_list_value_length\n    local sorted_list_value_count\n    local sorted_list_value_length\n\
    \    local sorted_list_value_count\n    local sorted_list_value_\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted_list\n  local i\n  local j\n  local count\n  local last_number\n\
    \  local last_index\n  local is_sorted\n  is_sorted=true\n  for i in \"${list}\"\
    ; do\n    count=0\n    last_number=\"${i}\"\n    last_index=0\n    for j in \"\
    ${list}\"; do\n      if [ \"$i\" -gt \"$j\" ]; then\n        count=$((count+1))\n\
    \      fi\n      if [ \"$count\" -eq \"1\" ]; then\n        is_sorted=false\n\
    \        break\n      fi\n    done\n  done\n  return \"$is_sorted\"\n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl57hf1at.sh: line 40: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list_to_test=$1\n\
    \  local sorted_list\n  local i\n  local count\n  sorted_list=\"$(sort <<< \"\
    $list_to_test\")\"\n  count=\"$(echo \"$sorted_list\" | wc -c)\"\n  if [ \"$count\"\
    \ -eq \"1\" ]; then\n    return 0\n  fi\n  for (( i = 1; i < count; i++ )); do\n\
    \    if [ \"$sorted_list\" != \"$list_to_test\" ]; then\n      return 0\n    fi\n\
    \  done\n  return 1\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_length=${#sorted_list}\n    local i\n    local j\n\
    \    local sorted_list_sorted=false\n    local sorted_list_duplicates=false\n\
    \    local sorted_list_duplicates_count=0 # number of duplicates\n    local sorted_list_duplicates_numbers=()\
    \ # numbers of duplicates\n    local sorted_list_duplicates_numbers_length=0 #\
    \ length of numbers of duplicates\n    local sorted_list_duplicates_numbers_sorted=()\
    \ # numbers of duplicates in sorted order\n    local sorted_list_duplicates_numbers_sorted_length=0\
    \ # length of numbers of duplicates in sorted order\n    local sorted_list_duplicates_numbers_sorted_reverse=()\
    \ # numbers of duplicates in sorted order in reverse order\n    local sorted_list_duplicates_numbers_sorted_reverse_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order\n    local\
    \ sorted_list_duplicates_numbers_sorted_reverse_sorted=() # numbers of duplicates\
    \ in sorted order in reverse order in sorted order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order in sorted\
    \ order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse=()\
    \ # numbers of duplicates in sorted order in reverse order in sorted order in\
    \ reverse order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order in sorted\
    \ order in reverse order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted=()\
    \ # numbers of duplicates in sorted order in reverse order in sorted order in\
    \ reverse order in sorted order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order in sorted\
    \ order in reverse order in sorted order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted_reverse=()\
    \ # numbers of duplicates in sorted order in reverse order in sorted order in\
    \ reverse order in sorted order in reverse order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted_reverse_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order in sorted\
    \ order in reverse order in sorted order in reverse order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted_reverse_sorted=()\
    \ # numbers of duplicates in sorted order in reverse order in sorted order in\
    \ reverse order in sorted order in reverse order in sorted order\n    local sorted_list_duplicates_numbers_sorted_reverse_sorted_reverse_sorted_reverse_sorted_length=0\
    \ # length of numbers of duplicates in sorted order in reverse order in sorted\
    \ order in reverse order in sorted \n}\n\ncandidate() {\n    is_sorted \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | wc -w)\"\n  [[ \"$count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<<\"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n    [ \"$count\" -gt 1 ] || return 0\n    [ \"$list\"\
    \ = \"$sorted\" ] || return 0\n    return 1\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local count=0\n    local sorted=0\n    local last\n    local i\n    local\
    \ j\n    local tmp\n\n    for (( i=0; i<${#list}; i++ )); do\n        if [[ ${list[i]}\
    \ == ${list[i+1]} ]]; then\n            (( count++ ))\n        else\n        \
    \    if [[ ${count} -gt 1 ]]; then\n                sorted=0\n               \
    \ break\n            fi\n            sorted=1\n        fi\n    done\n\n    if\
    \ [[ ${sorted} == 1 ]]; then\n        return 0\n    else\n        return 1\n \
    \   fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n  [[ \"$count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local count=0\n    local sorted=0\n    local last\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local i j k count\n    local sorted=0\n    local last\n    local last2\n\
    \    local last3\n    local last4\n    local last5\n    local last6\n    local\
    \ last7\n    local last8\n    local last9\n    local last10\n    local last11\n\
    \    local last12\n    local last13\n    local last14\n    local last15\n    local\
    \ last16\n    local last17\n    local last18\n    local last19\n    local last20\n\
    \    local last21\n    local last22\n    local last23\n    local last24\n    local\
    \ last25\n    local last26\n    local last27\n    local last28\n    local last29\n\
    \    local last30\n    local last31\n    local last32\n    local last33\n    local\
    \ last34\n    local last35\n    local last36\n    local last37\n    local last38\n\
    \    local last39\n    local last40\n    local last41\n    local last42\n    local\
    \ last43\n    local last44\n    local last45\n    local last46\n    local last47\n\
    \    local last48\n    local last49\n    local last50\n    local last51\n    local\
    \ last52\n    local last53\n    local last54\n    local last55\n    local last56\n\
    \    local last57\n    local last58\n    local last59\n    local last60\n    local\
    \ last61\n    local last62\n    local last63\n    local last64\n    local last65\n\
    \    local last66\n    local last67\n    local last68\n    local last69\n    local\
    \ last70\n    local last71\n    local last72\n    local last73\n    local last74\n\
    \    local last75\n    local last76\n    local last77\n    local last78\n    local\
    \ last79\n    local last80\n    local last81\n    local last82\n    local last83\n\
    \    local last84\n    local last85\n    local last86\n    local last87\n    local\
    \ last88\n    local last89\n    local last90\n    local last91\n    local last92\n\
    \    local last93\n    local last94\n    local last95\n    local last96\n    local\
    \ last97\n    local last98\n    local last99\n\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i count\n  local sorted\n  sorted=false\n  for i in \"${list[@]}\";\
    \ do\n    count=0\n    for j in \"${list[@]}\"; do\n      [[ \"$i\" -eq \"$j\"\
    \ ]] && count=$((count+1)) || break\n    done\n    [[ \"$count\" -eq 0 ]] && sorted=true\
    \ || break\n  done\n  [[ \"$sorted\" = true ]] || return 1\n  return 0\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_item\n  local sorted_list_item_count\n\
    \  local sorted_list_item_value\n  local sorted_list_item_value_length\n  local\
    \ sorted_list_item_value_count\n  local sorted_list_item_value_index\n  local\
    \ sorted_list_item_value_item\n  local sorted_list_item_value_item_count\n  local\
    \ sorted_list_item_value_item_value\n  local sorted_list_item_value_item_value_length\n\
    \  local sorted_list_item_value_item_value_index\n  local sorted_list_item_value_item_value_item\n\
    \  local sorted_list_item_value_item_value_item_count\n  local sorted_list_item_value_item_value_item_value\n\
    \  local sorted_list_item_value_item_value_item_value_length\n  local sorted_list_item_value_item_value_item_value_index\n\
    \  local sorted_list_item_value_item_value_item_value_item\n  local sorted_list_item_value_item_value_item_value_item_count\n\
    \  local sorted_list_item_value_item_value_item_value_item_value\n  local sorted_list_item_value_item_value_item_value_item_value_length\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_index\n  local\
    \ sorted_list_item_value_item_value_item_value_item_value_item\n  local sorted_list_item_value_item_value_item_value_item_value_item_count\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_length\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_index\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_count\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_length\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_index\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_item\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_item_count\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_item_value\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_item_value_length\n\
    \  local sorted_list_item_value_item_value_item_value_item_value_item_value_item_value_item_value_index\n\
    \  local sorted_list_item_value_item_value_item_value_\n}\n\ncandidate() {\n \
    \   is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=$1\n\
    \  local sorted_list_count=$((${#sorted_list[@]} / 2))\n  local sorted_list_count2=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count3=$((${#sorted_list[@]} / 2))\n  local sorted_list_count4=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count5=$((${#sorted_list[@]} / 2))\n  local sorted_list_count6=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count7=$((${#sorted_list[@]} / 2))\n  local sorted_list_count8=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count9=$((${#sorted_list[@]} / 2))\n  local sorted_list_count10=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count11=$((${#sorted_list[@]} / 2))\n  local sorted_list_count12=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count13=$((${#sorted_list[@]} / 2))\n  local sorted_list_count14=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count15=$((${#sorted_list[@]} / 2))\n  local sorted_list_count16=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count17=$((${#sorted_list[@]} / 2))\n  local sorted_list_count18=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count19=$((${#sorted_list[@]} / 2))\n  local sorted_list_count20=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count21=$((${#sorted_list[@]} / 2))\n  local sorted_list_count22=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count23=$((${#sorted_list[@]} / 2))\n  local sorted_list_count24=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count25=$((${#sorted_list[@]} / 2))\n  local sorted_list_count26=$((${#sorted_list[@]}\
    \ / 2))\n  local sorted_list_count27=$((${#sorted_list[@]} / 2))\n  local sorted_list_count28=$((${#sorted_list[@]}\
    \ / 2))\n  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count=0\n  local sorted=0\n  local last\n  local i\n  for i in \"${list}\"\
    ; do\n    last=\"$i\"\n  done\n  for i in \"${list}\"; do\n    if [ \"$i\" ==\
    \ \"$last\" ]; then\n      ((count++))\n      if [ \"$count\" -gt 1 ]; then\n\
    \        sorted=1\n        break\n      fi\n    fi\n  done\n  if [ \"$sorted\"\
    \ -eq 1 ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | wc -w)\"\n  [[ \"$list\" != \"$sorted\" ]] || return 0\n  [[ \"$count\" -gt\
    \ 1 ]] || return 1\n  return 0\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=false\n\
    \  local list=\"$1\"\n  local count=0\n  local item\n  local last\n  local i\n\
    \  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n\
    \  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n\
    \  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n\
    \  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n\
    \  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n\
    \  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n\
    \  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n\
    \  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n\
    \  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n\
    \  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n\
    \  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n\
    \  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n\
    \  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n\
    \  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n\
    \  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n\
    \  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n\
    \  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n\
    \  local y\n  local z\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=${#sorted_list}\n  local sorted_list_count=1\n\
    \  local sorted_list_index=1\n  local sorted_list_element\n  local sorted_list_element_count=1\n\
    \  local sorted_list_element_index=1\n\n  while [ $sorted_list_element_count -le\
    \ $sorted_list_length ]; do\n    sorted_list_element=${sorted_list[$sorted_list_element_index]}\n\
    \    sorted_list_element_count=$(( $sorted_list_element_count + 1 ))\n\n    if\
    \ [ $sorted_list_element_count -eq $sorted_list_length ]; then\n      sorted_list_element_count=1\n\
    \      sorted_list_index=$(( $sorted_list_index + 1 ))\n    fi\n\n    if [ $sorted_list_element\
    \ -ne $sorted_list_element ]; then\n      sorted_list_element_count=1\n      sorted_list_index=$((\
    \ $sorted_list_index + 1 ))\n    fi\n\n    if [ $sorted_list_element_count -eq\
    \ $sorted_list_length ]; then\n      sorted_list_count=$(( $sorted_list_count\
    \ + 1 ))\n    fi\n  done\n\n  if [ $sorted_list_count -eq $sorted_list_length\
    \ ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660030764
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -w)\n  local sorted_list_count=0\n\
    \  local sorted_list_index=0\n  local sorted_list_item\n  local sorted_list_item_count\n\
    \  local sorted_list_item_value\n  local sorted_list_item_value_index\n  local\
    \ sorted_list_item_value_count\n  local sorted_list_item_value_length\n  local\
    \ sorted_list_item_value_length_index\n  local sorted_list_item_value_length_count\n\
    \  local sorted_list_item_value_length_index_count\n  local sorted_list_item_value_length_index_count_index\n\
    \  local sorted_list_item_value_length_index_count_index_value\n  local sorted_list_item_value_length_index_count_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length\n\
    \  local sorted_list_item_value_length_index_count_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_value_length_index_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=false\n    local count=0\n    local last\n    local i\n   \
    \ for ((i=0; i<${#list}; i++)); do\n        if [[ ${list[i]} -gt ${list[i+1]}\
    \ ]]; then\n            sorted=true\n            break\n        fi\n    done\n\
    \    if [[ ${sorted} == true ]]; then\n        echo \"$list is sorted\"\n    else\n\
    \        echo \"$list is not sorted\"\n    fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort -u | wc -l)\"\
    \n  local sorted_list_count_not_unique=\"$(echo \"$sorted_list\" | sort -u | wc\
    \ -l | awk '{print $1}')\"\n  local sorted_list_count_unique=\"$(echo \"$sorted_list\"\
    \ | sort -u | wc -l | awk '{print $2}')\"\n\n  if [ \"$sorted_list_count\" -eq\
    \ \"$sorted_list_count_not_unique\" ] && [ \"$sorted_list_count\" -eq \"$sorted_list_count_unique\"\
    \ ]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpergj1vfb.sh: line 22: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=\"\
    $1\"\n    local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l)\"\n    local sorted_list_count_equal=\"$(echo \"$sorted_list\" | sort |\
    \ uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \")\"\
    \n    local sorted_list_count_less_equal=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | gtr -s \" \" | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \" | gtr -s \" \")\"\
    \n    local sorted_list_count_less_equal=\"$(echo \"$sorted_list\" | sort | uniq\
    \ | wc -l | gtr -s \" \" | gtr -s \" \")\"\n    local sorted_list_count_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_less_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_less_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_less_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_equal=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l | gtr -s \" \")\"\n    local sorted_list_count_greater_equal=\"\
    $(\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6d9_dl10.sh: line 34: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6d9_dl10.sh: line 59: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=false\n    local count=1\n    local item\n    for item in $list;\
    \ do\n        if [ \"$item\" == \"$list\" ]; then\n            sorted=true\n \
    \           break\n        fi\n        if [ \"$item\" == \"$count\" ]; then\n\
    \            sorted=false\n            break\n        fi\n        ((count++))\n\
    \    done\n    return $sorted\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp973p136a.sh: line 32: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local i j k count tmp\n  count=0\n  for (( i=0; i<${#list}; i++ )); do\n \
    \   count=$(( count+1 ))\n    for (( j=0; j<${#list}; j++ )); do\n      if [[\
    \ ${list[j]} == ${list[i]} ]]; then\n        (( count-- ))\n      fi\n    done\n\
    \    if [[ ${count} -eq 0 ]]; then\n      return 0\n    fi\n  done\n  return 1\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list_length=${#1}\n\
    \  local sorted_length=${#1}\n  local i\n  local j\n  local sorted\n  local duplicates\n\
    \  local count\n  local duplicate\n  local sorted_list\n  local sorted_list_length\n\
    \  local sorted_list_count\n  local sorted_list_duplicates\n  local sorted_list_duplicate\n\
    \  local sorted_list_duplicate_index\n  local sorted_list_duplicate_index2\n \
    \ local sorted_list_duplicate_index3\n  local sorted_list_duplicate_index4\n \
    \ local sorted_list_duplicate_index5\n  local sorted_list_duplicate_index6\n \
    \ local sorted_list_duplicate_index7\n  local sorted_list_duplicate_index8\n \
    \ local sorted_list_duplicate_index9\n  local sorted_list_duplicate_index10\n\
    \  local sorted_list_duplicate_index11\n  local sorted_list_duplicate_index12\n\
    \  local sorted_list_duplicate_index13\n  local sorted_list_duplicate_index14\n\
    \  local sorted_list_duplicate_index15\n  local sorted_list_duplicate_index16\n\
    \  local sorted_list_duplicate_index17\n  local sorted_list_duplicate_index18\n\
    \  local sorted_list_duplicate_index19\n  local sorted_list_duplicate_index20\n\
    \  local sorted_list_duplicate_index21\n  local sorted_list_duplicate_index22\n\
    \  local sorted_list_duplicate_index23\n  local sorted_list_duplicate_index24\n\
    \  local sorted_list_duplicate_index25\n  local sorted_list_duplicate_index26\n\
    \  local sorted_list_duplicate_index27\n  local sorted_list_duplicate_index28\n\
    \  local sorted_list_duplicate_index29\n  local sorted_list_duplicate_index30\n\
    \  local sorted_list_duplicate_index31\n  local sorted_list_duplicate_index32\n\
    \  local sorted_list_duplicate_index33\n  local sorted_list_duplicate_index34\n\
    \  local sorted_list_duplicate_index35\n  local sorted_list_duplicate_index36\n\
    \  local sorted_list_duplicate_index37\n  local sorted_list_duplicate_index38\n\
    \  local sorted_list_duplicate_index39\n  local sorted_list_duplicate_index40\n\
    \  local sorted_list_duplicate_index41\n  local sorted_list_duplicate_index42\n\
    \  local sorted_list_duplicate_index43\n  local sorted_list_duplicate_index44\n\
    \  local sorted_list_duplicate_index45\n  local sorted_list_duplicate_index46\n\
    \  local sorted_list_duplicate_index47\n  local sorted_list_duplicate_index48\n\
    \  local sorted_list_duplicate_index49\n  local sorted_list_duplicate_index50\n\
    \  local sorted_list_duplicate_index51\n  local sorted_list_duplicate_index52\n\
    \  local sorted_list_duplicate_index53\n  local sorted_list_duplicate_index54\n\
    \  local sorted_list_duplicate_index55\n  local \n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | uniq | wc -l)\"\n\
    \  local sorted_list_count_greater_than_one=\"$(echo \"$sorted_list\" | uniq |\
    \ wc -l | gtr 1)\"\n  local sorted_list_count_greater_than_one_duplicate=\"$(echo\
    \ \"$sorted_list\" | uniq | wc -l | gtr 1)\"\n\n  if [ \"$sorted_list_count\"\
    \ -gt 1 ]; then\n    echo \"$sorted_list_count duplicates of $sorted_list\"\n\
    \    return 1\n  elif [ \"$sorted_list_count_greater_than_one\" -gt 1 ]; then\n\
    \    echo \"$sorted_list_count_greater_than_one duplicates of $sorted_list\"\n\
    \    return 1\n  elif [ \"$sorted_list_count_greater_than_one_duplicate\" -gt\
    \ 1 ]; then\n    echo \"$sorted_list_count_greater_than_one_duplicate duplicates\
    \ of $sorted_list\"\n    return 1\n  else\n    echo \"$sorted_list sorted\"\n\
    \    return 0\n  fi\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpn5fl7f5q.sh: line 19: gtr: command not found

    /tmp/tmpn5fl7f5q.sh: line 20: gtr: command not found

    /tmp/tmpn5fl7f5q.sh: line 25: [: : integer expression expected

    /tmp/tmpn5fl7f5q.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count\" -gt 1 ]] || return 0\n  local sorted_list_count_2=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_2\"\
    \ -gt 1 ]] || return 0\n  local sorted_list_count_3=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_3\" -gt 1 ]] || return 0\n\
    \  local sorted_list_count_4=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count_4\" -gt 1 ]] || return 0\n  local sorted_list_count_5=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_5\"\
    \ -gt 1 ]] || return 0\n  local sorted_list_count_6=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_6\" -gt 1 ]] || return 0\n\
    \  local sorted_list_count_7=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count_7\" -gt 1 ]] || return 0\n  local sorted_list_count_8=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_8\"\
    \ -gt 1 ]] || return 0\n  local sorted_list_count_9=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_9\" -gt 1 ]] || return 0\n\
    \  local sorted_list_count_10=\"$(echo \"$sorted_list\" | sort | uniq | wc -l)\"\
    \n  [[ \"$sorted_list_count_10\" -gt 1 ]] || return 0\n  local sorted_list_count_11=\"\
    $(echo \"$sorted_list\" | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_11\"\
    \ -gt 1 ]] || return 0\n  local sorted_list_count_12=\"$(echo \"$sorted_list\"\
    \ | sort | uniq | wc -l)\"\n  [[ \"$sorted_list_count_12\" -gt 1 ]] || return\
    \ 0\n  local sorted_list_count_13=\"$(echo \"$sorted_list\" | sort | uniq | wc\
    \ -l)\"\n  [[ \"$sorted_list_count_13\" -gt 1 ]] || return 0\n  local sorted_list_count_14=\"\
    $(echo \"$sorted_list\" | sort \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\"\
    \ ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2\
    \ 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5u_6amtg.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5u_6amtg.sh: line 69: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list2=\"$2\"\n  local sorted_list3=\"$3\"\n  local sorted_list4=\"\
    $4\"\n  local sorted_list5=\"$5\"\n  local sorted_list6=\"$6\"\n  local sorted_list7=\"\
    $7\"\n  local sorted_list8=\"$8\"\n  local sorted_list9=\"$9\"\n  local sorted_list10=\"\
    $10\"\n  local sorted_list11=\"$11\"\n  local sorted_list12=\"$12\"\n  local sorted_list13=\"\
    $13\"\n  local sorted_list14=\"$14\"\n  local sorted_list15=\"$15\"\n  local sorted_list16=\"\
    $16\"\n  local sorted_list17=\"$17\"\n  local sorted_list18=\"$18\"\n  local sorted_list19=\"\
    $19\"\n  local sorted_list20=\"$20\"\n  local sorted_list21=\"$21\"\n  local sorted_list22=\"\
    $22\"\n  local sorted_list23=\"$23\"\n  local sorted_list24=\"$24\"\n  local sorted_list25=\"\
    $25\"\n  local sorted_list26=\"$26\"\n  local sorted_list27=\"$27\"\n  local sorted_list28=\"\
    $28\"\n  local sorted_list29=\"$29\"\n  local sorted_list30=\"$30\"\n  local sorted_list31=\"\
    $31\"\n  local sorted_list32=\"$32\"\n  local sorted_list33=\"$33\"\n  local sorted_list34=\"\
    $34\"\n  local sorted_list35=\"$35\"\n  local sorted_list36=\"$36\"\n  local sorted_list37=\"\
    $37\"\n  local sorted_list38=\"$38\"\n  local sorted_list39=\"$39\"\n  local sorted_list40=\"\
    $40\"\n  local sorted_list41=\"$41\"\n  local sorted_list42=\"$42\"\n  local sorted_list43=\"\
    $43\"\n  local sorted_list44=\"$44\"\n  local sorted_list45=\"$45\"\n  local sorted_list46=\"\
    $46\"\n  local sorted_list47=\"$47\"\n  local sorted_list48=\"$48\"\n  local sorted_list49=\"\
    $49\"\n  local sorted_list50=\"$50\"\n  local sorted_list51=\"$51\"\n  local sorted_list52=\"\
    $52\"\n  local sorted_list53=\"$53\"\n  local sorted_list54=\"$54\"\n  local sorted_list55=\"\
    $55\"\n  local sorted_list56=\"$56\"\n  local sorted_list57=\"$57\"\n  local sorted_list58=\"\
    $58\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"\
    true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpavigk1va.sh: line 95: unexpected EOF while looking for matching
    `"''

    /tmp/tmpavigk1va.sh: line 99: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local count=0\n  local sorted=0\n  local last\n  local i\n  local j\n  local\
    \ k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local\
    \ r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local\
    \ y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local\
    \ f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local\
    \ m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local\
    \ t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local\
    \ a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local\
    \ h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local\
    \ o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local\
    \ v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local\
    \ c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local\
    \ j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local\
    \ q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local\
    \ x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local\
    \ e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local\
    \ l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local\
    \ s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local\
    \ z\n  local a\n\n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort -n <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 1\n    [[ \"$list\"\
    \ = \"$sorted\" ]] || return 0\n    return 1\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list_string=$1\n\
    \    local sorted_string=$(sort <<< \"$list_string\")\n    local sorted_list=$(echo\
    \ \"$sorted_string\" | tr -d '\\n')\n    local is_sorted=$(echo \"$sorted_list\"\
    \ | uniq -c | wc -l)\n    echo $is_sorted\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local sorted_list=$1\n\
    \    local sorted_list_count=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_2=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_3=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_4=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_5=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_6=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_7=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_8=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_9=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_10=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_11=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_12=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_13=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_14=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_15=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_16=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_17=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_18=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_19=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_20=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_21=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_22=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_23=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_24=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_25=$((${#sorted_list[@]} / 2))\n    local sorted_list_count_26=$((${#sorted_list[@]}\
    \ / 2))\n    local sorted_list_count_27=$((${#sorted_list[@]} / 2))\n    local\
    \ sorted_list_count_28=$((${#sorted_list[@]} / 2))\n    local \n}\n\ncandidate()\
    \ {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local i j count tmp\n    count=0\n    for ((i=0; i < ${#list}; i++)); do\n\
    \        tmp=${list[i]}\n        for ((j=i+1; j < ${#list}; j++)); do\n      \
    \      if [[ ${list[i]} -gt ${list[j]} ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ ${count} -gt 1 ]]; then\n       \
    \     return False\n        fi\n    done\n    return true\n}\n\ncandidate() {\n\
    \    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwuitqw3h.sh: line 31: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\
    \n    local sorted=\"$(sort <<< \"$list\")\"\n    local count=\"$(echo \"$list\"\
    \ | uniq | wc -l)\"\n    [[ \"$count\" -gt 1 ]] || return 0\n    [[ \"$list\"\
    \ = \"$sorted\" ]] || return 1\n    return 0\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<<\"$list\")\"\n  local count=\"$(echo \"$list\"\
    \ | uniq -c | wc -l)\"\n  [[ \"$count\" -gt 1 ]] || return 0\n  [[ \"$list\" ==\
    \ \"$sorted\" ]] || return 0\n  return 1\n}\n\ncandidate() {\n    is_sorted \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"\
    false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate \"1\")\
    \ = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" =~ $sorted ]]\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted_list=\"\"\n  local count=0\n  local i\n  local j\n  local sorted_count=0\n\
    \  local sorted_i\n  local sorted_j\n  local sorted_num\n  local sorted_nums\n\
    \  local sorted_nums_sorted\n  local sorted_nums_sorted_count\n  local sorted_nums_sorted_i\n\
    \  local sorted_nums_sorted_j\n  local sorted_nums_sorted_num\n  local sorted_nums_sorted_nums\n\
    \  local sorted_nums_sorted_nums_sorted\n  local sorted_nums_sorted_nums_sorted_count\n\
    \  local sorted_nums_sorted_nums_sorted_i\n  local sorted_nums_sorted_nums_sorted_j\n\
    \  local sorted_nums_sorted_nums_sorted_num\n  local sorted_nums_sorted_nums_sorted_nums\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted\n  local sorted_nums_sorted_nums_sorted_nums_sorted_count\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_i\n  local sorted_nums_sorted_nums_sorted_nums_sorted_j\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_num\n  local sorted_nums_sorted_nums_sorted_nums_sorted_nums\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted\n  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_count\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_i\n  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_j\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_num\n  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_count\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_i\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_j\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_num\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted\n\
    \  local sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_nums_sorted_\n\
    }\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030760
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted=()\n\
    \  local i\n  local j\n  local len=${#1}\n  local count\n  local last\n  local\
    \ tmp\n  local first\n  local last\n  local tmp\n  local tmp2\n  local tmp3\n\
    \  local tmp4\n  local tmp5\n  local tmp6\n  local tmp7\n  local tmp8\n  local\
    \ tmp9\n  local tmp10\n  local tmp11\n  local tmp12\n  local tmp13\n  local tmp14\n\
    \  local tmp15\n  local tmp16\n  local tmp17\n  local tmp18\n  local tmp19\n \
    \ local tmp20\n  local tmp21\n  local tmp22\n  local tmp23\n  local tmp24\n  local\
    \ tmp25\n  local tmp26\n  local tmp27\n  local tmp28\n  local tmp29\n  local tmp30\n\
    \  local tmp31\n  local tmp32\n  local tmp33\n  local tmp34\n  local tmp35\n \
    \ local tmp36\n  local tmp37\n  local tmp38\n  local tmp39\n  local tmp40\n  local\
    \ tmp41\n  local tmp42\n  local tmp43\n  local tmp44\n  local tmp45\n  local tmp46\n\
    \  local tmp47\n  local tmp48\n  local tmp49\n  local tmp50\n  local tmp51\n \
    \ local tmp52\n  local tmp53\n  local tmp54\n  local tmp55\n  local tmp56\n  local\
    \ tmp57\n  local tmp58\n  local tmp59\n  local tmp60\n  local tmp61\n  local tmp62\n\
    \  local tmp63\n  local tmp64\n  local tmp65\n  local tmp66\n  local tmp67\n \
    \ local tmp68\n  local tmp69\n  local tmp70\n  local tmp71\n  local tmp72\n  local\
    \ tmp73\n  local tmp74\n  local tmp75\n  local tmp76\n  local tmp77\n  local tmp78\n\
    \  local tmp79\n  local tmp80\n  local tmp81\n  local tmp82\n  local tmp83\n \
    \ local tmp84\n  local tmp85\n  local tmp86\n  local tmp87\n  local tmp88\n  local\
    \ tmp89\n  local tmp90\n  local tmp91\n  local tmp92\n  local tmp93\n  local tmp94\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort -n <<< \"$list\")\"\n  [[ \"$list\" == \"$sorted\" ]]\
    \ || return 1\n  [[ \"$list\" == \"$sorted\" ]]  || return 0\n  return 1\n}\n\n\
    candidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[\
    \ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\"\
    ) = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n\
    \    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"\
    1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\
    \n  local sorted=\"$(sort <<< \"$list\")\"\n  local count=\"$(echo \"$list\" |\
    \ uniq | wc -l)\"\n  [[ \"$count\" -gt 1 ]]\n}\n\ncandidate() {\n    is_sorted\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"true\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5\") = \"true\" ]]\n    [[ $(candidate \"1 3 2 4\
    \ 5\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 4 5 6\") = \"true\" ]]\n   \
    \ [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\" ]]\n    [[ $(candidate \"1 3 2\
    \ 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n    [[ $(candidate\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3 2 1\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 2 2 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2 3 3 3 4\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1 2 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of numbers, return whether or not they are\
    \ sorted\n# in ascending order. If list has more than 1 duplicate of the same\n\
    # number, return False. Assume no negative numbers and only integers.\n# Examples\n\
    # is_sorted([5]) \u279E True\n# is_sorted([1, 2, 3, 4, 5]) \u279E True\n# is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n# is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n# is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n# is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    # is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n# is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
    \ False\n#\n# $1 is a space-separated list\nis_sorted() {\n  local sorted_list=\"\
    $1\"\n  local sorted_list_count\n  local sorted_list_count1\n  local sorted_list_count2\n\
    \  local sorted_list_count3\n  local sorted_list_count4\n  local sorted_list_count5\n\
    \  local sorted_list_count6\n  local sorted_list_count7\n  local sorted_list_count8\n\
    \  local sorted_list_count9\n  local sorted_list_count10\n  local sorted_list_count11\n\
    \  local sorted_list_count12\n  local sorted_list_count13\n  local sorted_list_count14\n\
    \  local sorted_list_count15\n  local sorted_list_count16\n  local sorted_list_count17\n\
    \  local sorted_list_count18\n  local sorted_list_count19\n  local sorted_list_count20\n\
    \  local sorted_list_count21\n  local sorted_list_count22\n  local sorted_list_count23\n\
    \  local sorted_list_count24\n  local sorted_list_count25\n  local sorted_list_count26\n\
    \  local sorted_list_count27\n  local sorted_list_count28\n  local sorted_list_count29\n\
    \  local sorted_list_count30\n  local sorted_list_count31\n  local sorted_list_count32\n\
    \  local sorted_list_count33\n  local sorted_list_count34\n  local sorted_list_count35\n\
    \  local sorted_list_count36\n  local sorted_list_count37\n  local sorted_list_count38\n\
    \  local sorted_list_count39\n  local sorted_list_count40\n  local sorted_list_count41\n\
    \  local sorted_list_count42\n  local sorted_list_count43\n  local sorted_list_count44\n\
    \  local sorted_list_count45\n  local sorted_list_count46\n  local sorted_list_count47\n\
    \  local sorted_list_count48\n  local sorted_list_count49\n  local sorted_list_count50\n\
    \  local sorted_list_count51\n  local sorted_list_count52\n  local sorted_list_count53\n\
    \  local sorted_list_count54\n  local sorted_list_count55\n  local sorted_list_count56\n\
    \  local sorted_list_count57\n  local sorted_list_count58\n  local sorted_list_count59\n\
    \  local sorted_list_count60\n  local sorted_list_count61\n  local sorted_list_count62\n\
    \  local sorted_list_count63\n  local sorted_list_count64\n  local sorted_list_count65\n\
    \  local sorted_list_count66\n  local sorted_list_count67\n  local sorted_list_count68\n\
    \  local sorted_list_count69\n  local sorted_list_count70\n  local sorted_list_count71\n\
    \  local \n}\n\ncandidate() {\n    is_sorted \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"5\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5\") =\
    \ \"true\" ]]\n    [[ $(candidate \"1 3 2 4 5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7\") = \"true\"\
    \ ]]\n    [[ $(candidate \"1 3 2 4 5 6 7\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n    [[ $(candidate \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 2 1\") = \"false\" ]]\n    [[ $(candidate \"1 2 2 2 3 4\") = \"false\" ]]\n\
    \    [[ $(candidate \"1 2 3 3 3 4\") = \"false\" ]]\n    [[ $(candidate \"1 2\
    \ 2 3 3 4\") = \"true\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"true\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030759
