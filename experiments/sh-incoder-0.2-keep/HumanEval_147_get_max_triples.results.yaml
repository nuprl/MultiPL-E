language: sh
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a\n  local i\n  local j\n  local k\n  local count\n\
    \  a=$( seq 1 $n )\n  for i in $a; do\n    for j in $a; do\n      for k in $a;\
    \ do\n        if [ $i -le $j -a $j -le $k -a $i -le $k ]; then\n          count=$((\
    \ $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\n\
    candidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local count=0\n  local i\n  local\
    \ j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k -a $i -le $k\
    \ ]; then\n          count=$((count+1))\n        fi\n      done\n    done\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++))\n    do\n      echo -n\
    \ $i\n    done))\n  local i\n  local j\n  local k\n  local triples=0\n  for ((i=1;\
    \ i<=$n; i++))\n  do\n    for ((j=1; j<=$n; j++))\n    do\n      for ((k=1; k<=$n;\
    \ k++))\n      do\n        if (( ${a[i]} + ${a[j]} + ${a[k]} % 3 == 0 ))\n   \
    \     then\n          triples=$((triples + 1))\n        fi\n      done\n    done\n\
    \  done\n  echo $triples\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp7frsi4b7.sh: line 30: ((: +  +  % 3 == 0 :'
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-i+1));\
    \ done))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n    for j in\
    \ \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( $i > $j && $j\
    \ > $k )); then\n          count=$((count+1))\n        fi\n      done\n    done\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)) ; do echo $((i*i-1)+i+1)\
    \ ; done))\n  local count=0\n  local triples=0\n  local triple\n  for ((i=1; i<=$n;\
    \ i++)) ; do\n    for ((j=1; j<=$n; j++)) ; do\n      for ((k=1; k<=$n; k++))\
    \ ; do\n        triple=$((i*i-1)+j+k)\n        if (( triple == $((a[i]+a[j]+a[k]))\
    \ )) ; then\n          count=$((count+1))\n        fi\n      done\n    done\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgpcocas_.sh: command substitution: line 16: syntax error near unexpected
    token `+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: `(i*i-1)+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: syntax error near unexpected
    token `+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: `(i*i-1)+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: syntax error near unexpected
    token `+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: `(i*i-1)+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: syntax error near unexpected
    token `+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: `(i*i-1)+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: syntax error near unexpected
    token `+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 16: `(i*i-1)+i+1''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: `(i*i-1)+j+k''

    /tmp/tmpgpcocas_.sh: command substitution: line 23: syntax error near unexpected
    token `+j+k''

    /tmp/tmpgpcocas_.sh: command subst'
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n    local n=$1\n    local a=($(seq 1 $n))\n    local i=0\n    local j=0\n\
    \    local k=0\n    local count=0\n    while [ $i -lt $n ]; do\n        if [ $i\
    \ -eq $j ]; then\n            (( count++ ))\n        fi\n        if [ $i -eq $k\
    \ ]; then\n            (( count++ ))\n        fi\n        if [ $i -le $j ] &&\
    \ [ $i -le $k ]; then\n            (( count++ ))\n        fi\n        (( i++ ))\n\
    \    done\n    echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local count=0\n  local i\n  local\
    \ j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k -a $i -le $k\
    \ ]; then\n          count=$((count+1))\n        fi\n      done\n    done\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i - i +\
    \ 1)); done))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n    for\
    \ j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i*i - i\
    \ + 1 + j*j + k )); then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a\n  local i\n  local j\n  local k\n  local count\n\
    \  a=($(for ((i=1; i<=$n; i++)); do echo $i*$i-$i+1; done))\n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i < $j && $j < $k && $i < $k )); then\n          count=$(( $count + 1 ))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local i\n  local j\n  local k\n\
    \  local count\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if (( $i > $j && $i > $k )); then\n    \
    \      count=$(( $count + 1 ))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local i\n  local j\n  local k\n\
    \  local count\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if (( $i < $j && $j < $k && $i + $j + $k\
    \ == $n )); then\n          count=$(( $count + 1 ))\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local count=0\n  local i\n  local\
    \ j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if (( i == j && i == k )); then\n      \
    \    continue\n        fi\n        if (( i == j || i == k || j == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || j == k )); then\n\
    \          continue\n        fi\n        if (( i == j && k == k )); then\n   \
    \       continue\n        fi\n        if (( i == j || i == k || k == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k && k == k ));\
    \ then\n          continue\n        fi\n        if (( i == j || i == k || j ==\
    \ k || k == k )); then\n          continue\n        fi\n        if (( i == j &&\
    \ j == k && k == k )); then\n          continue\n        fi\n        if (( i ==\
    \ j && j == k && k == k )); then\n          continue\n        fi\n        if ((\
    \ i == j && j == k && k == k )); then\n          continue\n        fi\n      \
    \  if (( i == j || i == k || j == k || k == k )); then\n          continue\n \
    \       fi\n        if (( i == j && j == k && k == k )); then\n          continue\n\
    \        fi\n        if (( i == j && j == k && k == k )); then\n          continue\n\
    \        fi\n        if (( i == j && j == k && k == k )); then\n          continue\n\
    \        fi\n        if (( i == j || i == k || j == k || k == k )); then\n   \
    \       continue\n        fi\n        if (( i == j && j == k && k == k )); then\n\
    \          continue\n        fi\n        if (( i == j && j == k && k == k ));\
    \ then\n          continue\n        fi\n        if (( i == j && j == k && k ==\
    \ k )); then\n          continue\n        fi\n        if (( i == j || i == k ||\
    \ j == k || k == k )); then\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxz6hde9v.sh: line 82: syntax error near unexpected token `}''

    /tmp/tmpxz6hde9v.sh: line 82: `}''

    '
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local i\n  local j\n  local k\n\
    \  local count\n  local max_count\n  local max_triple\n  \n  for i in \"${a[@]}\"\
    ; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if\
    \ (( $i == $j && $j == $k )); then\n          count=$(( $count + 1 ))\n      \
    \  fi\n      done\n    done\n  done\n  \n  max_count=$(( $count / 3 ))\n  max_triple=$((\
    \ $max_count * 3 ))\n  \n  echo $max_triple\n}\n\ncandidate() {\n    get_max_triples\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n  \
    \  [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n\
    \    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++))\n    do\n      echo -n\
    \ $i\n    ))\n  local i\n  local j\n  local k\n  local count\n  for i in \"${a[@]}\"\
    \n  do\n    for j in \"${a[@]}\"\n    do\n      for k in \"${a[@]}\"\n      do\n\
    \        if (( $i + $j + $k % 3 == 0 ))\n        then\n          count=$(( $count\
    \ + 1 ))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy4s56_s_.sh: command substitution: line 23: syntax error near unexpected
    token `)''

    /tmp/tmpy4s56_s_.sh: command substitution: line 23: `    )''

    '
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local count=0\n  local i\n  for\
    \ i in \"${a[@]}\"; do\n    local j\n    for j in \"${a[@]}\"; do\n      local\
    \ k\n      for k in \"${a[@]}\"; do\n        if (( i*i + j*j + k*k == i*i*i*k\
    \ )); then\n          count=$(( $count + 1 ))\n        fi\n      done\n    done\n\
    \  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(seq 1 $n))\n  local count=0\n  local i\n  local\
    \ j\n  local k\n  for i in \"${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n   \
    \   for k in \"${a[@]}\"; do\n        if [ $i -le $j -a $j -le $k -a $i -le $k\
    \ ]; then\n          let count=$count+1\n        fi\n      done\n    done\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\")\
    \ = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\"\
    ) = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)) ; do echo -n $i*$i-$i+1\
    \ '\\t' ; done))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n   \
    \ for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i*i+j*j+k*k\
    \ == i*i*j*k )); then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected
    (error token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t4*4-4+1: syntax error: operand expected (error
    token is "\t4*4-4+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t5*5-5+1: syntax error: operand expected (error
    token is "\t5*5-5+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t: syntax error: operand expected (error token
    is "\t")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t2*2-2+1: syntax error: operand expected (error
    token is "\t2*2-2+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t3*3-3+1: syntax error: operand expected (error
    token is "\t3*3-3+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t4*4-4+1: syntax error: operand expected (error
    token is "\t4*4-4+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t4*4-4+1: syntax error: operand expected (error
    token is "\t4*4-4+1")

    /tmp/tmpq33oulro.sh: line 22: ((: \t4*4-4+1: syntax error: operand '
  stdout: ''
  timestamp: 1660032601
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1));\
    \ done))\n  local i\n  local j\n  local k\n  local count=0\n  for ((i=0; i<$n;\
    \ i++)); do\n    for ((j=0; j<$n; j++)); do\n      for ((k=0; k<$n; k++)); do\n\
    \        if (( $i == $j && $j == $k )); then\n          continue\n        fi\n\
    \        if (( $a[ $i ] == $a[ $j ] && $a[ $j ] == $a[ $k ] )); then\n       \
    \   count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpagmuu2ix.sh: line 16: syntax error near unexpected token `;''

    /tmp/tmpagmuu2ix.sh: line 16: `  local a=($(for ((i=1; i<=$n; i++)); do echo $((i*i-1)+i+1));
    done))''

    /tmp/tmpagmuu2ix.sh: line 17: local: can only be used in a function

    /tmp/tmpagmuu2ix.sh: line 18: local: can only be used in a function

    /tmp/tmpagmuu2ix.sh: line 19: local: can only be used in a function

    /tmp/tmpagmuu2ix.sh: line 20: local: can only be used in a function

    /tmp/tmpagmuu2ix.sh: line 23: ((: i<: syntax error: operand expected (error token
    is "<")

    /tmp/tmpagmuu2ix.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmpagmuu2ix.sh: line 34: `}''

    '
  stdout: '

    '
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)); do echo $((i * i - i\
    \ + 1)); done))\n  local count=0\n  local triples=0\n  local triple\n  for ((i=1;\
    \ i<=$n; i++)); do\n    for ((j=1; j<=$n; j++)); do\n      for ((k=1; k<=$n; k++));\
    \ do\n        triple=$((${a[i]}+${a[j]}+${a[k]}))\n        if ((triple%3==0));\
    \ then\n          count=$((count+1))\n          triples=$((triples+1))\n     \
    \   fi\n      done\n    done\n  done\n  echo $count\n  echo $triples\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx0mfa6gr.sh: line 23: 3+3+: syntax error: operand expected (error
    token is "+")

    '
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)) ; do echo $((i*i - i +\
    \ 1)); done))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n    for\
    \ j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if [ $i -le $j\
    \ -a $j -le $k ]; then\n          let count=$count+1\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)) ; do echo -n \"a[\"$i\"\
    ]=\"; done))\n  local count=0\n  local i\n  for i in $(seq 1 $n); do\n    local\
    \ j\n    for j in $(seq 1 $n); do\n      local k\n      for k in $(seq 1 $n);\
    \ do\n        if (( ${a[$i]} + ${a[$j]} + ${a[$k]} % 3 == 0 )); then\n       \
    \   count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
    \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmp8hya4wz2.sh: line 24: ((: +  +  % 3 == 0 :'
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++)) ; do echo -n \"a[\"$i\"\
    ]=\"; done))\n  local count=0\n  local i\n  local j\n  local k\n  for i in \"\
    ${a[@]}\"; do\n    for j in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n\
    \        if (( i < j && j < k && k < i )); then\n          count=$((count+1))\n\
    \        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate() {\n\
    \    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate \"10\"\
    ) = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpha3movwd.sh: line 24: ((: a[1]=a[2]=a[3]=a[4]=a[5]=: syntax error:
    operand expected (error token is "=")

    '
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a=($(for ((i=1; i<=$n; i++))\n    do\n      echo $((i*i-i+1))\n\
    \    done))\n  local count=0\n  local i\n  for i in \"${a[@]}\"; do\n    for j\
    \ in \"${a[@]}\"; do\n      for k in \"${a[@]}\"; do\n        if (( i*j+k == i*i*k\
    \ )); then\n          count=$((count+1))\n        fi\n      done\n    done\n \
    \ done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"\
    6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"\
    100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a\n  a=($(for ((i=1; i<=$n; i++)); do echo $((i * i\
    \ - i + 1)); done))\n  local i\n  local j\n  local k\n  local count\n  for i in\
    \ \"${!a[@]}\"; do\n    for j in \"${!a[@]}\"; do\n      for k in \"${!a[@]}\"\
    ; do\n        if (( i < j && j < k && k < i )); then\n          count=$((count\
    \ + 1))\n        fi\n      done\n    done\n  done\n  echo $count\n}\n\ncandidate()\
    \ {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n    [[ $(candidate\
    \ \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032601
- exit_code: 2
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a\n  local i\n  local j\n  local k\n  local count\n\
    \  a=($(for ((i=1; i<=$n; i++)); do echo $((i*i - i + 1)); done))\n  count=0\n\
    \  for ((i=1; i<=$n; i++)); do\n    for ((j=1; j<=$n; j++)); do\n      for ((k=1;\
    \ k<=$n; k++)); do\n        if (( ${a[i]} + ${a[j]} + ${a[k]} ) % 3 == 0 ); then\n\
    \          count=$((count+1))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n\
    \    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzi6ufbiy.sh: line 26: syntax error near unexpected token `%''

    /tmp/tmpzi6ufbiy.sh: line 26: `        if (( ${a[i]} + ${a[j]} + ${a[k]} ) % 3
    == 0 ); then''

    '
  stdout: ''
  timestamp: 1660032601
- exit_code: 1
  program: "#!/bin/bash\n# You are given a positive integer n. You have to create\
    \ an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value\
    \ of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k])\
    \ of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example\
    \ :\n# Input: n = 5\n# Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n#\
    \ The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
    \ {\n  local n=$1\n  local a\n  local i\n  local j\n  local k\n  local count\n\
    \  a=($(for ((i=1; i<=$n; i++))\n  do\n    echo $((i*i - i + 1))\n  done))\n \
    \ count=0\n  for ((i=1; i<=$n; i++))\n  do\n    for ((j=1; j<=$n; j++))\n    do\n\
    \      for ((k=1; k<=$n; k++))\n      do\n        if (( ${a[i]} + ${a[j]} + ${a[k]}\
    \ % 3 == 0 ))\n        then\n          count=$((count+1))\n        fi\n      done\n\
    \    done\n  done\n  echo $count\n}\n\ncandidate() {\n    get_max_triples \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate\
    \ \"6\") = \"4\" ]]\n    [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate\
    \ \"100\") = \"53361\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpluza_fu8.sh: line 32: ((: 3 + 3 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 3 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 3 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 3 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 3 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 7 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 7 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 7 + 13 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 7 + 21 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 7 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 13 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 13 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 13 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 13 + 21 +  % 3 == 0 : syntax error: operand
    expected (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 13 +  +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 21 + 3 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 21 + 7 +  % 3 == 0 : syntax error: operand expected
    (error token is "% 3 == 0 ")

    /tmp/tmpluza_fu8.sh: line 32: ((: 21 + 13 +  % 3 == 0 : syntax error: operand
    expected (error token '
  stdout: ''
  timestamp: 1660032601
