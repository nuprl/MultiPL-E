language: sh
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local i\n    local j\n\
    \    local count\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local i\n  \
    \  local j\n    local count\n    local factor_count\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local count\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local i\n    local j\n\
    \    local count\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local i\n  \
    \  local j\n    local count\n    local factor_count\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local count\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local i\n    local j\n\
    \    local count\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local i\n  \
    \  local j\n    local count\n    local factor_count\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local count\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local i\n    local \n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n}\n\ncandidate() {\n   \
    \ factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_index\n    local factor_count\n    local factor\n \
    \   local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local number=$1\n    local primes=()\n    local\
    \ prime_count=0\n    local prime_number=$1\n    local prime_numbers=()\n    local\
    \ prime_numbers_count=0 # number of primes found so far\n    local prime_numbers_factors=()\
    \ # factors of primes found so far\n    local prime_numbers_factors_count=0\n\
    \    local prime_numbers_factors_count=0 # number of factors of primes found so\
    \ far\n    local prime_numbers_factors_factors=() # factors of factors of primes\
    \ found so far\n    local prime_numbers_factors_factors_count=0 # number of factors\
    \ of factors of primes found so far\n    local prime_numbers_factors_factors_factors=()\
    \ # factors of factors of factors of primes found so far\n    local prime_numbers_factors_factors_factors_count=0\
    \ # number of factors of factors of factors of primes found so far\n    local\
    \ prime_numbers_factors_factors_factors_factors=() # factors of factors of factors\
    \ of factors of primes found so far\n    local prime_numbers_factors_factors_factors_factors_count=0\
    \ # number of factors of factors of factors of factors of primes found so far\n\
    \    local prime_numbers_factors_factors_factors_factors_factors=() # factors\
    \ of factors of factors of factors of factors of primes found so far\n    local\
    \ prime_numbers_factors_factors_factors_factors_factors_count=0 # number of factors\
    \ of factors of factors of factors of factors of primes found so far\n    local\
    \ prime_numbers_factors_factors_factors_factors_factors_factors=() # factors of\
    \ factors of factors of factors of factors of factors of primes found so far\n\
    \    local prime_numbers_factors_factors_factors_factors_factors_factors_count=0\
    \ # number of factors of factors of factors of factors of factors of factors of\
    \ primes found so far\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factors=()\
    \ # factors of factors of factors of factors of factors of factors of factors\
    \ of primes found so far\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factors_factors_count=0\
    \ # number of factors of factors of factors of factors of factors of factors of\
    \ factors of factors of primes found so far\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local num\n    local factors\n\
    \    local factor\n    local num\n    local count\n    local factors\n    local\
    \ factor\n    local num\n    local count\n    local factors\n    local factor\n\
    \    local num\n    local count\n    local factors\n    local factor\n    local\
    \ num\n    local count\n    local factors\n    local factor\n    local num\n \
    \   local count\n    local factors\n    local factor\n    local num\n    local\
    \ count\n    local factors\n    local factor\n    local num\n    local count\n\
    \    local factors\n    local factor\n    local num\n    local count\n    local\
    \ factors\n    local factor\n    local num\n    local count\n    local factors\n\
    \    local factor\n    local num\n    local count\n    local factors\n    local\
    \ factor\n    local num\n    local count\n    local factors\n    local factor\n\
    \    local num\n    local count\n    local factors\n    local factor\n    local\
    \ num\n    local count\n    local factors\n    local factor\n    local num\n \
    \   local count\n    local factors\n    local factor\n    local num\n    local\
    \ count\n    local factors\n    local factor\n    local num\n    local count\n\
    \    local factors\n    local factor\n    local num\n    local count\n    local\
    \ factors\n    local factor\n    local num\n    local count\n    local factors\n\
    \    local factor\n    local num\n    local count\n    local factors\n    local\
    \ factor\n    local num\n    local count\n    local factors\n    local factor\n\
    \    local num\n    local count\n    local factors\n    local factor\n    local\
    \ num\n    local count\n    local factors\n    local factor\n    local num\n \
    \   local count\n    local factors\n    local factor\n    local num\n    local\
    \ count\n    local factors\n    local factor\n    local num\n    local count\n\
    \    local factors\n    local factor\n    local num\n    local count\n    local\
    \ factors\n    local factor\n    local num\n    local count\n    local factors\n\
    \    local factor\n    local num\n    local count\n    local factors\n    local\
    \ factor\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    while [ $factor -gt 1 ]; do\n        factor_count=$((factor_count+1))\n\
    \        factor=$((factor*2))\n    done\n    factor_count=$((factor_count-1))\n\
    \    factors=($(seq 1 $factor_count))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<< \"${factors[*]}\"))\n    factors=($(sort <<< \"${factors[*]}\"\
    ))\n    factors=($(sort <<\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7sx77l53.sh: line 52: unexpected EOF while looking for matching
    `)''

    /tmp/tmp7sx77l53.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local factor\n  local\
    \ i\n  local j\n  local count\n  local product\n  local factors\n  local factor\n\
    \  local i\n  local j\n  local count\n  local product\n  local factors\n  local\
    \ factor\n  local i\n  local j\n  local count\n  local product\n  local factors\n\
    \  local factor\n  local i\n  local j\n  local count\n  local product\n  local\
    \ factors\n  local factor\n  local i\n  local j\n  local count\n  local product\n\
    \  local factors\n  local factor\n  local i\n  local j\n  local count\n  local\
    \ product\n  local factors\n  local factor\n  local i\n  local j\n  local count\n\
    \  local product\n  local factors\n  local factor\n  local i\n  local j\n  local\
    \ count\n  local product\n  local factors\n  local factor\n  local i\n  local\
    \ j\n  local count\n  local product\n  local factors\n  local factor\n  local\
    \ i\n  local j\n  local count\n  local product\n  local factors\n  local factor\n\
    \  local i\n  local j\n  local count\n  local product\n  local factors\n  local\
    \ factor\n  local i\n  local j\n  local count\n  local product\n  local factors\n\
    \  local factor\n  local i\n  local j\n  local count\n  local product\n  local\
    \ factors\n  local factor\n  local i\n  local j\n  local count\n  local product\n\
    \  local factors\n  local factor\n  local i\n  local j\n  local count\n  local\
    \ product\n  local factors\n  local factor\n  local i\n  local j\n  local count\n\
    \  local product\n  local factors\n  local factor\n  local i\n  local j\n  local\
    \ count\n  local product\n  local factors\n  local factor\n  local i\n  local\
    \ j\n  local count\n  local product\n  local factors\n  local factor\n  local\
    \ i\n  local j\n  local count\n  local product\n  local factors\n  local factor\n\
    \  local i\n  local j\n  local count\n  local product\n  local factors\n  local\
    \ factor\n  local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_index\n    local factor_count\n    local factor\n \
    \   local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local n\n    local count\n    local factorsCount\n\
    \    local factorsCount2\n    local factorsCount3\n    local factorsCount4\n \
    \   local factorsCount5\n    local factorsCount6\n    local factorsCount7\n  \
    \  local factorsCount8\n    local factorsCount9\n    local factorsCount10\n  \
    \  local factorsCount11\n    local factorsCount12\n    local factorsCount13\n\
    \    local factorsCount14\n    local factorsCount15\n    local factorsCount16\n\
    \    local factorsCount17\n    local factorsCount18\n    local factorsCount19\n\
    \    local factorsCount20\n    local factorsCount21\n    local factorsCount22\n\
    \    local factorsCount23\n    local factorsCount24\n    local factorsCount25\n\
    \    local factorsCount26\n    local factorsCount27\n    local factorsCount28\n\
    \    local factorsCount29\n    local factorsCount30\n    local factorsCount31\n\
    \    local factorsCount32\n    local factorsCount33\n    local factorsCount34\n\
    \    local factorsCount35\n    local factorsCount36\n    local factorsCount37\n\
    \    local factorsCount38\n    local factorsCount39\n    local factorsCount40\n\
    \    local factorsCount41\n    local factorsCount42\n    local factorsCount43\n\
    \    local factorsCount44\n    local factorsCount45\n    local factorsCount46\n\
    \    local factorsCount47\n    local factorsCount48\n    local factorsCount49\n\
    \    local factorsCount50\n    local factorsCount51\n    local factorsCount52\n\
    \    local factorsCount53\n    local factorsCount54\n    local factorsCount55\n\
    \    local factorsCount56\n    local factorsCount57\n    local factorsCount58\n\
    \    local factorsCount59\n    local factorsCount60\n    local factorsCount61\n\
    \    local factorsCount62\n    local factorsCount63\n    local factorsCount64\n\
    \    local factorsCount65\n    local factorsCount66\n    local factorsCount67\n\
    \    local factorsCount68\n    local factorsCount69\n    local factors\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local factors_len\n   \
    \ local factors_len2\n    local factors_len3\n    local factors_len4\n    local\
    \ factors_len5\n    local factors_len6\n    local factors_len7\n    local factors_len8\n\
    \    local factors_len9\n    local factors_len10\n    local factors_len11\n  \
    \  local factors_len12\n    local factors_len13\n    local factors_len14\n   \
    \ local factors_len15\n    local factors_len16\n    local factors_len17\n    local\
    \ factors_len18\n    local factors_len19\n    local factors_len20\n    local factors_len21\n\
    \    local factors_len22\n    local factors_len23\n    local factors_len24\n \
    \   local factors_len25\n    local factors_len26\n    local factors_len27\n  \
    \  local factors_len28\n    local factors_len29\n    local factors_len30\n   \
    \ local factors_len31\n    local factors_len32\n    local factors_len33\n    local\
    \ factors_len34\n    local factors_len35\n    local factors_len36\n    local factors_len37\n\
    \    local factors_len38\n    local factors_len39\n    local factors_len40\n \
    \   local factors_len41\n    local factors_len42\n    local factors_len43\n  \
    \  local factors_len44\n    local factors_len45\n    local factors_len46\n   \
    \ local factors_len47\n    local factors_len48\n    local factors_len49\n    local\
    \ factors_len50\n    local factors_len51\n    local factors_len52\n    local factors_len53\n\
    \    local factors_len54\n    local factors_len55\n    local factors_len56\n \
    \   local factors_len57\n    local factors_len58\n    local factors_len59\n  \
    \  local factors_len60\n    local factors_len61\n    local factors_len62\n   \
    \ local factors_len63\n    local factors_len64\n    local factors_len65\n    local\
    \ factors_len66\n    local factors_len67\n    local factors_len68\n    local factors_len69\n\
    \    local factors_len70\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_count\n  \
    \  local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local n\n    local count\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local factor\n    local\
    \ factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local k\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local factor\n    local factor_count\n    local factor_index\n    local primes\n\
    \    local prime\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    local prime_index\n    local prime_count\n\
    \    local prime_index\n    local prime_count\n    local prime_index\n    local\
    \ prime_count\n    local prime_index\n    local prime_count\n    local prime_index\n\
    \    local prime_count\n    local prime_index\n    local prime_count\n    local\
    \ prime_index\n    local prime_count\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor_count\n\
    \    local factor_index\n    local factor_index2\n    local factor_index3\n  \
    \  local factor_index4\n    local factor_index5\n    local factor_index6\n   \
    \ local factor_index7\n    local factor_index8\n    local factor_index9\n    local\
    \ factor_index10\n    local factor_index11\n    local factor_index12\n    local\
    \ factor_index13\n    local factor_index14\n    local factor_index15\n    local\
    \ factor_index16\n    local factor_index17\n    local factor_index18\n    local\
    \ factor_index19\n    local factor_index20\n    local factor_index21\n    local\
    \ factor_index22\n    local factor_index23\n    local factor_index24\n    local\
    \ factor_index25\n    local factor_index26\n    local factor_index27\n    local\
    \ factor_index28\n    local factor_index29\n    local factor_index30\n    local\
    \ factor_index31\n    local factor_index32\n    local factor_index33\n    local\
    \ factor_index34\n    local factor_index35\n    local factor_index36\n    local\
    \ factor_index37\n    local factor_index38\n    local factor_index39\n    local\
    \ factor_index40\n    local factor_index41\n    local factor_index42\n    local\
    \ factor_index43\n    local factor_index44\n    local factor_index45\n    local\
    \ factor_index46\n    local factor_index47\n    local factor_index48\n    local\
    \ factor_index49\n    local factor_index50\n    local factor_index51\n    local\
    \ factor_index52\n    local factor_index53\n    local factor_index54\n    local\
    \ factor_index55\n    local factor_index56\n    local factor_index57\n    local\
    \ factor_index58\n    local factor_index59\n    local factor_index60\n    local\
    \ factor_index61\n    local factor_index62\n    local factor_index63\n    local\
    \ factor_index64\n    local factor_index65\n    local factor_index66\n    local\
    \ factor_index67\n    local factor_index68\n    local factor_index69\n    local\
    \ factor_index70\n    local factor_index71\n    local factor_index72\n    local\
    \ factor_index73\n    local factor_index74\n    local factor_index75\n    local\
    \ factor_index76\n    local factor_index77\n    local factor_index78\n    local\
    \ factor_index79\n    local factor_index80\n\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factor_index=1\n    local factor_index2=1\n\
    \    local factor_index3=1\n    local factor_index4=1\n    local factor_index5=1\n\
    \    local factor_index6=1\n    local factor_index7=1\n    local factor_index8=1\n\
    \    local factor_index9=1\n    local factor_index10=1\n    local factor_index11=1\n\
    \    local factor_index12=1\n    local factor_index13=1\n    local factor_index14=1\n\
    \    local factor_index15=1\n    local factor_index16=1\n    local factor_index17=1\n\
    \    local factor_index18=1\n    local factor_index19=1\n    local factor_index20=1\n\
    \    local factor_index21=1\n    local factor_index22=1\n    local factor_index23=1\n\
    \    local factor_index24=1\n    local factor_index25=1\n    local factor_index26=1\n\
    \    local factor_index27=1\n    local factor_index28=1\n    local factor_index29=1\n\
    \    local factor_index30=1\n    local factor_index31=1\n    local factor_index32=1\n\
    \    local factor_index33=1\n    local factor_index34=1\n    local factor_index35=1\n\
    \    local factor_index36=1\n    local factor_index37=1\n    local factor_index38=1\n\
    \    local factor_index39=1\n    local factor_index40=1\n    local factor_index41=1\n\
    \    local factor_index42=1\n    local factor_index43=1\n    local factor_index44=1\n\
    \    local factor_index45=1\n    local factor_index46=1\n    local factor_index47=1\n\
    \    local factor_index48=1\n    local factor_index49=1\n    local factor_index50=1\n\
    \    local factor_index51=1\n    local factor_index52=1\n    local factor_index53=1\n\
    \    local factor_index54=1\n    local factor_index55=1\n    local factor_index56=1\n\
    \    local factor_index57=1\n    local factor_index58=1\n    local factor_index59=1\n\
    \    local factor_index60=1\n    local factor_index61=1\n    local factor_index62=1\n\
    \    local factor_index63=1\n    local factor_index64=1\n    local factor_index65=1\n\
    \    local factor_index66=1\n    local factor_index67=1\n    local factor_index68=1\n\
    \    local factor_index69=1\n    local factor_index70=1\n    local factor_index71=1\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=()\n\
    \    local factor_count=()\n    local factor_counts=()\n    local factor_counts_sorted=()\n\
    \    local factor_counts_sorted_reverse=()\n    local factor_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts=()\n    local factor_counts_sorted_reverse_counts_sorted=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse=()\n    local factor_counts_sorted_reverse_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts=()\n    local\
    \ factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted=()\n    local\
    \ factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_count=()\n\
    \    local factor_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts_sorted_reverse_counts=()\n\
    \    local factor_counts_sorted_\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local factors\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_index2\n \
    \   local factor_index3\n    local factor_index4\n    local factor_index5\n  \
    \  local factor_index6\n    local factor_index7\n    local factor_index8\n   \
    \ local factor_index9\n    local factor_index10\n    local factor_index11\n  \
    \  local factor_index12\n    local factor_index13\n    local factor_index14\n\
    \    local factor_index15\n    local factor_index16\n    local factor_index17\n\
    \    local factor_index18\n    local factor_index19\n    local factor_index20\n\
    \    local factor_index21\n    local factor_index22\n    local factor_index23\n\
    \    local factor_index24\n    local factor_index25\n    local factor_index26\n\
    \    local factor_index27\n    local factor_index28\n    local factor_index29\n\
    \    local factor_index30\n    local factor_index31\n    local factor_index32\n\
    \    local factor_index33\n    local factor_index34\n    local factor_index35\n\
    \    local factor_index36\n    local factor_index37\n    local factor_index38\n\
    \    local factor_index39\n    local factor_index40\n    local factor_index41\n\
    \    local factor_index42\n    local factor_index43\n    local factor_index44\n\
    \    local factor_index45\n    local factor_index46\n    local factor_index47\n\
    \    local factor_index48\n    local factor_index49\n    local factor_index50\n\
    \    local factor_index51\n    local factor_index52\n    local factor_index53\n\
    \    local factor_index54\n    local factor_index55\n    local factor_index56\n\
    \    local factor_index57\n    local factor_index58\n    local factor_index59\n\
    \    local factor_index60\n    local factor_index61\n    local factor_index62\n\
    \    local factor_index63\n    local factor_index64\n    local factor_index65\n\
    \    local factor_index66\n    local factor_index67\n    local factor_index68\n\
    \    local factor_index69\n    local factor_index70\n    local factor_index71\n\
    \    local factor_index72\n    local factor_index73\n    local factor_index74\n\
    \    local factor_index75\n    local factor_index76\n    local factor_index77\n\
    \    local factor_index78\n    local factor_index79\n    local factor_index80\n\
    \    local factor_index81\n    local factor_index82\n    local factor_index83\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local i\n    local j\n    local count\n    local factorsCount\n    local\
    \ factorsCountMax\n    local factorsCountMin\n    local factorsCountMaxMin\n \
    \   local factorsCountMaxMinMin\n    local factorsCountMaxMinMinMin\n    local\
    \ factorsCountMaxMinMinMin\n    local factorsCountMaxMinMinMin\n    local factorsCountMaxMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factorsCountMaxMinMinMinMin\n\
    \    local factorsCountMaxMinMinMinMin\n    local factors\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factor_index=1\n    local factor_index2=1\n\
    \    local factor_index3=1\n    local factor_index4=1\n    local factor_index5=1\n\
    \    local factor_index6=1\n    local factor_index7=1\n    local factor_index8=1\n\
    \    local factor_index9=1\n    local factor_index10=1\n    local factor_index11=1\n\
    \    local factor_index12=1\n    local factor_index13=1\n    local factor_index14=1\n\
    \    local factor_index15=1\n    local factor_index16=1\n    local factor_index17=1\n\
    \    local factor_index18=1\n    local factor_index19=1\n    local factor_index20=1\n\
    \    local factor_index21=1\n    local factor_index22=1\n    local factor_index23=1\n\
    \    local factor_index24=1\n    local factor_index25=1\n    local factor_index26=1\n\
    \    local factor_index27=1\n    local factor_index28=1\n    local factor_index29=1\n\
    \    local factor_index30=1\n    local factor_index31=1\n    local factor_index32=1\n\
    \    local factor_index33=1\n    local factor_index34=1\n    local factor_index35=1\n\
    \    local factor_index36=1\n    local factor_index37=1\n    local factor_index38=1\n\
    \    local factor_index39=1\n    local factor_index40=1\n    local factor_index41=1\n\
    \    local factor_index42=1\n    local factor_index43=1\n    local factor_index44=1\n\
    \    local factor_index45=1\n    local factor_index46=1\n    local factor_index47=1\n\
    \    local factor_index48=1\n    local factor_index49=1\n    local factor_index50=1\n\
    \    local factor_index51=1\n    local factor_index52=1\n    local factor_index53=1\n\
    \    local factor_index54=1\n    local factor_index55=1\n    local factor_index56=1\n\
    \    local factor_index57=1\n    local factor_index58=1\n    local factor_index59=1\n\
    \    local factor_index60=1\n    local factor_index61=1\n    local factor_index62=1\n\
    \    local factor_index63=1\n    local factor_index64=1\n    local factor_index65=1\n\
    \    local factor_index66=1\n    local factor_index67=1\n    local factor_index68=1\n\
    \    local factor_index69=1\n    local factor_index70=1\n    local factor_index71=1\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local n\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local \n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n}\n\ncandidate() {\n   \
    \ factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    while [ $factor_count\
    \ -gt 0 ]; do\n        factor=`expr $factor \\* $1`\n        factor_count=$((\
    \ $factor_count - 1 ))\n        factors=(\"${factors[@]}\" \"$factor\")\n    done\n\
    \    echo \"${factors[@]}\"\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_counts\n    local\
    \ factor_counts_index\n    local factor_counts_index2\n    local factor_counts_index3\n\
    \    local factor_counts_index4\n    local factor_counts_index5\n    local factor_counts_index6\n\
    \    local factor_counts_index7\n    local factor_counts_index8\n    local factor_counts_index9\n\
    \    local factor_counts_index10\n    local factor_counts_index11\n    local factor_counts_index12\n\
    \    local factor_counts_index13\n    local factor_counts_index14\n    local factor_counts_index15\n\
    \    local factor_counts_index16\n    local factor_counts_index17\n    local factor_counts_index18\n\
    \    local factor_counts_index19\n    local factor_counts_index20\n    local factor_counts_index21\n\
    \    local factor_counts_index22\n    local factor_counts_index23\n    local factor_counts_index24\n\
    \    local factor_counts_index25\n    local factor_counts_index26\n    local factor_counts_index27\n\
    \    local factor_counts_index28\n    local factor_counts_index29\n    local factor_counts_index30\n\
    \    local factor_counts_index31\n    local factor_counts_index32\n    local factor_counts_index33\n\
    \    local factor_counts_index34\n    local factor_counts_index35\n    local factor_counts_index36\n\
    \    local factor_counts_index37\n    local factor_counts_index38\n    local factor_counts_index39\n\
    \    local factor_counts_index40\n    local factor_counts_index41\n    local factor_counts_index42\n\
    \    local factor_counts_index43\n    local factor_counts_index44\n    local factor_counts_index45\n\
    \    local factor_counts_index46\n    local factor_counts_index47\n    local factor_counts_index48\n\
    \    local factor_counts_index49\n    local factor_counts_index50\n    local factor_counts_index51\n\
    \    local factor_counts_index52\n    local factor_counts_index53\n    local factor_counts_index54\n\
    \    local factor_counts_index55\n    local factor_counts_index56\n    local factor_counts_index57\n\
    \    local factor_counts_index58\n    \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local count=1\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local\
    \ c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local\
    \ i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local\
    \ o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local\
    \ u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local\
    \ a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local\
    \ g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local\
    \ m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local\
    \ s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local\
    \ y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local\
    \ e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local\
    \ k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local\
    \ q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local\
    \ w\n    local x\n    local y\n    local z\n    local a\n    local b\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n    local nums\n    local num\n    local nums\n\
    \    local num\n    local nums\n    local num\n    local nums\n    local num\n\
    \    local nums\n    local num\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local n\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factors_count=${#1}\n\n    while [ $factor_count\
    \ -gt 0 ]; do\n        factor=`expr $factor \\* $1`\n        factor_count=`expr\
    \ $factor_count - 1`\n        factors=(\"${factors[@]}\" \"$factor\")\n    done\n\
    \n    echo \"${factors[@]}\"\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local factors_count_tmp=$((factors_count-1))\n\
    \    local factors_count_tmp2=$((factors_count-1))\n    local factors_count_tmp3=$((factors_count-1))\n\
    \    local factors_count_tmp4=$((factors_count-1))\n    local factors_count_tmp5=$((factors_count-1))\n\
    \    local factors_count_tmp6=$((factors_count-1))\n    local factors_count_tmp7=$((factors_count-1))\n\
    \    local factors_count_tmp8=$((factors_count-1))\n    local factors_count_tmp9=$((factors_count-1))\n\
    \    local factors_count_tmp10=$((factors_count-1))\n    local factors_count_tmp11=$((factors_count-1))\n\
    \    local factors_count_tmp12=$((factors_count-1))\n    local factors_count_tmp13=$((factors_count-1))\n\
    \    local factors_count_tmp14=$((factors_count-1))\n    local factors_count_tmp15=$((factors_count-1))\n\
    \    local factors_count_tmp16=$((factors_count-1))\n    local factors_count_tmp17=$((factors_count-1))\n\
    \    local factors_count_tmp18=$((factors_count-1))\n    local factors_count_tmp19=$((factors_count-1))\n\
    \    local factors_count_tmp20=$((factors_count-1))\n    local factors_count_tmp21=$((factors_count-1))\n\
    \    local factors_count_tmp22=$((factors_count-1))\n    local factors_count_tmp23=$((factors_count-1))\n\
    \    local factors_count_tmp24=$((factors_count-1))\n    local factors_count_tmp25=$((factors_count-1))\n\
    \    local factors_count_tmp26=$((factors_count-1))\n    local factors_count_tmp27=$((factors_count-1))\n\
    \    local factors_count_tmp28=$((factors_count-1))\n    local factors_count_tmp29=$((factors_count-1))\n\
    \    local factors_count_tmp30=$((factors_count-1))\n    local factors_count_tmp31=$((factors_count-1))\n\
    \    local factors_count_tmp32=$((factors_count-1))\n    local factors_count_tmp33=$((factors_count-1))\n\
    \    local factors_count_tmp34=$((factors_count-1))\n    local factors_count_tmp35=$((factors_count-1))\n\
    \    local factors_count_tmp36=$((factors_count-1))\n    local factors_count_tmp37=$((factors_count-1))\n\
    \    local factors_count_tmp\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_index2\n \
    \   local factor_index3\n    local factor_index4\n    local factor_index5\n  \
    \  local factor_index6\n    local factor_index7\n    local factor_index8\n   \
    \ local factor_index9\n    local factor_index10\n    local factor_index11\n  \
    \  local factor_index12\n    local factor_index13\n    local factor_index14\n\
    \    local factor_index15\n    local factor_index16\n    local factor_index17\n\
    \    local factor_index18\n    local factor_index19\n    local factor_index20\n\
    \    local factor_index21\n    local factor_index22\n    local factor_index23\n\
    \    local factor_index24\n    local factor_index25\n    local factor_index26\n\
    \    local factor_index27\n    local factor_index28\n    local factor_index29\n\
    \    local factor_index30\n    local factor_index31\n    local factor_index32\n\
    \    local factor_index33\n    local factor_index34\n    local factor_index35\n\
    \    local factor_index36\n    local factor_index37\n    local factor_index38\n\
    \    local factor_index39\n    local factor_index40\n    local factor_index41\n\
    \    local factor_index42\n    local factor_index43\n    local factor_index44\n\
    \    local factor_index45\n    local factor_index46\n    local factor_index47\n\
    \    local factor_index48\n    local factor_index49\n    local factor_index50\n\
    \    local factor_index51\n    local factor_index52\n    local factor_index53\n\
    \    local factor_index54\n    local factor_index55\n    local factor_index56\n\
    \    local factor_index57\n    local factor_index58\n    local factor_index59\n\
    \    local factor_index60\n    local factor_index61\n    local factor_index62\n\
    \    local factor_index63\n    local factor_index64\n    local factor_index65\n\
    \    local factor_index66\n    local factor_index67\n    local factor_index68\n\
    \    local factor_index69\n    local factor_index70\n    local factor_index71\n\
    \    local factor_index72\n    local factor_index73\n    local factor_index74\n\
    \    local factor_index75\n    local factor_index76\n    local factor_index77\n\
    \    local factor_index78\n    local factor_index79\n    local factor_index80\n\
    \    local factor_index81\n    local factor_index82\n    local factor_index83\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local prime\n    local primes\n    local prime_found\n    local prime_found2\n\
    \    local prime_found3\n    local prime_found4\n    local prime_found5\n    local\
    \ prime_found6\n    local prime_found7\n    local prime_found8\n    local prime_found9\n\
    \    local prime_found10\n    local prime_found11\n    local prime_found12\n \
    \   local prime_found13\n    local prime_found14\n    local prime_found15\n  \
    \  local prime_found16\n    local prime_found17\n    local prime_found18\n   \
    \ local prime_found19\n    local prime_found20\n    local prime_found21\n    local\
    \ prime_found22\n    local prime_found23\n    local prime_found24\n    local prime_found25\n\
    \    local prime_found26\n    local prime_found27\n    local prime_found28\n \
    \   local prime_found29\n    local prime_found30\n    local prime_found31\n  \
    \  local prime_found32\n    local prime_found33\n    local prime_found34\n   \
    \ local prime_found35\n    local prime_found36\n    local prime_found37\n    local\
    \ prime_found38\n    local prime_found39\n    local prime_found40\n    local prime_found41\n\
    \    local prime_found42\n    local prime_found43\n    local prime_found44\n \
    \   local prime_found45\n    local prime_found46\n    local prime_found47\n  \
    \  local prime_found48\n    local prime_found49\n    local prime_found50\n   \
    \ local prime_found51\n    local prime_found52\n    local prime_found53\n    local\
    \ prime_found54\n    local prime_found55\n    local prime_found56\n    local prime_found57\n\
    \    local prime_found58\n    local prime_found59\n    local prime_found60\n \
    \   local prime_found61\n    local prime_found62\n    local prime_found63\n  \
    \  local prime_found64\n    local prime_found65\n    local prime_found66\n   \
    \ local prime_found67\n    local prime\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    for (( factor_count=0;\
    \ factor_count < factors_count; factor_count++ )); do\n        factor=${1}\n \
    \       factors=(\"${factors[@]}\" \"$factor\")\n        factor=$((factor * 2))\n\
    \    done\n    echo \"${factors[@]}\"\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphzp4_ank.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local factor\n    local factor_count\n    local factor_index\n    local prime\n\
    \    local prime_count\n    local prime_index\n    local prime_number\n    local\
    \ prime_number_index\n    local prime_number_index2\n    local prime_number_index3\n\
    \    local prime_number_index4\n    local prime_number_index5\n    local prime_number_index6\n\
    \    local prime_number_index7\n    local prime_number_index8\n    local prime_number_index9\n\
    \    local prime_number_index10\n    local prime_number_index11\n    local prime_number_index12\n\
    \    local prime_number_index13\n    local prime_number_index14\n    local prime_number_index15\n\
    \    local prime_number_index16\n    local prime_number_index17\n    local prime_number_index18\n\
    \    local prime_number_index19\n    local prime_number_index20\n    local prime_number_index21\n\
    \    local prime_number_index22\n    local prime_number_index23\n    local prime_number_index24\n\
    \    local prime_number_index25\n    local prime_number_index26\n    local prime_number_index27\n\
    \    local prime_number_index28\n    local prime_number_index29\n    local prime_number_index30\n\
    \    local prime_number_index31\n    local prime_number_index32\n    local prime_number_index33\n\
    \    local prime_number_index34\n    local prime_number_index35\n    local prime_number_index36\n\
    \    local prime_number_index37\n    local prime_number_index38\n    local prime_number_index39\n\
    \    local prime_number_index40\n    local prime_number_index41\n    local prime_number_index42\n\
    \    local prime_number_index43\n    local prime_number_index44\n    local prime_number_index45\n\
    \    local prime_number_index46\n    local prime_number_index47\n    local prime_number_index48\n\
    \    local prime_number_index49\n    local prime_number_index50\n    local prime_number_index51\n\
    \    local prime_number_index52\n    local prime_number_index53\n    local prime_number_index54\n\
    \    local prime_number_index55\n    local prime_number_index56\n    local prime\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local number=$1\n    local prime_numbers=()\n \
    \   local prime_numbers_count=0 # count of prime numbers found\n    local prime_numbers_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_count=0\n\
    \    local prime_numbers_factors_count=0 # count of prime numbers found\n    local\
    \ prime_numbers_factors_factors=() # factors of prime numbers found\n    local\
    \ prime_numbers_factors_factors_count=0\n    local prime_numbers_factors_factors_count=0\
    \ # count of prime numbers found\n    local prime_numbers_factors_factors_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_factors_factors_count=0\n\
    \    local prime_numbers_factors_factors_factors_count=0 # count of prime numbers\
    \ found\n    local prime_numbers_factors_factors_factors_factors=() # factors\
    \ of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_count=0\n\
    \    local prime_numbers_factors_factors_factors_factors_count=0 # count of prime\
    \ numbers found\n    local prime_numbers_factors_factors_factors_factors_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_count=0\n\
    \    local prime_numbers_factors_factors_factors_factors_factors_count=0 # count\
    \ of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factors_count=0\n\
    \    local prime_numbers_factors_factors_factors_factors_factors_factors_count=0\
    \ # count of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factors_count=0\n\
    \    local prime_numbers_factors_factors_factors_factors_factors_factors_factors_count=0\
    \ # count of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factors_factors_factors=()\
    \ # factors of prime numbers found\n    local prime_numbers_factors_factors_factors_factors_factors_factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n}\n\ncandidate() {\n   \
    \ factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local i\n    local j\n  \
    \  local k\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local prime\n    local prime_count\n    local prime_index\n    local prime_number\n\
    \    local prime_number_index\n    local prime_number_index2\n    local prime_number_index3\n\
    \    local prime_number_index4\n    local prime_number_index5\n    local prime_number_index6\n\
    \    local prime_number_index7\n    local prime_number_index8\n    local prime_number_index9\n\
    \    local prime_number_index10\n    local prime_number_index11\n    local prime_number_index12\n\
    \    local prime_number_index13\n    local prime_number_index14\n    local prime_number_index15\n\
    \    local prime_number_index16\n    local prime_number_index17\n    local prime_number_index18\n\
    \    local prime_number_index19\n    local prime_number_index20\n    local prime_number_index21\n\
    \    local prime_number_index22\n    local prime_number_index23\n    local prime_number_index24\n\
    \    local prime_number_index25\n    local prime_number_index26\n    local prime_number_index27\n\
    \    local prime_number_index28\n    local prime_number_index29\n    local prime_number_index30\n\
    \    local prime_number_index31\n    local prime_number_index32\n    local prime_number_index33\n\
    \    local prime_number_index34\n    local prime_number_index35\n    local prime_number_index36\n\
    \    local prime_number_index37\n    local prime_number_index38\n    local prime_number_index39\n\
    \    local prime_number_index40\n    local prime_number_index41\n    local prime_number_index42\n\
    \    local prime_number_index43\n    local prime_number_index44\n    local prime_number_index45\n\
    \    local prime_number_index46\n    local prime_number_index47\n    local prime_number_index48\n\
    \    local prime_number_index49\n    local prime_number_index50\n    local prime_number_index51\n\
    \    local prime_number_index52\n    local prime_number_index53\n    local prime_number_index54\n\
    \    local prime_number_index55\n    local prime_number_index56\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphzp4_ank.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factors_count=${#1}\n    local prime_count=0\n\
    \    local primes=()\n    local prime_number=1\n    local prime_numbers=()\n \
    \   local prime_numbers_count=${#prime_numbers[@]}\n    local prime_numbers_count_temp=0\n\
    \    local prime_numbers_count_temp2=0\n    local prime_numbers_count_temp3=0\n\
    \    local prime_numbers_count_temp4=0\n    local prime_numbers_count_temp5=0\n\
    \    local prime_numbers_count_temp6=0\n    local prime_numbers_count_temp7=0\n\
    \    local prime_numbers_count_temp8=0\n    local prime_numbers_count_temp9=0\n\
    \    local prime_numbers_count_temp10=0\n    local prime_numbers_count_temp11=0\n\
    \    local prime_numbers_count_temp12=0\n    local prime_numbers_count_temp13=0\n\
    \    local prime_numbers_count_temp14=0\n    local prime_numbers_count_temp15=0\n\
    \    local prime_numbers_count_temp16=0\n    local prime_numbers_count_temp17=0\n\
    \    local prime_numbers_count_temp18=0\n    local prime_numbers_count_temp19=0\n\
    \    local prime_numbers_count_temp20=0\n    local prime_numbers_count_temp21=0\n\
    \    local prime_numbers_count_temp22=0\n    local prime_numbers_count_temp23=0\n\
    \    local prime_numbers_count_temp24=0\n    local prime_numbers_count_temp25=0\n\
    \    local prime_numbers_count_temp26=0\n    local prime_numbers_count_temp27=0\n\
    \    local prime_numbers_count_temp28=0\n    local prime_numbers_count_temp29=0\n\
    \    local prime_numbers_count_temp30=0\n    local prime_numbers_count_temp31=0\n\
    \    local prime_numbers_count_temp32=0\n    local prime_numbers_count_temp33=0\n\
    \    local prime_numbers_count_temp34=0\n    local prime_numbers_count_temp35=0\n\
    \    local prime_numbers_count_temp36=0\n    local prime_numbers_count_temp37=0\n\
    \    local prime_numbers_count_temp38=0\n    local prime_numbers_count_temp39=0\n\
    \    local prime_numbers_count_temp40=0\n    local prime_\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local count\n\
    \    local factor\n    local factor_count\n    local factors\n    local i\n  \
    \  local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   local factor\n    local factor_count\n    local factors\n    local i\n   \
    \ local j\n    local k\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local count\n \
    \   \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local factor\n    local\
    \ factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    for (( factor_count=0;\
    \ factor_count<${#1}; factor_count++ )); do\n        factor=${1}\n        factors=(\"\
    ${factors[@]}\" \"$factor\")\n        factor=$((factor*factor))\n    done\n  \
    \  echo \"${factors[@]}\"\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    while [ $factor -gt 1 ]; do\n        factor_count=0\n\
    \        for (( factor = 2; factor <= $factor; factor++ )); do\n            [\
    \ $(( factor * factor )) -eq $factor ] && factor_count=$(( factor_count + 1 ))\n\
    \        done\n        factors=( \"${factors[@]}\" \"$factor_count\" \"$factor\"\
    \ )\n        factor=$(( $factor / 2 ))\n    done\n    echo ${factors[@]}\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660030293
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_index2=0\n\
    \    local factor_index3=0\n    local factor_index4=0\n    local factor_index5=0\n\
    \    local factor_index6=0\n    local factor_index7=0\n    local factor_index8=0\n\
    \    local factor_index9=0\n    local factor_index10=0\n    local factor_index11=0\n\
    \    local factor_index12=0\n    local factor_index13=0\n    local factor_index14=0\n\
    \    local factor_index15=0\n    local factor_index16=0\n    local factor_index17=0\n\
    \    local factor_index18=0\n    local factor_index19=0\n    local factor_index20=0\n\
    \    local factor_index21=0\n    local factor_index22=0\n    local factor_index23=0\n\
    \    local factor_index24=0\n    local factor_index25=0\n    local factor_index26=0\n\
    \    local factor_index27=0\n    local factor_index28=0\n    local factor_index29=0\n\
    \    local factor_index30=0\n    local factor_index31=0\n    local factor_index32=0\n\
    \    local factor_index33=0\n    local factor_index34=0\n    local factor_index35=0\n\
    \    local factor_index36=0\n    local factor_index37=0\n    local factor_index38=0\n\
    \    local factor_index39=0\n    local factor_index40=0\n    local factor_index41=0\n\
    \    local factor_index42=0\n    local factor_index43=0\n    local factor_index44=0\n\
    \    local factor_index45=0\n    local factor_index46=0\n    local factor_index47=0\n\
    \    local factor_index48=0\n    local factor_index49=0\n    local factor_index50=0\n\
    \    local factor_index51=0\n    local factor_index52=0\n    local factor_index53=0\n\
    \    local factor_index54=0\n    local factor_index55=0\n    local factor_index56=0\n\
    \    local factor_index57=0\n    local factor_index58=0\n    local factor_index59=0\n\
    \    local factor_index60=0\n    local factor_index61=0\n    local factor_index62=0\n\
    \    local factor_index63=0\n    local factor_index64=0\n    local factor_index65=0\n\
    \    local factor_index66=0\n    local factor_index67=0\n    local factor_index68=0\n\
    \    local factor_index69=0\n    local factor_index70=0\n    local factor_index71=0\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_count=0\n    local factor_indexes=()\n    local factor_index=0\n\
    \    local factor_counts=()\n    local factor_count=0\n    local factor_indexes=()\n\
    \    local factor_index=0\n    local factor_counts=()\n    local factor_count=0\n\
    \    local factor_indexes=()\n    local factor_index=0\n    local factor\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local count\n    local factor\n   \
    \ local factor_count\n    local factor_index\n    local factor_counts\n    local\
    \ factor_indexes\n    local factor_counts_index\n    local factor_counts_indexes\n\
    \    local factor_indexes2\n    local factor_counts_index2\n    local factor_counts_indexes2\n\
    \    local factor_indexes3\n    local factor_counts_index3\n    local factor_counts_indexes3\n\
    \    local factor_indexes4\n    local factor_counts_index4\n    local factor_counts_indexes4\n\
    \    local factor_indexes5\n    local factor_counts_index5\n    local factor_counts_indexes5\n\
    \    local factor_indexes6\n    local factor_counts_index6\n    local factor_counts_indexes6\n\
    \    local factor_indexes7\n    local factor_counts_index7\n    local factor_counts_indexes7\n\
    \    local factor_indexes8\n    local factor_counts_index8\n    local factor_counts_indexes8\n\
    \    local factor_indexes9\n    local factor_counts_index9\n    local factor_counts_indexes9\n\
    \    local factor_indexes10\n    local factor_counts_index10\n    local factor_counts_indexes10\n\
    \    local factor_indexes11\n    local factor_counts_index11\n    local factor_counts_indexes11\n\
    \    local factor_indexes12\n    local factor_counts_index12\n    local factor_counts_indexes12\n\
    \    local factor_indexes13\n    local factor_counts_index13\n    local factor_counts_indexes13\n\
    \    local factor_indexes14\n    local factor_counts_index14\n    local factor_counts_indexes14\n\
    \    local factor_indexes15\n    local factor_counts_index15\n    local factor_counts_indexes15\n\
    \    local factor_indexes16\n    local factor_counts_index16\n    local factor_counts_indexes16\n\
    \    local factor_indexes17\n    local factor_counts_index17\n    local factor_counts_indexes17\n\
    \    local factor_indexes18\n    local factor_counts_index18\n    local factor_counts_indexes18\n\
    \    local factor_indexes19\n    local factor_counts_index19\n    local factor_counts_indexes19\n\
    \    local factor_indexes20\n    local factor_count\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local i\n    local j\n\
    \    local count\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ count\n    local factor\n    local factor_count\n    local factors\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ count\n    local factor\n    local factor_count\n    local factors\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ count\n    local factor\n    local factor_count\n    local factors\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ count\n    local factor\n    local factor_count\n    local factors\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ count\n    local factor\n    local factor_count\n    local factors\n    local\
    \ i\n    local j\n    local count\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local i\n  local j\n  local k\n  local factor\n  local factor_count\n\
    \  local factors\n  local factor\n  local factor_count\n  local i\n  local j\n\
    \  local k\n  local factor\n  local factor_count\n  local factors\n  local factor\n\
    \  local factor_count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factor_count\n  local factors\n  local factor\n  local factor_count\n  local\
    \ i\n  local j\n  local k\n  local factor\n  local factor_count\n  local factors\n\
    \  local factor\n  local factor_count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factor_count\n  local factors\n  local factor\n  local factor_count\n\
    \  local i\n  local j\n  local k\n  local factor\n  local factor_count\n  local\
    \ factors\n  local factor\n  local factor_count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factor_count\n  local factors\n  local factor\n \
    \ local factor_count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factor_count\n  local factors\n  local factor\n  local factor_count\n  local\
    \ i\n  local j\n  local k\n  local factor\n  local factor_count\n  local factors\n\
    \  local factor\n  local factor_count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factor_count\n  local factors\n  local factor\n  local factor_count\n\
    \  local i\n  local j\n  local k\n  local factor\n  local factor_count\n  local\
    \ factors\n  local factor\n  local factor_count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factor_count\n  local factors\n  local factor\n \
    \ local factor_count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factor_count\n  local factors\n  local factor\n  local factor_count\n  local\
    \ i\n  local j\n  local k\n  local factor\n  local factor_count\n  local factors\n\
    \  local factor\n  local factor_count\n  local i\n  local j\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local n\n\
    \    local prime_number\n    local prime_numbers=()\n    local prime_numbers_count=()\n\
    \    local prime_numbers_count_max\n    local prime_numbers_count_min\n    local\
    \ prime_numbers_count_sum\n    local prime_numbers_count_sum2\n    local prime_numbers_count_sum3\n\
    \    local prime_numbers_count_sum4\n    local prime_numbers_count_sum5\n    local\
    \ prime_numbers_count_sum6\n    local prime_numbers_count_sum7\n    local prime_numbers_count_sum8\n\
    \    local prime_numbers_count_sum9\n    local prime_numbers_count_sum10\n   \
    \ local prime_numbers_count_sum11\n    local prime_numbers_count_sum12\n    local\
    \ prime_numbers_count_sum13\n    local prime_numbers_count_sum14\n    local prime_numbers_count_sum15\n\
    \    local prime_numbers_count_sum16\n    local prime_numbers_count_sum17\n  \
    \  local prime_numbers_count_sum18\n    local prime_numbers_count_sum19\n    local\
    \ prime_numbers_count_sum20\n    local prime_numbers_count_sum21\n    local prime_numbers_count_sum22\n\
    \    local prime_numbers_count_sum23\n    local prime_numbers_count_sum24\n  \
    \  local prime_numbers_count_sum25\n    local prime_numbers_count_sum26\n    local\
    \ prime_numbers_count_sum27\n    local prime_numbers_count_sum28\n    local prime_numbers_count_sum29\n\
    \    local prime_numbers_count_sum30\n    local prime_numbers_count_sum31\n  \
    \  local prime_numbers_count_sum32\n    local prime_numbers_count_sum33\n    local\
    \ prime_numbers_count_sum34\n    local prime_numbers_count_sum35\n    local prime_numbers_count_sum36\n\
    \    local prime_numbers_count_sum37\n    local prime_numbers_count_sum38\n  \
    \  local prime_numbers_count_sum39\n    local prime_numbers_count_sum40\n    local\
    \ prime_numbers_count_sum41\n    local prime_numbers_count_sum42\n    local prime_numbers_count_sum43\n\
    \    local prime_numbers_count_sum44\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_index2\n \
    \   local factor_index3\n    local factor_index4\n    local factor_index5\n  \
    \  local factor_index6\n    local factor_index7\n    local factor_index8\n   \
    \ local factor_index9\n    local factor_index10\n    local factor_index11\n  \
    \  local factor_index12\n    local factor_index13\n    local factor_index14\n\
    \    local factor_index15\n    local factor_index16\n    local factor_index17\n\
    \    local factor_index18\n    local factor_index19\n    local factor_index20\n\
    \    local factor_index21\n    local factor_index22\n    local factor_index23\n\
    \    local factor_index24\n    local factor_index25\n    local factor_index26\n\
    \    local factor_index27\n    local factor_index28\n    local factor_index29\n\
    \    local factor_index30\n    local factor_index31\n    local factor_index32\n\
    \    local factor_index33\n    local factor_index34\n    local factor_index35\n\
    \    local factor_index36\n    local factor_index37\n    local factor_index38\n\
    \    local factor_index39\n    local factor_index40\n    local factor_index41\n\
    \    local factor_index42\n    local factor_index43\n    local factor_index44\n\
    \    local factor_index45\n    local factor_index46\n    local factor_index47\n\
    \    local factor_index48\n    local factor_index49\n    local factor_index50\n\
    \    local factor_index51\n    local factor_index52\n    local factor_index53\n\
    \    local factor_index54\n    local factor_index55\n    local factor_index56\n\
    \    local factor_index57\n    local factor_index58\n    local factor_index59\n\
    \    local factor_index60\n    local factor_index61\n    local factor_index62\n\
    \    local factor_index63\n    local factor_index64\n    local factor_index65\n\
    \    local factor_index66\n    local factor_index67\n    local factor_index68\n\
    \    local factor_index69\n    local factor_index70\n    local factor_index71\n\
    \    local factor_index72\n    local factor_index73\n    local factor_index74\n\
    \    local factor_index75\n    local factor_index76\n    local factor_index77\n\
    \    local factor_index78\n    local factor_index79\n    local factor_index80\n\
    \    local factor_index81\n    local factor_index82\n    local factor_index83\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_index2=0\n\
    \    local factor_index3=0\n    local factor_index4=0\n    local factor_index5=0\n\
    \    local factor_index6=0\n    local factor_index7=0\n    local factor_index8=0\n\
    \    local factor_index9=0\n    local factor_index10=0\n    local factor_index11=0\n\
    \    local factor_index12=0\n    local factor_index13=0\n    local factor_index14=0\n\
    \    local factor_index15=0\n    local factor_index16=0\n    local factor_index17=0\n\
    \    local factor_index18=0\n    local factor_index19=0\n    local factor_index20=0\n\
    \    local factor_index21=0\n    local factor_index22=0\n    local factor_index23=0\n\
    \    local factor_index24=0\n    local factor_index25=0\n    local factor_index26=0\n\
    \    local factor_index27=0\n    local factor_index28=0\n    local factor_index29=0\n\
    \    local factor_index30=0\n    local factor_index31=0\n    local factor_index32=0\n\
    \    local factor_index33=0\n    local factor_index34=0\n    local factor_index35=0\n\
    \    local factor_index36=0\n    local factor_index37=0\n    local factor_index38=0\n\
    \    local factor_index39=0\n    local factor_index40=0\n    local factor_index41=0\n\
    \    local factor_index42=0\n    local factor_index43=0\n    local factor_index44=0\n\
    \    local factor_index45=0\n    local factor_index46=0\n    local factor_index47=0\n\
    \    local factor_index48=0\n    local factor_index49=0\n    local factor_index50=0\n\
    \    local factor_index51=0\n    local factor_index52=0\n    local factor_index53=0\n\
    \    local factor_index54=0\n    local factor_index55=0\n    local factor_index56=0\n\
    \    local factor_index57=0\n    local factor_index58=0\n    local factor_index59=0\n\
    \    local factor_index60=0\n    local factor_index61=0\n    local factor_index62=0\n\
    \    local factor_index63=0\n    local factor_index64=0\n    local factor_index65=0\n\
    \    local factor_index66=0\n    local factor_index67=0\n    local factor_index68=0\n\
    \    local factor_index69=0\n    local factor_index70=0\n    local factor_index71=0\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor\n \
    \   local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local factor_index\n    local factor\n    local factor_count\n    local factor_index\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor\n    local factor_count\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local count=1\n    while [ $factor -gt 1 ]; do\n        factor=$((factor*2))\n\
    \        factors+=( $factor )\n        count=$((count+1))\n    done\n    factors+=(\
    \ $factor )\n    echo $(( ${#factors[@]} - 1 )) $factors\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local n\n    local p\n    local q\n    local r\n \
    \   local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_index\n    local factor_count\n    local factor\n \
    \   local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local factor_count\n    local factor\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_index\n    local factor_count\n    local factor\n\
    \    local factor_index\n    local factor_count\n    local factor\n    local factor_index\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    local factor_counts=()\n    local factor_counts_tmp=()\n\
    \    local factor_counts_tmp2=0\n    local factor_counts_tmp3=0\n    local factor_counts_tmp4=0\n\
    \    local factor_counts_tmp5=0\n    local factor_counts_tmp6=0\n    local factor_counts_tmp7=0\n\
    \    local factor_counts_tmp8=0\n    local factor_counts_tmp9=0\n    local factor_counts_tmp10=0\n\
    \    local factor_counts_tmp11=0\n    local factor_counts_tmp12=0\n    local factor_counts_tmp13=0\n\
    \    local factor_counts_tmp14=0\n    local factor_counts_tmp15=0\n    local factor_counts_tmp16=0\n\
    \    local factor_counts_tmp17=0\n    local factor_counts_tmp18=0\n    local factor_counts_tmp19=0\n\
    \    local factor_counts_tmp20=0\n    local factor_counts_tmp21=0\n    local factor_counts_tmp22=0\n\
    \    local factor_counts_tmp23=0\n    local factor_counts_tmp24=0\n    local factor_counts_tmp25=0\n\
    \    local factor_counts_tmp26=0\n    local factor_counts_tmp27=0\n    local factor_counts_tmp28=0\n\
    \    local factor_counts_tmp29=0\n    local factor_counts_tmp30=0\n    local factor_counts_tmp31=0\n\
    \    local factor_counts_tmp32=0\n    local factor_counts_tmp33=0\n    local factor_counts_tmp34=0\n\
    \    local factor_counts_tmp35=0\n    local factor_counts_tmp36=0\n    local factor_counts_tmp37=0\n\
    \    local factor_counts_tmp38=0\n    local factor_counts_tmp39=0\n    local factor_counts_tmp40=0\n\
    \    local factor_counts_tmp41=0\n    local factor_counts_tmp42=0\n    local factor_counts_tmp43=0\n\
    \    local factor_counts_tmp44=0\n    local factor_counts_tmp45=0\n    local factor_counts_tmp46=0\n\
    \    local factor_counts_tmp47=0\n    local factor_counts_tmp48=0\n    local factor_counts_tmp49=0\n\
    \    local factor_counts_tmp50=0\n    local factor_counts_tmp51=0\n    local factor_counts_tmp52=0\n\
    \    local factor_counts_tmp53=0\n    local factor_counts_tmp54=0\n    \n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count=1\n    local i\n    local j\n    local k\n\
    \    local tmp\n    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n\
    \    local tmp6\n    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n\
    \    local tmp11\n    local tmp12\n    local tmp13\n    local tmp14\n    local\
    \ tmp15\n    local tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n\
    \    local tmp20\n    local tmp21\n    local tmp22\n    local tmp23\n    local\
    \ tmp24\n    local tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n\
    \    local tmp29\n    local tmp30\n    local tmp31\n    local tmp32\n    local\
    \ tmp33\n    local tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n\
    \    local tmp38\n    local tmp39\n    local tmp40\n    local tmp41\n    local\
    \ tmp42\n    local tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n\
    \    local tmp47\n    local tmp48\n    local tmp49\n    local tmp50\n    local\
    \ tmp51\n    local tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n\
    \    local tmp56\n    local tmp57\n    local tmp58\n    local tmp59\n    local\
    \ tmp60\n    local tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n\
    \    local tmp65\n    local tmp66\n    local tmp67\n    local tmp68\n    local\
    \ tmp69\n    local tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n\
    \    local tmp74\n    local tmp75\n    local tmp76\n    local tmp77\n    local\
    \ tmp78\n    local tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n\
    \    local tmp83\n    local tmp84\n    local tmp85\n    local tmp86\n    local\
    \ tmp87\n    local tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n\
    \    local tmp92\n    local tmp93\n    local tmp94\n    local tmp95\n    local\
    \ tmp96\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local l\n    local m\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n    local nfactors\n\
    \    local nfactor\n    local nfactors\n    local nfactor\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local primes\n    local prime\n    local prime_count\n\
    \    local prime_number\n    local prime_numbers=()\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local n=$1\n  local factors=()\n  local\
    \ factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factors\n  local factor\n  local count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factors\n  local factor\n  local count\n  local i\n  local j\n\
    \  local k\n  local factor\n  local factors\n  local factor\n  local count\n \
    \ local i\n  local j\n  local k\n  local factor\n  local factors\n  local factor\n\
    \  local count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n\
    \  local factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n\
    \  local factors\n  local factor\n  local count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factors\n  local factor\n  local count\n  local i\n\
    \  local j\n  local k\n  local factor\n  local factors\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n  local\
    \ factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factors\n  local factor\n  local count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factors\n  local factor\n  local count\n  local i\n  local j\n\
    \  local k\n  local factor\n  local factors\n  local factor\n  local count\n \
    \ local i\n  local j\n  local k\n  local factor\n  local factors\n  local factor\n\
    \  local count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n\
    \  local factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n\
    \  local factors\n  local factor\n  local count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factors\n  local factor\n  local count\n  local i\n\
    \  local j\n  local k\n  local factor\n  local factors\n  local factor\n  local\
    \ count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    \n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local factors_count_tmp=$((factors_count-1))\n\
    \    local factors_count_tmp2=$((factors_count-1))\n    local factors_count_tmp3=$((factors_count-1))\n\
    \    local factors_count_tmp4=$((factors_count-1))\n    local factors_count_tmp5=$((factors_count-1))\n\
    \    local factors_count_tmp6=$((factors_count-1))\n    local factors_count_tmp7=$((factors_count-1))\n\
    \    local factors_count_tmp8=$((factors_count-1))\n    local factors_count_tmp9=$((factors_count-1))\n\
    \    local factors_count_tmp10=$((factors_count-1))\n    local factors_count_tmp11=$((factors_count-1))\n\
    \    local factors_count_tmp12=$((factors_count-1))\n    local factors_count_tmp13=$((factors_count-1))\n\
    \    local factors_count_tmp14=$((factors_count-1))\n    local factors_count_tmp15=$((factors_count-1))\n\
    \    local factors_count_tmp16=$((factors_count-1))\n    local factors_count_tmp17=$((factors_count-1))\n\
    \    local factors_count_tmp18=$((factors_count-1))\n    local factors_count_tmp19=$((factors_count-1))\n\
    \    local factors_count_tmp20=$((factors_count-1))\n    local factors_count_tmp21=$((factors_count-1))\n\
    \    local factors_count_tmp22=$((factors_count-1))\n    local factors_count_tmp23=$((factors_count-1))\n\
    \    local factors_count_tmp24=$((factors_count-1))\n    local factors_count_tmp25=$((factors_count-1))\n\
    \    local factors_count_tmp26=$((factors_count-1))\n    local factors_count_tmp27=$((factors_count-1))\n\
    \    local factors_count_tmp28=$((factors_count-1))\n    local factors_count_tmp29=$((factors_count-1))\n\
    \    local factors_count_tmp30=$((factors_count-1))\n    local factors_count_tmp31=$((factors_count-1))\n\
    \    local factors_count_tmp32=$((factors_count-1))\n    local factors_count_tmp33=$((factors_count-1))\n\
    \    local factors_count_tmp34=$((factors_count-1))\n    local factors_count_tmp35=$((factors_count-1))\n\
    \    local factors_count_tmp36=$((factors_count-1))\n    local factors_count_tmp37=$((factors_count-1))\n\
    \    local factors_count_tmp\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local factor\n    local factor\n   \
    \ local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    local factors_count=${#factors[@]}\n    local factors_count_tmp=$((factors_count\
    \ + 1))\n    local factors_count_tmp2=$((factors_count + 1))\n    local factors_count_tmp3=$((factors_count\
    \ + 1))\n    local factors_count_tmp4=$((factors_count + 1))\n    local factors_count_tmp5=$((factors_count\
    \ + 1))\n    local factors_count_tmp6=$((factors_count + 1))\n    local factors_count_tmp7=$((factors_count\
    \ + 1))\n    local factors_count_tmp8=$((factors_count + 1))\n    local factors_count_tmp9=$((factors_count\
    \ + 1))\n    local factors_count_tmp10=$((factors_count + 1))\n    local factors_count_tmp11=$((factors_count\
    \ + 1))\n    local factors_count_tmp12=$((factors_count + 1))\n    local factors_count_tmp13=$((factors_count\
    \ + 1))\n    local factors_count_tmp14=$((factors_count + 1))\n    local factors_count_tmp15=$((factors_count\
    \ + 1))\n    local factors_count_tmp16=$((factors_count + 1))\n    local factors_count_tmp17=$((factors_count\
    \ + 1))\n    local factors_count_tmp18=$((factors_count + 1))\n    local factors_count_tmp19=$((factors_count\
    \ + 1))\n    local factors_count_tmp20=$((factors_count + 1))\n    local factors_count_tmp21=$((factors_count\
    \ + 1))\n    local factors_count_tmp22=$((factors_count + 1))\n    local factors_count_tmp23=$((factors_count\
    \ + 1))\n    local factors_count_tmp24=$((factors_count + 1))\n    local factors_count_tmp25=$((factors_count\
    \ + 1))\n    local factors_count_tmp26=$((factors_count + 1))\n    local factors_count_tmp27=$((factors_count\
    \ + 1))\n    local factors_count_tmp28=$((factors_count + 1))\n    local factors_count_tmp29=$((factors_count\
    \ + 1))\n    local factors_count_tmp30=$((factors_count + 1))\n    local factors_count_tmp31=$((factors_count\
    \ + 1))\n    local factors_count_tmp32=$((factors_count + 1))\n    local factor\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_index2\n \
    \   local factor_index3\n    local factor_index4\n    local factor_index5\n  \
    \  local factor_index6\n    local factor_index7\n    local factor_index8\n   \
    \ local factor_index9\n    local factor_index10\n    local factor_index11\n  \
    \  local factor_index12\n    local factor_index13\n    local factor_index14\n\
    \    local factor_index15\n    local factor_index16\n    local factor_index17\n\
    \    local factor_index18\n    local factor_index19\n    local factor_index20\n\
    \    local factor_index21\n    local factor_index22\n    local factor_index23\n\
    \    local factor_index24\n    local factor_index25\n    local factor_index26\n\
    \    local factor_index27\n    local factor_index28\n    local factor_index29\n\
    \    local factor_index30\n    local factor_index31\n    local factor_index32\n\
    \    local factor_index33\n    local factor_index34\n    local factor_index35\n\
    \    local factor_index36\n    local factor_index37\n    local factor_index38\n\
    \    local factor_index39\n    local factor_index40\n    local factor_index41\n\
    \    local factor_index42\n    local factor_index43\n    local factor_index44\n\
    \    local factor_index45\n    local factor_index46\n    local factor_index47\n\
    \    local factor_index48\n    local factor_index49\n    local factor_index50\n\
    \    local factor_index51\n    local factor_index52\n    local factor_index53\n\
    \    local factor_index54\n    local factor_index55\n    local factor_index56\n\
    \    local factor_index57\n    local factor_index58\n    local factor_index59\n\
    \    local factor_index60\n    local factor_index61\n    local factor_index62\n\
    \    local factor_index63\n    local factor_index64\n    local factor_index65\n\
    \    local factor_index66\n    local factor_index67\n    local factor_index68\n\
    \    local factor_index69\n    local factor_index70\n    local factor_index71\n\
    \    local factor_index72\n    local factor_index73\n    local factor_index74\n\
    \    local factor_index75\n    local factor_index76\n    local factor_index77\n\
    \    local factor_index78\n    local factor_index79\n    local factor_index80\n\
    \    local factor_index81\n    local factor_index82\n    local factor_index83\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factor\n}\n\ncandidate() {\n \
    \   factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=$1\n\
    \    local factor_count=0\n    local factor_counts=()\n    local factor_counts_tmp=()\n\
    \    local factor_counts_tmp2\n    local factor_counts_tmp3\n    local factor_counts_tmp4\n\
    \    local factor_counts_tmp5\n    local factor_counts_tmp6\n    local factor_counts_tmp7\n\
    \    local factor_counts_tmp8\n    local factor_counts_tmp9\n    local factor_counts_tmp10\n\
    \    local factor_counts_tmp11\n    local factor_counts_tmp12\n    local factor_counts_tmp13\n\
    \    local factor_counts_tmp14\n    local factor_counts_tmp15\n    local factor_counts_tmp16\n\
    \    local factor_counts_tmp17\n    local factor_counts_tmp18\n    local factor_counts_tmp19\n\
    \    local factor_counts_tmp20\n    local factor_counts_tmp21\n    local factor_counts_tmp22\n\
    \    local factor_counts_tmp23\n    local factor_counts_tmp24\n    local factor_counts_tmp25\n\
    \    local factor_counts_tmp26\n    local factor_counts_tmp27\n    local factor_counts_tmp28\n\
    \    local factor_counts_tmp29\n    local factor_counts_tmp30\n    local factor_counts_tmp31\n\
    \    local factor_counts_tmp32\n    local factor_counts_tmp33\n    local factor_counts_tmp34\n\
    \    local factor_counts_tmp35\n    local factor_counts_tmp36\n    local factor_counts_tmp37\n\
    \    local factor_counts_tmp38\n    local factor_counts_tmp39\n    local factor_counts_tmp40\n\
    \    local factor_counts_tmp41\n    local factor_counts_tmp42\n    local factor_counts_tmp43\n\
    \    local factor_counts_tmp44\n    local factor_counts_tmp45\n    local factor_counts_tmp46\n\
    \    local factor_counts_tmp47\n    local factor_counts_tmp48\n    local factor_counts_tmp49\n\
    \    local factor_counts_tmp50\n    local factor_counts_tmp51\n    local factor_counts_tmp52\n\
    \    local factor_counts_tmp53\n    local factor_counts_tmp54\n    local factor_counts_tmp55\n\
    \    local factor_counts_tmp56\n    local factor_counts_tmp57\n    local factor_counts_tmp58\n\
    \    local factor_counts_tmp59\n    local factor_counts_tmp60\n    local factor_counts_tmp\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local factor\n  \
    \  local factors\n    local factor\n    local i\n    local j\n    local k\n  \
    \  local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\")\
    \ = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"\
    57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local factor_count\n  local factor_index\n  local factor_count\n  local factor_index\n\
    \  local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local count2\n    local count3\n    local count4\n    local count5\n    local\
    \ count6\n    local count7\n    local count8\n    local count9\n    local count10\n\
    \    local count11\n    local count12\n    local count13\n    local count14\n\
    \    local count15\n    local count16\n    local count17\n    local count18\n\
    \    local count19\n    local count20\n    local count21\n    local count22\n\
    \    local count23\n    local count24\n    local count25\n    local count26\n\
    \    local count27\n    local count28\n    local count29\n    local count30\n\
    \    local count31\n    local count32\n    local count33\n    local count34\n\
    \    local count35\n    local count36\n    local count37\n    local count38\n\
    \    local count39\n    local count40\n    local count41\n    local count42\n\
    \    local count43\n    local count44\n    local count45\n    local count46\n\
    \    local count47\n    local count48\n    local count49\n    local count50\n\
    \    local count51\n    local count52\n    local count53\n    local count54\n\
    \    local count55\n    local count56\n    local count57\n    local count58\n\
    \    local count59\n    local count60\n    local count61\n    local count62\n\
    \    local count63\n    local count64\n    local count65\n    local count66\n\
    \    local count67\n    local count68\n    local count69\n    local count70\n\
    \    local count71\n    local count72\n    local count73\n    local count74\n\
    \    local count75\n    local count76\n    local count77\n    local count78\n\
    \    local count79\n    local count80\n    local count81\n    local count82\n\
    \    local count83\n    local count84\n    local count85\n    local count86\n\
    \    local count87\n    local count88\n    local count89\n    local count90\n\
    \    local count91\n    local count92\n    local count93\n    local count94\n\
    \    local count95\n    local count96\n    local count97\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local factor\n    local count\n    local factor_count\n\
    \    local factor_index\n    local factor_index2\n    local factor_index3\n  \
    \  local factor_index4\n    local factor_index5\n    local factor_index6\n   \
    \ local factor_index7\n    local factor_index8\n    local factor_index9\n    local\
    \ factor_index10\n    local factor_index11\n    local factor_index12\n    local\
    \ factor_index13\n    local factor_index14\n    local factor_index15\n    local\
    \ factor_index16\n    local factor_index17\n    local factor_index18\n    local\
    \ factor_index19\n    local factor_index20\n    local factor_index21\n    local\
    \ factor_index22\n    local factor_index23\n    local factor_index24\n    local\
    \ factor_index25\n    local factor_index26\n    local factor_index27\n    local\
    \ factor_index28\n    local factor_index29\n    local factor_index30\n    local\
    \ factor_index31\n    local factor_index32\n    local factor_index33\n    local\
    \ factor_index34\n    local factor_index35\n    local factor_index36\n    local\
    \ factor_index37\n    local factor_index38\n    local factor_index39\n    local\
    \ factor_index40\n    local factor_index41\n    local factor_index42\n    local\
    \ factor_index43\n    local factor_index44\n    local factor_index45\n    local\
    \ factor_index46\n    local factor_index47\n    local factor_index48\n    local\
    \ factor_index49\n    local factor_index50\n    local factor_index51\n    local\
    \ factor_index52\n    local factor_index53\n    local factor_index54\n    local\
    \ factor_index55\n    local factor_index56\n    local factor_index57\n    local\
    \ factor_index58\n    local factor_index59\n    local factor_index60\n    local\
    \ factor_index61\n    local factor_index62\n    local factor_index63\n    local\
    \ factor_index64\n    local factor_index65\n    local factor_index66\n    local\
    \ factor_index67\n    local factor_index68\n    local factor_index69\n    local\
    \ factor_index70\n    local factor_index71\n    local factor_index72\n    local\
    \ factor_index73\n    local factor_index74\n    local factor_index75\n    local\
    \ factor_index76\n    local factor_index77\n    local factor_index78\n    local\
    \ factor_index79\n    local factor_index80\n\n}\n\ncandidate() {\n    factorize\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n  \
    \  [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n\
    \    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3\
    \ 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[\
    \ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"\
    2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    for (( factor_count=0;\
    \ factor_count<${#1}; factor_count++ )); do\n        factor=${1}\n        factors=(\"\
    ${factors[@]}\" \"$factor\")\n        factor=$((factor*factor))\n    done\n  \
    \  echo \"${factors[@]}\"\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factors_count=${#1}\n    local factors_count_tmp=$((factors_count\
    \ - 1))\n    local factors_count_tmp2=$((factors_count - 2))\n    local factors_count_tmp3=$((factors_count\
    \ - 3))\n    local factors_count_tmp4=$((factors_count - 4))\n    local factors_count_tmp5=$((factors_count\
    \ - 5))\n    local factors_count_tmp6=$((factors_count - 6))\n    local factors_count_tmp7=$((factors_count\
    \ - 7))\n    local factors_count_tmp8=$((factors_count - 8))\n    local factors_count_tmp9=$((factors_count\
    \ - 9))\n    local factors_count_tmp10=$((factors_count - 10))\n    local factors_count_tmp11=$((factors_count\
    \ - 11))\n    local factors_count_tmp12=$((factors_count - 12))\n    local factors_count_tmp13=$((factors_count\
    \ - 13))\n    local factors_count_tmp14=$((factors_count - 14))\n    local factors_count_tmp15=$((factors_count\
    \ - 15))\n    local factors_count_tmp16=$((factors_count - 16))\n    local factors_count_tmp17=$((factors_count\
    \ - 17))\n    local factors_count_tmp18=$((factors_count - 18))\n    local factors_count_tmp19=$((factors_count\
    \ - 19))\n    local factors_count_tmp20=$((factors_count - 20))\n    local factors_count_tmp21=$((factors_count\
    \ - 21))\n    local factors_count_tmp22=$((factors_count - 22))\n    local factors_count_tmp23=$((factors_count\
    \ - 23))\n    local factors_count_tmp24=$((factors_count - 24))\n    local factors_count_tmp25=$((factors_count\
    \ - 25))\n    local factors_count_tmp26=$((factors_count - 26))\n    local factors_count_tmp27=$((factors_count\
    \ - 27))\n    local factors_count_tmp28=$((factors_count - 28))\n    local factors_count_tmp29=$((factors_count\
    \ - 29))\n    local factors_count_tmp30=$((factors_count - 30))\n    local factors_count_tmp31=$((factors_count\
    \ - 31))\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\")\
    \ = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"\
    57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local count\n\
    \    local factor\n    local factor_count\n    local prime\n    local prime_count\n\
    \    local prime_number\n    local prime_numbers=()\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    \n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n    local prime\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n    local prime\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n    local prime\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n    local prime\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n    local prime\n\
    \    local primes\n    local prime\n    local primes\n    local prime\n    local\
    \ primes\n    local prime\n    local primes\n    local prime\n    local primes\n\
    \    local prime\n    local primes\n    local prime\n    local primes\n    local\
    \ prime\n    local primes\n    local prime\n    local primes\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local count\n    local i\n    local j\n    local count\n\
    \    local factor\n    local factors\n    local count\n    local i\n    local\
    \ j\n    local count\n    local factor\n    local factors\n    local count\n \
    \   local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n    local count\n    local\
    \ factor\n    local factors\n    local count\n    local factor\n    local factors\n\
    \    local count\n    local factor\n    local factors\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=()\n\
    \    local factor_count=()\n    local factor_index=0\n    local factor_index2=0\n\
    \    local factor_index3=0\n    local factor_index4=0\n    local factor_index5=0\n\
    \    local factor_index6=0\n    local factor_index7=0\n    local factor_index8=0\n\
    \    local factor_index9=0\n    local factor_index10=0\n    local factor_index11=0\n\
    \    local factor_index12=0\n    local factor_index13=0\n    local factor_index14=0\n\
    \    local factor_index15=0\n    local factor_index16=0\n    local factor_index17=0\n\
    \    local factor_index18=0\n    local factor_index19=0\n    local factor_index20=0\n\
    \    local factor_index21=0\n    local factor_index22=0\n    local factor_index23=0\n\
    \    local factor_index24=0\n    local factor_index25=0\n    local factor_index26=0\n\
    \    local factor_index27=0\n    local factor_index28=0\n    local factor_index29=0\n\
    \    local factor_index30=0\n    local factor_index31=0\n    local factor_index32=0\n\
    \    local factor_index33=0\n    local factor_index34=0\n    local factor_index35=0\n\
    \    local factor_index36=0\n    local factor_index37=0\n    local factor_index38=0\n\
    \    local factor_index39=0\n    local factor_index40=0\n    local factor_index41=0\n\
    \    local factor_index42=0\n    local factor_index43=0\n    local factor_index44=0\n\
    \    local factor_index45=0\n    local factor_index46=0\n    local factor_index47=0\n\
    \    local factor_index48=0\n    local factor_index49=0\n    local factor_index50=0\n\
    \    local factor_index51=0\n    local factor_index52=0\n    local factor_index53=0\n\
    \    local factor_index54=0\n    local factor_index55=0\n    local factor_index56=0\n\
    \    local factor_index57=0\n    local factor_index58=0\n    local factor_index59=0\n\
    \    local factor_index60=0\n    local factor_index61=0\n    local factor_index62=0\n\
    \    local factor_index63=0\n    local factor_index64=0\n    local factor_index65=0\n\
    \    local factor_index66=0\n    local factor_index67=0\n    local factor_index68=0\n\
    \    local factor_index69=0\n    local factor_index70=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factor_index=0\n    local factor_index2=0\n\
    \    local factor_index3=0\n    local factor_index4=0\n    local factor_index5=0\n\
    \    local factor_index6=0\n    local factor_index7=0\n    local factor_index8=0\n\
    \    local factor_index9=0\n    local factor_index10=0\n    local factor_index11=0\n\
    \    local factor_index12=0\n    local factor_index13=0\n    local factor_index14=0\n\
    \    local factor_index15=0\n    local factor_index16=0\n    local factor_index17=0\n\
    \    local factor_index18=0\n    local factor_index19=0\n    local factor_index20=0\n\
    \    local factor_index21=0\n    local factor_index22=0\n    local factor_index23=0\n\
    \    local factor_index24=0\n    local factor_index25=0\n    local factor_index26=0\n\
    \    local factor_index27=0\n    local factor_index28=0\n    local factor_index29=0\n\
    \    local factor_index30=0\n    local factor_index31=0\n    local factor_index32=0\n\
    \    local factor_index33=0\n    local factor_index34=0\n    local factor_index35=0\n\
    \    local factor_index36=0\n    local factor_index37=0\n    local factor_index38=0\n\
    \    local factor_index39=0\n    local factor_index40=0\n    local factor_index41=0\n\
    \    local factor_index42=0\n    local factor_index43=0\n    local factor_index44=0\n\
    \    local factor_index45=0\n    local factor_index46=0\n    local factor_index47=0\n\
    \    local factor_index48=0\n    local factor_index49=0\n    local factor_index50=0\n\
    \    local factor_index51=0\n    local factor_index52=0\n    local factor_index53=0\n\
    \    local factor_index54=0\n    local factor_index55=0\n    local factor_index56=0\n\
    \    local factor_index57=0\n    local factor_index58=0\n    local factor_index59=0\n\
    \    local factor_index60=0\n    local factor_index61=0\n    local factor_index62=0\n\
    \    local factor_index63=0\n    local factor_index64=0\n    local factor_index65=0\n\
    \    local factor_index66=0\n    local factor_index67=0\n    local factor_index68=0\n\
    \    local factor_index69=0\n    local factor_index70=0\n    local factor_index71=0\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local max\n    local\
    \ min\n    local num\n    local product\n    local prime\n    local primes\n \
    \   local prime_found\n    local prime_found2\n    local prime_found3\n    local\
    \ prime_found4\n    local prime_found5\n    local prime_found6\n    local prime_found7\n\
    \    local prime_found8\n    local prime_found9\n    local prime_found10\n   \
    \ local prime_found11\n    local prime_found12\n    local prime_found13\n    local\
    \ prime_found14\n    local prime_found15\n    local prime_found16\n    local prime_found17\n\
    \    local prime_found18\n    local prime_found19\n    local prime_found20\n \
    \   local prime_found21\n    local prime_found22\n    local prime_found23\n  \
    \  local prime_found24\n    local prime_found25\n    local prime_found26\n   \
    \ local prime_found27\n    local prime_found28\n    local prime_found29\n    local\
    \ prime_found30\n    local prime_found31\n    local prime_found32\n    local prime_found33\n\
    \    local prime_found34\n    local prime_found35\n    local prime_found36\n \
    \   local prime_found37\n    local prime_found38\n    local prime_found39\n  \
    \  local prime_found40\n    local prime_found41\n    local prime_found42\n   \
    \ local prime_found43\n    local prime_found44\n    local prime_found45\n    local\
    \ prime_found46\n    local prime_found47\n    local prime_found48\n    local prime_found49\n\
    \    local prime_found50\n    local prime_found51\n    local prime_found52\n \
    \   local prime_found53\n    local prime_found54\n    local prime_found55\n  \
    \  local prime_found56\n    local prime_found57\n    local prime_found58\n   \
    \ local prime_found59\n    local prime_found60\n    local prime_found61\n    local\
    \ prime_found62\n    local prime_found63\n    local prime_found64\n    local prime_found65\n\
    \    local prime_found66\n\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local primes\n    local prime\n    local prime_count\n\
    \    local prime_number\n    local prime_numbers=()\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_counts=()\n\
    \    local factor_counts_index=0\n    local factor_counts_size=0\n    local factor_counts_max=0\n\
    \    local factor_counts_max_index=0\n    local factor_counts_max_size=0\n   \
    \ local factor_counts_max_count=0\n    local factor_counts_max_count_index=0\n\
    \    local factor_counts_max_count_size=0\n    local factor_counts_max_count_count=0\n\
    \    local factor_counts_max_count_count_index=0\n    local factor_counts_max_count_count_size=0\n\
    \    local factor_counts_max_count_count_count=0\n    local factor_counts_max_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_index=0\n    local factor_counts_max_count_count_count_size=0\n\
    \    local factor_counts_max_count_count_count_count=0\n    local factor_counts_max_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count=0\n    local factor_counts_max_count_count_count_count_index=0\n\
    \    local factor_counts_max_count_count_count_count_size=0\n    local factor_counts_max_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count=0\n    local factor_counts_max_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count_index=0\n    local\
    \ factor_counts_max_count_count_count_count_count_size=0\n    local factor_counts_max_count_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count_count=0\n    local\
    \ factor_counts_max_count_count_count_count_count_count_index=0\n    local factor_counts_max_count_count_count_count_count_count_size=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count=0\n   \
    \ local factor_counts_max_count_count_count_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_index=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_size=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_count=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_count_index=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_count_size=0\n\
    \    local factor_counts_max_count_count_count_count_count_count_count_count_count=0\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factors\n    local factor\n    local\
    \ factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local factor_count\n    local\
    \ factor_index\n    local factor_counts\n    local factor_indexes\n    local factor_counts_index\n\
    \    local factor_counts_indexes\n    local factor_indexes_index\n    local factor_counts_indexes\n\
    \    local factor_indexes_indexes\n    local factor_counts_indexes_index\n   \
    \ local factor_counts_indexes_indexes\n    local factor_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_index\n    local factor_counts_indexes_indexes_index\n\
    \    local factor_indexes_indexes_indexes_index\n    local factor_counts_indexes_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_indexes_index\n    local factor_indexes_indexes_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_index\n    local factor_counts_indexes_indexes_indexes_indexes_index\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_index\n    local factor_counts_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_counts_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \    local factor_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local factors=()\n  local factor\n  local\
    \ factor_count\n  local i\n  local j\n  local k\n  local factor\n  local factor_count\n\
    \  local prime\n  local prime_count\n  local prime_number\n  local prime_numbers=()\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime_number\n\
    \  local prime_number\n  local prime_number\n  local prime_number\n  local prime\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_counts\n    local\
    \ factor_indexes\n    local factor_count\n    local factor_index\n    local factor_counts\n\
    \    local factor_indexes\n    local factor_count\n    local factor_index\n  \
    \  local factor_counts\n    local factor_indexes\n    local factor_count\n   \
    \ local factor_index\n    local factor_counts\n    local factor_indexes\n    local\
    \ factor_count\n    local factor_index\n    local factor_counts\n    local factor_indexes\n\
    \    local factor_count\n    local factor_index\n    local factor_counts\n   \
    \ local factor_indexes\n    local factor_count\n    local factor_index\n    local\
    \ factor_counts\n    local factor_indexes\n    local factor_count\n    local factor_index\n\
    \    local factor_counts\n    local factor_indexes\n    local factor_count\n \
    \   local factor_index\n    local factor_counts\n    local factor_indexes\n  \
    \  local factor_count\n    local factor_index\n    local factor_counts\n    local\
    \ factor_indexes\n    local factor_count\n    local factor_index\n    local factor_counts\n\
    \    local factor_indexes\n    local factor_count\n    local factor_index\n  \
    \  local factor_counts\n    local factor_indexes\n    local factor_count\n   \
    \ local factor_index\n    local factor_counts\n    local factor_indexes\n    local\
    \ factor_count\n    local factor_index\n    local factor_counts\n    local factor_indexes\n\
    \    local factor_count\n    local factor_index\n    local factor_counts\n   \
    \ local factor_indexes\n    local factor_count\n    local factor_index\n    local\
    \ factor_counts\n    local factor_indexes\n    local factor_count\n    local factor_index\n\
    \    local factor_counts\n    local factor_indexes\n    local factor_count\n \
    \   local factor_index\n    local factor_counts\n    local factor_indexes\n  \
    \  local factor_count\n    local factor_index\n    local factor_counts\n    local\
    \ factor_indexes\n    local factor_count\n    local factor_index\n    local factor_counts\n\
    \    local factor_indexes\n    local factor_count\n    local factor_index\n  \
    \  local factor_counts\n    local factor_indexes\n    local factor_count\n   \
    \ local factor_index\n    local factor_counts\n    local \n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local n\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 2
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${#factors[@]}\n\
    \    local factors_count=${#factors[@]}\n    local factors_count=${\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphzp4_ank.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660030288
- exit_code: -1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=1\n    local factors_count=${#1}\n    while [ $factor_count\
    \ -gt 0 ]; do\n        factor=1\n        factor_count=1\n        for (( factor_count=0;\
    \ factor_count < $factors_count; factor_count++ )); do\n            factor=$((\
    \ $factor * $1 ))\n            if [ $factor -eq $1 ]; then\n                factor_count=$((\
    \ $factor_count + 1 ))\n                factors+=( $factor )\n               \
    \ break\n            fi\n        done\n    done\n    echo ${factors[*]}\n}\n\n\
    candidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=51 encoding='utf-8'>
  timestamp: 1660030293
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factor\n}\n\ncandidate() {\n \
    \   factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factor\n}\n\ncandidate() {\n \
    \   factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local factor\n    local count\n   \
    \ local factor_count\n    local factor_index\n    local factor_index2\n    local\
    \ factor_index3\n    local factor_index4\n    local factor_index5\n    local factor_index6\n\
    \    local factor_index7\n    local factor_index8\n    local factor_index9\n \
    \   local factor_index10\n    local factor_index11\n    local factor_index12\n\
    \    local factor_index13\n    local factor_index14\n    local factor_index15\n\
    \    local factor_index16\n    local factor_index17\n    local factor_index18\n\
    \    local factor_index19\n    local factor_index20\n    local factor_index21\n\
    \    local factor_index22\n    local factor_index23\n    local factor_index24\n\
    \    local factor_index25\n    local factor_index26\n    local factor_index27\n\
    \    local factor_index28\n    local factor_index29\n    local factor_index30\n\
    \    local factor_index31\n    local factor_index32\n    local factor_index33\n\
    \    local factor_index34\n    local factor_index35\n    local factor_index36\n\
    \    local factor_index37\n    local factor_index38\n    local factor_index39\n\
    \    local factor_index40\n    local factor_index41\n    local factor_index42\n\
    \    local factor_index43\n    local factor_index44\n    local factor_index45\n\
    \    local factor_index46\n    local factor_index47\n    local factor_index48\n\
    \    local factor_index49\n    local factor_index50\n    local factor_index51\n\
    \    local factor_index52\n    local factor_index53\n    local factor_index54\n\
    \    local factor_index55\n    local factor_index56\n    local factor_index57\n\
    \    local factor_index58\n    local factor_index59\n    local factor_index60\n\
    \    local factor_index61\n    local factor_index62\n    local factor_index63\n\
    \    local factor_index64\n    local factor_index65\n    local factor_index66\n\
    \    local factor_index67\n    local factor_index68\n    local factor_index69\n\
    \    local factor_index70\n    local factor_index71\n    local factor_index72\n\
    \    local factor_index73\n    local factor_index74\n    local factor_index75\n\
    \    local factor_index76\n    local factor_index77\n    local factor_index78\n\
    \    local factor_index79\n    local \n}\n\ncandidate() {\n    factorize \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate\
    \ \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local n\n    local count\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime_count\n    local prime\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local factor\n  \
    \  local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    local factor\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local factor\n    local factors\n    local factor\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local factor\n    local factors\n    local factor\n    local count\n\
    \    local factor\n    local factors\n    local factor\n    local count\n    local\
    \ factor\n    local factors\n    local factor\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local factor\n    local\
    \ factors\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local max\n    local num\n   \
    \ local maxnum\n    local maxcount\n    local maxfactor\n    local maxfactornum\n\
    \    local maxfactorcount\n    local maxfactornum2\n    local maxfactorcount2\n\
    \    local maxfactornum3\n    local maxfactorcount3\n    local maxfactornum4\n\
    \    local maxfactorcount4\n    local maxfactornum5\n    local maxfactorcount5\n\
    \    local maxfactornum6\n    local maxfactorcount6\n    local maxfactornum7\n\
    \    local maxfactorcount7\n    local maxfactornum8\n    local maxfactorcount8\n\
    \    local maxfactornum9\n    local maxfactorcount9\n    local maxfactornum10\n\
    \    local maxfactorcount10\n    local maxfactornum11\n    local maxfactorcount11\n\
    \    local maxfactornum12\n    local maxfactorcount12\n    local maxfactornum13\n\
    \    local maxfactorcount13\n    local maxfactornum14\n    local maxfactorcount14\n\
    \    local maxfactornum15\n    local maxfactorcount15\n    local maxfactornum16\n\
    \    local maxfactorcount16\n    local maxfactornum17\n    local maxfactorcount17\n\
    \    local maxfactornum18\n    local maxfactorcount18\n    local maxfactornum19\n\
    \    local maxfactorcount19\n    local maxfactornum20\n    local maxfactorcount20\n\
    \    local maxfactornum21\n    local maxfactorcount21\n    local maxfactornum22\n\
    \    local maxfactorcount22\n    local maxfactornum23\n    local maxfactorcount23\n\
    \    local maxfactornum24\n    local maxfactorcount24\n    local maxfactornum25\n\
    \    local maxfactorcount25\n    local maxfactornum26\n    local maxfactorcount26\n\
    \    local maxfactornum27\n    local maxfactorcount27\n    local maxfactornum28\n\
    \    local maxfactorcount28\n    local maxfactornum29\n    local maxfactorcount29\n\
    \    local maxfactornum30\n    local maxfactorcount30\n    local maxfactornum31\n\
    \    local maxfactorcount31\n    local maxfactornum32\n    local maxfactorcount32\n\
    \    local maxfactornum33\n    local maxfactorcount33\n    local maxfactornum34\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n  local number=$1\n  local factors=()\n\
    \  local factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n\
    \  local factors\n  local factor\n  local count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factors\n  local factor\n  local count\n  local i\n\
    \  local j\n  local k\n  local factor\n  local factors\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n  local\
    \ factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factors\n  local factor\n  local count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factors\n  local factor\n  local count\n  local i\n  local j\n\
    \  local k\n  local factor\n  local factors\n  local factor\n  local count\n \
    \ local i\n  local j\n  local k\n  local factor\n  local factors\n  local factor\n\
    \  local count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n\
    \  local factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n\
    \  local factors\n  local factor\n  local count\n  local i\n  local j\n  local\
    \ k\n  local factor\n  local factors\n  local factor\n  local count\n  local i\n\
    \  local j\n  local k\n  local factor\n  local factors\n  local factor\n  local\
    \ count\n  local i\n  local j\n  local k\n  local factor\n  local factors\n  local\
    \ factor\n  local count\n  local i\n  local j\n  local k\n  local factor\n  local\
    \ factors\n  local factor\n  local count\n  local i\n  local j\n  local k\n  local\
    \ factor\n  local factors\n  local factor\n  local count\n  local i\n  local j\n\
    \  local k\n  local factor\n  local factors\n  local factor\n  local count\n \
    \ local i\n  local j\n  local k\n  local factor\n  local factors\n  local factor\n\
    \  local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_count\n  \
    \  local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n    local factor_count\n\
    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[\
    \ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n\
    \    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factors\n    local factor\n    local count\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factors\n    local factor\n    local\
    \ count\n    local i\n    local j\n    local k\n    local factor\n    local factors\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local count\n    local\
    \ i\n    local j\n    local k\n    local factor\n    local factors\n    local\
    \ factor\n    local count\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"\
    4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate\
    \ \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n   \
    \ [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\"\
    ) = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ k\n    local factor\n    local factor_count\n    local factors\n    local i\n\
    \    local j\n    local k\n    local factor\n    local factor_count\n    local\
    \ factors\n    local i\n    local j\n    local k\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factor_count\n    local factors\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local k\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ k\n    local factor\n    local factor_count\n    local factors\n    local i\n\
    \    local j\n    local k\n    local factor\n    local factor_count\n    local\
    \ factors\n    local i\n    local j\n    local k\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factor_count\n    local factors\n    local i\n    local\
    \ j\n    local k\n    local factor\n    local factor_count\n    local factors\n\
    \    local i\n    local j\n    local k\n    local factor\n    local factor_count\n\
    \    local factors\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local i\n    local j\n    local\
    \ k\n    local factor\n    local factor_count\n    local factors\n    local i\n\
    \    local j\n    local k\n    local factor\n    local factor_count\n    local\
    \ factors\n    local i\n    local j\n    local k\n    local factor\n    local\
    \ factor_count\n    local factors\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local factor_count\n    local factors\n    \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local number=$1\n    local factors=()\n\
    \    local factor\n    local count\n    local i\n    local j\n    local k\n  \
    \  local factor\n    local factors\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n    local factor\n    local\
    \ factor\n    local factor\n    local factor\n    local factor\n    local factor\n\
    \    local factor\n    local factor\n    local factor\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local i\n    local j\n    local k\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local i\n    local j\n    local k\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local i\n  \
    \  local j\n    local k\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local i\n    local j\n    local\
    \ k\n    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local i\n    local j\n    local k\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local factor\n    local factor_count\n    local factors\n    local factor\n\
    \    local factor_count\n    local factors\n    local factor\n    local factor_count\n\
    \    local factors\n    local factor\n    local factor_count\n    local factors\n\
    \    local \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\"\
    \ ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"\
    3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local count\n    local i\n    local j\n    local k\n   \
    \ local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n    local factor\n    local\
    \ count\n    local factor\n    local count\n    local factor\n    local count\n\
    \    local factor\n    local count\n    local factor\n    local count\n    local\
    \ factor\n    local count\n    local factor\n    local count\n    local factor\n\
    \    local count\n    local factor\n    local count\n\n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor_index\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor_index\n    local factor_count\n    local factor_index\n    local\
    \ factor_count\n    local factor_index\n    local factor_count\n    local factor_index\n\
    \    local factor_count\n    local factor_index\n    local \n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    local factor_index\n    local\
    \ factor_count=0\n    local factor_index\n    local factor_count=0\n    local\
    \ factor_index\n    local factor_count=0\n    local factor_index\n    local factor_count=0\n\
    \    local factor_index\n    local factor_count=0\n    local factor_index\n  \
    \  local factor_count=0\n    local factor_index\n    local factor_count=0\n  \
    \  local factor_index\n    local factor_count=0\n    \n}\n\ncandidate() {\n  \
    \  factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factor\n}\n\ncandidate() {\n \
    \   factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local i\n    local j\n    local k\n    local factor\n\
    \    local factor_count\n    local prime\n    local prime_count\n    local prime_number\n\
    \    local prime_numbers=()\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime_number\n    local prime_number\n    local prime_number\n    local prime_number\n\
    \    local prime_number\n    local prime_number\n    local prime_number\n    local\
    \ prime\n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n\
    \    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\"\
    \ ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\"\
    ) = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n\
    \    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local n=$1\n    local factors=()\n \
    \   local factor\n    local i\n    local j\n    local k\n    local count\n   \
    \ local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n}\n\ncandidate() {\n   \
    \ factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"\
    2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"\
    2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\"\
    ) = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19 19\" ]]\n\
    \    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate \"18\"\
    ) = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor=1\n\
    \    local factor_count=0\n    local factors_count=${#1}\n    local prime_count=0\n\
    \    local prime_prime_count=0\n    local prime_prime_prime_count=0\n    local\
    \ prime_prime_prime_prime_count=0\n    local prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_count=0\n    local prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_count=0\n    local\
    \ prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n    local prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count=0\n\
    \    local prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local count\n    local number\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n    local factor\n  \
    \  local factors\n    local factor\n    local factors\n    local factor\n    local\
    \ factors\n    local factor\n    local factors\n    local factor\n    local factors\n\
    \    local factor\n    local factors\n    local factor\n    local factors\n  \
    \  local factor\n    local factors\n    local factor\n    local factors\n    local\
    \ factor\n    local factors\n    local factor\n    local factors\n    local factor\n\
    \    local factors\n    local factor\n    local factors\n\n}\n\ncandidate() {\n\
    \    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") =\
    \ \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\")\
    \ = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index=0\n\
    \    local factor_count=0\n    local factor_index=0\n    local factor_count=0\n\
    \    local factor_index=0\n    local factor_count=0\n    local factor_index\n\
    }\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate\
    \ \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local i\n    local j\n    local k\n    local count\n    local factor\n  \
    \  local factors\n    local factor\n    local i\n    local j\n    local k\n  \
    \  local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    local k\n    local count\n    local factor\n    local factors\n\
    \    local factor\n    local i\n    local j\n    local k\n    local count\n  \
    \  local factor\n    local factors\n    local factor\n    local i\n    local j\n\
    \    local k\n    local count\n    local factor\n    local factors\n    local\
    \ factor\n    local i\n    local j\n    local k\n    local count\n    local factor\n\
    \    local factors\n    local factor\n    local i\n    local j\n    local k\n\
    \    local count\n    local factor\n    local factors\n    local factor\n    local\
    \ i\n    local j\n    \n}\n\ncandidate() {\n    factorize \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"2\" ]]\n    [[ $(candidate \"4\")\
    \ = \"2 2\" ]]\n    [[ $(candidate \"8\") = \"2 2 2\" ]]\n    [[ $(candidate \"\
    57\") = \"3 19\" ]]\n    [[ $(candidate \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate\
    \ \"185193\") = \"3 3 3 19 19 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19\
    \ 19 19\" ]]\n    [[ $(candidate \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
- exit_code: 1
  program: "#!/bin/bash\n# Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n# Each of the factors should be listed number of\
    \ times corresponding to how many times it appeares in factorization.\n# Input\
    \ number should be equal to the product of all factors\n# >>> factorize(8)\n#\
    \ [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\n\
    #\n# $1 is an integer\nfactorize() {\n    local factors=()\n    local factor\n\
    \    local factor_count\n    local factor_index\n    local factor_count\n    local\
    \ factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor_index\n    local factor_count\n\
    \    local factor\n    local factor_count\n    local factor\n}\n\ncandidate()\
    \ {\n    factorize \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\"\
    ) = \"2\" ]]\n    [[ $(candidate \"4\") = \"2 2\" ]]\n    [[ $(candidate \"8\"\
    ) = \"2 2 2\" ]]\n    [[ $(candidate \"57\") = \"3 19\" ]]\n    [[ $(candidate\
    \ \"3249\") = \"3 3 19 19\" ]]\n    [[ $(candidate \"185193\") = \"3 3 3 19 19\
    \ 19\" ]]\n    [[ $(candidate \"20577\") = \"3 19 19 19\" ]]\n    [[ $(candidate\
    \ \"18\") = \"2 3 3\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660030288
