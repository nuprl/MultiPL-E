language: sh
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local -a longest\n    local -a longestLength\n\
    \    local -a longestLengths\n    local -a longestLengthsCount\n    local -a longestLengthsCountMax\n\
    \    local -a longestLengthsCountMaxIndex\n    local -a longestLengthsCountMaxIndexCount\n\
    \    local -a longestLengthsCountMaxIndexCountMax\n    local -a longestLengthsCountMaxIndexCountMaxIndex\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCount\n    local -a longestLengthsCountMaxIndexCountMaxIndexCountMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndex\n    local\
    \ -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMax\n    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndex\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndex\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMax\n\
    \    local -a longestLengthsCountMaxIndexCountMaxIndexCountMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndexMaxIndex\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9rfy1tfy.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstring=\"\"\n    local maxindex=0\n    local maxcount=0\n\
    \    for (( i=0; i<${#strings[@]}; i++ )); do\n        local string=\"${strings[i]}\"\
    \n        local count=\"${#string}\"\n        if (( count > maxcount )); then\n\
    \            maxstring=\"${string}\"\n            maxcount=\"${count}\"\n    \
    \        maxindex=\"${i}\"\n        fi\n        lengths[${i}]=\"${count}\"\n \
    \   done\n    local length\n    for (( i=0; i<${#lengths[@]}; i++ )); do\n   \
    \     length=${lengths[${i}]}\n        if (( length > maxlen )) ; then\n     \
    \       maxlen=\"${length}\"\n            maxstring=\"${strings[${i}]}\"\n   \
    \     fi\n    done\n    echo \"${maxstring}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local j\n    local lengths\n    local max\n    local maxLength\n\
    \    local maxString\n    local stringLength\n    local stringLengths\n    local\
    \ stringLength\n    local stringLengthsLength\n    local stringLengthsLengthMax\n\
    \    local stringLengthsLengthMin\n    local stringLengthsLengthMinMax\n    local\
    \ stringLengthsLengthMinMaxMax\n    local stringLengthsLengthMinMaxMaxMin\n  \
    \  local stringLengthsLengthMinMaxMaxMinMax\n    local stringLengthsLengthMinMaxMaxMinMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMax\n    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMax\n    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMax\n    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax\n    local\
    \ stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    \    local stringLengthsLengthMinMaxMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    strings=(\"\
    $@\")\n    longest=\"${strings[0]}\"\n    for string in \"${strings[@]:1}\"\n\
    \    do\n        if [ \"${#longest}\" -gt \"${#string}\" ]\n        then\n   \
    \         longest=\"${string}\"\n        fi\n    done\n    echo \"${longest}\"\
    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n    local j\n    local lengths\n    local maxlen\n    local maxlen_index\n\
    \    local maxlen_string\n    local maxlen_indexes\n    local maxlen_strings\n\
    \    local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n \
    \   local maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n\
    \    local maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n\
    \    local maxlen_string\n    local maxlen_index\n    local maxlen_strings\n \
    \   local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n  \
    \  local maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n \
    \   local maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n \
    \   local maxlen_string\n    local maxlen_index\n    local maxlen_strings\n  \
    \  local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n   \
    \ local maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n  \
    \  local maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n  \
    \  local maxlen_string\n    local maxlen_index\n    local maxlen_strings\n   \
    \ local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n    local\
    \ maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n    local\
    \ maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n    local\
    \ maxlen_string\n    local maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n\
    \    local maxlen_string\n    local maxlen_index\n    local maxlen_strings\n \
    \   local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n  \
    \  local maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n \
    \   local maxlen_index\n    local maxlen_strings\n    local maxlen_indexes\n \
    \   local maxlen_string\n    local maxlen_index\n    local maxlen_strings\n  \
    \  local maxlen_indexes\n    local maxlen_string\n    local maxlen_index\n   \
    \ local maxlen_strings\n    local maxlen_indexes\n    local maxlen_string\n  \
    \  \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxlenstr=\"\"\n    local maxlenlen=0\n    local maxlenlenstr=\"\
    \"\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n    local maxlenlenstrlen=0\n\
    \    local maxlenlenstrlen=0\n    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L=$1\n    local S=''\n    local Lmax=0\n    local\
    \ Lmaxlen=0\n    local Lmaxlenlen=0\n    local Lmaxlenlenlen=0\n    local Lmaxlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlen=0\n    local\
    \ Lmaxlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlen=0\n    local\
    \ Lmaxlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local\
    \ Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local\
    \ Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n    local Lmaxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen=0\n\
    \    local Lmaxlenlenlenlenlenlenlenlen\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len=${#arr[@]}\n    local\
    \ maxlen=0\n    local max\n    for (( i=0; i < len; i++ )); do\n        local\
    \ len=${#arr[i]}\n        if (( len > maxlen )) ; then\n            maxlen=$len\n\
    \            max=${arr[i]}\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo7b3md_n.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local j\n    local lengths\n    local length\n    local string\n\
    \    local length\n    local string\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n}\n\ncandidate() {\n  \
    \  longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlen2=0\n    local maxstrpos2=0\n    local\
    \ maxstrlen3=0\n    local maxstrpos3=0\n    local maxstrlen4=0\n    local maxstrpos4=0\n\
    \    local maxstrlen5=0\n    local maxstrpos5=0\n    local maxstrlen6=0\n    local\
    \ maxstrpos6=0\n    local maxstrlen7=0\n    local maxstrpos7=0\n    local maxstrlen8=0\n\
    \    local maxstrpos8=0\n    local maxstrlen9=0\n    local maxstrpos9=0\n    local\
    \ maxstrlen10=0\n    local maxstrpos10=0\n    local maxstrlen11=0\n    local maxstrpos11=0\n\
    \    local maxstrlen12=0\n    local maxstrpos12=0\n    local maxstrlen13=0\n \
    \   local maxstrpos13=0\n    local maxstrlen14=0\n    local maxstrpos14=0\n  \
    \  local maxstrlen15=0\n    local maxstrpos15=0\n    local maxstrlen16=0\n   \
    \ local maxstrpos16=0\n    local maxstrlen17=0\n    local maxstrpos17=0\n    local\
    \ maxstrlen18=0\n    local maxstrpos18=0\n    local maxstrlen19=0\n    local maxstrpos19=0\n\
    \    local maxstrlen20=0\n    local maxstrpos20=0\n    local maxstrlen21=0\n \
    \   local maxstrpos21=0\n    local maxstrlen22=0\n    local maxstrpos22=0\n  \
    \  local maxstrlen23=0\n    local maxstrpos23=0\n    local maxstrlen24=0\n   \
    \ local maxstrpos24=0\n    local maxstrlen25=0\n    local maxstrpos25=0\n    local\
    \ maxstrlen26=0\n    local maxstrpos26=0\n    local maxstrlen27=0\n    local maxstrpos27=0\n\
    \    local maxstrlen28=0\n    local maxstrpos28=0\n    local maxstrlen29=0\n \
    \   local maxstrpos29=0\n    local maxstrlen30=0\n    local maxstrpos30=0\n  \
    \  local maxstrlen31=0\n    local maxstrpos31=0\n    local maxstrlen32\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length\n    local max\n\
    \    local i\n    local string\n    length=${#list}\n    if [ -z \"$list\" ];\
    \ then\n        echo \"$list\"\n        return\n    fi\n    max=$length\n    i=0\n\
    \    while [ $i -lt $length ]; do\n        string=${list[i]}\n        length=${#string}\n\
    \        if [ $length -gt $max ]; then\n            max=$length\n        fi\n\
    \        i=$((i+1))\n    done\n    echo \"${list[i]}\"\n}\n\ncandidate() {\n \
    \   longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local longest len\n    longest=${list[0]}\n\
    \    len=${#longest}\n    for element in \"${list[@]:1}\"; do\n        if [[ ${#element}\
    \ -gt $len ]]; then\n            longest=${element}\n            len=${#longest}\n\
    \        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuzsqhcol.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlen1=0\n    local maxstrpos1=0\n    local\
    \ maxstrlen2=0\n    local maxstrpos2=0\n    local maxstrlen3=0\n    local maxstrpos3=0\n\
    \    local maxstrlen4=0\n    local maxstrpos4=0\n    local maxstrlen5=0\n    local\
    \ maxstrpos5=0\n    local maxstrlen6=0\n    local maxstrpos6=0\n    local maxstrlen7=0\n\
    \    local maxstrpos7=0\n    local maxstrlen8=0\n    local maxstrpos8=0\n    local\
    \ maxstrlen9=0\n    local maxstrpos9=0\n    local maxstrlen10=0\n    local maxstrpos10=0\n\
    \    local maxstrlen11=0\n    local maxstrpos11=0\n    local maxstrlen12=0\n \
    \   local maxstrpos12=0\n    local maxstrlen13=0\n    local maxstrpos13=0\n  \
    \  local maxstrlen14=0\n    local maxstrpos14=0\n    local maxstrlen15=0\n   \
    \ local maxstrpos15=0\n    local maxstrlen16=0\n    local maxstrpos16=0\n    local\
    \ maxstrlen17=0\n    local maxstrpos17=0\n    local maxstrlen18=0\n    local maxstrpos18=0\n\
    \    local maxstrlen19=0\n    local maxstrpos19=0\n    local maxstrlen20=0\n \
    \   local maxstrpos20=0\n    local maxstrlen21=0\n    local maxstrpos21=0\n  \
    \  local maxstrlen22=0\n    local maxstrpos22=0\n    local maxstrlen23=0\n   \
    \ local maxstrpos23=0\n    local maxstrlen24=0\n    local maxstrpos24=0\n    local\
    \ maxstrlen25=0\n    local maxstrpos25=0\n    local maxstrlen26=0\n    local maxstrpos26=0\n\
    \    local maxstrlen27=0\n    local maxstrpos27=0\n    local maxstrlen28=0\n \
    \   local maxstrpos28=0\n    local maxstrlen29=0\n    local maxstrpos29=0\n  \
    \  local maxstrlen30=0\n    local maxstrpos30=0\n    local maxstrlen31\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    local i\n\n    for i in \"${!list[@]}\"; do\n        local str=\"${list[i]}\"\
    \n        local len=\"${#str}\"\n        if (( len > maxlen )) ; then\n      \
    \      maxstr=\"${str}\"\n            maxlen=\"${len}\"\n        fi\n    done\n\
    \n    if (( ${#maxstr} > 0 )) ; then\n        echo \"${maxstr}\"\n    else\n \
    \       echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp838n0z72.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp838n0z72.sh: line 12: local: `x y z'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local -n longest=\n    local -n\
    \ longestLength=0\n    local -n longestLengthIndex=0\n    local -n longestLengthIndexMax=0\n\
    \    local -n longestLengthIndexMin=0\n    local -n longestLengthIndexMaxLen=0\n\
    \    local -n longestLengthIndexMinLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndexMaxLenLen=0\n\
    \    local -n longestLengthIndexMinLenLen=0\n    local -n longestLengthIndex\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptjndo911.sh: line 12: local: `'': not a valid identifier

    /tmp/tmptjndo911.sh: line 13: local: `'': not a valid identifier

    /tmp/tmptjndo911.sh: line 14: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 15: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 16: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmptjndo911.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmptjn'
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n\n    length=${#1}\n    if [[ $length -eq 0 ]]; then\n        echo\
    \ \"No strings to compare\"\n        return\n    fi\n\n    longest=${1}\n    for\
    \ ((i=1; i<$length; i++)); do\n        string=${1}$i\n        if [[ \"${longest}\"\
    \ == \"$string\" ]]; then\n            longest=$string\n        elif [[ \"${longest}\"\
    \ -lt \"$string\" ]]; then\n            longest=$string\n        fi\n    done\n\
    \    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstring=\"\"\n    local maxidx=0\n    for (( idx=0; idx<${#strings[@]};\
    \ idx++ )); do\n        local string=\"${strings[$idx]}\"\n        local length=\"\
    ${#string}\"\n        if (( length < maxlen )) ; then\n            maxstring=\"\
    ${string}\"\n            maxidx=$idx\n            maxlen=$length\n        fi\n\
    \    done\n    echo \"${strings[$maxidx]}\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local j\n    local len\n    local maxlen\n    local maxlenlen\n\
    \    local maxlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local maxlenlenstring\n\
    \    local maxlenlenstring\n    local maxlenlenstring\n    local \n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local length=0\n    local max=''\n\
    \    local maxlen=0\n    local i\n    for ((i=0; i<${#list[@]}; i++)); do\n  \
    \      local len=${#list[$i]}\n        if (( len > maxlen )) ; then\n        \
    \    maxlen=${len}\n            max=${list[$i]}\n        fi\n    done\n    if\
    \ (( ${#max} == 0 )); then\n        echo -n \"No strings found\"\n    else\n \
    \       echo -n \"${max}\"\n    fi\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4h3pj6zf.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local longest len\n    longest=${arr[0]}\n\
    \    len=${#longest}\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        if [[\
    \ ${#arr[$i]} -gt $len ]]; then\n            longest=${arr[$i]}\n            len=${#longest}\n\
    \        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9feshv61.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    local maxlen=0\n    local i=0\n    while [ $i -lt ${#list} ]; do\n   \
    \     local len=${#list[i]}\n        if [ $len -gt $maxlen ]; then\n         \
    \   maxlen=$len\n            max=\"${list[i]}\"\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"$max\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq -c | sort -n | awk '{print\
    \ $2}') )\n    local longest\n    local length\n    for length in \"${lengths[@]}\"\
    ; do\n        if [[ -z \"$longest\" ]]; then\n            longest=\"$length\"\n\
    \        elif [[ \"$length\" == \"$longest\" ]]; then\n            longest=\"\
    $length\"\n        else\n            longest=\"$(echo \"$longest\" | cut -d' '\
    \ -f1)\"\n        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local str=\"\
    ${arr[i]}\"\n        local len=\"${#str}\"\n        if ((len > maxlen)) ; then\n\
    \            maxstr=\"${str}\"\n            maxlen=\"${len}\"\n        fi\n  \
    \  done\n    echo \"${maxstr}\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpydshgj8o.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local str=\"\
    ${arr[i]}\"\n        local len=${#str}\n        if (( len > maxlen )) ; then\n\
    \            maxlen=${len}\n            maxstr=\"${str}\"\n        fi\n    done\n\
    \    echo \"${maxstr}\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf_akwqh7.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[ $len\
    \ > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n     \
    \   fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8s31oyru.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local longest len\n    longest=${list[0]}\n\
    \    len=${#longest}\n    for (( i=1; i<${#list[@]}; i++ )); do\n        local\
    \ -n this=${list[i]}\n        if [[ ${#this} -gt $len ]]; then\n            longest=${this}\n\
    \            len=${#this}\n        fi\n    done\n    echo \"${longest}\"\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvv0wl9_d.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphx0t1ktp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    local length\n\
    \    strings=($1)\n    length=${#strings[@]}\n    if [[ $length -gt 1 ]]; then\n\
    \        longest=${strings[0]}\n        for (( i=1; i<$length; i++ )); do\n  \
    \          if [[ ${strings[i]} == $longest ]]; then\n                longest=${strings[i]}\n\
    \            else\n                break\n            fi\n        done\n    fi\n\
    \    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local len\n    local maxlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgl6e7fux.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq | wc -l) )\n    local longest\n\
    \    local length\n    for length in \"${lengths[@]}\"; do\n        if [[ \"${length}\"\
    \ -gt \"${#longest}\" ]]; then\n            longest=\"${strings[${length}]}\"\n\
    \        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local longest=${strings[0]}\n\
    \    local length=0\n    for string in \"${strings[@]}\"; do\n        ((length+=${#string}))\n\
    \        if ((length>${#longest})); then\n            longest=${string}\n    \
    \    fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i\n    for ((i=0; i < ${#list[@]}; i++)); do\n        if [[ ${#list[$i]}\
    \ -gt $maxlen ]]; then\n            maxstr=${list[$i]}\n            maxlen=${#list[$i]}\n\
    \        fi\n    done\n    if [[ ${#list[@]} -gt 0 ]]; then\n        echo \"${list[$i]}\"\
    \n    else\n        echo \"${maxstr}\"\n    fi\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9qj8wtz3.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${list[@]}\"; do\n        local strlen=$(echo \"${str}\" | wc\
    \ -c)\n        if [ \"${strlen}\" -gt \"${maxlen}\" ]; then\n            maxlen=\"\
    ${strlen}\"\n            maxstr=\"${str}\"\n        fi\n    done\n    echo \"\
    ${maxstr}\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\"\
    \ ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp06qysent.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local length=0\n    local longest\n    local i\n    for\
    \ ((i=0; i < ${#1}; i++)); do\n        length=${#1}\n        if [[ ${1:i} == *${1:i}*\
    \ ]]; then\n            length=${#1:i}\n        fi\n        if ((length>longest));\
    \ then\n            longest=${length}\n        fi\n    done\n    if [[ ${#1} -eq\
    \ 0 ]]; then\n        longest=0\n    fi\n    echo ${1:0:longest}\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n    local lengths\n    local length\n    local max\n    local maxLength\n\
    \    local maxLengthIndex\n    local maxLengthString\n    local maxLengthStringIndex\n\
    \    local maxLengthStringLength\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLength\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length=0\n    local max=0\n\
    \    local maxString=\"\"\n\n    for string in \"${strings[@]}\"; do\n       \
    \ length=$(echo \"${string}\" | wc -c)\n        if [ \"${length}\" -gt \"${max}\"\
    \ ]; then\n            max=${length}\n            maxString=${string}\n      \
    \  fi\n    done\n\n    echo \"${maxString}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf1_9bz1r.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local len=0\n    local maxlen=0\n\
    \    local maxstr=\"\"\n    local i=0\n    while [[ $i -lt ${#list[*]} ]]; do\n\
    \        len=${#list[$i]}\n        if (( len > maxlen )) ; then\n            maxlen=${len}\n\
    \            maxstr=${list[$i]}\n        fi\n        i=$(( $i + 1 ))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk9njxxq8.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    local length\n\
    \    local i\n    local j\n    local length\n    strings=( \"$@\" )\n    length=${#strings[@]}\n\
    \    for ((i=0; i<$length; i++)); do\n        length=${#strings[i]}\n        for\
    \ ((j=0; j<$length; j++)); do\n            if [[ $strings[$i] == $strings[$j]\
    \ ]]; then\n                longest=$strings[$i]\n                break\n    \
    \        fi\n        done\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlenpos=0\n    local maxstrlenlen=0\n \
    \   local maxstrlenlenpos=0\n    local maxstrlenlenlen=0\n    local maxstrlenlenlenpos=0\n\
    \    local maxstrlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local max\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local i\n    local\
    \ j\n    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local lengths\n    local length\n    local string\n    local strings=()\n\
    \    local \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\"\
    \ ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=\"${#list}\"\n  \
    \  local max=\"${list[0]}\"\n    local i\n    for ((i=1; i<${length}; i++)); do\n\
    \        local j\n        for ((j=0; j<i; j++)); do\n            [[ \"${list[j]}\"\
    \ == \"${list[i]}\" ]] && break\n        done\n        if [[ \"${j}\" == \"${i}\"\
    \ ]]; then\n            local j\n            for ((j=0; j<i; j++)); do\n     \
    \           [[ \"${list[j]}\" == \"${list[i]}\" ]] && break\n            done\n\
    \            if [[ \"${j}\" == \"${i}\" ]]; then\n                max=\"${list[i]}\"\
    \n            fi\n        fi\n    done\n    echo \"${max}\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlenpos=0\n    local maxstrlenlen=0\n \
    \   local maxstrlenlenpos=0\n    local maxstrlenlenlen=0\n    local maxstrlenlenlenpos=0\n\
    \    local maxstrlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local max\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local maxlen=0\n    local maxstr=\"\"\
    \n    local maxstrlen=0\n    local maxstrpos=0\n    local maxstrlen1=0\n    local\
    \ maxstrpos1=0\n    local maxstrlen2=0\n    local maxstrpos2=0\n    local maxstrlen3=0\n\
    \    local maxstrpos3=0\n    local maxstrlen4=0\n    local maxstrpos4=0\n    local\
    \ maxstrlen5=0\n    local maxstrpos5=0\n    local maxstrlen6=0\n    local maxstrpos6=0\n\
    \    local maxstrlen7=0\n    local maxstrpos7=0\n    local maxstrlen8=0\n    local\
    \ maxstrpos8=0\n    local maxstrlen9=0\n    local maxstrpos9=0\n    local maxstrlen10=0\n\
    \    local maxstrpos10=0\n    local maxstrlen11=0\n    local maxstrpos11=0\n \
    \   local maxstrlen12=0\n    local maxstrpos12=0\n    local maxstrlen13=0\n  \
    \  local maxstrpos13=0\n    local maxstrlen14=0\n    local maxstrpos14=0\n   \
    \ local maxstrlen15=0\n    local maxstrpos15=0\n    local maxstrlen16=0\n    local\
    \ maxstrpos16=0\n    local maxstrlen17=0\n    local maxstrpos17=0\n    local maxstrlen18=0\n\
    \    local maxstrpos18=0\n    local maxstrlen19=0\n    local maxstrpos19=0\n \
    \   local maxstrlen20=0\n    local maxstrpos20=0\n    local maxstrlen21=0\n  \
    \  local maxstrpos21=0\n    local maxstrlen22=0\n    local maxstrpos22=0\n   \
    \ local maxstrlen23=0\n    local maxstrpos23=0\n    local maxstrlen24=0\n    local\
    \ maxstrpos24=0\n    local maxstrlen25=0\n    local maxstrpos25=0\n    local maxstrlen26=0\n\
    \    local maxstrpos26=0\n    local maxstrlen27=0\n    local maxstrpos27=0\n \
    \   local maxstrlen28=0\n    local maxstrpos28=0\n    local maxstrlen29=0\n  \
    \  local maxstrpos29=0\n    local maxstrlen30=0\n    local maxstrpos30=0\n   \
    \ \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local j\n    local lengths\n    local max\n    local maxlen\n\
    \    local maxlen_index\n    local maxlen_indexes\n    local maxlen_indexes_index\n\
    \    local maxlen_indexes_indexes_index\n    local maxlen_indexes_indexes_indexes_index\n\
    \    local maxlen_indexes_indexes_indexes_indexes_index\n    local maxlen_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local maxlen_indexes_indexes_indexes_indexes_indexes_indexes_index\n    local\
    \ maxlen_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n    local\
    \ maxlen_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local maxlen_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local maxlen_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    \    local maxlen_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstr=\"\"\n    for str in \"${strings[@]}\"; do\n    \
    \    len=${#str}\n        if [[ ${len} -gt ${maxlen} ]]; then\n            maxstr=\"\
    ${str}\"\n            maxlen=${len}\n        elif [[ ${len} -eq ${maxlen} ]];\
    \ then\n            maxstr=\"${maxstr} ${str}\"\n        fi\n    done\n    echo\
    \ \"${maxstr}\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i longest len\n    longest=\n    len=0\n    for\
    \ ((i=0; i < ${#1[@]}; i++)); do\n        len=${#${1[i]}}\n        if [[ $len\
    \ -gt $len ]]; then\n            longest=${1[i]}\n        fi\n    done\n    echo\
    \ \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5c3rzz7f.sh: line 15: i < ${#1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    local maxlen=0\n    local i\n    for ((i=0; i<${#list}; i++)); do\n  \
    \      local item=\"${list[i]}\"\n        local len=\"${#item}\"\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            max=\"${item}\"\
    \n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphx0t1ktp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local i\n    local len\n    local\
    \ str\n    local tmp\n    local len2\n    local len3\n    local len4\n    local\
    \ len5\n    local len6\n    local len7\n    local len8\n    local len9\n    local\
    \ len10\n    local len11\n    local len12\n    local len13\n    local len14\n\
    \    local len15\n    local len16\n    local len17\n    local len18\n    local\
    \ len19\n    local len20\n    local len21\n    local len22\n    local len23\n\
    \    local len24\n    local len25\n    local len26\n    local len27\n    local\
    \ len28\n    local len29\n    local len30\n    local len31\n    local len32\n\
    \    local len33\n    local len34\n    local len35\n    local len36\n    local\
    \ len37\n    local len38\n    local len39\n    local len40\n    local len41\n\
    \    local len42\n    local len43\n    local len44\n    local len45\n    local\
    \ len46\n    local len47\n    local len48\n    local len49\n    local len50\n\
    \    local len51\n    local len52\n    local len53\n    local len54\n    local\
    \ len55\n    local len56\n    local len57\n    local len58\n    local len59\n\
    \    local len60\n    local len61\n    local len62\n    local len63\n    local\
    \ len64\n    local len65\n    local len66\n    local len67\n    local len68\n\
    \    local len69\n    local len70\n    local len71\n    local len72\n    local\
    \ len73\n    local len74\n    local len75\n    local len76\n    local len77\n\
    \    local len78\n    local len79\n    local len80\n    local len81\n    local\
    \ len82\n    local len83\n    local len84\n    local len85\n    local len86\n\
    \    local len87\n    local len88\n    local len89\n    local len90\n    local\
    \ len91\n    local len92\n    local len93\n    local len94\n    local len95\n\
    \    local len96\n    local len97\n    local len98\n    local len99\n    local\
    \ \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq -c | sort -nr | head -1) )\n\
    \    local longest\n    local i\n    for (( i=0; i<${#strings[@]}; i++ )); do\n\
    \        if [[ -n \"${lengths[$i]}\" ]]; then\n            if [[ \"${lengths[$i]}\"\
    \ -gt \"${lengths[$((i-1))]}\" ]]; then\n                longest=\"${strings[$i]}\"\
    \n            fi\n        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1_ie94xj.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local lengths=$(echo \"$1\" | tr ' ' '\\n' | sort -n\
    \ | uniq -c | sort -n | awk '{print $1}')\n    if [ -z \"$lengths\" ]; then\n\
    \        echo \"None\"\n    else\n        echo \"${lengths[-1]}\"\n    fi\n}\n\
    \ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc4n0jgug.sh: line 16: lengths: bad array subscript

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstr=\"\"\n    for str in \"${strings[@]}\"; do\n    \
    \    len=${#str}\n        if [[ ${len} -gt ${maxlen} ]]; then\n            maxstr=\"\
    ${str}\"\n            maxlen=${len}\n        fi\n        lengths+=(\"${len}\"\
    )\n    done\n    if [[ ${#lengths[@]} -gt 0 ]]; then\n        echo \"${maxstr}\"\
    \n    else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    local length\n\
    \    strings=($1)\n    length=${#strings[@]}\n    if [[ $length -eq 0 ]]; then\n\
    \        longest=\n    elif [[ $length -gt 1 ]]; then\n        longest=${strings[0]}\n\
    \    else\n        longest=${strings[0]}\n    fi\n    for (( i=1; i<$length; i++\
    \ )); do\n        if [[ ${strings[$i]} != $longest ]]; then\n            longest=${strings[$i]}\n\
    \        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlen=0\n    local maxstrlenlen=0\n\
    \    local maxstrlenlen=0\n    local maxstrlen\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a list\n    local len\n   \
    \ local i\n    local maxlen\n\n    list=$1\n    maxlen=0\n    longest=\"\"\n \
    \   for ((i = 0; i < ${#list[@]}; i++)); do\n        len=${#list[i]}\n       \
    \ if ((len > maxlen)) ; then\n            maxlen=${len}\n            longest=${list[i]}\n\
    \        fi\n    done\n\n    if ((${#list[@]} > 0)); then\n        echo \"${longest}\"\
    \n    else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[ $len\
    \ > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n     \
    \   fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8s31oyru.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlenpos=0\n    local maxstrlenlen=0\n \
    \   local maxstrlenlenpos=0\n    local maxstrlenlenlen=0\n    local maxstrlenlenlenpos=0\n\
    \    local maxstrlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local max\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: -1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstr=\"\"\n    local i=0\n    while [[ ${#strings[*]}\
    \ -gt 0 ]]; do\n        local len=${#strings[i]}\n        if [[ ${#lengths[*]}\
    \ -eq 0 ]]; then\n            lengths=(\"${!len}\")\n        else\n          \
    \  lengths=(\"${lengths[@]}\" \"$len\")\n        fi\n        if [[ ${#maxstr}\
    \ -eq 0 ]]; then\n            maxstr=\"${strings[i]}\"\n            maxlen=${lengths[i]}\n\
    \        elif [[ ${#maxstr} -gt ${lengths[i]} ]]; then\n            maxstr=\"\
    ${strings[i]}\"\n            maxlen=${lengths[i]}\n        fi\n        i=$((i+1))\n\
    \    done\n    if [[ ${#maxstr} -gt 0 ]]; then\n        echo \"${maxstr}\"\n \
    \   else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660025690
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    for element in $list; do\n        length=$(expr length \"$element\")\n\
    \        if [ \"$length\" -gt \"$length\" ]; then\n            length=$length\n\
    \            max=\"$element\"\n        fi\n    done\n    echo \"$max\"\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local longest len\n    longest=${arr[0]}\n\
    \    len=${#longest}\n    for (( i=1; i<${#arr[@]}; i++ )); do\n        local\
    \ -n arr2=$i\n        local len2 maxlen\n        maxlen=0\n        for (( j=0;\
    \ j<${#arr2[@]}; j++ )); do\n            local -n arr3=$j\n            local len3\
    \ maxlen2\n            len3=${#arr3}\n            if (( len3 > maxlen )) ; then\n\
    \                maxlen=${len3}\n                maxlen2=${len2}\n           \
    \ fi\n        done\n        if (( len > maxlen )); then\n            longest=${arr[i]}\n\
    \            len=${maxlen}\n        fi\n    done\n    echo \"${longest}\"\n}\n\
    \ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptbqeaqrf.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local i\n    local length\n    local\
    \ string\n    local count\n    local max\n    local maxLength\n    local maxCount\n\
    \    local maxString\n\n    longest=\n    length=\n    string=\n    count=\n \
    \   max=\n    maxLength=\n    maxCount=\n    maxString=\n\n    for i in \"$@\"\
    ; do\n        if [[ -z \"$longest\" ]]; then\n            longest=\"$i\"\n   \
    \     elif [[ \"$longest\" == \"$i\" ]]; then\n            length=\"$((length\
    \ + 1))\"\n        else\n            if [[ \"$length\" -gt \"$maxLength\" ]];\
    \ then\n                max=\"$longest\"\n                maxLength=\"$length\"\
    \n                maxCount=\"$count\"\n                maxString=\"$string\"\n\
    \            fi\n            length=\"$((length + 1))\"\n            longest=\"\
    $i\"\n        fi\n        count=\"$((count + 1))\"\n        string=\"$i \"\n \
    \   done\n\n    if [[ -z \"$longest\" ]]; then\n        longest=\"$max\"\n   \
    \     maxLength=\"$maxLength\"\n        maxCount=\"$maxCount\"\n        maxString=\"\
    $maxString\"\n    fi\n\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a list\n    local len\n   \
    \ local maxlen\n    local max\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local\
    \ b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local\
    \ h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local\
    \ n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local\
    \ t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local\
    \ z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local\
    \ f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local\
    \ l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local\
    \ r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local\
    \ x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local\
    \ d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local\
    \ j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local\
    \ p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local\
    \ v\n    local w\n    local x\n    local y\n    local z\n    \n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len=${#arr[@]}\n    local\
    \ maxlen=0\n    local maxstr=\"\"\n    local i=0\n    while [ $i -lt $len ]; do\n\
    \        local str=${arr[$i]}\n        local len=${#str}\n        if [ $len -gt\
    \ $maxlen ]; then\n            maxlen=$len\n            maxstr=$str\n        fi\n\
    \        i=$((i+1))\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo_tdtge7.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local length\n    local max\n \
    \   max=${#list[@]}\n    for (( i=0; i<max; i++ )); do\n        length=${#list[$i]}\n\
    \        if (( length == 0 )); then\n            echo \"$i\"\n        elif ((\
    \ length == max )); then\n            echo \"$i\"\n        elif (( length > max\
    \ )); then\n            echo \"$i\"\n        fi\n    done\n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuv9g6942.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=\"${#list}\"\n  \
    \  local max\n    local i\n    for (( i=1; i<=$((length-1)); i++ )); do\n    \
    \    local j\n        for (( j=0; j<$length; j++ )); do\n            if [[ \"\
    ${list[j]}\" == \"${list[i]}\" ]]; then\n                max=\"${list[i]}\"\n\
    \                break\n            fi\n        done\n    done\n    echo \"${max}\"\
    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstring=\"\"\n    for string in \"${strings[@]}\"; do\n\
    \        local len=${#string}\n        if [[ ${len} -gt ${maxlen} ]]; then\n \
    \           maxlen=${len}\n            maxstring=${string}\n        fi\n     \
    \   lengths+=(\"${len}\")\n    done\n    if [[ ${#lengths[@]} -gt 0 ]]; then\n\
    \        echo \"${maxstring}\"\n    else\n        echo \"None\"\n    fi\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphx0t1ktp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local length=0\n    local max=''\n    local maxlen=0\n\
    \    local maxlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n \
    \   local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    local maxlenlenlen=0\n\
    \    local maxlenlenlen=0\n    local maxlenlenlen=0\n    \n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local len\n    local\
    \ i\n    local lens\n    local maxlen\n    local maxlens\n    local maxlenlen\n\
    \    local maxlenlens\n    local maxlenlenlens\n    local maxlenlenlenss\n   \
    \ local maxlenlenlensst\n    local maxlenlenlensstt\n    local maxlenlenlenssttt\n\
    \    local maxlenlenlensstttt\n    local maxlenlenlenssttttt\n    local maxlenlenlensstttttt\n\
    \    local maxlenlenlenssttttttt\n    local maxlenlenlensstttttttt\n    local\
    \ maxlenlenlenssttttttttt\n    local maxlenlenlensstttttttttt\n    local maxlenlenlenssttttttttttt\n\
    \    local maxlenlenlenssttttttttttttt\n    local maxlenlenlensstttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttt\n    local maxlenlenlensstttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttttttt\n    local maxlenlenlensstttttttttttttttttttttttt\n\
    \    local maxlenlenlenssttttttttttttttttttttttttt\n    local maxlenlenlens\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphx0t1ktp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length\n    local max\n\
    \    local maxlen\n    local maxlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest longestLength string\n    longestLength=0\n\
    \    longest=\"\"\n    string=$1\n    while [ -n \"$string\" ]; do\n        longestLength=$((\
    \ ${#string} > longestLength ? ${#string} : longestLength ))\n        longest=${string:0:$longestLength}\n\
    \        string=${string:$longestLength}\n    done\n    echo $longest\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#arr[@]} ]; do\n        local str=${arr[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl9vvrqg9.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L=($1)\n    local LENGTH=${#L[@]}\n    local MAX=0\n\
    \    local MAXSTR=''\n    for (( i=0; i<${#L[@]}; i++ )); do\n        local STR=${L[$i]}\n\
    \        local LEN=${#STR}\n        if [ $LEN -gt $MAX ]; then\n            MAX=$LEN\n\
    \            MAXSTR=$STR\n        fi\n    done\n    echo \"$MAXSTR\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=\"${#list}\"\n  \
    \  local maxlen=0\n    local maxstr=\"\"\n    local i=0\n    while [ $i -lt $length\
    \ ]; do\n        local str=\"${list[i]}\"\n        local len=\"${#str}\"\n   \
    \     if [ $len -gt $maxlen ]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"$maxstr\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local longest len\n    longest=${list[0]}\n\
    \    len=${#longest}\n    for (( i=1; i<${#list[@]}; i++ )); do\n        if [[\
    \ ${#list[$i]} -gt $len ]]; then\n            longest=${list[$i]}\n          \
    \  len=${#longest}\n        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpujlhygjj.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local count\n    local lengths\n    local max\n    local maxLength\n\
    \    local maxLengthIndex\n    local maxLengthCount\n    local maxLengthString\n\
    \    local maxLengthStringIndex\n    local maxLengthStringCount\n    local maxLengthStringLength\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthCount\n\
    \    local maxLengthStringLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    local maxLengthStringLengthLengthCount\n\
    \    local maxLengthStringLengthLengthLength\n    local maxLengthStringLengthLengthIndex\n\
    \    local maxLengthStringLengthLengthCount\n    local maxLengthStringLengthLengthLength\n\
    \    local maxLengthStringLengthLengthIndex\n    \n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=\"${#list}\"\n  \
    \  local maxlen=0\n    local maxstr=\"\"\n    local i=0\n    while [ $i -lt $length\
    \ ]; do\n        local str=\"${list[i]}\"\n        if [[ \"$str\" == \"$maxstr\"\
    \ ]]; then\n            maxlen=$((maxlen+1))\n        else\n            if [[\
    \ \"$maxlen\" -gt 0 ]]; then\n                maxstr=\"${list[i]}\"\n        \
    \        maxlen=0\n            fi\n        fi\n        ((i++))\n    done\n   \
    \ if [[ \"$maxlen\" -gt 0 ]]; then\n        echo \"$maxstr\"\n    else\n     \
    \   echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq -c | sort -n | awk '{print\
    \ $2}') )\n    local longest\n    local length\n    for length in \"${lengths[@]}\"\
    ; do\n        if [[ -n \"${longest}\" ]] && [[ \"${length}\" -gt \"${longest}\"\
    \ ]]; then\n            longest=\"${length}\"\n        elif [[ -n \"${longest}\"\
    \ ]] && [[ \"${length}\" -lt \"${longest}\" ]]; then\n            longest=\"${length}\"\
    \n        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local -a longest\n    local i\n    local j\n    local k\n    local -a tmp\n\
    \    local -a tmp2\n    local -a tmp3\n    local -a tmp4\n    local -a tmp5\n\
    \    local -a tmp6\n    local -a tmp7\n    local -a tmp8\n    local -a tmp9\n\
    \    local -a tmp10\n    local -a tmp11\n    local -a tmp12\n    local -a tmp13\n\
    \    local -a tmp14\n    local -a tmp15\n    local -a tmp16\n    local -a tmp17\n\
    \    local -a tmp18\n    local -a tmp19\n    local -a tmp20\n    local -a tmp21\n\
    \    local -a tmp22\n    local -a tmp23\n    local -a tmp24\n    local -a tmp25\n\
    \    local -a tmp26\n    local -a tmp27\n    local -a tmp28\n    local -a tmp29\n\
    \    local -a tmp30\n    local -a tmp31\n    local -a tmp32\n    local -a tmp33\n\
    \    local -a tmp34\n    local -a tmp35\n    local -a tmp36\n    local -a tmp37\n\
    \    local -a tmp38\n    local -a tmp39\n    local -a tmp40\n    local -a tmp41\n\
    \    local -a tmp42\n    local -a tmp43\n    local -a tmp44\n    local -a tmp45\n\
    \    local -a tmp46\n    local -a tmp47\n    local -a tmp48\n    local -a tmp49\n\
    \    local -a tmp50\n    local -a tmp51\n    local -a tmp52\n    local -a tmp53\n\
    \    local -a tmp54\n    local -a tmp55\n    local -a tmp56\n    local -a tmp57\n\
    \    local -a tmp58\n    local -a tmp59\n    local -a tmp60\n    local -a tmp61\n\
    \    local -a tmp62\n    local -a tmp63\n    local -a tmp64\n    local -a tmp65\n\
    \    local -a tmp66\n    local -a tmp67\n    local -a tmp68\n    local -\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpby2ej97z.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 2
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n\n    longest=$1\n    length=${#longest}\n    for ((i=1; i<=$length;\
    \ i++)); do\n        string=${longest:$i:1}\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if \n}\n\ncandidate() {\n  \
    \  longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprf4p97nb.sh: line 109: syntax error near unexpected token `}''

    /tmp/tmprf4p97nb.sh: line 109: `}''

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local count\n    local i\n    local j\n\n    longest=$1\n    length=${#longest}\n\
    \    count=0\n    for ((i=0; i<${#1}; i++)); do\n        string=${1:$i:1}\n  \
    \      length=${#string}\n        if (( length == 0 )); then\n            longest=${string:$i:1}\n\
    \            break\n        fi\n        if (( length < length )); then\n     \
    \       longest=${string:$i:1}\n        fi\n        count=$(( count + 1 ))\n \
    \   done\n    if (( count > 0 )); then\n        longest=${longest:0:$(( length\
    \ - 1 ))}\n    fi\n    echo $longest\n}\n\ncandidate() {\n    longest \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 2
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length\n    local max\n\
    \    local i\n    local result\n\n    length=${#list}\n    if [ -z \"$length\"\
    \ ]; then\n        return 0\n    fi\n\n    max=0\n    for i in $(seq 0 $((length-1)));\
    \ do\n        if [ \"${#list}\" -gt \"$i\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -eq \"$i\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -eq \"$length\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -gt \"$length\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -gt \"$max\" ]; then\n            max=${#list}\n\
    \        fi\n    done\n\n    for i in $(seq 0 $((length-1))); do\n        if [\
    \ \"${#list}\" -gt \"$i\" ]; then\n            length=${#list}\n        fi\n \
    \       if [ \"${#list}\" -eq \"$i\" ]; then\n            length=${#list}\n  \
    \      fi\n        if [ \"${#list}\" -eq \"$length\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -gt \"$max\" ]; then\n            max=${#list}\n\
    \        fi\n    done\n\n    for i in $(seq 0 $((length-1))); do\n        if [\
    \ \"${#list}\" -gt \"$i\" ]; then\n            length=${#list}\n        fi\n \
    \       if [ \"${#list}\" -eq \"$i\" ]; then\n            length=${#list}\n  \
    \      fi\n        if [ \"${#list}\" -eq \"$length\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -gt \"$max\" ]; then\n            max=${#list}\n\
    \        fi\n    done\n\n    for i in $(seq 0 $((length-1))); do\n        if [\
    \ \"${#list}\" -gt \"$i\" ]; then\n            length=${#list}\n        fi\n \
    \       if [ \"${#list}\" -eq \"$i\" ]; then\n            length=${#list}\n  \
    \      fi\n        if [ \"${#list}\" -eq \"$length\" ]; then\n            length=${#list}\n\
    \        fi\n        if [ \"${#list}\" -gt \"$max\" ]; then\n            max=${#list}\n\
    \        fi\n    done\n\n    for i in $(seq 0 $((length-1))); do\n        if [\
    \ \"${#list}\" -gt \"$i\" ]; then\n            length=${#list}\n        fi\n \
    \       if [ \"${#list}\" -eq \"$\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmia8t766.sh: line 102: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmia8t766.sh: line 106: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local longest\n\
    \    local i\n    local j\n    local maxlen\n    local maxlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlenlen\n    local maxlenlenlenlenlen\n    local maxlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlen\n \
    \   local maxlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n \
    \   local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr0pqh2ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length=0\n    local max=0\n\
    \    local maxString=\"\"\n    local i=0\n    while [ $i -lt ${#strings[*]} ];\
    \ do\n        length=${#strings[$i]}\n        if [ $length -gt $max ]; then\n\
    \            max=$length\n            maxString=${strings[$i]}\n        fi\n \
    \       i=$((i+1))\n    done\n    if [ $max -gt 0 ]; then\n        echo \"$maxString\"\
    \n    else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuxhqfc0h.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpuxhqfc0h.sh: line 12: local: `x y z'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxlenstring=\"\"\n    local maxlenstrings=()\n    local\
    \ maxlenstringlength=0\n    local maxlenstringlengths=()\n    local maxlenstringlengthslength=()\n\
    \    local maxlenstringlengthslengths=()\n    local maxlenstringlengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengths=()\n    local maxlenstringlengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengths=()\n    local maxlenstringlengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengths=()\n    local maxlenstringlengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengths=()\n    local\
    \ maxlenstringlengthslengthslengthslengthslengthslengthslength=()\n    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=()\n\
    \    local maxlenstringlengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslengthslength=\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local maxlen=0\n    local maxstr\n\
    \    local i\n    for ((i=0; i<${#arr[@]}; i++)); do\n        local str=\"${arr[i]}\"\
    \n        local len=\"${#str}\"\n        if ((len > maxlen)) ; then\n        \
    \    maxlen=$len\n            maxstr=$str\n        fi\n    done\n    echo \"$maxstr\"\
    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoykmmhrl.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L\n    local length\n    local max\n    local maxlen\n\
    \    local i\n    local j\n    local len\n    local tmp\n    local tmplen\n  \
    \  local tmpstr\n    local tmpstrlen\n    local tmpstrlen2\n    local tmpstrlen3\n\
    \    local tmpstrlen4\n    local tmpstrlen5\n    local tmpstrlen6\n    local tmpstrlen7\n\
    \    local tmpstrlen8\n    local tmpstrlen9\n    local tmpstrlen10\n    local\
    \ tmpstrlen11\n    local tmpstrlen12\n    local tmpstrlen13\n    local tmpstrlen14\n\
    \    local tmpstrlen15\n    local tmpstrlen16\n    local tmpstrlen17\n    local\
    \ tmpstrlen18\n    local tmpstrlen19\n    local tmpstrlen20\n    local tmpstrlen21\n\
    \    local tmpstrlen22\n    local tmpstrlen23\n    local tmpstrlen24\n    local\
    \ tmpstrlen25\n    local tmpstrlen26\n    local tmpstrlen27\n    local tmpstrlen28\n\
    \    local tmpstrlen29\n    local tmpstrlen30\n    local tmpstrlen31\n    local\
    \ tmpstrlen32\n    local tmpstrlen33\n    local tmpstrlen34\n    local tmpstrlen35\n\
    \    local tmpstrlen36\n    local tmpstrlen37\n    local tmpstrlen38\n    local\
    \ tmpstrlen39\n    local tmpstrlen40\n    local tmpstrlen41\n    local tmpstrlen42\n\
    \    local tmpstrlen43\n    local tmpstrlen44\n    local tmpstrlen45\n    local\
    \ tmpstrlen46\n    local tmpstrlen47\n    local tmpstrlen48\n    local tmpstrlen49\n\
    \    local tmpstrlen50\n    local tmpstrlen51\n    local tmpstrlen52\n    local\
    \ tmpstrlen53\n    local tmpstrlen54\n    local tmpstrlen55\n    local tmpstrlen56\n\
    \    local tmpstrlen57\n    local tmpstrlen58\n    local tmpstrlen59\n    local\
    \ tmpstrlen60\n    local tmpstrlen61\n    local tmpstrlen62\n    local tmpstrlen63\n\
    \    local tmpstrlen64\n    local tmpstrlen65\n    local tmpstrlen66\n    local\
    \ tmpstrlen67\n    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlen1=0\n    local maxstrpos1=0\n    local\
    \ maxstrlen2=0\n    local maxstrpos2=0\n    local maxstrlen3=0\n    local maxstrpos3=0\n\
    \    local maxstrlen4=0\n    local maxstrpos4=0\n    local maxstrlen5=0\n    local\
    \ maxstrpos5=0\n    local maxstrlen6=0\n    local maxstrpos6=0\n    local maxstrlen7=0\n\
    \    local maxstrpos7=0\n    local maxstrlen8=0\n    local maxstrpos8=0\n    local\
    \ maxstrlen9=0\n    local maxstrpos9=0\n    local maxstrlen10=0\n    local maxstrpos10=0\n\
    \    local maxstrlen11=0\n    local maxstrpos11=0\n    local maxstrlen12=0\n \
    \   local maxstrpos12=0\n    local maxstrlen13=0\n    local maxstrpos13=0\n  \
    \  local maxstrlen14=0\n    local maxstrpos14=0\n    local maxstrlen15=0\n   \
    \ local maxstrpos15=0\n    local maxstrlen16=0\n    local maxstrpos16=0\n    local\
    \ maxstrlen17=0\n    local maxstrpos17=0\n    local maxstrlen18=0\n    local maxstrpos18=0\n\
    \    local maxstrlen19=0\n    local maxstrpos19=0\n    local maxstrlen20=0\n \
    \   local maxstrpos20=0\n    local maxstrlen21=0\n    local maxstrpos21=0\n  \
    \  local maxstrlen22=0\n    local maxstrpos22=0\n    local maxstrlen23=0\n   \
    \ local maxstrpos23=0\n    local maxstrlen24=0\n    local maxstrpos24=0\n    local\
    \ maxstrlen25=0\n    local maxstrpos25=0\n    local maxstrlen26=0\n    local maxstrpos26=0\n\
    \    local maxstrlen27=0\n    local maxstrpos27=0\n    local maxstrlen28=0\n \
    \   local maxstrpos28=0\n    local maxstrlen29=0\n    local maxstrpos29=0\n  \
    \  local maxstrlen30=0\n    local maxstrpos30=0\n    local maxstrlen31\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len=${#arr[@]}\n    local\
    \ maxlen=0\n    local max\n    for (( i=0; i < len; i++ )); do\n        local\
    \ len=${#arr[i]}\n        if (( len > maxlen )) ; then\n            maxlen=$len\n\
    \            max=${arr[i]}\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo7b3md_n.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ max=0\n    local maxlen=0\n    local maxstr=\"\"\n    for str in \"${strings[@]}\"\
    ; do\n        len=\"${#str}\"\n        if [[ ${len} -gt ${maxlen} ]]; then\n \
    \           maxlen=${len}\n            maxstr=${str}\n        fi\n        lengths+=(\"\
    ${len}\")\n    done\n    if [[ ${#lengths[@]} -gt 0 ]]; then\n        local len\n\
    \        for (( i=0; i<${#lengths[@]}; i++ )); do\n            if [[ ${lengths[$i]}\
    \ -gt ${max} ]]; then\n                max=${lengths[$i]}\n                maxstr=${strings[$i]}\n\
    \            fi\n        done\n    fi\n    echo \"${maxstr}\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstring=\"\"\n    local strings=$@\n\
    \    for string in $strings; do\n        local len=${#string}\n        if [ $len\
    \ -gt $maxlen ]; then\n            maxlen=$len\n            maxstring=$string\n\
    \        fi\n    done\n    echo \"$maxstring\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local str\n    local maxlen\n    local\
    \ maxstr\n    local max\n    local maxlenstr\n    local maxstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n    local maxlenstrlenlenlen\n\
    \    local maxlenstrlenlenlen\n    local max\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${strings[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpre8o9j0y.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local string\n    for string in \"${strings[@]}\"; do\n        length=${#string}\n\
    \        if [[ $length -gt $max ]]; then\n            max=length\n        fi\n\
    \    done\n    if [[ $max -eq 0 ]]; then\n        echo \"$strings\"\n    else\n\
    \        echo \"${strings[@]:0:$max}\"\n    fi\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphiieip6a.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local length=0\n    local max=''\n\
    \    local maxlen=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local\
    \ g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n\
    \    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n \
    \   local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n  \
    \  local w=0\n    local x=0\n    local y=0\n    local z=0\n    local A=0\n   \
    \ local B=0\n    local C=0\n    local D=0\n    local E=0\n    local F=0\n    local\
    \ G=0\n    local H=0\n    local I=0\n    local J=0\n    local K=0\n    local L=0\n\
    \    local M=0\n    local N=0\n    local O=0\n    local P=0\n    local Q=0\n \
    \   local R=0\n    local S=0\n    local T=0\n    local U=0\n    local V=0\n  \
    \  local W=0\n    local X=0\n    local Y=0\n    local Z=0\n    local a=0\n   \
    \ local b=0\n    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0f8kbzf5.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i\n    local str\n    for str in \"${list[@]}\"; do\n        local\
    \ len=${#str}\n        if [[ $len > $maxlen ]]; then\n            maxlen=$len\n\
    \            maxstr=$str\n        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzvhx8ccm.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length=0\n    local max=0\n\
    \    local maxstring=''\n    for string in ${strings[*]}; do\n        length=${#string}\n\
    \        if [[ $length -gt $max ]]; then\n            max=$length\n          \
    \  maxstring=$string\n        fi\n    done\n    echo \"$maxstring\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmk6ha66v.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local count\n    local lengths\n\n    longest=\n    length=\n\
    \    string=\n    i=\n    count=\n    lengths=\n\n    while [ -n \"$1\" ]; do\n\
    \        length=\n        string=\n        i=\n        count=0\n        lengths=()\n\
    \n        while [ -n \"$1\" ]; do\n            length=$((length+1))\n        \
    \    string=\"$1\"\n            i=$((i+1))\n            count=$((count+1))\n \
    \           lengths+=(\"$length\")\n            shift\n        done\n\n      \
    \  if [ \"$count\" -gt 1 ]; then\n            longest=\"$string\"\n          \
    \  length=${#longest}\n        fi\n\n        shift\n    done\n\n    if [ \"$longest\"\
    \ != \"\" ]; then\n        longest=\"${longest:0:$length}\"\n    fi\n\n    if\
    \ [ \"$longest\" == \"\" ]; then\n        longest=None\n    fi\n\n    echo $longest\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local i\n    local len\n    local\
    \ maxlen\n    local max\n    local str\n    local spaces\n    local word\n   \
    \ local words\n    local wordlen\n    local wordlens\n    local wordlens_str\n\
    \    local wordlens_strs\n    local wordlens_strs_str\n    local wordlens_strs_strs\n\
    \    local wordlens_strs_strs_str\n    local wordlens_strs_strs_strs\n    local\
    \ wordlens_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs\n    local\
    \ wordlens_strs_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_str\n    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n    local\
    \ wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_str\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    local wordlens_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs_strs\n\
    \    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 2
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n\n    longest=$1\n    length=${#longest}\n    for (( i=1; i<=$length;\
    \ i++ )); do\n        string=${longest:$i:1}\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n        if [ -z \"$string\" ]; then\n\
    \            string=$longest\n        fi\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprmdfuoc1.sh: line 108: syntax error near unexpected token `}''

    /tmp/tmprmdfuoc1.sh: line 108: `}''

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxstr=\"\"\n    for str in \"${strings[@]}\"; do\n    \
    \    len=${#str}\n        if [[ ${len} -gt ${maxlen} ]]; then\n            maxlen=${len}\n\
    \            maxstr=\"${str}\"\n        fi\n    done\n    echo \"${maxstr}\"\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local longest\n\
    \    local i\n    local lengths\n    local length\n    local string\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local lengths\n    local length\n    local lengths\n\
    \    local length\n    local lengths\n    local length\n    local lengths\n  \
    \  local length\n    local lengths\n    local length\n    local lengths\n    local\
    \ length\n    local lengths\n    local length\n    local lengths\n    local length\n\
    \    local lengths\n    local length\n    local lengths\n    local length\n  \
    \  local lengths\n    local length\n    local lengths\n    local length\n    local\
    \ lengths\n    local length\n    local \n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp95vr9fzn.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L=$1\n    local MAXLEN=0\n    local RESULT=\"\"\
    \n    for I in ${L[@]}; do\n        LEN=${#I}\n        if [[ $LEN > $MAXLEN ]];\
    \ then\n            MAXLEN=$LEN\n            RESULT=$I\n        fi\n    done\n\
    \    echo \"$RESULT\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len=0\n    local maxlen=0\n\
    \    local maxstr=\"\"\n    local i=0\n    while [ $i -lt ${#arr[@]} ]; do\n \
    \       len=${#arr[$i]}\n        if [ $len -gt $maxlen ]; then\n            maxlen=$len\n\
    \            maxstr=$arr[$i]\n        fi\n        i=$((i+1))\n    done\n    echo\
    \ \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz244rwj5.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n\n    max=${#strings[@]}\n    for (( i=0; i<max; i++ )); do\n  \
    \      length=${#strings[i]}\n        if (( length == 0 )); then\n           \
    \ echo \"$strings[i]\"\n        elif (( length > max )); then\n            max=$length\n\
    \        fi\n    done\n    echo \"${strings[$(( max - 1 ))]}\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2eb2q1yu.sh: line 12: local: `'': not a valid identifier

    /tmp/tmp2eb2q1yu.sh: line 26: strings: bad array subscript

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local maxlen=0\n    local\
    \ maxstr=\"\"\n    for str in \"${strings[@]}\"; do\n        local len=\"${#str}\"\
    \n        if [ \"${len}\" -gt \"${maxlen}\" ]; then\n            maxlen=\"${len}\"\
    \n            maxstr=\"${str}\"\n        fi\n    done\n    echo \"${maxstr}\"\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl7_hq1zp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[ $len\
    \ > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n     \
    \   fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8s31oyru.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L=\"$1\"\n    local S=\"\"\n    local LMAX=0\n\
    \    local LMIN=0\n    local LCOUNT=0\n    local LCOUNTMAX=0\n    local LCOUNTMIN=0\n\
    \    local LCOUNTCOUNT=0\n    local LCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTMIN=0\n\
    \    local LCOUNTCOUNTCOUNT=0\n    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n\
    \    local LCOUNTCOUNTCOUNTCOUNT=0\n    local LCOUNTCOUNTCOUNTMAX=0\n    local\
    \ LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n    local LCOUNTCOUNTCOUNTMAX=0\n\
    \    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n    local\
    \ LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNTMAX=0\n    local LCOUNTCOUNTCOUNTMIN=0\n    local LCOUNTCOUNTCOUNTCOUNT=0\n\
    \    local LCOUNTCOUNTCOUNT\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest length\n    local -a list\n    list=($1)\n\
    \    length=${#list[@]}\n    if [[ $length -gt 0 ]]; then\n        longest=${list[$((length-1))]}\n\
    \    else\n        longest=\n    fi\n    for (( i=1; i<$length; i++ )); do\n \
    \       if [[ $list[i] -gt $longest ]]; then\n            longest=$list[i]\n \
    \       fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a words\n    local -a lengths\n\
    \    local -i maxlen\n    local -i i\n    local word\n    local length\n    local\
    \ -a words\n    local -a lengths\n    local -i maxlen\n    local -i i\n    local\
    \ word\n    local length\n    local -a words\n    local -a lengths\n    local\
    \ -i maxlen\n    local -i i\n    local word\n    local length\n    local -a words\n\
    \    local -a lengths\n    local -i maxlen\n    local -i i\n    local word\n \
    \   local length\n    local -a words\n    local -a lengths\n    local -i maxlen\n\
    \    local -i i\n    local word\n    local length\n    local -a words\n    local\
    \ -a lengths\n    local -i maxlen\n    local -i i\n    local word\n    local length\n\
    \    local -a words\n    local -a lengths\n    local -i maxlen\n    local -i i\n\
    \    local word\n    local length\n    local -a words\n    local -a lengths\n\
    \    local -i maxlen\n    local -i i\n    local word\n    local length\n    local\
    \ -a words\n    local -a lengths\n    local -i maxlen\n    local -i i\n    local\
    \ word\n    local length\n    local -a words\n    local -a lengths\n    local\
    \ -i maxlen\n    local -i i\n    local word\n    local length\n    local -a words\n\
    \    local -a lengths\n    local -i maxlen\n    local -i i\n    local word\n \
    \   local length\n    local -a words\n    local -a lengths\n    local -i maxlen\n\
    \    local -i i\n    local word\n    local length\n    local -a words\n    local\
    \ -a lengths\n    local -i maxlen\n    local -i i\n    local word\n    local length\n\
    \    local -a words\n    local -a lengths\n    local -i maxlen\n    local -i i\n\
    \    local word\n    local length\n    local -a words\n    local -a lengths\n\
    \    local -i maxlen\n    local -i i\n    local word\n    local length\n    local\
    \ -a words\n    local -a lengths\n    local -i maxlen\n    local -i i\n    local\
    \ word\n\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\"\
    \ ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq | wc -l) )\n    local longest\n\
    \    local length\n    for length in \"${lengths[@]}\"; do\n        if [[ \"${length}\"\
    \ -gt \"${longest:-}\" ]]; then\n            longest=\"${length}\"\n        fi\n\
    \    done\n    echo \"${strings[${longest}]}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    for element in $list; do\n        length=$(expr length \"$element\")\n\
    \        if [ \"$length\" -gt \"$length\" ]; then\n            max=\"$element\"\
    \n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${strings[@]}\"; do\n        local len=${#str}\n        if\
    \ [[ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7yiqhbme.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local len=${#list[@]}\n    local\
    \ maxlen=0\n    local max\n    for (( i=0; i<len; i++ )); do\n        local len=${#list[$i]}\n\
    \        if (( len > maxlen )) ; then\n            maxlen=$len\n            max=$i\n\
    \        fi\n    done\n    echo ${list[$max]}\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnuuraws4.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local maxlen=0\n    local maxstr=\"\"\
    \n    local maxstrlen=0\n    local maxstrpos=0\n    local maxstrlen1=0\n    local\
    \ maxstrlen2=0\n    local maxstrlen3=0\n    local maxstrlen4=0\n    local maxstrlen5=0\n\
    \    local maxstrlen6=0\n    local maxstrlen7=0\n    local maxstrlen8=0\n    local\
    \ maxstrlen9=0\n    local maxstrlen10=0\n    local maxstrlen11=0\n    local maxstrlen12=0\n\
    \    local maxstrlen13=0\n    local maxstrlen14=0\n    local maxstrlen15=0\n \
    \   local maxstrlen16=0\n    local maxstrlen17=0\n    local maxstrlen18=0\n  \
    \  local maxstrlen19=0\n    local maxstrlen20=0\n    local maxstrlen21=0\n   \
    \ local maxstrlen22=0\n    local maxstrlen23=0\n    local maxstrlen24=0\n    local\
    \ maxstrlen25=0\n    local maxstrlen26=0\n    local maxstrlen27=0\n    local maxstrlen28=0\n\
    \    local maxstrlen29=0\n    local maxstrlen30=0\n    local maxstrlen31=0\n \
    \   local maxstrlen32=0\n    local maxstrlen33=0\n    local maxstrlen34=0\n  \
    \  local maxstrlen35=0\n    local maxstrlen36=0\n    local maxstrlen37=0\n   \
    \ local maxstrlen38=0\n    local maxstrlen39=0\n    local maxstrlen40=0\n    local\
    \ maxstrlen41=0\n    local maxstrlen42=0\n    local maxstrlen43=0\n    local maxstrlen44=0\n\
    \    local maxstrlen45=0\n    local maxstrlen46=0\n    local maxstrlen47=0\n \
    \   local maxstrlen48=0\n    local maxstrlen49=0\n    local maxstrlen50=0\n  \
    \  local maxstrlen51=0\n    local maxstrlen52=0\n    local maxstrlen53=0\n   \
    \ local maxstrlen54=0\n    local maxstrlen55=0\n    local maxstrlen56=0\n    local\
    \ maxstrlen57=0\n    local maxstrlen58=0\n    local maxstrlen59=0\n    local maxstrlen60=0\n\
    \    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings=(\"${@}\")\n    local\
    \ length\n    local maxlen\n    local i\n\n    maxlen=0\n    for ((i=0; i < ${#strings[*]};\
    \ i++)); do\n        length=${#strings[i]}\n        if (( ${length} > maxlen ))\
    \ ; then\n            maxlen=${length}\n        fi\n    done\n\n    longest=${strings[0]}\n\
    \    for ((i=0; i < ${#strings[*]}; i++)); do\n        length=${#strings[i]}\n\
    \        if (( ${length} == maxlen )) ; then\n            longest=${strings[i]}\n\
    \        fi\n    done\n\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxidx=0\n\
    \    local maxidxstr=\"\"\n    local maxidxstrlen=0\n    local maxidxstrlen2=0\n\
    \    local maxidxstrlen3=0\n    local maxidxstrlen4=0\n    local maxidxstrlen5=0\n\
    \    local maxidxstrlen6=0\n    local maxidxstrlen7=0\n    local maxidxstrlen8=0\n\
    \    local maxidxstrlen9=0\n    local maxidxstrlen10=0\n    local maxidxstrlen11=0\n\
    \    local maxidxstrlen12=0\n    local maxidxstrlen13=0\n    local maxidxstrlen14=0\n\
    \    local maxidxstrlen15=0\n    local maxidxstrlen16=0\n    local maxidxstrlen17=0\n\
    \    local maxidxstrlen18=0\n    local maxidxstrlen19=0\n    local maxidxstrlen20=0\n\
    \    local maxidxstrlen21=0\n    local maxidxstrlen22=0\n    local maxidxstrlen23=0\n\
    \    local maxidxstrlen24=0\n    local maxidxstrlen25=0\n    local maxidxstrlen26=0\n\
    \    local maxidxstrlen27=0\n    local maxidxstrlen28=0\n    local maxidxstrlen29=0\n\
    \    local maxidxstrlen30=0\n    local maxidxstrlen31=0\n    local maxidxstrlen32=0\n\
    \    local maxidxstrlen33=0\n    local maxidxstrlen34=0\n    local maxidxstrlen35=0\n\
    \    local maxidxstrlen36=0\n    local maxidxstrlen37=0\n    local maxidxstrlen38=0\n\
    \    local maxidxstrlen39=0\n    local maxidxstrlen40=0\n    local maxidxstrlen41=0\n\
    \    local maxidxstrlen42=0\n    local maxidxstrlen43=0\n    local maxidxstrlen44=0\n\
    \    local maxidxstrlen45=0\n    local maxidxstrlen46=0\n    local maxidxstrlen47=0\n\
    \    local maxidxstrlen48=0\n    local maxidxstrlen49=0\n    local maxidxstrlen50=0\n\
    \    local maxidxstrlen51=0\n    local maxidxstrlen52=0\n    local maxidxstrlen53=0\n\
    \    local maxidxstrlen54=0\n    local \n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    local maxlen=0\n    local i=0\n    while [ $i -lt ${#list} ]; do\n   \
    \     local item=\"${list[i]}\"\n        local len=\"${#item}\"\n        if [\
    \ $len -gt $maxlen ]; then\n            maxlen=$len\n            max=\"${item}\"\
    \n        fi\n        i=$((i+1))\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local L\n    local len\n    local maxlen\n    local max\n\
    \    local i\n    local j\n    local tmp\n    local lenstr\n    local maxlenstr\n\
    \    local maxstr\n    local maxlenstrlen\n    local maxstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local\
    \ maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n    local maxlenstrlen\n\
    \    local maxlenstrlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest length\n    longest=${1%?}\n    length=${#longest}\n\
    \    for (( i=1; i<${#1}; i++ )); do\n        if [[ ${1:$i} != *${longest:$length}\
    \ ]]; then\n            length=${#longest}\n            longest=${1:$i}\n    \
    \    fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a list\n    local len\n   \
    \ local i\n    local maxlen\n    local max\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n    local word\n    local -a words\n    local word\n    local -a words\n\
    \    local word\n    local -a words\n    local word\n    local -a words\n    local\
    \ word\n    local -a words\n    local word\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n    local word\n    local -a words\n    local word\n    local -a words\n\
    \    local word\n    local -a words\n    local word\n    local -a words\n    local\
    \ word\n    local -a words\n    local word\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n    local word\n    local -a words\n    local word\n    local -a words\n\
    \    local word\n    local -a words\n    local word\n    local -a words\n    local\
    \ word\n    local -a words\n    local word\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n    local word\n    local -a words\n    local word\n    local -a words\n\
    \    local word\n    local -a words\n    local word\n    local -a words\n    local\
    \ word\n    local -a words\n    local word\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n    local word\n    local -a words\n    local word\n    local -a words\n\
    \    local word\n    local -a words\n    local word\n    local -a words\n    local\
    \ word\n    local -a words\n    local word\n    local -a words\n    local word\n\
    \    local -a words\n    local word\n    local -a words\n    local word\n    local\
    \ -a words\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\"\
    \ ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    max=${#strings[@]}\n    for (( i=0; i<max; i++ )); do\n        length=${#strings[i]}\n\
    \        if (( length == 0 )); then\n            echo \"$strings[i]\"\n      \
    \  elif (( length < max )); then\n            echo \"$strings[i]\"\n        else\n\
    \            echo \"${strings[max-1]}\"\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmx8j9hgd.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[@]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp38qw8nha.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local maxlen=0\n    local maxstr=\"\"\
    \n    local str\n\n    for str in \"$@\"; do\n        len=${#str}\n        if\
    \ [ $len -gt $maxlen ]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local maxlen=0\n    local maxstring\n\
    \    for string in \"${strings[@]}\"; do\n        local len=${#string}\n     \
    \   if [[ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstring=$string\n\
    \        fi\n    done\n    echo \"$maxstring\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpivx_r6x0.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local len\n    local lenlen\n\
    \    local maxlenlen\n    local maxlenlenlen\n    local maxlenlenlenlen\n    local\
    \ maxlenlenlenlenlen\n    local maxlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg44zn_2x.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local length=0\n    local max=0\n    local maxString=\"\
    \"\n    local strings=$@\n    for string in $strings; do\n        length=${#string}\n\
    \        if [ $length -gt $max ]; then\n            max=$length\n            maxString=$string\n\
    \        fi\n    done\n    echo \"$maxString\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local -a lengths\n    local -a maxes\n   \
    \ local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local length\n    local max\n\
    \    local length\n    local max\n    local length\n    local max\n    local length\n\
    \    local max\n    local length\n    local max\n    local \n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqjr7a1as.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local maxidx=0\n    local maxidxstr=\"\"\n    local maxidxstrlen=0\n \
    \   local maxidxstrlen2=0\n    local maxidxstrlen3=0\n    local maxidxstrlen4=0\n\
    \    local maxidxstrlen5=0\n    local maxidxstrlen6=0\n    local maxidxstrlen7=0\n\
    \    local maxidxstrlen8=0\n    local maxidxstrlen9=0\n    local maxidxstrlen10=0\n\
    \    local maxidxstrlen11=0\n    local maxidxstrlen12=0\n    local maxidxstrlen13=0\n\
    \    local maxidxstrlen14=0\n    local maxidxstrlen15=0\n    local maxidxstrlen16=0\n\
    \    local maxidxstrlen17=0\n    local maxidxstrlen18=0\n    local maxidxstrlen19=0\n\
    \    local maxidxstrlen20=0\n    local maxidxstrlen21=0\n    local maxidxstrlen22=0\n\
    \    local maxidxstrlen23=0\n    local maxidxstrlen24=0\n    local maxidxstrlen25=0\n\
    \    local maxidxstrlen26=0\n    local maxidxstrlen27=0\n    local maxidxstrlen28=0\n\
    \    local maxidxstrlen29=0\n    local maxidxstrlen30=0\n    local maxidxstrlen31=0\n\
    \    local maxidxstrlen32=0\n    local maxidxstrlen33=0\n    local maxidxstrlen34=0\n\
    \    local maxidxstrlen35=0\n    local maxidxstrlen36=0\n    local maxidxstrlen37=0\n\
    \    local maxidxstrlen38=0\n    local maxidxstrlen39=0\n    local maxidxstrlen40=0\n\
    \    local maxidxstrlen41=0\n    local maxidxstrlen42=0\n    local maxidxstrlen43=0\n\
    \    local maxidxstrlen44=0\n    local maxidxstrlen45=0\n    local maxidxstrlen46=0\n\
    \    local maxidxstrlen47=0\n    local maxidxstrlen48=0\n    local maxidxstrlen49=0\n\
    \    local maxidxstrlen50=0\n    local maxidxstrlen51=0\n    local maxidxstrlen52=0\n\
    \    local maxidxstrlen53=0\n    local maxidx\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe6mh8a1v.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local maxlen=0\n    local maxstr=\"\"\
    \n    local str\n    local strlist\n\n    IFS=$'\\n'\n    strlist=$1\n\n    for\
    \ str in $strlist; do\n        len=${#str}\n        if [ $len -gt $maxlen ]; then\n\
    \            maxlen=$len\n            maxstr=$str\n        fi\n    done\n\n  \
    \  echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n    local j\n    local lengths\n    local length\n    local max\n\
    \    local maxlen\n    local maxlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local length=0\n    local max=\"\
    \"\n    local maxlen=0\n    for element in $list; do\n        length=$(echo $element\
    \ | wc -c)\n        if [ \"$length\" -gt \"$maxlen\" ]; then\n            maxlen=$length\n\
    \            max=$element\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local length=0\n    local longest\n    local string\n\
    \    for string in \"$@\"; do\n        length=$(echo \"$string\" | wc -c)\n  \
    \      if [ \"$length\" -gt \"$length\" ]; then\n            longest=\"$string\"\
    \n        fi\n    done\n    if [ \"$longest\" != \"\" ]; then\n        echo \"\
    $longest\"\n    else\n        echo \"None\"\n    fi\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n    local len\n    local maxlen\n    local max\n    local maxlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlenlen\n    local maxlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local\
    \ maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlenlen\n\
    \    local maxlenlenlenlenlenlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[\
    \ $len > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n\
    \        fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwwaxi7ct.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlen1=0\n    local maxstrpos1=0\n    local\
    \ maxstrlen2=0\n    local maxstrpos2=0\n    local maxstrlen3=0\n    local maxstrpos3=0\n\
    \    local maxstrlen4=0\n    local maxstrpos4=0\n    local maxstrlen5=0\n    local\
    \ maxstrpos5=0\n    local maxstrlen6=0\n    local maxstrpos6=0\n    local maxstrlen7=0\n\
    \    local maxstrpos7=0\n    local maxstrlen8=0\n    local maxstrpos8=0\n    local\
    \ maxstrlen9=0\n    local maxstrpos9=0\n    local maxstrlen10=0\n    local maxstrpos10=0\n\
    \    local maxstrlen11=0\n    local maxstrpos11=0\n    local maxstrlen12=0\n \
    \   local maxstrpos12=0\n    local maxstrlen13=0\n    local maxstrpos13=0\n  \
    \  local maxstrlen14=0\n    local maxstrpos14=0\n    local maxstrlen15=0\n   \
    \ local maxstrpos15=0\n    local maxstrlen16=0\n    local maxstrpos16=0\n    local\
    \ maxstrlen17=0\n    local maxstrpos17=0\n    local maxstrlen18=0\n    local maxstrpos18=0\n\
    \    local maxstrlen19=0\n    local maxstrpos19=0\n    local maxstrlen20=0\n \
    \   local maxstrpos20=0\n    local maxstrlen21=0\n    local maxstrpos21=0\n  \
    \  local maxstrlen22=0\n    local maxstrpos22=0\n    local maxstrlen23=0\n   \
    \ local maxstrpos23=0\n    local maxstrlen24=0\n    local maxstrpos24=0\n    local\
    \ maxstrlen25=0\n    local maxstrpos25=0\n    local maxstrlen26=0\n    local maxstrpos26=0\n\
    \    local maxstrlen27=0\n    local maxstrpos27=0\n    local maxstrlen28=0\n \
    \   local maxstrpos28=0\n    local maxstrlen29=0\n    local maxstrpos29=0\n  \
    \  local maxstrlen30=0\n    local maxstrpos30=0\n    local maxstrlen31\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings=(\"$@\")\n    longest=\"\
    ${strings[0]}\"\n    for (( i=1; i<${#strings[@]}; i++ )); do\n        local length=\"\
    ${#strings[i]}\"\n        if [[ ${length} -gt ${#longest} ]]; then\n         \
    \   longest=\"${strings[i]}\"\n        fi\n    done\n    echo \"${longest}\"\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local longest=${strings[0]}\n\
    \    local length=0\n    for string in \"${strings[@]}\"; do\n        length=${#string}\n\
    \        if [[ ${length} -gt ${longest} ]]; then\n            longest=${length}\n\
    \        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=$1\n    local lengths=()\n    local maxlen=0\n\
    \    local maxstring\n    local maxindex\n    local i\n    local string\n    local\
    \ length\n    for ((i=0; i<${#strings[@]}; i++)); do\n        string=${strings[i]}\n\
    \        length=${#string}\n        lengths+=(\"$length\")\n        if ((length>maxlen));\
    \ then\n            maxlen=$length\n            maxstring=$string\n          \
    \  maxindex=i\n        fi\n    done\n    if ((${#lengths[@]} > 0)); then\n   \
    \     echo \"${maxstring}\"\n    else\n        echo \"None\"\n    fi\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=$1\n    local lengths=()\n    local maxlen=0\n\
    \    local maxstring=\"\"\n    local maxindex=0\n    local maxlenindex=0\n   \
    \ local maxlenindex2=0\n    local maxlenindex3=0\n    local maxlenindex4=0\n \
    \   local maxlenindex5=0\n    local maxlenindex6=0\n    local maxlenindex7=0\n\
    \    local maxlenindex8=0\n    local maxlenindex9=0\n    local maxlenindex10=0\n\
    \    local maxlenindex11=0\n    local maxlenindex12=0\n    local maxlenindex13=0\n\
    \    local maxlenindex14=0\n    local maxlenindex15=0\n    local maxlenindex16=0\n\
    \    local maxlenindex17=0\n    local maxlenindex18=0\n    local maxlenindex19=0\n\
    \    local maxlenindex20=0\n    local maxlenindex21=0\n    local maxlenindex22=0\n\
    \    local maxlenindex23=0\n    local maxlenindex24=0\n    local maxlenindex25=0\n\
    \    local maxlenindex26=0\n    local maxlenindex27=0\n    local maxlenindex28=0\n\
    \    local maxlenindex29=0\n    local maxlenindex30=0\n    local maxlenindex31=0\n\
    \    local maxlenindex32=0\n    local maxlenindex33=0\n    local maxlenindex34=0\n\
    \    local maxlenindex35=0\n    local maxlenindex36=0\n    local maxlenindex37=0\n\
    \    local maxlenindex38=0\n    local maxlenindex39=0\n    local maxlenindex40=0\n\
    \    local maxlenindex41=0\n    local maxlenindex42=0\n    local maxlenindex43=0\n\
    \    local maxlenindex44=0\n    local maxlenindex45=0\n    local maxlenindex46=0\n\
    \    local maxlenindex47=0\n    local maxlenindex48=0\n    local maxlenindex49=0\n\
    \    local maxlenindex50=0\n    local maxlenindex51=0\n    local maxlenindex52=0\n\
    \    local maxlenindex53=0\n    local maxlenindex54=0\n    local maxlenindex55=0\n\
    \    local maxlenindex56=0\n    local maxlenindex57=0\n    local maxlenindex58=0\n\
    \    local maxlenindex59=0\n    local maxlenindex60=0\n    local max\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local maxidx=0\n    local maxidx2=0\n    local maxidx3=0\n    local maxidx4=0\n\
    \    local maxidx5=0\n    local maxidx6=0\n    local maxidx7=0\n    local maxidx8=0\n\
    \    local maxidx9=0\n    local maxidx10=0\n    local maxidx11=0\n    local maxidx12=0\n\
    \    local maxidx13=0\n    local maxidx14=0\n    local maxidx15=0\n    local maxidx16=0\n\
    \    local maxidx17=0\n    local maxidx18=0\n    local maxidx19=0\n    local maxidx20=0\n\
    \    local maxidx21=0\n    local maxidx22=0\n    local maxidx23=0\n    local maxidx24=0\n\
    \    local maxidx25=0\n    local maxidx26=0\n    local maxidx27=0\n    local maxidx28=0\n\
    \    local maxidx29=0\n    local maxidx30=0\n    local maxidx31=0\n    local maxidx32=0\n\
    \    local maxidx33=0\n    local maxidx34=0\n    local maxidx35=0\n    local maxidx36=0\n\
    \    local maxidx37=0\n    local maxidx38=0\n    local maxidx39=0\n    local maxidx40=0\n\
    \    local maxidx41=0\n    local maxidx42=0\n    local maxidx43=0\n    local maxidx44=0\n\
    \    local maxidx45=0\n    local maxidx46=0\n    local maxidx47=0\n    local maxidx48=0\n\
    \    local maxidx49=0\n    local maxidx50=0\n    local maxidx51=0\n    local maxidx52=0\n\
    \    local maxidx53=0\n    local maxidx54=0\n    local maxidx55=0\n    local maxidx56=0\n\
    \    local maxidx57=0\n    local maxidx58=0\n    local maxidx59=0\n    local maxidx60=0\n\
    \    local maxidx61=0\n    local maxidx62=0\n    local maxidx63=0\n    local maxidx64=0\n\
    \    local maxidx65=0\n    local maxidx66=0\n    local maxidx67=0\n    local maxidx68=0\n\
    \    local maxidx69=0\n    local maxidx70=0\n    local maxidx\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn6h620tu.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    for\
    \ string in \"${strings[@]}\"; do\n        length=${#string}\n        if [[ ${#lengths[@]}\
    \ -eq 0 ]]; then\n            lengths=(\"${lengths[@]}\" \"$length\")\n      \
    \  elif [[ ${lengths[*]} -gt ${length} ]]; then\n            lengths=(\"${lengths[@]}\"\
    \ \"$length\")\n        fi\n    done\n    local length\n    local length\n   \
    \ local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    local length\n    local length\n    local\
    \ length\n    local length\n    local length\n    local length\n    local length\n\
    \    local length\n    local length\n    \n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local len\n    local lenlen\n\
    \    local maxlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1_5v49kv.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local longest length\n    local\
    \ i\n    length=${#strings[@]}\n    if [[ $length -gt 0 ]]; then\n        longest=${strings[0]}\n\
    \        for ((i=1; i<$length; i++)); do\n            if [[ ${strings[i]} != $longest\
    \ ]]; then\n                longest=${strings[i]}\n            fi\n        done\n\
    \    fi\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqt1ha0v9.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    local length\n\
    \    local i\n    strings=($1)\n    length=${#strings[@]}\n    if [[ $length -eq\
    \ 0 ]]; then\n        longest=\n    elif [[ $length -gt 1 ]]; then\n        longest=${strings[0]}\n\
    \    else\n        longest=${strings[0]}\n    fi\n    for ((i=1; i<$length; i++));\
    \ do\n        if [[ $strings[$i] -gt $longest ]]; then\n            longest=${strings[$i]}\n\
    \        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n    local j\n    local lengths\n    local max\n    local maxLength\n\
    \    local maxLengthIndex\n    local maxLengthString\n    local maxLengthStringIndex\n\
    \    local maxLengthStringLength\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndexEnd\n    local maxLengthStringLengthIndexEndIndex\n\
    \    local maxLengthStringLengthIndexEndIndexEnd\n    local maxLengthStringLengthIndexEndIndexEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEnd\n    local maxLengthStringLengthIndexEndIndexEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEnd\n    local maxLengthStringLengthIndexEndIndexEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEnd\n    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEnd\n    local\
    \ maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEnd\n    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    \    local maxLengthStringLengthIndexEndIndexEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEndEnd\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local list=\"$1\"\n    local longest=\"\"\n    local\
    \ length=0\n    for element in $list; do\n        length=$(echo \"$element\" |\
    \ wc -c)\n        if [ \"$length\" -gt \"$longest\" ]; then\n            longest=\"\
    $length\"\n        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n \
    \   longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local -a strings\n    local length\n\
    \    local i\n\n    strings=($1)\n    length=${#strings[@]}\n    if [ $length\
    \ -eq 0 ]; then\n        echo \"$1\"\n        return\n    fi\n\n    for (( i=1;\
    \ i<=$length; i++ )); do\n        longest=${strings[$i]}\n        for (( j=$i;\
    \ j<$length; j++ )); do\n            if [ \"${strings[$j]}\" -gt \"$longest\"\
    \ ]; then\n                longest=${strings[$j]}\n            fi\n        done\n\
    \        echo \"$longest\"\n    done\n}\n\ncandidate() {\n    longest \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq -c | sort -nr | head -1) )\n\
    \    local longest\n    local length\n    for length in \"${lengths[@]}\"; do\n\
    \        if [[ -n \"${longest}\" ]]; then\n            [[ \"${length}\" -gt \"\
    ${longest}\" ]] || return 1\n        fi\n        longest=\"${length}\"\n    done\n\
    \    [[ -n \"${longest}\" ]] || return 1\n    echo ${longest}\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=''\n\
    \    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[ $len\
    \ > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n     \
    \   fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3bu1tw5t.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local i len\n    local maxlen=0\n    local maxstr=\"\"\
    \n    local maxstrlen=0\n    local maxstrpos=0\n    local maxstrlenpos=0\n   \
    \ local maxstrlenlen=0\n    local maxstrlenlenpos=0\n    local maxstrlenlenlen=0\n\
    \    local maxstrlenlenlenpos=0\n    local maxstrlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenlenlenpos=0\n    local maxstrlenlenlenlenlenlenlen=0\n\
    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len=${#arr[@]}\n    local\
    \ maxlen=0\n    local max\n    for (( i=0; i<len; i++ )); do\n        local len=${#arr[$i]}\n\
    \        if (( len > maxlen )) ; then\n            maxlen=$len\n            max=$i\n\
    \        fi\n    done\n    echo ${arr[$max]}\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpct12wt9j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr\n\
    \    for str in \"${list[@]}\"; do\n        local len=${#str}\n        if [[ $len\
    \ > $maxlen ]]; then\n            maxlen=$len\n            maxstr=$str\n     \
    \   fi\n    done\n    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8s31oyru.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local len\n    local maxlen\n  \
    \  local max\n    local i\n    local j\n    local tmp\n    local len2\n    local\
    \ maxlen2\n    local max2\n    local len3\n    local maxlen3\n    local max3\n\
    \    local len4\n    local maxlen4\n    local max4\n    local len5\n    local\
    \ maxlen5\n    local max5\n    local len6\n    local maxlen6\n    local max6\n\
    \    local len7\n    local maxlen7\n    local max7\n    local len8\n    local\
    \ maxlen8\n    local max8\n    local len9\n    local maxlen9\n    local max9\n\
    \    local len10\n    local maxlen10\n    local max10\n    local len11\n    local\
    \ maxlen11\n    local max11\n    local len12\n    local maxlen12\n    local max12\n\
    \    local len13\n    local maxlen13\n    local max13\n    local len14\n    local\
    \ maxlen14\n    local max14\n    local len15\n    local maxlen15\n    local max15\n\
    \    local len16\n    local maxlen16\n    local max16\n    local len17\n    local\
    \ maxlen17\n    local max17\n    local len18\n    local maxlen18\n    local max18\n\
    \    local len19\n    local maxlen19\n    local max19\n    local len20\n    local\
    \ maxlen20\n    local max20\n    local len21\n    local maxlen21\n    local max21\n\
    \    local len22\n    local maxlen22\n    local max22\n    local len23\n    local\
    \ maxlen23\n    local max23\n    local len24\n    local maxlen24\n    local max24\n\
    \    local len25\n    local maxlen25\n    local max25\n    local len26\n    local\
    \ maxlen26\n    local max26\n    local len27\n    local maxlen27\n    local max27\n\
    \    local len28\n    local maxlen28\n    local max28\n    local len29\n    local\
    \ maxlen29\n    local max29\n    local len30\n    local maxlen30\n    local max30\n\
    \    local len31\n    local maxlen31\n    local max31\n}\n\ncandidate() {\n  \
    \  longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo3jrqhmb.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local i\n    local length\n    local\
    \ string\n    local lengths\n    local maxlen\n    local maxlen_index\n    local\
    \ maxlen_indexes\n    local maxlen_indexes2\n    local maxlen_indexes3\n    local\
    \ maxlen_indexes4\n    local maxlen_indexes5\n    local maxlen_indexes6\n    local\
    \ maxlen_indexes7\n    local maxlen_indexes8\n    local maxlen_indexes9\n    local\
    \ maxlen_indexes10\n    local maxlen_indexes11\n    local maxlen_indexes12\n \
    \   local maxlen_indexes13\n    local maxlen_indexes14\n    local maxlen_indexes15\n\
    \    local maxlen_indexes16\n    local maxlen_indexes17\n    local maxlen_indexes18\n\
    \    local maxlen_indexes19\n    local maxlen_indexes20\n    local maxlen_indexes21\n\
    \    local maxlen_indexes22\n    local maxlen_indexes23\n    local maxlen_indexes24\n\
    \    local maxlen_indexes25\n    local maxlen_indexes26\n    local maxlen_indexes27\n\
    \    local maxlen_indexes28\n    local maxlen_indexes29\n    local maxlen_indexes30\n\
    \    local maxlen_indexes31\n    local maxlen_indexes32\n    local maxlen_indexes33\n\
    \    local maxlen_indexes34\n    local maxlen_indexes35\n    local maxlen_indexes36\n\
    \    local maxlen_indexes37\n    local maxlen_indexes38\n    local maxlen_indexes39\n\
    \    local maxlen_indexes40\n    local maxlen_indexes41\n    local maxlen_indexes42\n\
    \    local maxlen_indexes43\n    local maxlen_indexes44\n    local maxlen_indexes45\n\
    \    local maxlen_indexes46\n    local maxlen_indexes47\n    local maxlen_indexes48\n\
    \    local maxlen_indexes49\n    local maxlen_indexes50\n    local maxlen_indexes51\n\
    \    local maxlen_indexes52\n    local maxlen_indexes53\n    local maxlen_indexes54\n\
    \    local maxlen_indexes55\n    local maxlen_indexes56\n    local maxlen_indexes57\n\
    \    local maxlen_indexes58\n    local maxlen_indexes59\n    local maxlen_indexes60\n\
    \    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n\
    \    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local i\n    local length\n    local\
    \ string\n    local lengths\n    local max\n    local maxLength\n    local maxLengthIndex\n\
    \    local maxLengthString\n    local maxLengthStringIndex\n    local maxLengthStringLength\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n\
    \    local maxLengthStringLengthIndex\n\n}\n\ncandidate() {\n    longest \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local len=${#list[@]}\n    local\
    \ maxlen=0\n    local max\n    for (( i=0; i<${#list[@]}; i++ )); do\n       \
    \ local len=${#list[$i]}\n        if (( len > maxlen )) ; then\n            maxlen=${len}\n\
    \            max=${list[$i]}\n        fi\n    done\n    echo \"$max\"\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxaowvje7.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local maxlen=0\n    local maxstr=\"\"\n    local maxstrlen=0\n\
    \    local maxstrpos=0\n    local maxstrlen1=0\n    local maxstrpos1=0\n    local\
    \ maxstrlen2=0\n    local maxstrpos2=0\n    local maxstrlen3=0\n    local maxstrpos3=0\n\
    \    local maxstrlen4=0\n    local maxstrpos4=0\n    local maxstrlen5=0\n    local\
    \ maxstrpos5=0\n    local maxstrlen6=0\n    local maxstrpos6=0\n    local maxstrlen7=0\n\
    \    local maxstrpos7=0\n    local maxstrlen8=0\n    local maxstrpos8=0\n    local\
    \ maxstrlen9=0\n    local maxstrpos9=0\n    local maxstrlen10=0\n    local maxstrpos10=0\n\
    \    local maxstrlen11=0\n    local maxstrpos11=0\n    local maxstrlen12=0\n \
    \   local maxstrpos12=0\n    local maxstrlen13=0\n    local maxstrpos13=0\n  \
    \  local maxstrlen14=0\n    local maxstrpos14=0\n    local maxstrlen15=0\n   \
    \ local maxstrpos15=0\n    local maxstrlen16=0\n    local maxstrpos16=0\n    local\
    \ maxstrlen17=0\n    local maxstrpos17=0\n    local maxstrlen18=0\n    local maxstrpos18=0\n\
    \    local maxstrlen19=0\n    local maxstrpos19=0\n    local maxstrlen20=0\n \
    \   local maxstrpos20=0\n    local maxstrlen21=0\n    local maxstrpos21=0\n  \
    \  local maxstrlen22=0\n    local maxstrpos22=0\n    local maxstrlen23=0\n   \
    \ local maxstrpos23=0\n    local maxstrlen24=0\n    local maxstrpos24=0\n    local\
    \ maxstrlen25=0\n    local maxstrpos25=0\n    local maxstrlen26=0\n    local maxstrpos26=0\n\
    \    local maxstrlen27=0\n    local maxstrpos27=0\n    local maxstrlen28=0\n \
    \   local maxstrpos28=0\n    local maxstrlen29=0\n    local maxstrpos29=0\n  \
    \  local maxstrlen30=0\n    local maxstrpos30=0\n    local maxstrlen31\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local i\n    local\
    \ string\n    local count\n\n    longest=\"$(echo \"$1\" | sed 's/ /\\n/g' | sort\
    \ -n | tail -1)\"\n    length=$(echo \"$1\" | wc -c)\n    count=0\n    for string\
    \ in \"$1\"; do\n        if [ \"$string\" == \"$longest\" ]; then\n          \
    \  ((count++))\n        else\n            if [ \"$count\" -gt \"$length\" ]; then\n\
    \                longest=\"$string\"\n                count=$length\n        \
    \    fi\n        fi\n    done\n    echo \"$longest\"\n}\n\ncandidate() {\n   \
    \ longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest length\n    local i j\n    local input\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n    local -a words\n\
    \    local -a words\n    local -a words\n    local -a words\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n arr=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#arr[@]} ]; do\n        local str=${arr[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl9vvrqg9.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    for\
    \ string in \"${strings[@]}\"; do\n        local length=\"${#string}\"\n     \
    \   if [[ ${length} -gt ${#lengths[@]} ]]; then\n            lengths=(\"${lengths[@]}\"\
    \ \"$length\")\n        elif [[ ${length} -eq ${#lengths[@]} ]]; then\n      \
    \      lengths=(\"${lengths[@]}\" \"$length\")\n        fi\n    done\n    local\
    \ max=\"${lengths[@]}\"\n    local maxlen=\"${#max}\"\n    if [[ ${maxlen} -gt\
    \ 1 ]]; then\n        local maxlen=\"${maxlen}\"\n        local max=\"${max%?}\"\
    \n    fi\n    echo \"${max}\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=$1\n    local longest\n    local length\n\
    \    local i\n    local j\n    local length\n    local max\n    local maxlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n\
    \    local maxlenlen\n    local maxlenlen\n    local maxlenlen\n    local max\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local -a lengths\n    local\
    \ -a maxlens\n    local -a maxs\n    local -a strings\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    \    local -a maxs\n    local -a maxlen\n    local -a max\n    local -a maxlens\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoyuo8lup.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    local str\n    while (( i < ${#list[*]} )) ; do\n     \
    \   str=\"${list[i]}\"\n        (( ${#str} > maxlen )) && maxlen=${#str}\n   \
    \     (( ${#str} > maxstr )) && maxstr=\"${str}\"\n        (( ++i ))\n    done\n\
    \    echo ${maxstr}\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0u11vh14.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local -a lengths\n    local\
    \ -a maxlens\n    local -a maxs\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n\
    \    local -a maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a\
    \ maxlens\n    local -a maxlens\n    local -a maxlens\n    local -a max\n}\n\n\
    candidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsu_j46yr.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local len\n    local maxlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgl6e7fux.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local i\n    local\
    \ string\n    local lengths\n    local length\n    local max\n    local maxlen\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local i\n    local string\n    local lengths\n    local length\n    local\
    \ maxlen\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n\
    \    local maxlen_index\n    local maxlen_index\n    local maxlen_index\n    local\
    \ maxlen_index\n    local maxlen_index\n    local maxlen_index\n\n}\n\ncandidate()\
    \ {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"\
    x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphx0t1ktp.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    for\
    \ string in \"${strings[@]}\"; do\n        length=${#string}\n        if [[ ${#lengths[@]}\
    \ -eq 0 ]]; then\n            lengths+=(\"$length\")\n        elif [[ ${length}\
    \ -gt ${lengths[*]} ]]; then\n            lengths+=(\"$length\")\n        fi\n\
    \    done\n    local length\n    local max\n    max=\"${lengths[@]}\"\n    for\
    \ length in \"${lengths[@]}\"; do\n        if [[ ${#max} -eq 0 ]]; then\n    \
    \        max=\"$length\"\n        elif [[ ${max} -gt \"$length\" ]]; then\n  \
    \          max=\"$length\"\n        fi\n    done\n    echo \"${strings[@]}\"[${#strings[@]}\
    \ - ${#lengths[@]}]\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local length=0\n    local max=''\n    local maxlen=0\n\
    \    local i=0\n    local list=\"$1\"\n    shift\n    while [[ $i -lt ${#list}\
    \ ]]; do\n        length=$(expr ${#list} + 1)\n        if [[ $length -gt $maxlen\
    \ ]]; then\n            max=$list\n            maxlen=$length\n        elif [[\
    \ $length -eq $maxlen ]]; then\n            max=\"${max}${list[i]}\"\n       \
    \ fi\n        i=$((i + 1))\n    done\n    echo \"$max\"\n}\n\ncandidate() {\n\
    \    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy\
    \ zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local maxlen\n    local i\n    local string\n    local len\n    local maxlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n\
    \    local maxlenlenlen\n    local maxlenlenlen\n    local maxlenlenlen\n    local\
    \ maxlenlenlen\n    local maxlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgl6e7fux.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local -n longest=\n    local -n\
    \ length=\n    local -n maxlen=0\n    local -n max=''\n    local -n maxidx=0\n\
    \    local -n maxidx2=0\n    local -n maxidx3=0\n    local -n maxidx4=0\n    local\
    \ -n maxidx5=0\n    local -n maxidx6=0\n    local -n maxidx7=0\n    local -n maxidx8=0\n\
    \    local -n maxidx9=0\n    local -n maxidx10=0\n    local -n maxidx11=0\n  \
    \  local -n maxidx12=0\n    local -n maxidx13=0\n    local -n maxidx14=0\n   \
    \ local -n maxidx15=0\n    local -n maxidx16=0\n    local -n maxidx17=0\n    local\
    \ -n maxidx18=0\n    local -n maxidx19=0\n    local -n maxidx20=0\n    local -n\
    \ maxidx21=0\n    local -n maxidx22=0\n    local -n maxidx23=0\n    local -n maxidx24=0\n\
    \    local -n maxidx25=0\n    local -n maxidx26=0\n    local -n maxidx27=0\n \
    \   local -n maxidx28=0\n    local -n maxidx29=0\n    local -n maxidx30=0\n  \
    \  local -n maxidx31=0\n    local -n maxidx32=0\n    local -n maxidx33=0\n   \
    \ local -n maxidx34=0\n    local -n maxidx35=0\n    local -n maxidx36=0\n    local\
    \ -n maxidx37=0\n    local -n maxidx38=0\n    local -n maxidx39=0\n    local -n\
    \ maxidx40=0\n    local -n maxidx41=0\n    local -n maxidx42=0\n    local -n maxidx43=0\n\
    \    local -n maxidx44=0\n    local -n maxidx45=0\n    local -n maxidx46=0\n \
    \   local -n maxidx47=0\n    local -n maxidx48=0\n    local -n maxidx49=0\n  \
    \  local -n maxidx50=0\n    local -n maxidx51=0\n    local -n maxidx52=0\n   \
    \ local -n maxidx53=0\n    \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm_v0ss4u.sh: line 12: local: `'': not a valid identifier

    /tmp/tmpm_v0ss4u.sh: line 13: local: `'': not a valid identifier

    /tmp/tmpm_v0ss4u.sh: line 14: local: `'': not a valid identifier

    /tmp/tmpm_v0ss4u.sh: line 15: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 16: local: `'': not a valid identifier

    /tmp/tmpm_v0ss4u.sh: line 17: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 18: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 19: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 20: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 21: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 22: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 23: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 24: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 25: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 26: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 27: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 28: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 29: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 30: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 31: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 32: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 33: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 34: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 35: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 36: local: `0'': invalid variable name for name reference

    /tmp/tmpm_v0ss4u.sh: line 37: local: `0'': invalid'
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local list=\"$1\"\n    local length\n\
    \    local i\n    local j\n    local max\n    local maxlen\n    local maxlenlen\n\
    \    local maxlenlen2\n    local maxlenlen3\n    local maxlenlen4\n    local maxlenlen5\n\
    \    local maxlenlen6\n    local maxlenlen7\n    local maxlenlen8\n    local maxlenlen9\n\
    \    local maxlenlen10\n    local maxlenlen11\n    local maxlenlen12\n    local\
    \ maxlenlen13\n    local maxlenlen14\n    local maxlenlen15\n    local maxlenlen16\n\
    \    local maxlenlen17\n    local maxlenlen18\n    local maxlenlen19\n    local\
    \ maxlenlen20\n    local maxlenlen21\n    local maxlenlen22\n    local maxlenlen23\n\
    \    local maxlenlen24\n    local maxlenlen25\n    local maxlenlen26\n    local\
    \ maxlenlen27\n    local maxlenlen28\n    local maxlenlen29\n    local maxlenlen30\n\
    \    local maxlenlen31\n    local maxlenlen32\n    local maxlenlen33\n    local\
    \ maxlenlen34\n    local maxlenlen35\n    local maxlenlen36\n    local maxlenlen37\n\
    \    local maxlenlen38\n    local maxlenlen39\n    local maxlenlen40\n    local\
    \ maxlenlen41\n    local maxlenlen42\n    local maxlenlen43\n    local maxlenlen44\n\
    \    local maxlenlen45\n    local maxlenlen46\n    local maxlenlen47\n    local\
    \ maxlenlen48\n    local maxlenlen49\n    local maxlenlen50\n    local maxlenlen51\n\
    \    local maxlenlen52\n    local maxlenlen53\n    local maxlenlen54\n    local\
    \ maxlenlen55\n    local maxlenlen56\n    local maxlenlen57\n    local maxlenlen58\n\
    \    local maxlenlen59\n    local maxlenlen60\n    local maxlenlen61\n    local\
    \ maxlenlen62\n    local maxlenlen63\n    local maxlenlen64\n    local maxlenlen65\n\
    \    local maxlenlen66\n    local maxlenlen67\n    local maxlenlen68\n    local\
    \ maxlenlen69\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local maxlen=0\n    local\
    \ maxstr=\"\"\n    local maxstrlen=0\n    local maxstrpos=0\n    local maxstrlenpos=0\n\
    \    local maxstrlenlen=0\n    local maxstrlenlenpos=0\n    local maxstrlenlenlen=0\n\
    \    local maxstrlenlenlenpos=0\n    local maxstrlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n\
    \    local maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local\
    \ maxstrlenlenlenlenlen=0\n    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n\
    \    local maxstrlenlenlenlenpos=0\n    local maxstrlenlenlenlenlen=0\n    local\
    \ maxstrlen\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\"\
    \ ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local count\n    local i\n    local j\n    local lengths\n    local max\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n    local maxLength\n    local maxString\n\
    \    local maxCount\n    local maxLengths\n    local maxStrings\n    local maxCount\n\
    \    local maxLength\n    local maxString\n    local maxCount\n    local maxLengths\n\
    \    local maxStrings\n    local maxCount\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local i\n    local\
    \ string\n    local lengths\n    local max\n    local maxlen\n    local maxlen_index\n\
    \    local maxlen_indexes\n    local maxlen_indexes2\n    local maxlen_indexes3\n\
    \    local maxlen_indexes4\n    local maxlen_indexes5\n    local maxlen_indexes6\n\
    \    local maxlen_indexes7\n    local maxlen_indexes8\n    local maxlen_indexes9\n\
    \    local maxlen_indexes10\n    local maxlen_indexes11\n    local maxlen_indexes12\n\
    \    local maxlen_indexes13\n    local maxlen_indexes14\n    local maxlen_indexes15\n\
    \    local maxlen_indexes16\n    local maxlen_indexes17\n    local maxlen_indexes18\n\
    \    local maxlen_indexes19\n    local maxlen_indexes20\n    local maxlen_indexes21\n\
    \    local maxlen_indexes22\n    local maxlen_indexes23\n    local maxlen_indexes24\n\
    \    local maxlen_indexes25\n    local maxlen_indexes26\n    local maxlen_indexes27\n\
    \    local maxlen_indexes28\n    local maxlen_indexes29\n    local maxlen_indexes30\n\
    \    local maxlen_indexes31\n    local maxlen_indexes32\n    local maxlen_indexes33\n\
    \    local maxlen_indexes34\n    local maxlen_indexes35\n    local maxlen_indexes36\n\
    \    local maxlen_indexes37\n    local maxlen_indexes38\n    local maxlen_indexes39\n\
    \    local maxlen_indexes40\n    local maxlen_indexes41\n    local maxlen_indexes42\n\
    \    local maxlen_indexes43\n    local maxlen_indexes44\n    local maxlen_indexes45\n\
    \    local maxlen_indexes46\n    local maxlen_indexes47\n    local maxlen_indexes48\n\
    \    local maxlen_indexes49\n    local maxlen_indexes50\n    local maxlen_indexes51\n\
    \    local maxlen_indexes52\n    local maxlen_indexes53\n    local maxlen_indexes54\n\
    \    local maxlen_indexes55\n    local maxlen_indexes56\n    local maxlen_indexes57\n\
    \    local maxlen_indexes58\n    local maxlen_indexes59\n    local maxlen_index\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n\n    length=${#1}\n    for ((i=0; i<${#1}; i++)); do\n        string=${1}[i]\n\
    \        if [[ -z ${longest} ]]; then\n            longest=${string}\n       \
    \ elif [[ ${#string} -gt ${#longest} ]]; then\n            longest=${string}\n\
    \        fi\n    done\n    echo ${longest}\n}\n\ncandidate() {\n    longest \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[\
    \ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk\
    \ abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n list=$1\n    local maxlen=0\n    local maxstr=\"\
    \"\n    local i=0\n    while [ $i -lt ${#list[*]} ]; do\n        local str=${list[$i]}\n\
    \        local len=${#str}\n        if [ $len -gt $maxlen ]; then\n          \
    \  maxlen=$len\n            maxstr=$str\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"$maxstr\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpspnn6f5j.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local -n strings=$1\n    local length\n    local max\n\
    \    local -a longest\n    local i\n    local j\n    local string\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a longest\n    local length\n\
    \    local -a longest\n    local length\n    local -a \n}\n\ncandidate() {\n \
    \   longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\"\
    \ ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz\
    \ www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa1ler83p.sh: line 12: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local list=\"$1\"\n    local length\n\
    \    local i\n    local j\n    local length\n    local maxlen\n    local max\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n\
    \    local maxlen\n    local maxlen\n    local maxlen\n    local maxlen\n    local\
    \ maxlen\n    local \n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local length\n    local string\n \
    \   local i\n\n    longest=$1\n    length=${#longest}\n    for (( i=1; i<=$length;\
    \ i++ )); do\n        string=${longest:$i:1}\n        if [ -z \"$string\" ]; then\n\
    \            echo \"$longest\"\n            return\n        fi\n        if [ -z\
    \ \"$longest\" ]; then\n            longest=$string\n        elif [ \"$longest\"\
    \ == \"$string\" ]; then\n            longest=$string\n        elif [ \"$longest\"\
    \ -lt \"$string\" ]; then\n            longest=$string\n        fi\n    done\n\
    \    echo \"$longest\"\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y\
    \ z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"${@}\")\n    local lengths=()\n    local\
    \ maxlen=0\n    local maxlen_index=0\n    local maxlen_string=\"\"\n    local\
    \ maxlen_string_index=0\n    local maxlen_string_count=0\n    local maxlen_string_counts=()\n\
    \    local maxlen_string_counts_index=0\n    local maxlen_string_counts_string=\"\
    \"\n    local maxlen_string_counts_string_index=0\n    local maxlen_string_counts_string_count=0\n\
    \    local maxlen_string_counts_string_counts=()\n    local maxlen_string_counts_string_counts_index=0\n\
    \    local maxlen_string_counts_string_counts_string=\"\"\n    local maxlen_string_counts_string_counts_string_index=0\n\
    \    local maxlen_string_counts_string_counts_string_count=0\n    local maxlen_string_counts_string_counts_string_counts=()\n\
    \    local maxlen_string_counts_string_counts_string_counts_index=0\n    local\
    \ maxlen_string_counts_string_counts_string_counts_string=\"\"\n    local maxlen_string_counts_string_counts_string_counts_string_index=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_count=0\n \
    \   local maxlen_string_counts_string_counts_string_counts_string_counts=()\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_index=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string=\"\
    \"\n    local maxlen_string_counts_string_counts_string_counts_string_counts_string_index=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_count=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts=()\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_index=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_string=\"\
    \"\n    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_string_index=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_string_count=0\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_string_counts=()\n\
    \    local maxlen_string_counts_string_counts_string_counts_string_counts_string_counts_string_counts_index=0\n\
    \    local maxlen_string_counts_\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate\
    \ \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"\
    zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=( \"$@\" )\n    local lengths=( $(echo\
    \ \"${strings[*]}\" | tr ' ' '\\n' | sort -n | uniq -c | sort -n | awk '{print\
    \ $2}') )\n    local longest\n    local i\n    for (( i=0; i<${#strings[@]}; i++\
    \ )); do\n        if [[ ${lengths[$i]} -gt ${#longest} ]]; then\n            longest=${strings[$i]}\n\
    \        fi\n    done\n    echo \"${longest}\"\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local strings=(\"$@\")\n    local lengths=()\n    local\
    \ max=0\n    local maxLength=0\n    local maxString=\"\"\n    local maxLengthString=\"\
    \"\n    local maxIndex=0\n    local maxLengthIndex=0\n    local maxIndexString=\"\
    \"\n    local maxLengthIndexString=\"\"\n    local maxIndexLength=0\n    local\
    \ maxLengthIndexLength=0\n    local maxIndexStringLength=0\n    local maxLengthIndexStringLength=0\n\
    \    local maxIndexLengthStringLength=0\n    local maxLengthIndexLengthStringLength=0\n\
    \    local maxIndexStringLengthStringLength=0\n    local maxLengthIndexLengthStringLength=0\n\
    \    local maxLengthIndexStringLengthStringLength=0\n    local maxIndexLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLength=0\n    local maxIndexStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLength=0\n    local maxLengthIndexStringLengthStringLengthStringLength=0\n\
    \    local maxIndexLengthStringLengthStringLengthStringLength=0\n    local maxLengthIndexLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexStringLengthStringLengthStringLengthStringLength=0\n    local\
    \ maxLengthIndexLengthStringLengthStringLengthStringLength=0\n    local maxLengthIndexStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexStringLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexStringLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLengthIndexLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxIndexStringLengthStringLengthStringLengthStringLengthStringLengthStringLengthStringLength=0\n\
    \    local maxLength\n}\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"\
    x\" ]]\n    [[ $(candidate \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest length\n    longest=${1%?}\n    length=${#longest}\n\
    \    for (( i=1; i<${#1}; i++ )); do\n        if [[ ${1:$i} == *\"${longest}*\"\
    * ]]; then\n            length=${i}\n        fi\n    done\n    if [[ ${length}\
    \ -gt 1 ]]; then\n        echo ${longest}\n    else\n        echo \"\"\n    fi\n\
    }\n\ncandidate() {\n    longest \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"None\" ]]\n    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate\
    \ \"x yyy zzzz www kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
- exit_code: 1
  program: "#!/bin/bash\n# Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n# strings of the same length. Return None\
    \ in case the input list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b',\
    \ 'c'])\n# 'a'\n# >>> longest(['a', 'bb', 'ccc'])\n# 'ccc'\n#\n# $1 is a space-separated\
    \ list\nlongest() {\n    local longest\n    local string\n    local length\n \
    \   local i\n    local j\n    local lengths\n    local max\n    local maxLength\n\
    \    local maxLengthIndex\n    local maxLengthString\n    local maxLengthStringIndex\n\
    \    local maxLengthStringLength\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLengthStringLengthIndex\n    local\
    \ maxLengthStringLengthIndex\n    local maxLength\n}\n\ncandidate() {\n    longest\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"None\" ]]\n\
    \    [[ $(candidate \"x y z\") = \"x\" ]]\n    [[ $(candidate \"x yyy zzzz www\
    \ kkkk abc\") = \"zzzz\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025685
