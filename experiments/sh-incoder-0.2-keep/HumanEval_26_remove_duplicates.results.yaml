language: sh
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local i\n    local j\n    local count\n    local element\n    local tmp\n\
    \    local count2\n    local element2\n    local tmp2\n    local count3\n    local\
    \ element3\n    local tmp3\n    local count4\n    local element4\n    local tmp4\n\
    \    local count5\n    local element5\n    local tmp5\n    local count6\n    local\
    \ element6\n    local tmp6\n    local count7\n    local element7\n    local tmp7\n\
    \    local count8\n    local element8\n    local tmp8\n    local count9\n    local\
    \ element9\n    local tmp9\n    local count10\n    local element10\n    local\
    \ tmp10\n    local count11\n    local element11\n    local tmp11\n    local count12\n\
    \    local element12\n    local tmp12\n    local count13\n    local element13\n\
    \    local tmp13\n    local count14\n    local element14\n    local tmp14\n  \
    \  local count15\n    local element15\n    local tmp15\n    local count16\n  \
    \  local element16\n    local tmp16\n    local count17\n    local element17\n\
    \    local tmp17\n    local count18\n    local element18\n    local tmp18\n  \
    \  local count19\n    local element19\n    local tmp19\n    local count20\n  \
    \  local element20\n    local tmp20\n    local count21\n    local element21\n\
    \    local tmp21\n    local count22\n    local element22\n    local tmp22\n  \
    \  local count23\n    local element23\n    local tmp23\n    local count24\n  \
    \  local element24\n    local tmp24\n    local count25\n    local element25\n\
    \    local tmp25\n    local count26\n    local element26\n    local tmp26\n  \
    \  local count27\n    local element27\n    local tmp27\n    local count28\n  \
    \  local element28\n    local tmp28\n    local count29\n    local element29\n\
    \    local tmp29\n    local count30\n    local element30\n    local tmp30\n  \
    \  local count31\n    local element31\n    local tmp31\n    local count32\n  \
    \  local element32\n    local tmp32\n    local count33\n    local element33\n\
    \    local tmp33\n    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local unique_list=\"\"\n\
    \  local count=0\n  local element\n\n  for element in $list; do\n    if [ \"$count\"\
    \ -eq 0 ]; then\n      unique_list=\"$element\"\n      count=1\n    elif [ \"\
    $element\" == \"$unique_list\" ]; then\n      count=$(($count + 1))\n    else\n\
    \      unique_list=\"$unique_list $element\"\n      count=1\n    fi\n  done\n\n\
    \  echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    local\
    \ i\n    output=$(echo \"$list\" | tr \" \" \"\\n\" | sort -u)\n    for ((i=1;\
    \ i<${#list}; i++)); do\n        if [[ ${list[i]} == ${list[i-1]} ]]; then\n \
    \           output=\"${output} ${list[i]}\"\n        else\n            echo \"\
    ${output}\"\n            output=\"${list[i]}\"\n        fi\n    done\n    echo\
    \ \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [ \"$count\" -eq\
    \ 0 ]; then\n            unique_list=\"$element\"\n            count=$(( $count\
    \ + 1 ))\n        elif [ \"$element\" == \"$unique_list\" ]; then\n          \
    \  count=$(( $count + 1 ))\n        else\n            unique_list=\"$unique_list\
    \ $element\"\n        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local a\n    for a in\
    \ \"$1\"; do\n        local b\n        for b in \"$a\"; do\n            [[ \"\
    $a\" != \"$b\" ]] && [[ \"$b\" != \"$a\" ]] && echo \"$b\"\n        done\n   \
    \ done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i\n\n    for (( i=0; i<${#input};\
    \ i++ )); do\n        if [[ ${input:$i:1} == ${last} ]]; then\n            ((\
    \ count++ ))\n        else\n            if [[ ${count} -gt 1 ]]; then\n      \
    \          output+=\" $last\"\n            fi\n            last=\"${input:$i:1}\"\
    \n            count=1\n        fi\n    done\n\n    if [[ ${count} -gt 1 ]]; then\n\
    \        output+=\" $last\"\n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local i=0\n\
    \    while [[ $i -lt ${#input} ]]; do\n        local this=\"${input:$i:1}\"\n\
    \        if [[ \"$this\" == \"$last\" ]]; then\n            ((count++))\n    \
    \    else\n            if ((count > lastcount)) {\n                output=\"$output$last\"\
    \n                lastcount=$count\n            }\n            count=1\n     \
    \       last=\"$this\"\n        fi\n        ((i++))\n    done\n    if [[ $lastcount\
    \ -gt 0 ]]; then\n        output=\"$output$last\"\n    fi\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj3ta411t.sh: line 20: syntax error near unexpected token `{''

    /tmp/tmpj3ta411t.sh: line 20: `            if ((count > lastcount)) {''

    '
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [[ $element ==\
    \ \"$element\" ]]; then\n            ((count++))\n        else\n            if\
    \ [[ $count -gt 1 ]]; then\n                unique_list+=\" $element\"\n     \
    \       fi\n        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local j\n    local count\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local tmp98\n\
    \    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=\"\
    $(echo \"$input\" | tr \" \" \"\\n\" | sort | uniq -d)\"\n  echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local unique_list=\"\"\n\
    \  local count=0\n  local i\n\n  for (( i=0; i<${#list}; i++ )); do\n    if [[\
    \ ${list[i]} == ${list[i+1]} ]]; then\n      (( count++ ))\n    else\n      if\
    \ (( count > 0 )); then\n        unique_list+=\" $list[i]\"\n      fi\n      count=1\n\
    \    fi\n  done\n  if (( count > 0 )); then\n    unique_list+=\" $list[i]\"\n\
    \  fi\n  echo \"${unique_list}\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local i\n    for (( i = 0; i < ${#input}; i++ )); do\n        local j\n \
    \       for (( j=0; j < ${#output}; j++ )); do\n            [[ \"${output[j]}\"\
    \ == \"${input[i]}\" ]] && break\n        done\n        if (( j == 0 )); then\n\
    \            output+=\"${input[i]}\"\n        fi\n    done\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    local lastlastcount=0\n    while read -r line; do\n        if [ \"$last\"\
    \ != \"$line\" ]; then\n            if [ \"$lastcount\" -gt \"$lastlastcount\"\
    \ ]; then\n                lastlastcount=$lastcount\n                lastlast=$last\n\
    \            fi\n            count=$((count+1))\n            last=$line\n    \
    \        lastcount=$count\n        else\n            count=$((count+1))\n    \
    \    fi\n    done <<< \"$input\"\n    if [ \"$lastlastcount\" -gt \"$lastlastcount\"\
    \ ]; then\n        lastlastcount=$lastcount\n        lastlast=$last\n    fi\n\
    \    lastcount=$((count+1))\n    while [ \"$lastcount\" -gt \"$lastlastcount\"\
    \ ]; do\n        local lastlastcount=0\n        local lastlast=\"\"\n        local\
    \ last=\"\"\n        local count=0\n        while read -r line; do\n         \
    \   if [ \"$last\" != \"$line\" ]; then\n                if [ \"$lastcount\" -gt\
    \ \"$lastlastcount\" ]; then\n                    lastlastcount=$lastcount\n \
    \                   lastlast=$last\n                fi\n                count=$((count+1))\n\
    \                last=$line\n                lastcount=$count\n            else\n\
    \                count=$((count+1))\n            fi\n        done <<< \"$input\"\
    \n    done\n    local output\n    for (( i=0; i<$lastlastcount; i++ )); do\n \
    \       output=\"$output$lastlast\"\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660031575
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local output\n  output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique=()\n  \
    \  local count=0\n    for element in $list; do\n        if [[ ${unique[$count]}\
    \ != $element ]]; then\n            unique+=(\"$element\")\n            count=$((count+1))\n\
    \        fi\n    done\n    echo \"${unique[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=\"\
    $(IFS=$'\\n'; echo \"$input\" | sort -u)\" # remove duplicates\n  output=\"$(IFS=$'\\\
    n'; echo \"$output\" | sort -n)\" # sort output in original order\n  output=\"\
    $(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\\
    n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"\
    $output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\"\
    \ # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove\
    \ empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n\
    \  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"\
    $(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\\
    n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"\
    $output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\"\
    \ # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove\
    \ empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n\
    \  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"\
    $(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\\
    n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"\
    $output\")\" # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\"\
    \ # remove empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove\
    \ empty lines\n  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n\
    \  output=\"$(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"\
    $(IFS=$'\\n'; echo \"$output\")\" # remove empty lines\n  output=\"$(IFS=$'\\\
    n'; echo \"$output\")\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb9l8lifr.sh: line 46: unexpected EOF while looking for matching
    `"''

    /tmp/tmpb9l8lifr.sh: line 50: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local result\n    local element\n    local count\n \
    \   local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local element\n    local\
    \ count\n    local element\n    local count\n    local element\n    local count\n\
    \    local element\n    local count\n    local element\n    local count\n    local\
    \ element\n    local count\n    local element\n    local count\n    local element\n\
    \    local count\n    local element\n    local count\n    local \n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local a\n    for a in\
    \ \"$@\"; do\n        local b\n        for b in \"$@\"; do\n            [[ \"\
    $a\" != \"$b\" ]] && [[ \"$a\" != \"$b\" ]] || remove_duplicates \"$b\"\n    \
    \    done\n        echo \"$a\"\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031573
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        ((count++))\n   \
    \     if [ \"$unique_list\" == \"\" ]; then\n            unique_list=\"$element\"\
    \n        else\n            if [ \"$element\" == \"$unique_list\" ]; then\n  \
    \              unique_list=\"$unique_list, $element\"\n            else\n    \
    \            unique_list=\"$unique_list, $element\"\n            fi\n        fi\n\
    \    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [[ $element !=\
    \ $unique_list* ]]; then\n            unique_list+=\"$element\"\n            count=$((count+1))\n\
    \        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local i\n\
    \    for (( i=0; i<${#input}; i++ )); do\n        if [[ ${input[i]} == ${last}\
    \ ]]; then\n            (( count++ ))\n        else\n            if [[ ${count}\
    \ -gt ${lastcount} ]]; then\n                output+=\" $last\"\n            fi\n\
    \            lastcount=\"${count}\"\n            last=\"${input[i]}\"\n      \
    \  fi\n    done\n    output+=\" $last\"\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n    while [[ $i -lt ${#input}\
    \ ]]; do\n        if [[ ${input[$i]} == ${input[$((i+1))]} ]]; then\n        \
    \    ((count++))\n        else\n            if [[ ${count} -gt 1 ]]; then\n  \
    \              output+=\" $last\"\n            fi\n            last=\"${input[$i]}\"\
    \n            count=1\n        fi\n        ((i++))\n    done\n    if [[ ${count}\
    \ -gt 1 ]]; then\n        output+=\" $last\"\n    fi\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local uniques=()\n \
    \   local count=0\n    for element in $list; do\n        if [[ ${uniques[*]} !=\
    \ $element ]]; then\n            uniques+=($element)\n            count=$((count+1))\n\
    \        fi\n    done\n    echo ${uniques[@]:0:$count}\n}\n\ncandidate() {\n \
    \   remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local j\n    local output\n    local element\n    local\
    \ last\n    local first\n    local lastElement\n    local lastCount\n    local\
    \ lastElementCount\n    local lastElementIndex\n    local lastElementIndexCount\n\
    \    local lastElementIndexCount2\n    local lastElementIndexCount3\n    local\
    \ lastElementIndexCount4\n    local lastElementIndexCount5\n    local lastElementIndexCount6\n\
    \    local lastElementIndexCount7\n    local lastElementIndexCount8\n    local\
    \ lastElementIndexCount9\n    local lastElementIndexCount10\n    local lastElementIndexCount11\n\
    \    local lastElementIndexCount12\n    local lastElementIndexCount13\n    local\
    \ lastElementIndexCount14\n    local lastElementIndexCount15\n    local lastElementIndexCount16\n\
    \    local lastElementIndexCount17\n    local lastElementIndexCount18\n    local\
    \ lastElementIndexCount19\n    local lastElementIndexCount20\n    local lastElementIndexCount21\n\
    \    local lastElementIndexCount22\n    local lastElementIndexCount23\n    local\
    \ lastElementIndexCount24\n    local lastElementIndexCount25\n    local lastElementIndexCount26\n\
    \    local lastElementIndexCount27\n    local lastElementIndexCount28\n    local\
    \ lastElementIndexCount29\n    local lastElementIndexCount30\n    local lastElementIndexCount31\n\
    \    local lastElementIndexCount32\n    local lastElementIndexCount33\n    local\
    \ lastElementIndexCount34\n    local lastElementIndexCount35\n    local lastElementIndexCount36\n\
    \    local lastElementIndexCount37\n    local lastElementIndexCount38\n    local\
    \ lastElementIndexCount39\n    local lastElementIndexCount40\n    local lastElementIndexCount41\n\
    \    local lastElementIndexCount42\n    local lastElementIndexCount43\n    local\
    \ lastElementIndexCount44\n    local lastElementIndexCount45\n    local lastElementIndexCount46\n\
    \    local lastElementIndexCount47\n    local lastElementIndexCount48\n    local\
    \ lastElementIndexCount49\n    local lastElementIndexCount50\n    local lastElementIndexCount51\n\
    \    local lastElementIndexCount52\n    local lastElementIndexCount53\n    local\
    \ lastElementIndexCount54\n    local lastElementIndexCount55\n    local lastElementIndexCount56\n\
    \    local lastElementIndex\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        ((count++))\n   \
    \     if [ \"$unique_list\" != \"\" ]; then\n            if [ \"$element\" ==\
    \ \"$unique_list\" ]; then\n                unique_list=\"$unique_list$element\"\
    \n            else\n                unique_list=\"$unique_list, $element\"\n \
    \           fi\n        else\n            unique_list=\"$element\"\n        fi\n\
    \    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [ \"$unique_list\"\
    \ == \"\" ]; then\n            unique_list=\"$element\"\n        else\n      \
    \      if [ \"$element\" == \"$unique_list\" ]; then\n                count=$((count+1))\n\
    \            else\n                if [ \"$count\" -gt 1 ]; then\n           \
    \         unique_list=\"$unique_list $element\"\n                else\n      \
    \              unique_list=\"$unique_list\"\n                fi\n            fi\n\
    \        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ count\n    local i\n    local j\n    local k\n    local len\n    local tmp\n\
    \    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local\
    \ tmp\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local result\n    local j\n    local k\n    for (( i\
    \ = 0; i < ${#list}; i++ )); do\n        if [[ \"${list[i]}\" == \"${list[i+1]}\"\
    \ ]]; then\n            (( count++ ))\n        else\n            if [[ -z \"${list[i]}\"\
    \ ]]; then\n                list=\"${list//${list[i]}/${list[i+1]}\"}\n      \
    \      else\n                list=\"${list//${list[i]}/${list[i]}}\n         \
    \       list=\"${list//${list[i+1]}/${list[i+1]}}\"\n            fi\n        fi\n\
    \    done\n    for (( j = 1; j < ${#list}; j++ )); do\n        if [[ \"${list[j]}\"\
    \ == \"${list[j-1]}\" ]]; then\n            (( count-- ))\n        else\n    \
    \        if [[ -z \"${list[j]}\" ]]; then\n                list=\"${list//${list[j]}/${list[j-1]}\"\
    }\n            else\n                list=\"${list//${list[j]}/${list[j]}}\n \
    \               list=\"${list//${list[j-1]}/${list[j-1]}}\"\n            fi\n\
    \        fi\n    done\n    for (( k = 0; k < ${#list}; k++ )); do\n        if\
    \ [[ \"${list[k]}\" == \"${list[k-1]}\" ]]; then\n            list=\"${list//${list[k]}/${list[k-1]}\"\
    }\n        else\n            list=\"${list//${list[k]}/${list[k]}}\n         \
    \   list=\"${list//${list[k-1]}/${list[k-1]}}\"\n        fi\n    done\n    result=\"\
    ${list}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpszrl2gc4.sh: line 59: unexpected EOF while looking for matching
    `"''

    /tmp/tmpszrl2gc4.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ count\n    local i\n    local j\n    local k\n    local l\n    local m\n   \
    \ local n\n    local o\n    local p\n    local q\n    local r\n    local s\n \
    \   local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local \n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        ((count++))\n   \
    \     if [[ $element == \"$element\" ]]; then\n            continue\n        fi\n\
    \        if [[ $unique_list == \"\" ]]; then\n            unique_list=\"$element\"\
    \n        else\n            unique_list=\"$unique_list, $element\"\n        fi\n\
    \    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique=()\n  \
    \  local count=0\n    for element in $list; do\n        if [[ ${unique[$count]}\
    \ != $element ]]; then\n            unique+=(\"$element\")\n            count=$((count+1))\n\
    \        fi\n    done\n    echo \"${unique[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local i\n    local j\n    local count\n    local tmp\n    local tmp2\n  \
    \  local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n\
    \    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local\
    \ tmp98\n\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local j\n    local k\n    local l\n    local m\n   \
    \ local n\n    local o\n    local p\n    local q\n    local r\n    local s\n \
    \   local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local \n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    for element in $input; do\n        if [ \"$count\" -eq\
    \ 0 ]; then\n            output=\"$element\"\n            count=1\n        else\n\
    \            if [ \"$element\" != \"$output\" ]; then\n                count=$((count+1))\n\
    \                output=\"$output$count\"\n            fi\n        fi\n    done\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ i\n    local j\n    local len\n    local result\n    local count\n\n    list=\"\
    $( echo \"$list\" | sed 's/ /, /g' )\"\n    len=\"${#list}\"\n    for ((i=0; i<len;\
    \ i++)); do\n        tmp=\"${list[i]}\"\n        for ((j=$i+1; j<len; j++)); do\n\
    \            if [ \"$tmp\" == \"${list[j]}\" ]; then\n                list=\"\
    $( echo \"$list\" | sed \"s/$tmp/, /g\" )\"\n            fi\n        done\n  \
    \  done\n\n    result=\"$( echo \"$list\" | sed 's/, /, /g' )\"\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    sed: -e expression #1, char 0: no previous regular expression

    se'
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local output\n  output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local i\n    local output\n\
    \    output=$(printf '%s\\n' \"$@\" | sort -u)\n    IFS=$' \\t\\n'\n    for ((i\
    \ = 0; i < ${#output}; i++)); do\n        echo \"${output[i]}\"\n    done\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local i\n\n\
    \    for (( i=0; i<${#input}; i++ )); do\n        if [[ ${input[i]} == ${last}\
    \ ]]; then\n            (( count++ ))\n        else\n            if [[ ${count}\
    \ -gt ${lastcount} ]]; then\n                output+=\"${last} \"\n          \
    \  fi\n            last=\"${input[i]}\"\n            count=1\n        fi\n   \
    \ done\n\n    if [[ ${count} -gt ${lastcount} ]]; then\n        output+=\"${last}\
    \ \"\n    fi\n\n    echo \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    local lastlastcount=0\n    local lastlastlast=\"\"\n    local lastlastlastcount=0\n\
    \    local lastlastlastlast=\"\"\n    local lastlastlastlastcount=0\n    local\
    \ lastlastlastlastlast=\"\"\n    local lastlastlastlastlastcount=0\n    local\
    \ lastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastcount=0\n \
    \   local lastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlastlastlast=\"\"\n    local lastlastlastlastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlastlastlastlast=\"\"\n    local\
    \ lastlastlastlastlastlastlastlastlastlastlastlastlastcount=0\n    local lastlastlastlastlastlastlastlastlastlastlastlastlastlast=\"\
    \"\n    local lastlastlastlastlastlastlastlastlastlastlastlastlastlastcount=0\n\
    \    local lastlastlastlastlastlastlastlastlastlastlastlastlastlastcount=0\n \
    \   local lastlastlastlastlastlastlastlastlastlastlastlastlastlastcount=0\n  \
    \  local lastlastlastlastlastlastlastlastlastlast\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local element\n    local j\n    local k\n    local duplicates\n\
    \    local counts\n    local junk\n    local junk2\n    local junk3\n    local\
    \ junk4\n    local junk5\n    local junk6\n    local junk7\n    local junk8\n\
    \    local junk9\n    local junk10\n    local junk11\n    local junk12\n    local\
    \ junk13\n    local junk14\n    local junk15\n    local junk16\n    local junk17\n\
    \    local junk18\n    local junk19\n    local junk20\n    local junk21\n    local\
    \ junk22\n    local junk23\n    local junk24\n    local junk25\n    local junk26\n\
    \    local junk27\n    local junk28\n    local junk29\n    local junk30\n    local\
    \ junk31\n    local junk32\n    local junk33\n    local junk34\n    local junk35\n\
    \    local junk36\n    local junk37\n    local junk38\n    local junk39\n    local\
    \ junk40\n    local junk41\n    local junk42\n    local junk43\n    local junk44\n\
    \    local junk45\n    local junk46\n    local junk47\n    local junk48\n    local\
    \ junk49\n    local junk50\n    local junk51\n    local junk52\n    local junk53\n\
    \    local junk54\n    local junk55\n    local junk56\n    local junk57\n    local\
    \ junk58\n    local junk59\n    local junk60\n    local junk61\n    local junk62\n\
    \    local junk63\n    local junk64\n    local junk65\n    local junk66\n    local\
    \ junk67\n    local junk68\n    local junk69\n    local junk70\n    local junk71\n\
    \    local junk72\n    local junk73\n    local junk74\n    local junk75\n    local\
    \ junk76\n    local junk77\n    local junk78\n    local junk79\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local j\n    local k\n    local l\n    local m\n   \
    \ local n\n    local o\n    local p\n    local q\n    local r\n    local s\n \
    \   local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n\
    \    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n\
    \    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n\
    \    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n\
    \    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n\
    \    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n\
    \    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n\
    \    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n\
    \    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n\
    \    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n\
    \    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n\
    \    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n\
    \    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n\
    \    local x\n    local y\n    local z\n    local a\n    local b\n    local \n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local j\n    local count\n    local tmp\n    local tmp2\n    local tmp3\n\
    \    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n    local tmp8\n\
    \    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n    local\
    \ tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local tmp17\n\
    \    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n    local\
    \ tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local tmp26\n\
    \    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n    local\
    \ tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local tmp35\n\
    \    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n    local\
    \ tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local tmp44\n\
    \    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n    local\
    \ tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local tmp53\n\
    \    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n    local\
    \ tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local tmp62\n\
    \    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n    local\
    \ tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local tmp71\n\
    \    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n    local\
    \ tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local tmp80\n\
    \    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n    local\
    \ tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local tmp89\n\
    \    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n    local\
    \ tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local tmp98\n\
    \    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output=\"\"\n  local\
    \ count=0\n  local last=\"\"\n  local lastcount=0\n  local i\n  for i; do\n  \
    \  if [ \"$last\" != \"$i\" ]; then\n      if [ \"$lastcount\" -gt \"$count\"\
    \ ]; then\n        output=\"$output $last\"\n      fi\n      last=\"$i\"\n   \
    \   lastcount=\"$count\"\n    fi\n    ((count++))\n  done\n  output=\"$output\
    \ $last\"\n  echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local i\n    local count\n    local j\n    for (( i=0; i<${#input}; i++ ));\
    \ do\n        count=$(echo \"${input[i]}\" | wc -c)\n        if [ \"${count}\"\
    \ -gt 1 ]; then\n            for (( j=0; j<${#output}; j++ )); do\n          \
    \      if [ \"${output[j]}\" == \"${input[i]}\" ]; then\n                    output=\"\
    ${output[@]:0:j}${output[@]:j+1}\"\n                    break\n              \
    \  fi\n            done\n        fi\n        output+=\"${input[i]} \"\n    done\n\
    \    echo \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local output\n  output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [[ $element !=\
    \ $unique_list* ]]; then\n            unique_list+=\"$element\"\n            count=$((count+1))\n\
    \        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local j\n    local k\n    local len\n    local tmp\n\
    \    local tmp2\n    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n\
    \    local tmp7\n    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n\
    \    local tmp12\n    local tmp13\n    local tmp14\n    local tmp15\n    local\
    \ tmp16\n    local tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n\
    \    local tmp21\n    local tmp22\n    local tmp23\n    local tmp24\n    local\
    \ tmp25\n    local tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n\
    \    local tmp30\n    local tmp31\n    local tmp32\n    local tmp33\n    local\
    \ tmp34\n    local tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n\
    \    local tmp39\n    local tmp40\n    local tmp41\n    local tmp42\n    local\
    \ tmp43\n    local tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n\
    \    local tmp48\n    local tmp49\n    local tmp50\n    local tmp51\n    local\
    \ tmp52\n    local tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n\
    \    local tmp57\n    local tmp58\n    local tmp59\n    local tmp60\n    local\
    \ tmp61\n    local tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n\
    \    local tmp66\n    local tmp67\n    local tmp68\n    local tmp69\n    local\
    \ tmp70\n    local tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n\
    \    local tmp75\n    local tmp76\n    local tmp77\n    local tmp78\n    local\
    \ tmp79\n    local tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n\
    \    local tmp84\n    local tmp85\n    local tmp86\n    local tmp87\n    local\
    \ tmp88\n    local tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n\
    \    local tmp93\n    local tmp94\n    local tmp95\n    local tmp96\n    local\
    \ tmp\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local uniques=()\n \
    \   local counts=()\n    local i=0\n    while [ $i -lt ${#list} ]; do\n      \
    \  local j=0\n        while [ $j -le ${#uniques} ]; do\n            local k=0\n\
    \            while [ $k -le ${#counts} ]; do\n                if [ \"${uniques[k]}\"\
    \ == \"${list[i]}\" ]; then\n                    counts[k]=$(( ${counts[k]} +\
    \ 1 ))\n                    break\n                fi\n                k=$(( ${k}\
    \ + 1 ))\n            done\n            if [ $k -eq ${#counts} ]; then\n     \
    \           uniques[${#uniques}+1]=\"${list[i]}\"\n                counts[${#counts}+1]=1\n\
    \                break\n            fi\n            j=$(( ${j} + 1 ))\n      \
    \  done\n        i=$(( ${i} + 1 ))\n    done\n    uniques=( \"${uniques[@]}\"\
    \ )\n    counts=( \"${counts[@]}\" )\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    local lastlastcount=0\n    for element in $input; do\n        if [ \"\
    $last\" != \"$element\" ]; then\n            if [ \"$lastcount\" -gt \"$count\"\
    \ ]; then\n                lastlastcount=$count\n                lastlast=$last\n\
    \            fi\n            count=$((count+1))\n            last=$element\n \
    \           lastcount=$count\n        else\n            count=$((count+1))\n \
    \       fi\n    done\n    if [ \"$lastlastcount\" -gt \"$lastcount\" ]; then\n\
    \        lastlastcount=$count\n        lastlast=$last\n    fi\n    for element\
    \ in $input; do\n        if [ \"$lastlast\" != \"$element\" ]; then\n        \
    \    if [ \"$lastlastcount\" -gt \"$count\" ]; then\n                lastlastcount=$count\n\
    \                lastlast=$last\n            fi\n            count=$((count+1))\n\
    \            last=$element\n            lastcount=$count\n        else\n     \
    \       count=$((count+1))\n        fi\n    done\n    if [ \"$lastlastcount\"\
    \ -gt \"$count\" ]; then\n        lastlastcount=$count\n        lastlast=$last\n\
    \    fi\n    for element in $input; do\n        if [ \"$lastlast\" != \"$element\"\
    \ ]; then\n            if [ \"$lastlastcount\" -gt \"$count\" ]; then\n      \
    \          lastlastcount=$count\n                lastlast=$last\n            fi\n\
    \            count=$((count+1))\n            last=$element\n            lastcount=$count\n\
    \        else\n            count=$((count+1))\n        fi\n    done\n    if [\
    \ \"$lastlastcount\" -gt \"$count\" ]; then\n        lastlastcount=$count\n  \
    \      lastlast=$last\n    fi\n    for element in $input; do\n        if [ \"\
    $lastlast\" != \"$element\" ]; then\n            if [ \"$lastlastcount\" -gt \"\
    $count\" ]; then\n                lastlastcount=$count\n                lastlast=$last\n\
    \            fi\n            count=$((count+1))\n            last=$element\n \
    \           lastcount=$count\n        else\n            count=$((count+1))\n \
    \       fi\n    done\n    if [ \"$lastlastcount\" -gt \"$count\" ]; then\n   \
    \     lastlastcount=$count\n        lastlast=$last\n    fi\n    for element in\
    \ $input; do\n        if [ \"$lastlast\" != \"$element\" ]; then\n           \
    \ if [ \"$lastlastcount\" -gt \"$count\" ]; then\n                lastlastcount=$count\n\
    \                lastlast=$last\n            fi\n            count=$((count+1))\n\
    \            last=$element\n            lastcount=$count\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7s976zsq.sh: line 93: syntax error near unexpected token `}''

    /tmp/tmp7s976zsq.sh: line 93: `}''

    '
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=\"\
    $( echo \"$input\" | tr ' ' '\\n' | sort -u )\"\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    for element in $input; do\n        if [ \"$count\" -eq\
    \ 0 ]; then\n            output=\"$element\"\n            count=1\n        elif\
    \ [ \"$element\" != \"$output\" ]; then\n            output=\"$output$count\"\n\
    \            count=1\n        else\n            count=$(( $count + 1 ))\n    \
    \    fi\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local output\n    local\
    \ -a seen\n    local -a sorted_list\n    local -a sorted_list_index\n    local\
    \ -a sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n    local -a\
    \ sorted_list_count\n    local -a sorted_list_count\n    local -a sorted_list_count\n\
    \    local -a sorted_list_count\n    local -a sorted_list_count\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [ \"$count\" -eq\
    \ 0 ]; then\n            unique_list=\"$element\"\n            count=1\n     \
    \   elif [ \"$element\" == \"$unique_list\" ]; then\n            count=$(($count\
    \ + 1))\n        else\n            unique_list=\"$unique_list $element\"\n   \
    \     fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n    while [[ $i -lt ${#input}\
    \ ]]; do\n        if [[ \"${input[$i]}\" == \"${input[$((i+1))]}\" ]]; then\n\
    \            ((count++))\n        else\n            if [[ $count -gt 1 ]]; then\n\
    \                output+=\" $last\"\n            fi\n            last=\"${input[$i]}\"\
    \n            count=1\n        fi\n        ((i++))\n    done\n    if [[ $count\
    \ -gt 1 ]]; then\n        output+=\" $last\"\n    fi\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local result\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n\
    \    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n\
    \    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n\
    \    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n\
    \    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n\
    \    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n\
    \    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n\
    \    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n\
    \    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n\
    \    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n\
    \    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n\
    \    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n\
    \    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n\
    \    local w\n    local x\n    local y\n    local z\n    local a\n    local \n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    for element in $input; do\n     \
    \   if [ \"$last\" != \"$element\" ]; then\n            if [ \"$count\" -gt 0\
    \ ]; then\n                output=\"$output $last\"\n            fi\n        \
    \    count=1\n            last=\"$element\"\n        else\n            ((count++))\n\
    \        fi\n    done\n    if [ \"$count\" -gt 0 ]; then\n        output=\"$output\
    \ $last\"\n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output=\"\"\n  local\
    \ count=0\n  local element\n\n  for element in $input; do\n    ((count++))\n \
    \   if [ \"$count\" -gt 1 ]; then\n      output=\"$output $element\"\n    fi\n\
    \  done\n\n  echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n    while [ \"$i\" -lt\
    \ \"$#\" ] && [ \"$count\" -lt \"$#\" ];\n    do\n        if [ \"$last\" != \"\
    $1\" ]\n        then\n            output=\"$output$1\"\n            count=$((count+1))\n\
    \            last=\"$1\"\n        else\n            ((i++))\n        fi\n    done\n\
    \    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n    while read line; do\n\
    \        if [ \"$last\" != \"$line\" ]; then\n            if [ \"$count\" -gt\
    \ 0 ]; then\n                output=\"$output$last\"\n            fi\n       \
    \     last=\"$line\"\n            count=0\n        else\n            ((count++))\n\
    \        fi\n    done <<< \"$input\"\n    if [ \"$count\" -gt 0 ]; then\n    \
    \    output=\"$output$last\"\n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local result\n    local j\n    local k\n    local len\n\
    \n    list=\"$( echo \"$list\" | sed 's/,/ /g' )\"\n    list=\"$( echo \"$list\"\
    \ | sed 's/ /\\n/g' )\"\n\n    len=\"${#list}\"\n    for (( i=0; i<len; i++ ));\
    \ do\n        tmp=\"${list[i]}\"\n        count=\"${#tmp}\"\n        for (( j=0;\
    \ j<count; j++ )); do\n            if [[ ${list[i]} == ${tmp} ]]; then\n     \
    \           list[i]=\"\"\n                break\n            fi\n        done\n\
    \    done\n\n    result=\"\"\n    for (( k=0; k<len; k++ )); do\n        result=\"\
    ${result} ${list[k]}\"\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n \
    \   remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [ \"$unique_list\"\
    \ == \"\" ]; then\n            unique_list=\"$element\"\n            count=1\n\
    \        else\n            if [ \"$element\" == \"$unique_list\" ]; then\n   \
    \             count=$(($count + 1))\n            else\n                if [ \"\
    $count\" -gt 1 ]; then\n                    unique_list=\"$unique_list $element\"\
    \n                else\n                    unique_list=\"$unique_list\"\n   \
    \             fi\n                count=1\n            fi\n        fi\n    done\n\
    \    echo \"$unique_list\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local j\n    local result\n    local element\n    local\
    \ element2\n    local element3\n    local element4\n    local element5\n    local\
    \ element6\n    local element7\n    local element8\n    local element9\n    local\
    \ element10\n    local element11\n    local element12\n    local element13\n \
    \   local element14\n    local element15\n    local element16\n    local element17\n\
    \    local element18\n    local element19\n    local element20\n    local element21\n\
    \    local element22\n    local element23\n    local element24\n    local element25\n\
    \    local element26\n    local element27\n    local element28\n    local element29\n\
    \    local element30\n    local element31\n    local element32\n    local element33\n\
    \    local element34\n    local element35\n    local element36\n    local element37\n\
    \    local element38\n    local element39\n    local element40\n    local element41\n\
    \    local element42\n    local element43\n    local element44\n    local element45\n\
    \    local element46\n    local element47\n    local element48\n    local element49\n\
    \    local element50\n    local element51\n    local element52\n    local element53\n\
    \    local element54\n    local element55\n    local element56\n    local element57\n\
    \    local element58\n    local element59\n    local element60\n    local element61\n\
    \    local element62\n    local element63\n    local element64\n    local element65\n\
    \    local element66\n    local element67\n    local element68\n    local element69\n\
    \    local element70\n    local element71\n    local element72\n    local element73\n\
    \    local element74\n    local element75\n    local element76\n    local element77\n\
    \    local element78\n    local element79\n    local element80\n    local element81\n\
    \    local element82\n    local element83\n    local element84\n    local element85\n\
    \    local element86\n    local element87\n    local element88\n    local element89\n\
    \    local element90\n    local element91\n    local element92\n    local element93\n\
    \    local element94\n    local element95\n    local element96\n    local element97\n\
    \    local \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local element\n    for element in $input; do\n       \
    \ if [ \"$count\" -eq 0 ]; then\n            output=\"$element\"\n           \
    \ count=1\n        else\n            if [ \"$element\" != \"$output\" ]; then\n\
    \                output=\"$output$count\"\n                count=1\n         \
    \   else\n                count=$((count+1))\n            fi\n        fi\n   \
    \ done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output=\"\"\n  local\
    \ count=0\n  local last=\"\"\n  while read -r line; do\n    if [[ \"$last\" !=\
    \ \"$line\" ]]; then\n      output+=\"$line\"\n      count=$((count+1))\n    fi\n\
    \    last=\"$line\"\n  done < <(echo \"$input\")\n  echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local result\n    local j\n    local element\n\n   \
    \ # Remove duplicates\n    list=\"$(echo \"$list\" | tr ' ' '\\n' | sort -u |\
    \ tr '\\n' ' ')\"\n\n    # Remove duplicates in list\n    for element in $list;\
    \ do\n        count=$(echo \"$list\" | grep -c \"$element\")\n        if [ \"\
    $count\" -gt 1 ]; then\n            tmp=\"$element\"\n            for (( j=1;\
    \ j<=count; j++ )); do\n                tmp=\"$tmp $element\"\n            done\n\
    \            list=\"$list $tmp\"\n        fi\n    done\n\n    # Remove duplicates\
    \ in result\n    result=\"\"\n    for element in $list; do\n        if [ \"$result\"\
    \ != \"$element\" ]; then\n            result=\"$result $element\"\n        fi\n\
    \    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local unique_list=\"\
    \"\n    local count=0\n    for element in $list; do\n        if [[ $element !=\
    \ $unique_list* ]]; then\n            unique_list+=\" $element\"\n           \
    \ count=$((count+1))\n        fi\n    done\n    echo \"$unique_list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local a\n    for a in\
    \ \"$@\"; do\n        local b\n        for b in \"${a[@]}\"; do\n            [[\
    \ \"$b\" == \"$a\" ]] && unset \"a[$((b))]\"\n        done\n    done\n    IFS=$'\
    \ \\t\\n'\n    echo \"${a[*]}\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2aoitfpy.sh: line 14: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    local lastlastcount=0\n    local i\n    local j\n    for i; do\n     \
    \   if [ \"$last\" != \"$i\" ]; then\n            if [ \"$lastcount\" -eq \"$lastlastcount\"\
    \ ]; then\n                output=\"$output $last\"\n                lastcount=0\n\
    \            else\n                output=\"$output $last\"\n                lastcount=0\n\
    \                lastlastcount=0\n            fi\n            last=\"$i\"\n  \
    \          lastcount=0\n            lastlastcount=0\n            lastlast=\"$i\"\
    \n        else\n            lastcount=$((lastcount+1))\n            lastlastcount=$((lastlastcount+1))\n\
    \        fi\n    done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local element\n    local tmp\n\n    # Remove duplicates\n\
    \    list=$(echo \"$list\" | tr ' ' '\\n' | sort -u)\n    list=\"${list//$'\\\
    n'/ }\"\n\n    # Remove all but the first occurrence\n    for element in $list;\
    \ do\n        count=0\n        for tmp in $list; do\n            if [ \"$element\"\
    \ == \"$tmp\" ]; then\n                count=$((count+1))\n            fi\n  \
    \      done\n        if [ \"$count\" -gt 1 ]; then\n            list=\"$list $element\"\
    \n        fi\n    done\n\n    # Remove trailing whitespace\n    list=$(echo \"\
    $list\" | sed 's/[[:space:]]*$//')\n\n    # Remove leading whitespace\n    list=$(echo\
    \ \"$list\" | sed 's/^[[:space:]]*//')\n\n    echo \"$list\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    for element in $input; do\n     \
    \   if [ \"$last\" != \"$element\" ]; then\n            count=$((count+1))\n \
    \           if [ \"$count\" -gt 1 ]; then\n                output=\"$output$element\"\
    \n            else\n                output=\"$output$last\"\n            fi\n\
    \            last=\"$element\"\n        fi\n    done\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    local lastlastcount=0\n    for element in $input; do\n        if [ \"\
    $last\" != \"$element\" ]; then\n            if [ \"$count\" -eq 0 ]; then\n \
    \               last=\"$element\"\n                lastcount=1\n            else\n\
    \                if [ \"$lastcount\" -eq \"$lastlastcount\" ]; then\n        \
    \            lastlast=\"$last\"\n                    lastlastcount=$lastcount\n\
    \                else\n                    output=\"$output $lastlast\"\n    \
    \                lastlast=\"$last\"\n                    lastlastcount=$lastcount\n\
    \                fi\n            fi\n            count=$(( $count + 1 ))\n   \
    \     else\n            count=$(( $count + 1 ))\n        fi\n    done\n    output=\"\
    $output $lastlast\"\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n    while [[ $i -lt ${#input}\
    \ ]]; do\n        if [[ ${input[$i]} == $last ]]; then\n            ((count++))\n\
    \        else\n            if [[ $count -gt 1 ]]; then\n                output+=\"\
    \ $last\"\n            fi\n            last=\"${input[$i]}\"\n            count=1\n\
    \        fi\n        ((i++))\n    done\n    if [[ $count -gt 1 ]]; then\n    \
    \    output+=\" $last\"\n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n  \
    \  remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local element\n    for element in $input; do\n       \
    \ if [[ $count -eq 0 ]]; then\n            output=\"$element\"\n            count=1\n\
    \        else\n            if [ \"$element\" == \"$output\" ]; then\n        \
    \        count=$((count+1))\n            else\n                output=\"$output$element\"\
    \n                count=1\n            fi\n        fi\n    done\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local i\n    local count\n    local j\n    for ((i = 0; i < ${#input}; i++));\
    \ do\n        count=$(echo \"${input[i]}\" | wc -c)\n        if [[ ${count} -gt\
    \ 1 ]]; then\n            for ((j = i + 1; j < ${#input}; j++)); do\n        \
    \        if [[ \"${input[i]}\" == \"${input[j]}\" ]]; then\n                 \
    \   input[j]=\n                    count=$((${count} - 1))\n                 \
    \   break\n                fi\n            done\n        fi\n        output+=\"\
    ${input[i]} \"\n    done\n    echo \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local list=\"$1\"\n  local output\n  output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n  echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local j\n    local k\n    local tmp\n\n    # Count how\
    \ many times each element appears in the input\n    count=($(echo \"$input\" |\
    \ tr \" \" \"\\n\" | sort | uniq -c))\n\n    # Sort the input in descending order\
    \ of count\n    count=($(echo \"${count[@]}\" | sort -nr))\n\n    # Loop through\
    \ the sorted input\n    for ((i = 0; i < ${#count[@]}; i++)); do\n        # Keep\
    \ track of which element we're currently looking at\n        k=${i}\n\n      \
    \  # Loop through the sorted input again\n        for ((j = k + 1; j < ${#count[@]};\
    \ j++)); do\n            # If the current element is the same as the one we're\
    \ looking at,\n            # remove it from the output\n            if [[ ${count[$k]}\
    \ -eq ${count[$j]} ]]; then\n                tmp=${count[$k]}\n              \
    \  count[$k]=$count[$j]\n                count[$j]=$tmp\n            fi\n    \
    \    done\n\n        # Output the element that we're currently looking at\n  \
    \      output+=(${count[$i]})\n    done\n\n    # Output the remaining elements\n\
    \    output+=(${count[@]})\n\n    # Return an array with all the unique elements\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    for element in $input; do\n     \
    \   if [ \"$last\" != \"$element\" ]; then\n            if [ \"$count\" -gt 0\
    \ ]; then\n                output=\"$output$last\"\n            fi\n         \
    \   count=1\n            last=\"$element\"\n        else\n            ((count++))\n\
    \        fi\n    done\n    if [ \"$count\" -gt 0 ]; then\n        output=\"$output$last\"\
    \n    fi\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local count\n    local j\n    local k\n    local tmp\n    local tmp2\n\
    \    local tmp3\n    local tmp4\n    local tmp5\n    local tmp6\n    local tmp7\n\
    \    local tmp8\n    local tmp9\n    local tmp10\n    local tmp11\n    local tmp12\n\
    \    local tmp13\n    local tmp14\n    local tmp15\n    local tmp16\n    local\
    \ tmp17\n    local tmp18\n    local tmp19\n    local tmp20\n    local tmp21\n\
    \    local tmp22\n    local tmp23\n    local tmp24\n    local tmp25\n    local\
    \ tmp26\n    local tmp27\n    local tmp28\n    local tmp29\n    local tmp30\n\
    \    local tmp31\n    local tmp32\n    local tmp33\n    local tmp34\n    local\
    \ tmp35\n    local tmp36\n    local tmp37\n    local tmp38\n    local tmp39\n\
    \    local tmp40\n    local tmp41\n    local tmp42\n    local tmp43\n    local\
    \ tmp44\n    local tmp45\n    local tmp46\n    local tmp47\n    local tmp48\n\
    \    local tmp49\n    local tmp50\n    local tmp51\n    local tmp52\n    local\
    \ tmp53\n    local tmp54\n    local tmp55\n    local tmp56\n    local tmp57\n\
    \    local tmp58\n    local tmp59\n    local tmp60\n    local tmp61\n    local\
    \ tmp62\n    local tmp63\n    local tmp64\n    local tmp65\n    local tmp66\n\
    \    local tmp67\n    local tmp68\n    local tmp69\n    local tmp70\n    local\
    \ tmp71\n    local tmp72\n    local tmp73\n    local tmp74\n    local tmp75\n\
    \    local tmp76\n    local tmp77\n    local tmp78\n    local tmp79\n    local\
    \ tmp80\n    local tmp81\n    local tmp82\n    local tmp83\n    local tmp84\n\
    \    local tmp85\n    local tmp86\n    local tmp87\n    local tmp88\n    local\
    \ tmp89\n    local tmp90\n    local tmp91\n    local tmp92\n    local tmp93\n\
    \    local tmp94\n    local tmp95\n    local tmp96\n    local tmp97\n    local\
    \ \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | sort -u)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    local\
    \ i\n    local j\n    local count\n    local element\n    local tmp\n    local\
    \ count2\n    local element2\n    local tmp2\n    local count3\n    local element3\n\
    \    local tmp3\n    local count4\n    local element4\n    local tmp4\n    local\
    \ count5\n    local element5\n    local tmp5\n    local count6\n    local element6\n\
    \    local tmp6\n    local count7\n    local element7\n    local tmp7\n    local\
    \ count8\n    local element8\n    local tmp8\n    local count9\n    local element9\n\
    \    local tmp9\n    local count10\n    local element10\n    local tmp10\n   \
    \ local count11\n    local element11\n    local tmp11\n    local count12\n   \
    \ local element12\n    local tmp12\n    local count13\n    local element13\n \
    \   local tmp13\n    local count14\n    local element14\n    local tmp14\n   \
    \ local count15\n    local element15\n    local tmp15\n    local count16\n   \
    \ local element16\n    local tmp16\n    local count17\n    local element17\n \
    \   local tmp17\n    local count18\n    local element18\n    local tmp18\n   \
    \ local count19\n    local element19\n    local tmp19\n    local count20\n   \
    \ local element20\n    local tmp20\n    local count21\n    local element21\n \
    \   local tmp21\n    local count22\n    local element22\n    local tmp22\n   \
    \ local count23\n    local element23\n    local tmp23\n    local count24\n   \
    \ local element24\n    local tmp24\n    local count25\n    local element25\n \
    \   local tmp25\n    local count26\n    local element26\n    local tmp26\n   \
    \ local count27\n    local element27\n    local tmp27\n    local count28\n   \
    \ local element28\n    local tmp28\n    local count29\n    local element29\n \
    \   local tmp29\n    local count30\n    local element30\n    local tmp30\n   \
    \ local count31\n    local element31\n    local tmp31\n    local count32\n   \
    \ local element32\n    local tmp32\n    local count33\n    local element33\n \
    \   local tmp33\n    local \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local tmp\n    local\
    \ count\n    local i\n    local j\n    local output\n\n    # Split list into words\
    \ and remove duplicates\n    IFS=$'\\n' read -r -a words <<< \"$list\"\n    set\
    \ -- \"${words[@]}\"\n\n    # Count number of occurrences of each word\n    for\
    \ i in \"${!list[@]}\"; do\n        ((count[$i]++))\n    done\n\n    # Remove\
    \ words that occur more than once\n    for i in \"${!list[@]}\"; do\n        if\
    \ ((count[$i]>1)); then\n            for j in \"${!list[@]}\"; do\n          \
    \      if ((count[$j]>1)); then\n                    if ((count[$i]==count[$j]));\
    \ then\n                        tmp=\"${list[$i]}\"\n                        list[$i]=\"\
    ${list[$j]}\"\n                        list[$j]=\"$tmp\"\n                   \
    \ fi\n                fi\n            done\n        fi\n    done\n\n    # Join\
    \ list into single line\n    output=$(IFS=' '; echo \"${list[*]}\")\n\n    # Return\
    \ result\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local lastcount=0\n    local lastlast=\"\
    \"\n    while read -r line; do\n        if [ \"$last\" != \"$line\" ]; then\n\
    \            if [ \"$lastcount\" -gt \"$count\" ]; then\n                lastlast=\"\
    $last\"\n                lastcount=\"$count\"\n            fi\n            last=\"\
    $line\"\n            count=$((count+1))\n        else\n            count=$((count+1))\n\
    \        fi\n    done <<< \"$input\"\n    if [ \"$lastcount\" -gt \"$count\" ];\
    \ then\n        lastlast=\"$last\"\n        lastcount=\"$count\"\n    fi\n   \
    \ if [ \"$lastlast\" != \"\" ]; then\n        output \"$lastlast\"\n    fi\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"${output[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local IFS=$'\\n'\n    local unique=()\n   \
    \ local output\n    for input in \"$@\"; do\n        local output\n        output=()\n\
    \        for element in $input; do\n            local -n found=found\n       \
    \     if [[ ${unique[$element]} ]]; then\n                output+=(\"$element\"\
    )\n                found=()\n            else\n                found+=(\"$element\"\
    )\n            fi\n        done\n        unique+=(\"${output[@]}\")\n    done\n\
    \    echo \"${unique[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpminoidte.sh: line 16: local: warning: found: circular name reference

    /tmp/tmpminoidte.sh: line 16: warning: found: circular name reference

    /tmp/tmpminoidte.sh: line 17: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    '
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort -u | tr \"\\n\" \" \")\n    echo \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local element\n\n    for element in $input; do\n     \
    \   if [ \"$count\" -eq 0 ]; then\n            output=\"$element\"\n         \
    \   count=$((count+1))\n        elif [ \"$element\" != \"$output\" ]; then\n \
    \           output=\"$output$count\"\n            count=$((count+1))\n       \
    \ fi\n    done\n\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local element\n    for element in $input; do\n       \
    \ if [ \"$count\" -eq 0 ]; then\n            output=\"$element\"\n           \
    \ count=1\n        else\n            if [ \"$element\" != \"$output\" ]; then\n\
    \                count=$((count+1))\n                output=\"$output$count\"\n\
    \            fi\n        fi\n    done\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n  local input=\"$1\"\n  local output\n  output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n  echo \"$output\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    for element in $input; do\n     \
    \   if [ \"$last\" != \"$element\" ]; then\n            if [ \"$count\" -eq 0\
    \ ]; then\n                output=\"$element\"\n            else\n           \
    \     output=\"$output$count$element\"\n            fi\n            count=1\n\
    \        else\n            ((count++))\n        fi\n        last=\"$element\"\n\
    \    done\n    echo \"$output\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | sort | uniq -d)\n    echo \"$output\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output=\"\"\n\
    \    local count=0\n    local last=\"\"\n    local i=0\n\n    while read -r line;\
    \ do\n        if [ \"$last\" != \"$line\" ]; then\n            if [ \"$count\"\
    \ -gt 0 ]; then\n                echo \"$last\"\n            fi\n            count=1\n\
    \            last=\"$line\"\n        else\n            (( count++ ))\n       \
    \ fi\n    done <<< \"$input\"\n\n    if [ \"$count\" -gt 0 ]; then\n        echo\
    \ \"$last\"\n    fi\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031571
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    echo \"$output\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local input=\"$1\"\n    local output\n    output=$(echo\
    \ \"$input\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n#\n# $1 is a space-separated\
    \ list\nremove_duplicates() {\n    local list=\"$1\"\n    local output\n    output=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort | uniq -d)\n    echo \"$output\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660031570
