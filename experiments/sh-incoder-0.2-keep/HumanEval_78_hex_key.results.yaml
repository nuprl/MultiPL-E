language: sh
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz78t2147.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyvx8ii10.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local num=$1\n  local digits=$(echo $num | sed 's/\\([0-9A-F]\\)/\\1/g')\n \
    \ local primes=$(echo $digits | sed 's/\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\)\\([0-9A-F]\\\
    )\\([0-9A-F]\\)\\([0-9A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1nqloknc.sh: line 23: unexpected EOF while looking for matching
    `''''

    /tmp/tmp1nqloknc.sh: line 41: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_count=0\n    local prime_digits=()\n    local\
    \ prime_digits_count=()\n    local prime_digits_sum=0\n    local prime_digits_sum_count=0\n\
    \    local prime_digits_sum_sum=0\n    local prime_digits_sum_sum_count=0\n  \
    \  local prime_digits_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_count=0\n    local prime_digits=()\n    local\
    \ prime_digits_count=()\n    local prime_digits_count_tmp=0\n    local prime_digits_count_tmp2=0\n\
    \    local prime_digits_count_tmp3=0\n    local prime_digits_count_tmp4=0\n  \
    \  local prime_digits_count_tmp5=0\n    local prime_digits_count_tmp6=0\n    local\
    \ prime_digits_count_tmp7=0\n    local prime_digits_count_tmp8=0\n    local prime_digits_count_tmp9=0\n\
    \    local prime_digits_count_tmp10=0\n    local prime_digits_count_tmp11=0\n\
    \    local prime_digits_count_tmp12=0\n    local prime_digits_count_tmp13=0\n\
    \    local prime_digits_count_tmp14=0\n    local prime_digits_count_tmp15=0\n\
    \    local prime_digits_count_tmp16=0\n    local prime_digits_count_tmp17=0\n\
    \    local prime_digits_count_tmp18=0\n    local prime_digits_count_tmp19=0\n\
    \    local prime_digits_count_tmp20=0\n    local prime_digits_count_tmp21=0\n\
    \    local prime_digits_count_tmp22=0\n    local prime_digits_count_tmp23=0\n\
    \    local prime_digits_count_tmp24=0\n    local prime_digits_count_tmp25=0\n\
    \    local prime_digits_count_tmp26=0\n    local prime_digits_count_tmp27=0\n\
    \    local prime_digits_count_tmp28=0\n    local prime_digits_count_tmp29=0\n\
    \    local prime_digits_count_tmp30=0\n    local prime_digits_count_tmp31=0\n\
    \    local prime_digits_count_tmp32=0\n    local prime_digits_count_tmp33=0\n\
    \    local prime_digits_count_tmp34=0\n    local prime_digits_count_tmp35=0\n\
    \    local prime_digits_count_tmp36=0\n    local prime_digits_count_tmp37=0\n\
    \    local prime_digits_count_tmp38=0\n    local prime_digits_count_tmp39=0\n\
    \    local prime_digits_count_tmp40=0\n    local prime_digits_count_tmp41=0\n\
    \    local prime_digits_count_tmp42=0\n    local prime_digits_count_tmp43=0\n\
    \    local prime_digits_count_tmp44=0\n\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4i21fryx.sh: line 60: unexpected EOF while looking for matching
    `''''

    /tmp/tmp4i21fryx.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\
    \ '[A-Z\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy0jsas2.sh: line 66: unexpected EOF while looking for matching
    `''''

    /tmp/tmpsy0jsas2.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=${hex_key//[0-9]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkxm4gu4z.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00olir94.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmp00olir94.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local num=$1\n  local prime_count=0\n  local prime_digits=()\n  local prime_digits_len=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_count=()\n\
    \  local prime_digits_count=()\n  local prime_digits_count=()\n  local prime_digits_\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00olir94.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmp00olir94.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\
    \ '[A-Z\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy0jsas2.sh: line 66: unexpected EOF while looking for matching
    `''''

    /tmp/tmpsy0jsas2.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" |\
    \ tr '[0-9]' '[a-z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n  \
    \  local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n    local hex_key\n  \
    \  hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"\
    $hex_key\" | tr '[a-z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr\
    \ '[a-z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n  \
    \  local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n    local hex_key\n  \
    \  hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpionsq1h6.sh: line 68: unexpected EOF while looking for matching
    `''''

    /tmp/tmpionsq1h6.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key3\n  hex_key3=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key4\n  hex_key4=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key5\n  hex_key5=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key6\n  hex_key6=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key7\n  hex_key7=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key8\n  hex_key8=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key9\n  hex_key9=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key10\n  hex_key10=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key11\n  hex_key11=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key12\n  hex_key12=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key13\n  hex_key13=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key14\n  hex_key14=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key15\n  hex_key15=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key16\n  hex_key16=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key17\n  hex_key17=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key18\n  hex_key18=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key19\n  hex_key19=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key20\n  hex_key20=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key21\n  \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local num_len=${#num}\n    local num_digits=${#num_len}\n\
    \    local num_digits_mod2=${num_digits/2}\n    local num_digits_mod4=${num_digits_mod2/4}\n\
    \    local num_digits_mod8=${num_digits_mod4/8}\n    local num_digits_mod16=${num_digits_mod8/16}\n\
    \    local num_digits_mod32=${num_digits_mod16/32}\n    local num_digits_mod64=${num_digits_mod32/64}\n\
    \    local num_digits_mod128=${num_digits_mod64/128}\n    local num_digits_mod256=${num_digits_mod128/256}\n\
    \    local num_digits_mod512=${num_digits_mod256/512}\n    local num_digits_mod1024=${num_digits_mod512/1024}\n\
    \    local num_digits_mod2048=${num_digits_mod1024/2048}\n    local num_digits_mod4096=${num_digits_mod2048/4096}\n\
    \    local num_digits_mod8192=${num_digits_mod4096/8192}\n    local num_digits_mod16384=${num_digits_mod8192/16384}\n\
    \    local num_digits_mod32768=${num_digits_mod16384/32768}\n    local num_digits_mod65536=${num_digits_mod32768/65536}\n\
    \    local num_digits_mod131072=${num_digits_mod65536/131072}\n    local num_digits_mod262144=${num_digits_mod131072/262144}\n\
    \    local num_digits_mod524288=${num_digits_mod262144/524288}\n    local num_digits_mod1048576=${num_digits_mod524288/1048576}\n\
    \    local num_digits_mod2097152=${num_digits_mod1048576/2097152}\n    local num_digits_mod4194304=${num_digits_mod2097152/4194304}\n\
    \    local num_digits_mod8388608=${num_digits_mod4194304/8388608}\n    local num_digits_mod16777216=${num_digits_mod8388608/16777216}\n\
    \    local num_digits_mod33554432=${num_digits_mod16777216/33554432}\n    local\
    \ num_digits_mod67108864\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local num_len=$(echo $num | wc -c)\n    local num_digits=$(echo\
    \ $num_len | awk '{print $1}')\n    local num_chars=$(echo $num_len | awk '{print\
    \ $2}')\n    local num_hex=$(echo $num_len | awk '{print $3}')\n    local num_hex_len=$(echo\
    \ $num_hex | wc -c)\n    local num_hex_digits=$(echo $num_hex_len | awk '{print\
    \ $1}')\n    local num_hex_chars=$(echo $num_hex_len | awk '{print $2}')\n   \
    \ local num_hex_hex=$(echo $num_hex_len | awk '{print $3}')\n    local num_hex_hex_digits=$(echo\
    \ $num_hex_hex | wc -c)\n    local num_hex_hex_chars=$(echo $num_hex_hex | awk\
    \ '{print $1}')\n    local num_hex_hex_hex=$(echo $num_hex_hex | awk '{print $2}')\n\
    \    local num_hex_hex_hex_digits=$(echo $num_hex_hex_hex | wc -c)\n    local\
    \ num_hex_hex_hex_chars=$(echo $num_hex_hex_hex | awk '{print $1}')\n    local\
    \ num_hex_hex_hex_hex=$(echo $num_hex_hex_hex | awk '{print $2}')\n    local num_hex_hex_hex_hex_digits=$(echo\
    \ $num_hex_hex_hex_hex | wc -c)\n    local num_hex_hex_hex_hex_chars=$(echo $num_hex_hex_hex_hex\
    \ | awk '{print $1}')\n    local num_hex_hex_hex_hex_hex=$(echo $num_hex_hex_hex_hex\
    \ | awk '{print $2}')\n    local num_hex_hex_hex_hex_hex_digits=$(echo $num_hex_hex_hex_hex_hex\
    \ | wc -c)\n    local num_hex_hex_hex_hex_hex_chars=$(echo $num_hex_hex_hex_hex_hex\
    \ | awk '{print $1}')\n    local num_hex_hex_hex_hex_hex_hex=$(echo $num_hex_hex_hex_hex_hex\
    \ | awk '{print $2}')\n    local num_hex_hex_hex_hex_hex_hex_digits=$(echo $num_hex_hex_hex_hex_hex_hex\
    \ | wc -c)\n    local num_hex_hex_hex_hex_hex_hex_chars=$(echo $num_hex_hex_hex_hex_hex_hex\
    \ | awk '{print $1}')\n    local num_hex_hex_hex_hex_hex_hex_hex=$(echo $num_hex_hex_hex_hex_hex_hex\
    \ | awk '{print $2}')\n    local num_hex_hex_hex_hex_hex_hex_digits=$(echo $num_hex_hex_hex_hex_hex_hex\
    \ | wc -c)\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34ameer0.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\(.\\)/\\\\x\\1\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdmnj1xqj.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmpdmnj1xqj.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpweyu9gy6.sh: line 56: unexpected EOF while looking for matching
    `''''

    /tmp/tmpweyu9gy6.sh: line 74: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppgizlgrm.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmppgizlgrm.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]'\
    \ '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfole2e_0.sh: line 70: unexpected EOF while looking for matching
    `''''

    /tmp/tmpfole2e_0.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo \"\
    $hex_key\" | tr -d '[:space:]')\n    local hex_key3\n    hex_key3=$(echo \"$hex_key2\"\
    \ | tr -d '[:space:]')\n    local hex_key4\n    hex_key4=$(echo \"$hex_key3\"\
    \ | tr -d '[:space:]')\n    local hex_key5\n    hex_key5=$(echo \"$hex_key4\"\
    \ | tr -d '[:space:]')\n    local hex_key6\n    hex_key6=$(echo \"$hex_key5\"\
    \ | tr -d '[:space:]')\n    local hex_key7\n    hex_key7=$(echo \"$hex_key6\"\
    \ | tr -d '[:space:]')\n    local hex_key8\n    hex_key8=$(echo \"$hex_key7\"\
    \ | tr -d '[:space:]')\n    local hex_key9\n    hex_key9=$(echo \"$hex_key8\"\
    \ | tr -d '[:space:]')\n    local hex_key10\n    hex_key10=$(echo \"$hex_key9\"\
    \ | tr -d '[:space:]')\n    local hex_key11\n    hex_key11=$(echo \"$hex_key10\"\
    \ | tr -d '[:space:]')\n    local hex_key12\n    hex_key12=$(echo \"$hex_key11\"\
    \ | tr -d '[:space:]')\n    local hex_key13\n    hex_key13=$(echo \"$hex_key12\"\
    \ | tr -d '[:space:]')\n    local hex_key14\n    hex_key14=$(echo \"$hex_key13\"\
    \ | tr -d '[:space:]')\n    local hex_key15\n    hex_key15=$(echo \"$hex_key14\"\
    \ | tr -d '[:space:]')\n    local hex_key16\n    hex_key16=$(echo \"$hex_key15\"\
    \ | tr -d '[:space:]')\n    local hex_key17\n    hex_key17=$(echo \"$hex_key16\"\
    \ | tr -d '[:space:]')\n    local hex_key18\n    hex_key18=$(echo \"$hex_key17\"\
    \ | tr -d '[:space:]')\n    local hex_key19\n    hex_key19=$(echo \"$hex_key18\"\
    \ | tr -d '[:space:]')\n    local hex_key20\n    hex_key20=$(echo \"$hex_key19\"\
    \ | tr -d '[:space:]')\n    local hex_key21\n    hex\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpek8b8pbh.sh: line 62: hex: command not found

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa1htzd8g.sh: line 60: unexpected EOF while looking for matching
    `''''

    /tmp/tmpa1htzd8g.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\
    \\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]*\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk361ktgn.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpk361ktgn.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key=${hex_key//[!A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[A-F\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz78t2147.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/[^0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/^[0-9A-F]//g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/^[0-9A-F]//g')\n    \n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=$(echo \"$hex_key\"\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed\
    \ -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n\
    \  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo\
    \ \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\"\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed\
    \ -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n\
    \  hex_key=$(echo \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo\
    \ \"$hex_key\" | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\"\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed\
    \ -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key=$(echo \"$hex_key\" | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g')\n  hex\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqed30qvh.sh: line 43: hex: command not found

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    local hex_keys\n    local hex_keys_len\n\
    \    local hex_keys_len2\n    local hex_keys_len3\n    local hex_keys_len4\n \
    \   local hex_keys_len5\n    local hex_keys_len6\n    local hex_keys_len7\n  \
    \  local hex_keys_len8\n    local hex_keys_len9\n    local hex_keys_len10\n  \
    \  local hex_keys_len11\n    local hex_keys_len12\n    local hex_keys_len13\n\
    \    local hex_keys_len14\n    local hex_keys_len15\n    local hex_keys_len16\n\
    \    local hex_keys_len17\n    local hex_keys_len18\n    local hex_keys_len19\n\
    \    local hex_keys_len20\n    local hex_keys_len21\n    local hex_keys_len22\n\
    \    local hex_keys_len23\n    local hex_keys_len24\n    local hex_keys_len25\n\
    \    local hex_keys_len26\n    local hex_keys_len27\n    local hex_keys_len28\n\
    \    local hex_keys_len29\n    local hex_keys_len30\n    local hex_keys_len31\n\
    \    local hex_keys_len32\n    local hex_keys_len33\n    local hex_keys_len34\n\
    \    local hex_keys_len35\n    local hex_keys_len36\n    local hex_keys_len37\n\
    \    local hex_keys_len38\n    local hex_keys_len39\n    local hex_keys_len40\n\
    \    local hex_keys_len41\n    local hex_keys_len42\n    local hex_keys_len43\n\
    \    local hex_keys_len44\n    local hex_keys_len45\n    local hex_keys_len46\n\
    \    local hex_keys_len47\n    local hex_keys_len48\n    local hex_keys_len49\n\
    \    local hex_keys_len50\n    local hex_keys_len51\n    local hex_keys_len52\n\
    \    local hex_keys_len53\n    local hex_keys_len54\n    local hex_keys_len55\n\
    \    local hex_keys_len56\n    local hex_keys_len57\n    local hex_keys_len58\n\
    \    local hex_keys_len59\n    local hex_keys_len60\n    local hex_keys_len61\n\
    \    local hex_keys_len62\n\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00olir94.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmp00olir94.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=${hex_key//[!A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660032436
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/[^0-9A-F]//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key |\
    \ sed 's/[0-9A-F]//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key | sed\
    \ 's/[0-9A-F]//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key | sed 's/[0-9A-F]//g')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | sed 's/[0-9A-F]//g')\n   \
    \ local hex_key7\n    hex_key7=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local\
    \ hex_key8\n    hex_key8=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local hex_key9\n\
    \    hex_key9=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local hex_key10\n  \
    \  hex_key10=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local hex_key11\n   \
    \ hex_key11=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local hex_key12\n    hex_key12=$(echo\
    \ $hex_key | sed 's/[0-9A-F]//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/[0-9A-F]//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key |\
    \ sed 's/[0-9A-F]//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key | sed\
    \ 's/[0-9A-F]//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key | sed 's/[0-9A-F]//g')\n\
    \    local hex_key17\n    hex_key17=$(echo $hex_key | sed 's/[0-9A-F]//g')\n \
    \   local hex_key18\n    hex_key18=$(echo $hex_key | sed 's/[0-9A-F]//g')\n  \
    \  local hex_key19\n    hex_key19=$(echo $hex_key | sed 's/[0-9A-F]//g')\n   \
    \ local hex_key20\n    hex_key20=$(echo $hex_key | sed 's/[0-9A-F]//g')\n    local\
    \ hex_key21\n    hex_key21=$(echo $hex_key | sed 's/[0-9A-F]//g')\n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" |\
    \ tr '[0-9]' '[a-z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr\
    \ '[a-z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[A-Z]')\n  \
    \  local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[a-z]')\n    local\
    \ hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n    local hex_key\n  \
    \  hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"\
    $hex_key\" | tr '[a-z]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr\
    \ '[a-z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[A-Z]')\n  \
    \  local hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[a-z]')\n    local\
    \ hex_key\n    hex_key=$(echo \"$hex_key\" | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo \"$hex_key\" | tr '[a-z]' '[0-9]')\n    local hex_key\n  \
    \  hex_key=$(echo \"$hex_key\" | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ \"$hex_key\" | tr '[0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx66xw__k.sh: line 68: unexpected EOF while looking for matching
    `''''

    /tmp/tmpx66xw__k.sh: line 86: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${hex_key//[A-F]/}\n    local hex_key\n    hex_key=${hex_key//[a-f]/}\n\
    \    local hex_key\n    hex_key=${\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjzkdxq0k.sh: line 100: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_digit\n    local hex_digit_count\n\
    \    local hex_digit_count2\n    local hex_digit_count3\n    local hex_digit_count4\n\
    \    local hex_digit_count5\n    local hex_digit_count6\n    local hex_digit_count7\n\
    \    local hex_digit_count8\n    local hex_digit_count9\n    local hex_digit_count10\n\
    \    local hex_digit_count11\n    local hex_digit_count12\n    local hex_digit_count13\n\
    \    local hex_digit_count14\n    local hex_digit_count15\n    local hex_digit_count16\n\
    \    local hex_digit_count17\n    local hex_digit_count18\n    local hex_digit_count19\n\
    \    local hex_digit_count20\n    local hex_digit_count21\n    local hex_digit_count22\n\
    \    local hex_digit_count23\n    local hex_digit_count24\n    local hex_digit_count25\n\
    \    local hex_digit_count26\n    local hex_digit_count27\n    local hex_digit_count28\n\
    \    local hex_digit_count29\n    local hex_digit_count30\n    local hex_digit_count31\n\
    \    local hex_digit_count32\n    local hex_digit_count33\n    local hex_digit_count34\n\
    \    local hex_digit_count35\n    local hex_digit_count36\n    local hex_digit_count37\n\
    \    local hex_digit_count38\n    local hex_digit_count39\n    local hex_digit_count40\n\
    \    local hex_digit_count41\n    local hex_digit_count42\n    local hex_digit_count43\n\
    \    local hex_digit_count44\n    local hex_digit_count45\n    local hex_digit_count46\n\
    \    local hex_digit_count47\n    local hex_digit_count48\n    local hex_digit_count49\n\
    \    local hex_digit_count50\n    local hex_digit_count51\n    local hex_digit_count52\n\
    \    local hex_digit_count53\n    local hex_digit_count54\n    local hex_digit_count55\n\
    \    local hex_digit_count56\n    local hex_digit_count57\n    local hex_digit_count58\n\
    \    local hex_digit_count59\n    local hex_digit_count60\n    local hex_digit_count61\n\
    \    local hex_digit_count62\n    local hex_digit_count63\n    local hex_digit_count64\n\
    \    local hex_digit_count65\n    local hex_digit_count66\n    local hex_digit_count67\n\
    \    local hex_digit_count68\n    local hex_digit_count69\n    local hex_digit_count70\n\
    \    local hex_digit_count71\n\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    local hex_keys\n    local hex_keys_len\n\
    \    local hex_keys_len2\n    local hex_keys_len3\n    local hex_keys_len4\n \
    \   local hex_keys_len5\n    local hex_keys_len6\n    local hex_keys_len7\n  \
    \  local hex_keys_len8\n    local hex_keys_len9\n    local hex_keys_len10\n  \
    \  local hex_keys_len11\n    local hex_keys_len12\n    local hex_keys_len13\n\
    \    local hex_keys_len14\n    local hex_keys_len15\n    local hex_keys_len16\n\
    \    local hex_keys_len17\n    local hex_keys_len18\n    local hex_keys_len19\n\
    \    local hex_keys_len20\n    local hex_keys_len21\n    local hex_keys_len22\n\
    \    local hex_keys_len23\n    local hex_keys_len24\n    local hex_keys_len25\n\
    \    local hex_keys_len26\n    local hex_keys_len27\n    local hex_keys_len28\n\
    \    local hex_keys_len29\n    local hex_keys_len30\n    local hex_keys_len31\n\
    \    local hex_keys_len32\n    local hex_keys_len33\n    local hex_keys_len34\n\
    \    local hex_keys_len35\n    local hex_keys_len36\n    local hex_keys_len37\n\
    \    local hex_keys_len38\n    local hex_keys_len39\n    local hex_keys_len40\n\
    \    local hex_keys_len41\n    local hex_keys_len42\n    local hex_keys_len43\n\
    \    local hex_keys_len44\n    local hex_keys_len45\n    local hex_keys_len46\n\
    \    local hex_keys_len47\n    local hex_keys_len48\n    local hex_keys_len49\n\
    \    local hex_keys_len50\n    local hex_keys_len51\n    local hex_keys_len52\n\
    \    local hex_keys_len53\n    local hex_keys_len54\n    local hex_keys_len55\n\
    \    local hex_keys_len56\n    local hex_keys_len57\n    local hex_keys_len58\n\
    \    local hex_keys_len59\n    local hex_keys_len60\n    local hex_keys_len61\n\
    \    local hex_keys_len62\n\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa1htzd8g.sh: line 60: unexpected EOF while looking for matching
    `''''

    /tmp/tmpa1htzd8g.sh: line 78: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\
    \ '[A-Z\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy0jsas2.sh: line 66: unexpected EOF while looking for matching
    `''''

    /tmp/tmpsy0jsas2.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\
    \\x\\1/g' | sed -e 's/\\([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppgizlgrm.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmppgizlgrm.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_count=0\n    local prime_digits=$(echo $num\
    \ | sed 's/\\([0-9A-F]\\)/\\1/g')\n    local prime_digits_len=$(echo $prime_digits\
    \ | wc -w)\n    local prime_digits_str=$(echo $prime_digits | sed 's/ //g')\n\
    \    local prime_digits_str_len=$(echo $prime_digits_str | wc -w)\n    local prime_digits_str_arr=($prime_digits_str)\n\
    \    local prime_digits_str_arr_len=${#prime_digits_str_arr[@]}\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[0-9]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[a-z]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[0-9]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[a-z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]'\
    \ '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[0-9]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3xl8nlsv.sh: line 70: unexpected EOF while looking for matching
    `''''

    /tmp/tmp3xl8nlsv.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  hex_key2=$(echo $hex_key | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\\
    ([0-9A-F]\\)/\\\\x\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzj2zaw6k.sh: line 25: unexpected EOF while looking for matching
    `''''

    /tmp/tmpzj2zaw6k.sh: line 43: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\
    \ '[A-Z\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy0jsas2.sh: line 66: unexpected EOF while looking for matching
    `''''

    /tmp/tmpsy0jsas2.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ sed 's/[^0-9A-F]//g')\n  local hex_key3\n  hex_key3=$(echo $hex_key | sed 's/[0-9A-F]//g')\n\
    \  local hex_key4\n  hex_key4=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F]//g')\n\
    \  local hex_key5\n  hex_key5=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key6\n  hex_key6=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key7\n  hex_key7=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key8\n  hex_key8=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key9\n  hex_key9=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key10\n  hex_key10=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key11\n  hex_key11=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key12\n  hex_key12=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key13\n  hex_key13=$(echo $hex_key | sed 's/[0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F][0-9A-F]//g')\n\
    \  local hex_key14\n  hex_key14=$(echo $hex_key | sed 's/[0-9A-F][0-9A-\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc5ld39zd.sh: line 48: unexpected EOF while looking for matching
    `''''

    /tmp/tmpc5ld39zd.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-F]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-F]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[A-Z]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[A-Z]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[A-Z]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[A-Z]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[A-Z]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[A-Z]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[A-Z]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[A-Z]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz17_8aho.sh: line 66: unexpected EOF while looking for matching
    `)''

    /tmp/tmpz17_8aho.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local num_len=${#num}\n    local num_digits=${#num_len}\n\
    \    local num_primes=0\n    local num_primes_digits=0\n    local num_primes_digits_sum=0\n\
    \    local num_primes_digits_product=0\n    local num_primes_digits_product2=0\n\
    \    local num_primes_digits_product3=0\n    local num_primes_digits_product4=0\n\
    \    local num_primes_digits_product5=0\n    local num_primes_digits_product6=0\n\
    \    local num_primes_digits_product7=0\n    local num_primes_digits_product8=0\n\
    \    local num_primes_digits_product9=0\n    local num_primes_digits_product10=0\n\
    \    local num_primes_digits_product11=0\n    local num_primes_digits_product12=0\n\
    \    local num_primes_digits_product13=0\n    local num_primes_digits_product14=0\n\
    \    local num_primes_digits_product15=0\n    local num_primes_digits_product16=0\n\
    \    local num_primes_digits_product17=0\n    local num_primes_digits_product18=0\n\
    \    local num_primes_digits_product19=0\n    local num_primes_digits_product20=0\n\
    \    local num_primes_digits_product21=0\n    local num_primes_digits_product22=0\n\
    \    local num_primes_digits_product23=0\n    local num_primes_digits_product24=0\n\
    \    local num_primes_digits_product25=0\n    local num_primes_digits_product26=0\n\
    \    local num_primes_digits_product27=0\n    local num_primes_digits_product28=0\n\
    \    local num_primes_digits_product29=0\n    local num_primes_digits_product30=0\n\
    \    local num_primes_digits_product31=0\n    local num_primes_digits_product32=0\n\
    \    local num_primes_digits_product33=0\n    local num_primes_digits_product34=0\n\
    \    local num_primes_digits_product35=0\n    local num_primes_digits_product36=0\n\
    \    local num_primes_digits_product37=0\n    local num_primes_digits_product38=0\n\
    \    local num_primes_digits_product39=0\n    local num_primes_digits_product40=0\n\
    \    local num_primes_digits_product41=0\n    local num_primes_digits_product42=0\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local num=$1\n  local prime_count=0\n  local prime_digits=()\n  local prime_digits_count=()\n\
    \  local prime_digits_sum=0\n  local prime_digits_sum_count=0\n  local prime_digits_sum_prime_count=0\n\
    \  local prime_digits_sum_prime_digits=()\n  local prime_digits_sum_prime_digits_count=0\n\
    \  local prime_digits_sum_prime_digits_sum=0\n  local prime_digits_sum_prime_digits_sum_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_count=0\n  local prime_digits_sum_prime_digits_sum_prime_digits=()\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_count=0\n  local prime_digits_sum_prime_digits_sum_prime_digits_sum=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_count=0\n  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits=()\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits=()\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_count=0\n\
    \  local prime_digits_sum_prime_digits_sum_prime_digits_sum_prime_\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local num_len=$(expr length \"$num\")\n    local num_digits=$(expr\
    \ ${num_len} - 1)\n    local num_primes=$(expr ${num_digits} * ${num_digits} *\
    \ ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits} * ${num_digits}\
    \ * ${num_digits} * ${num_digits} * ${num_digits} * \n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5w4s8os8.sh: line 24: unexpected EOF while looking for matching
    `)''

    /tmp/tmp5w4s8os8.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key | sed 's/\\\
    (.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n\
    \    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo\
    \ $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed\
    \ 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\\
    x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo\
    \ $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed\
    \ 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\\
    x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo\
    \ $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed\
    \ 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\\
    x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo\
    \ $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed\
    \ 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\\
    x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo\
    \ $hex_key2 | sed 's/\\(.\\)/\\\\x\\1/g')\n    hex_key2=$(echo $hex_key2 | sed\
    \ 's/\\(.\\)/\\\\x\\\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv3r4mmnc.sh: line 43: unexpected EOF while looking for matching
    `''''

    /tmp/tmpv3r4mmnc.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  local hex_key3\n  hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwhkk2_av.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpwhkk2_av.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00olir94.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmp00olir94.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo \"\
    $hex_key\" | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo \"$hex_key2\"\
    \ | tr '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo \"$hex_key3\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo \"$hex_key4\"\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key6\n    hex_key6=$(echo \"$hex_key5\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key7\n    hex_key7=$(echo \"$hex_key6\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key8\n    hex_key8=$(echo \"$hex_key7\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key9\n    hex_key9=$(echo \"$hex_key8\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo \"$hex_key9\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo \"$hex_key10\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key12\n    hex_key12=$(echo \"$hex_key11\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key13\n    hex_key13=$(echo \"$hex_key12\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key14\n    hex_key14=$(echo \"$hex_key13\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key15\n    hex_key15=$(echo \"$hex_key14\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key16\n    hex_key16=$(echo \"$hex_key15\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key17\n    hex_key17=$(echo \"$hex_key16\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key18\n    hex_key18=$(echo \"$hex_key17\"\
    \ | tr '[a-z]' '[0-9]')\n    local hex_key19\n    hex_key19=$(echo \"$hex_key18\"\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key20\n    hex_key20=$(echo \"$hex_key19\"\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key21\n    hex_key21=$(echo \"$hex_key20\"\
    \ | tr '[a-z]' '[0-9]')\n    local \n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=${hex_key//[0-9]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2rorxoya.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    hex_key=$(echo $num | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n    hex_key=$(echo $hex_key | sed 's/\\\\x/\\\\\\\\x/g')\n   \
    \ hex_key=$(echo $hex_key | sed 's/\\\\\\\\x/\\\\\\\\\\\\x/g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo $hex_key | sed 's/\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\x/g')\n    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    x/g')\n    hex_key=$(echo $hex_key | sed 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\x/\\\\\\\\\\\
    \\\\\\\\\\\\\\\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi5sfurm_.sh: line 39: unexpected EOF while looking for matching
    `''''

    /tmp/tmpi5sfurm_.sh: line 57: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n\
    \    local hex_key\n    local hex_key\n\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_count=0\n    local prime_digits=0\n    local\
    \ prime_digits_count=0 \n    local prime_digits_sum=0\n    local prime_digits_sum_count=0\n\
    \    local prime_digits_sum_sum=0\n    local prime_digits_sum_sum_count=0\n  \
    \  local prime_digits_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=0\n    local prime_digits_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_count=0\n\
    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6379cp4q.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp34ameer0.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-Z]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-Z]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-Z]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-Z]' '[0-9]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-Z]')\n    local hex_key23\n    hex_key23=$(echo $hex_key | tr\
    \ '[A-Z\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsy0jsas2.sh: line 66: unexpected EOF while looking for matching
    `''''

    /tmp/tmpsy0jsas2.sh: line 84: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key | sed 's/\\(.\\\
    )/\\\\x\\1/g')\n  echo $(echo \"$hex_key2\" | sed 's/\\(.\\)/\\\\x\\1/g' | sed\
    \ 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\\
    1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\\
    )/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed\
    \ 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\\
    1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\\
    )/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed\
    \ 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\\
    1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\\
    )/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed\
    \ 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\\
    1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\\
    )/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed\
    \ 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\\
    1/g\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxym9g6lt.sh: line 24: unexpected EOF while looking for matching
    `''''

    /tmp/tmpxym9g6lt.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key=$1\n  local hex_key2\n  local hex_key3\n  local hex_key4\n  local\
    \ hex_key5\n  local hex_key6\n  local hex_key7\n  local hex_key8\n  local hex_key9\n\
    \  local hex_key10\n  local hex_key11\n  local hex_key12\n  local hex_key13\n\
    \  local hex_key14\n  local hex_key15\n  local hex_key16\n  local hex_key17\n\
    \  local hex_key18\n  local hex_key19\n  local hex_key20\n  local hex_key21\n\
    \  local hex_key22\n  local hex_key23\n  local hex_key24\n  local hex_key25\n\
    \  local hex_key26\n  local hex_key27\n  local hex_key28\n  local hex_key29\n\
    \  local hex_key30\n  local hex_key31\n  local hex_key32\n  local hex_key33\n\
    \  local hex_key34\n  local hex_key35\n  local hex_key36\n  local hex_key37\n\
    \  local hex_key38\n  local hex_key39\n  local hex_key40\n  local hex_key41\n\
    \  local hex_key42\n  local hex_key43\n  local hex_key44\n  local hex_key45\n\
    \  local hex_key46\n  local hex_key47\n  local hex_key48\n  local hex_key49\n\
    \  local hex_key50\n  local hex_key51\n  local hex_key52\n  local hex_key53\n\
    \  local hex_key54\n  local hex_key55\n  local hex_key56\n  local hex_key57\n\
    \  local hex_key58\n  local hex_key59\n  local hex_key60\n  local hex_key61\n\
    \  local hex_key62\n  local hex_key63\n  local hex_key64\n  local hex_key65\n\
    \  local hex_key66\n  local hex_key67\n  local hex_key68\n  local hex_key69\n\
    \  local hex_key70\n  local hex_key71\n  local hex_key72\n  local hex_key73\n\
    \  local hex_key74\n  local hex_key75\n  local hex_key76\n  local hex_key77\n\
    \  local hex_key78\n  local hex_key79\n  local hex_key80\n  local hex_key81\n\
    \  local hex_key82\n  local hex_key83\n  local hex_key84\n  local hex_key85\n\
    \  \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n \
    \   [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_count=0\n    local prime_digits=$(echo $num\
    \ | sed 's/\\([0-9A-F]\\)/\\1/g')\n    local prime_digits_len=$(echo $prime_digits\
    \ | wc -c)\n    local prime_digits_str=$(echo $prime_digits | sed 's/ //g')\n\
    \    local prime_digits_str_len=$(echo $prime_digits_str | wc -c)\n    local prime_digits_str_arr=($prime_digits_str)\n\
    \    local prime_digits_str_arr_len=${#prime_digits_str_arr[@]}\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\
    \    local prime_digits_str_arr_len=$((prime_digits_str_len-1))\n\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key3\n  hex_key3=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key4\n  hex_key4=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key5\n  hex_key5=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key6\n  hex_key6=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key7\n  hex_key7=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key8\n  hex_key8=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key9\n  hex_key9=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key10\n  hex_key10=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key11\n  hex_key11=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key12\n  hex_key12=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key13\n  hex_key13=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key14\n  hex_key14=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key15\n  hex_key15=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key16\n  hex_key16=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key17\n  hex_key17=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key18\n  hex_key18=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key19\n  hex_key19=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key20\n  hex_key20=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key21\n  \n}\n\ncandidate() {\n \
    \   hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00olir94.sh: line 58: unexpected EOF while looking for matching
    `''''

    /tmp/tmp00olir94.sh: line 76: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local\
    \ hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n\
    \  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo\
    \ $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n\
    \  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local\
    \ hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n\
    \  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo\
    \ $hex_key | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key |\
    \ tr '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr\
    \ '[:upper:]' '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]'\
    \ '[:lower:]')\n  local hex_key\n  hex_key=$(echo $hex_key | tr '[:upper:]' '[:lower\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf2vu58it.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmpf2vu58it.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key=\n    local i=\n    local j=\n    local k=\n\
    \    local l=\n    local prime=\n    local primes=\n    local prime_num=\n   \
    \ local prime_num_count=\n    local prime_num_sum=\n    local prime_num_sum2=\n\
    \    local prime_num_sum3=\n    local prime_num_sum4=\n    local prime_num_sum5=\n\
    \    local prime_num_sum6=\n    local prime_num_sum7=\n    local prime_num_sum8=\n\
    \    local prime_num_sum9=\n    local prime_num_sum10=\n    local prime_num_sum11=\n\
    \    local prime_num_sum12=\n    local prime_num_sum13=\n    local prime_num_sum14=\n\
    \    local prime_num_sum15=\n    local prime_num_sum16=\n    local prime_num_sum17=\n\
    \    local prime_num_sum18=\n    local prime_num_sum19=\n    local prime_num_sum20=\n\
    \    local prime_num_sum21=\n    local prime_num_sum22=\n    local prime_num_sum23=\n\
    \    local prime_num_sum24=\n    local prime_num_sum25=\n    local prime_num_sum26=\n\
    \    local prime_num_sum27=\n    local prime_num_sum28=\n    local prime_num_sum29=\n\
    \    local prime_num_sum30=\n    local prime_num_sum31=\n    local prime_num_sum32=\n\
    \    local prime_num_sum33=\n    local prime_num_sum34=\n    local prime_num_sum35=\n\
    \    local prime_num_sum36=\n    local prime_num_sum37=\n    local prime_num_sum38=\n\
    \    local prime_num_sum39=\n    local prime_num_sum40=\n    local prime_num_sum41=\n\
    \    local prime_num_sum42=\n    local prime_num_sum43=\n    local prime_num_sum44=\n\
    \    local prime_num_sum45=\n    local prime_num_sum46=\n    local prime_num_sum47=\n\
    \    local prime_num_sum48=\n    local prime_num_sum49=\n    local prime_num_sum50=\n\
    \    local prime_num_sum51=\n    local prime\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_digit\n  hex_digit=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]*\\)//g')\n  local hex_digit_count\n  hex_digit_count=$(echo\
    \ $hex_digit | wc -w)\n  local hex_digit_prime\n  hex_digit_prime=$(echo $hex_digit\
    \ | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\)//g' | sed 's/\\([0-9A-F]*\\\
    )//g' | sed 's/\\([0-9A-F]*\\\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcp9ao360.sh: line 28: unexpected EOF while looking for matching
    `''''

    /tmp/tmpcp9ao360.sh: line 46: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key2\n  hex_key2=$(echo $hex_key |\
    \ sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n  local hex_key3\n  hex_key3=$(echo $hex_key\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed -e 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed -e 's/\\([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwis84_st.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpwis84_st.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkugxstib.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkugxstib.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key=${hex_key//[0-9]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=${hex_key//[!A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key\n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660032436
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    hex_key=$(echo $num | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n    echo $hex_key\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    local hex_keys\n    local hex_keys_len\n\
    \    local hex_keys_len2\n    local hex_keys_len3\n    local hex_keys_len4\n \
    \   local hex_keys_len5\n    local hex_keys_len6\n    local hex_keys_len7\n  \
    \  local hex_keys_len8\n    local hex_keys_len9\n    local hex_keys_len10\n  \
    \  local hex_keys_len11\n    local hex_keys_len12\n    local hex_keys_len13\n\
    \    local hex_keys_len14\n    local hex_keys_len15\n    local hex_keys_len16\n\
    \    local hex_keys_len17\n    local hex_keys_len18\n    local hex_keys_len19\n\
    \    local hex_keys_len20\n    local hex_keys_len21\n    local hex_keys_len22\n\
    \    local hex_keys_len23\n    local hex_keys_len24\n    local hex_keys_len25\n\
    \    local hex_keys_len26\n    local hex_keys_len27\n    local hex_keys_len28\n\
    \    local hex_keys_len29\n    local hex_keys_len30\n    local hex_keys_len31\n\
    \    local hex_keys_len32\n    local hex_keys_len33\n    local hex_keys_len34\n\
    \    local hex_keys_len35\n    local hex_keys_len36\n    local hex_keys_len37\n\
    \    local hex_keys_len38\n    local hex_keys_len39\n    local hex_keys_len40\n\
    \    local hex_keys_len41\n    local hex_keys_len42\n    local hex_keys_len43\n\
    \    local hex_keys_len44\n    local hex_keys_len45\n    local hex_keys_len46\n\
    \    local hex_keys_len47\n    local hex_keys_len48\n    local hex_keys_len49\n\
    \    local hex_keys_len50\n    local hex_keys_len51\n    local hex_keys_len52\n\
    \    local hex_keys_len53\n    local hex_keys_len54\n    local hex_keys_len55\n\
    \    local hex_keys_len56\n    local hex_keys_len57\n    local hex_keys_len58\n\
    \    local hex_keys_len59\n    local hex_keys_len60\n    local hex_keys_len61\n\
    \    local hex_keys_len62\n\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key\n    hex_key\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660032436
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key4\n    hex_key4=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key5\n    hex_key5=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key6\n    hex_key6=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key7\n    hex_key7=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key8\n    hex_key8=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key9\n    hex_key9=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key11\n    hex_key11=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key12\n    hex_key12=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key13\n    hex_key13=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key14\n    hex_key14=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key15\n    hex_key15=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key16\n    hex_key16=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key17\n    hex_key17=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key18\n    hex_key18=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key19\n    hex_key19=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key20\n    hex_key20=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key21\n    \n}\n\ncandidate() {\n\
    \    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"\
    1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:digit:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:alpha:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:punct:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:blank:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:cntrl:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:graph:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:lower:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:print:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:space:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:upper:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:xdigit:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:blank:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:cntrl:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:graph:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:lower:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:print:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:space:]]//g')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | sed 's/[[:upper:]]//g')\n    local hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key=${hex_key//[0-9]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n    local hex_key=${hex_key//[A-F]/}\n\
    \    local hex_key=${hex_key//[a-f]/}\n}\n\ncandidate() {\n    hex_key \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key_len\n    hex_key_len=${#hex_key}\n\
    \    local hex_key_char\n    hex_key_char=${hex_key:0:1}\n    local hex_key_char_len\n\
    \    hex_key_char_len=${#hex_key_char}\n    local hex_key_char_char\n    hex_key_char_char=${hex_key_char:0:1}\n\
    \    local hex_key_char_char_len\n    hex_key_char_char_len=${#hex_key_char_char}\n\
    \    local hex_key_char_char_char\n    hex_key_char_char_char=${hex_key_char_char:0:1}\n\
    \    local hex_key_char_char_char_len\n    hex_key_char_char_char_len=${#hex_key_char_char_char}\n\
    \    local hex_key_char_char_char_char\n    hex_key_char_char_char_char=${hex_key_char_char_char:0:1}\n\
    \    local hex_key_char_char_char_char_len\n    hex_key_char_char_char_char_len=${#hex_key_char_char_char_char}\n\
    \    local hex_key_char_char_char_char_char\n    hex_key_char_char_char_char_char=${hex_key_char_char_char_char:0:1}\n\
    \    local hex_key_char_char_char_char_char_len\n    hex_key_char_char_char_char_char_len=${#hex_key_char_char_char_char_char}\n\
    \    local hex_key_char_char_char_char_char_char\n    hex_key_char_char_char_char_char_char=${hex_key_char_char_char_char_char:0:1}\n\
    \    local hex_key_char_char_char_char_char_char_len\n    hex_key_char_char_char_char_char_char_len=${#hex_key_char_char_char_char_char_char_char}\n\
    \    local hex_key_char_char_char_char_char_char_char\n    hex_key_char_char_char_char_char_char_char=${hex_key_char_char_char_char_char_char_char:0:1}\n\
    \    local hex_key_char_char_char_char_char_char_char_len\n    hex_key_char_char_char_char_char_char_char_len=${#hex_key_char_char_char_char_char_char_char}\n\
    \    local hex_key_char_char_char_char_char_char_char_char\n    hex_key_char_char_char_char_char_char_char_char=${hex_key_char_char_char_char_char_char_char_char:0:1}\n\
    \    local hex_key_char_char_char_char_char_char_char_char_len\n    hex_key_char_char_char_char_char_char_char_char_len=${#hex_key_char_char_char_char_char_char_char_char_char}\n\
    \    local hex_key_char_char_char_char_char_char_char_char_char\n    hex_key_char_char_char_char_char_char_char_char_\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4qzv72im.sh: line 58: hex_key_char_char_char_char_char_char_char_char_:
    command not found

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local num=$1\n  local prime_count=0\n  local prime_digits=$(echo \"$num\" |\
    \ sed 's/[^0-9]//g' | sed 's/^0*//g')\n  local prime_digits_len=$(echo \"$prime_digits\"\
    \ | wc -c)\n  local prime_digits_count=$(echo \"$prime_digits\" | wc -c)\n  local\
    \ prime_digits_sum=$(echo \"$prime_digits\" | awk '{sum+=$1} END {print sum}')\n\
    \  local prime_digits_sum_rev=$(echo \"$prime_digits\" | awk '{sum-=$1} END {print\
    \ sum}')\n  local prime_digits_sum_rev_len=$(echo \"$prime_digits_sum_rev\" |\
    \ wc -c)\n  local prime_digits_sum_rev_count=$(echo \"$prime_digits_sum_rev\"\
    \ | wc -c)\n  local prime_digits_sum_rev_sum=$(echo \"$prime_digits_sum_rev\"\
    \ | awk '{sum+=$1} END {print sum}')\n  local prime_digits_sum_rev_sum_rev=$(echo\
    \ \"$prime_digits_sum_rev\" | awk '{sum-=$1} END {print sum}')\n  local prime_digits_sum_rev_sum_rev_len=$(echo\
    \ \"$prime_digits_sum_rev_sum_rev\" | wc -c)\n  local prime_digits_sum_rev_sum_rev_count=$(echo\
    \ \"$prime_digits_sum_rev_sum_rev\" | wc -c)\n  local prime_digits_sum_rev_sum_rev_sum=$(echo\
    \ \"$prime_digits_sum_rev_sum_rev\" | awk '{sum+=$1} END {print sum}')\n  local\
    \ prime_digits_sum_rev_sum_rev_sum_rev=$(echo \"$prime_digits_sum_rev_sum_rev\"\
    \ | awk '{sum-=$1} END {print sum}')\n  local prime_digits_sum_rev_sum_rev_sum_rev_len=$(echo\
    \ \"$prime_digits_sum_rev_sum_rev_sum_rev\" | wc -c)\n  local prime_digits_sum_rev_sum_rev_sum_rev_count=$(echo\
    \ \"$prime_digits_sum_rev_sum_rev_sum_rev\" | wc -c)\n  local prime_digits_sum_rev_sum_rev_sum_rev_sum=$(echo\
    \ \"$prime_digits_sum_rev_sum_re\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp62us0mrd.sh: line 52: unexpected EOF while looking for matching
    `"''

    /tmp/tmp62us0mrd.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\1 /g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g')\n    local hex_key4\n    hex_key4=$(echo\
    \ $hex_key | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | sed 's/\\(.\\)/\\1 /g')\n\
    \    local hex_key5\n    hex_key5=$(echo $hex_key | sed 's/\\(.\\)/\\1 /g' | sed\
    \ 's/ //g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g')\n    local hex_key6\n\
    \    hex_key6=$(echo $hex_key | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | sed 's/\\\
    (.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g')\n    local hex_key7\n\
    \    hex_key7=$(echo $hex_key | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | sed 's/\\\
    (.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\\
    )/\\1 /g')\n    local hex_key8\n    hex_key8=$(echo $hex_key | sed 's/\\(.\\)/\\\
    1 /g' | sed 's/ //g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\\
    (.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g')\n    local hex_key9\n\
    \    hex_key9=$(echo $hex_key | sed 's/\\(.\\)/\\1 /g' | sed 's/ //g' | sed 's/\\\
    (.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\\
    )/\\1 /g' | sed 's/\\(.\\)/\\1 /g' | sed 's/\\(.\\)/\\1 /g')\n    local hex_key10\n\
    }\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    hex_key=$(echo $num | sed 's/\\([0-9A-F]*\\\
    )//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n\
    \    hex_key=$(echo $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]*\\)//g')\n    hex_key=$(echo $hex_key | sed 's/\\\
    ([0-9A-F]*\\)//g\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplir6mk7y.sh: line 46: unexpected EOF while looking for matching
    `''''

    /tmp/tmplir6mk7y.sh: line 64: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[:upper:]' '[:lower\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ya1gf5y.sh: line 64: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9ya1gf5y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key\n  hex_key=$1\n  local hex_key\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n\
    \  hex_key=${hex_key//[a-f]/}\n  hex_key=${hex_key//[A-F]/}\n  hex_key=${hex_key//[a-f]/}\n\
    \  hex_key=${hex_key//[A-F]/}\n  hex_key=${\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn9cxox42.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    hex_key=0\n    for (( i=0; i<${#num};\
    \ i++ )); do\n        hex_key=$((hex_key*16 + ${num:$i:1}))\n    done\n    echo\
    \ $hex_key\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\"\
    \ ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo $hex_key\
    \ | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\
    \\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\\
    (.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' |\
    \ sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\x\\1/g' | sed 's/\\(.\\)/\\\\\
    x\\1/g' | sed '\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"\
    2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\"\
    ) = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpam2yxrwv.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmpam2yxrwv.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[0-9]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[0-9]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]'\
    \ '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]' '[A-Z]')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key\n    hex_key=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | tr '[A-Z]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key\
    \ | tr '[0-9]' '[a-z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[a-z]'\
    \ '[A-Z]')\n    local hex_key\n    hex_key=$(echo $hex_key | tr '[0-9]' '\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvj2kkvlw.sh: line 70: unexpected EOF while looking for matching
    `''''

    /tmp/tmpvj2kkvlw.sh: line 88: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key=0\n    local hex_digits=0\n    local hex_digits_prime=0\n\
    \    local hex_digits_not_prime=0\n    local hex_digits_not_prime_prime=0\n  \
    \  local hex_digits_not_prime_not_prime=0\n    local hex_digits_not_prime_prime_prime=0\n\
    \    local hex_digits_prime_prime_prime=0\n    local hex_digits_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_not_prime_prime=0\n    local hex_digits_prime_not_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime=0\n    local hex_digits_prime_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_not_prime_not_prime=0\n    local hex_digits_prime_not_prime_prime_prime=0\n\
    \    local hex_digits_prime_not_prime_prime_not_prime=0\n    local hex_digits_prime_prime_prime_prime_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime_not_prime=0\n    local hex_digits_prime_prime_prime_not_prime_not_prime=0\n\
    \    local hex_digits_prime_not_prime_prime_prime_prime=0\n    local hex_digits_prime_not_prime_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime_prime_prime=0\n    local hex_digits_prime_prime_prime_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime_not_prime_not_prime=0\n    local\
    \ hex_digits_prime_prime_prime_not_prime_prime_prime=0\n    local hex_digits_prime_prime_prime_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime_prime_prime_not_prime=0\n    local\
    \ hex_digits_prime_prime_prime_prime_prime_prime_not_prime=0\n    local hex_digits_prime_prime_prime_prime_prime_prime_not_prime=0\n\
    \    local hex_digits_prime_prime_prime_prime_prime_prime_not_prime=0\n    local\
    \ hex_digits_prime_prime_prime_prime_prime_prime_prime_not_prime=0\n    local\
    \ hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_not_prime=0\n}\n\n\
    candidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[0-9]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[a-f]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[a-f]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyvx8ii10.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local prime_digits=$(echo $num | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed 's/\\([0-9A-F]\\)/\\1/g' | sed '\n}\n\
    \ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate\
    \ \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0v372mp1.sh: line 22: unexpected EOF while looking for matching
    `''''

    /tmp/tmp0v372mp1.sh: line 40: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | tr '[A-Z]' '[a-z]')\n    local hex_key3\n    hex_key3=$(echo $hex_key | tr\
    \ '[a-z]' '[A-Z]')\n    local hex_key4\n    hex_key4=$(echo $hex_key | tr '[0-9]'\
    \ '[A-F]')\n    local hex_key5\n    hex_key5=$(echo $hex_key | tr '[A-F]' '[0-9]')\n\
    \    local hex_key6\n    hex_key6=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local\
    \ hex_key7\n    hex_key7=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key8\n\
    \    hex_key8=$(echo $hex_key | tr '[A-Z]' '[A-F]')\n    local hex_key9\n    hex_key9=$(echo\
    \ $hex_key | tr '[A-F]' '[A-Z]')\n    local hex_key10\n    hex_key10=$(echo $hex_key\
    \ | tr '[0-9]' '[A-F]')\n    local hex_key11\n    hex_key11=$(echo $hex_key |\
    \ tr '[A-F]' '[0-9]')\n    local hex_key12\n    hex_key12=$(echo $hex_key | tr\
    \ '[0-9]' '[A-Z]')\n    local hex_key13\n    hex_key13=$(echo $hex_key | tr '[A-Z]'\
    \ '[0-9]')\n    local hex_key14\n    hex_key14=$(echo $hex_key | tr '[A-Z]' '[A-F]')\n\
    \    local hex_key15\n    hex_key15=$(echo $hex_key | tr '[A-F]' '[A-Z]')\n  \
    \  local hex_key16\n    hex_key16=$(echo $hex_key | tr '[0-9]' '[A-F]')\n    local\
    \ hex_key17\n    hex_key17=$(echo $hex_key | tr '[A-F]' '[0-9]')\n    local hex_key18\n\
    \    hex_key18=$(echo $hex_key | tr '[0-9]' '[A-Z]')\n    local hex_key19\n  \
    \  hex_key19=$(echo $hex_key | tr '[A-Z]' '[0-9]')\n    local hex_key20\n    hex_key20=$(echo\
    \ $hex_key | tr '[A-Z]' '[A-F]')\n    local hex_key21\n    hex_key21=$(echo $hex_key\
    \ | tr '[A-F]' '[A-Z]')\n    local hex_key22\n    hex_key22=$(echo $hex_key |\
    \ tr '[0-9]' '[A-F]')\n    local hex_key23\n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo $hex_key\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ $hex_key | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' |\
    \ sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g'\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed\
    \ 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g' | sed 's/\\\
    ([0-9\n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n\
    \    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"\
    2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate\
    \ \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp51a7y4ta.sh: line 26: unexpected EOF while looking for matching
    `''''

    /tmp/tmp51a7y4ta.sh: line 44: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key=0\n    local hex_key2=0\n    local hex_key3=0\n\
    \    local hex_key4=0\n    local hex_key5=0\n    local hex_key6=0\n    local hex_key7=0\n\
    \    local hex_key8=0\n    local hex_key9=0\n    local hex_key10=0\n    local\
    \ hex_key11=0\n    local hex_key12=0\n    local hex_key13=0\n    local hex_key14=0\n\
    \    local hex_key15=0\n    local hex_key16=0\n    local hex_key17=0\n    local\
    \ hex_key18=0\n    local hex_key19=0\n    local hex_key20=0\n    local hex_key21=0\n\
    \    local hex_key22=0\n    local hex_key23=0\n    local hex_key24=0\n    local\
    \ hex_key25=0\n    local hex_key26=0\n    local hex_key27=0\n    local hex_key28=0\n\
    \    local hex_key29=0\n    local hex_key30=0\n    local hex_key31=0\n    local\
    \ hex_key32=0\n    local hex_key33=0\n    local hex_key34=0\n    local hex_key35=0\n\
    \    local hex_key36=0\n    local hex_key37=0\n    local hex_key38=0\n    local\
    \ hex_key39=0\n    local hex_key40=0\n    local hex_key41=0\n    local hex_key42=0\n\
    \    local hex_key43=0\n    local hex_key44=0\n    local hex_key45=0\n    local\
    \ hex_key46=0\n    local hex_key47=0\n    local hex_key48=0\n    local hex_key49=0\n\
    \    local hex_key50=0\n    local hex_key51=0\n    local hex_key52=0\n    local\
    \ hex_key53=0\n    local hex_key54=0\n    local hex_key55=0\n    local hex_key56=0\n\
    \    local hex_key57=0\n    local hex_key58=0\n    local hex_key59=0\n    local\
    \ hex_key60=0\n    local hex_key61=0\n    local hex_key62=0\n    local hex_key63=0\n\
    \    local hex_key64=0\n    local hex_key65=0\n    local hex_key66=0\n    local\
    \ hex_key67=0\n    local hex_key68=0\n    local hex_key69=0\n    local hex_key70=0\n\
    \    local hex_key71=0\n    local hex_key72=0\n    local hex\n}\n\ncandidate()\
    \ {\n    hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\"\
    ) = \"1\" ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"\
    ABED1A33\") = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate\
    \ \"123456789ABCDEF0\") = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\"\
    ) = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \ local hex_key=$1\n  local hex_key\n  local hex_key\n  local hex_key\n  local\
    \ hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n  local hex_key\n\
    \  local hex_key\n  local hex_key\n  local hex_key\n\n}\n\ncandidate() {\n   \
    \ hex_key \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\"\
    \ ]]\n    [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\"\
    ) = \"4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$hex_key\n\
    \    local hex_key3\n    hex_key3=$hex_key2\n    local hex_key4\n    hex_key4=$hex_key3\n\
    \    local hex_key5\n    hex_key5=$hex_key4\n    local hex_key6\n    hex_key6=$hex_key5\n\
    \    local hex_key7\n    hex_key7=$hex_key6\n    local hex_key8\n    hex_key8=$hex_key7\n\
    \    local hex_key9\n    hex_key9=$hex_key8\n    local hex_key10\n    hex_key10=$hex_key9\n\
    \    local hex_key11\n    hex_key11=$hex_key10\n    local hex_key12\n    hex_key12=$hex_key11\n\
    \    local hex_key13\n    hex_key13=$hex_key12\n    local hex_key14\n    hex_key14=$hex_key13\n\
    \    local hex_key15\n    hex_key15=$hex_key14\n    local hex_key16\n    hex_key16=$hex_key15\n\
    \    local hex_key17\n    hex_key17=$hex_key16\n    local hex_key18\n    hex_key18=$hex_key17\n\
    \    local hex_key19\n    hex_key19=$hex_key18\n    local hex_key20\n    hex_key20=$hex_key19\n\
    \    local hex_key21\n    hex_key21=$hex_key20\n    local hex_key22\n    hex_key22=$hex_key21\n\
    \    local hex_key23\n    hex_key23=$hex_key22\n    local hex_key24\n    hex_key24=$hex_key23\n\
    \    local hex_key25\n    hex_key25=$hex_key24\n    local hex_key26\n    hex_key26=$hex_key25\n\
    \    local hex_key27\n    hex_key27=$hex_key26\n    local hex_key28\n    hex_key28=$hex_key27\n\
    \    local hex_key29\n    hex_key29=$hex_key28\n    local hex_key30\n    hex_key30=$hex_key29\n\
    \    local hex_key31\n    hex_key31=$hex_key30\n    local hex_key32\n    hex_key32=$hex_key31\n\
    \    local hex_key33\n    hex_key33=$hex_key32\n    local hex_key34\n    hex_key34=$hex_key33\n\
    \    local hex_key35\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key2\n    hex_key2=$(echo \"\
    $hex_key\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key3\n    hex_key3=$(echo\
    \ \"$hex_key2\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key4\n   \
    \ hex_key4=$(echo \"$hex_key3\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local\
    \ hex_key5\n    hex_key5=$(echo \"$hex_key4\" | sed 's/\\([0-9A-F]\\)/\\\\x\\\
    1/g')\n    local hex_key6\n    hex_key6=$(echo \"$hex_key5\" | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n    local hex_key7\n    hex_key7=$(echo \"$hex_key6\" | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key8\n    hex_key8=$(echo \"$hex_key7\"\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key9\n    hex_key9=$(echo\
    \ \"$hex_key8\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key10\n  \
    \  hex_key10=$(echo \"$hex_key9\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local\
    \ hex_key11\n    hex_key11=$(echo \"$hex_key10\" | sed 's/\\([0-9A-F]\\)/\\\\\
    x\\1/g')\n    local hex_key12\n    hex_key12=$(echo \"$hex_key11\" | sed 's/\\\
    ([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key13\n    hex_key13=$(echo \"$hex_key12\"\
    \ | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key14\n    hex_key14=$(echo\
    \ \"$hex_key13\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n    local hex_key15\n \
    \   hex_key15=$(echo \"$hex_key14\" | sed 's/\\([0-9A-F]\\)/\\\\x\\1/g')\n   \
    \ local hex_key16\n    hex_key16=$(echo \"$hex_key15\" | sed 's/\\([0-9A-F]\\\
    )/\\\\x\\1/g')\n    local hex_key17\n    \n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n    local\
    \ hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    local hex_key\n    local hex_key\n  \
    \  local hex_key\n    local hex_key\n    \n}\n\ncandidate() {\n    hex_key \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[\
    \ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\"\
    \ ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
- exit_code: -1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=${hex_key//[!A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n    hex_key=${hex_key//[A-F]/}\n\
    \    hex_key=${hex_key//[A-F]/}\n    hex_key\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=22 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660032435
- exit_code: 2
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local num=$1\n    local hex_key\n    hex_key=$(echo $num | sed 's/\\([0-9A-F]*\\\
    )/ \\1/g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n \
    \   local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo\
    \ $hex_key | sed 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed\
    \ 's/ //g')\n    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n\
    \    local hex_key\n    hex_key=$(echo $hex_key | sed 's/ //g')\n    local hex_key\n\
    \    hex_key=$(echo $hex_key | sed 's/ \n}\n\ncandidate() {\n    hex_key \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate\
    \ \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm3iqq4fy.sh: line 69: unexpected EOF while looking for matching
    `''''

    /tmp/tmpm3iqq4fy.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660032431
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key=$1\n    local hex_key2\n    local hex_key3\n    local hex_key4\n\
    \    local hex_key5\n    local hex_key6\n    local hex_key7\n    local hex_key8\n\
    \    local hex_key9\n    local hex_key10\n    local hex_key11\n    local hex_key12\n\
    \    local hex_key13\n    local hex_key14\n    local hex_key15\n    local hex_key16\n\
    \    local hex_key17\n    local hex_key18\n    local hex_key19\n    local hex_key20\n\
    \    local hex_key21\n    local hex_key22\n    local hex_key23\n    local hex_key24\n\
    \    local hex_key25\n    local hex_key26\n    local hex_key27\n    local hex_key28\n\
    \    local hex_key29\n    local hex_key30\n    local hex_key31\n    local hex_key32\n\
    \    local hex_key33\n    local hex_key34\n    local hex_key35\n    local hex_key36\n\
    \    local hex_key37\n    local hex_key38\n    local hex_key39\n    local hex_key40\n\
    \    local hex_key41\n    local hex_key42\n    local hex_key43\n    local hex_key44\n\
    \    local hex_key45\n    local hex_key46\n    local hex_key47\n    local hex_key48\n\
    \    local hex_key49\n    local hex_key50\n    local hex_key51\n    local hex_key52\n\
    \    local hex_key53\n    local hex_key54\n    local hex_key55\n    local hex_key56\n\
    \    local hex_key57\n    local hex_key58\n    local hex_key59\n    local hex_key60\n\
    \    local hex_key61\n    local hex_key62\n    local hex_key63\n    local hex_key64\n\
    \    local hex_key65\n    local hex_key66\n    local hex_key67\n    local hex_key68\n\
    \    local hex_key69\n    local hex_key70\n    local hex_key71\n    local hex_key72\n\
    \    local hex_key73\n    local hex_key74\n    local hex_key75\n    local hex_key76\n\
    \    local hex_key77\n    local hex_key78\n    local hex_key79\n    local hex_key80\n\
    \    local hex_key81\n    local hex_key82\n    local hex_key83\n    local hex_key84\n\
    \    local hex_key85\n    \n}\n\ncandidate() {\n    hex_key \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n    [[ $(candidate \"1077E\"\
    ) = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"4\" ]]\n    [[ $(candidate\
    \ \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\") = \"6\" ]]\n\
    \    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032430
- exit_code: 1
  program: "#!/bin/bash\n# You have been tasked to write a function that receives\
    \ \n# a hexadecimal number as a string and counts the number of hexadecimal \n\
    # digits that are primes (prime number, or a prime, is a natural number \n# greater\
    \ than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal\
    \ digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers\
    \ are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume\
    \ the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are\
    \ always uppercase.\n# Examples:\n# For num = \"AB\" the output should be 1.\n\
    # For num = \"1077E\" the output should be 2.\n# For num = \"ABED1A33\" the output\
    \ should be 4.\n# For num = \"123456789ABCDEF0\" the output should be 6.\n# For\
    \ num = \"2020\" the output should be 2.\n#\n# $1 is a string\nhex_key() {\n \
    \   local hex_key\n    hex_key=$1\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr -d '[:space:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\" | tr\
    \ '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex_key\n    hex_key=$(echo \"$hex_key\"\
    \ | tr '[:upper:]' '[:lower:]')\n    local hex\n}\n\ncandidate() {\n    hex_key\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"AB\") = \"1\" ]]\n \
    \   [[ $(candidate \"1077E\") = \"2\" ]]\n    [[ $(candidate \"ABED1A33\") = \"\
    4\" ]]\n    [[ $(candidate \"2020\") = \"2\" ]]\n    [[ $(candidate \"123456789ABCDEF0\"\
    ) = \"6\" ]]\n    [[ $(candidate \"112233445566778899AABBCCDDEEFF00\") = \"12\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660032431
