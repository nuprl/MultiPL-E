name: HumanEval_26_remove_duplicates
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // From a list of integers, remove all elements that occur more\
  \ than once.\n    // Keep order of elements left the same as in the input.\n   \
  \ public static List<long> RemoveDuplicates(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RemoveDuplicates((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L, (long)3L,\
  \ (long)5L}))).Equals((new List<long>(new long[]{(long)1L, (long)4L, (long)5L}))));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastValue = numbers.First();\n        long\
    \ lastCount = 1;\n        foreach (long value in numbers) {\n            if (value\
    \ == lastValue) {\n                lastCount++;\n            } else {\n      \
    \          if (lastCount > 1) {\n                    result.Add(lastValue);\n\
    \                    lastCount = 1;\n                }\n                lastValue\
    \ = value;\n                lastCount = 1;\n            }\n        }\n       \
    \ if (lastCount > 1) {\n            result.Add(lastValue);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hashSet = new HashSet<long>();\n        foreach (long n\
    \ in numbers) {\n            if (hashSet.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                result.Add(currentNumber);\n\
    \            } else {\n                lastNumber = number;\n                currentNumber\
    \ = number;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (seen.Add(n)) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (set.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                result.Add(currentNumber);\n            } else\
    \ {\n                lastNumber = number;\n                currentNumber = number;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        long lastNumber = 0;\n        foreach (var number in\
    \ numbers) {\n            if (number == lastNumber) {\n                continue;\n\
    \            }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long lastNumber = 0;\n    \
    \    foreach (long number in numbers) {\n            if (number != lastNumber)\
    \ {\n                result.Add(number);\n                lastNumber = number;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = numbers.First();\n        long\
    \ lastCount = 0;\n        foreach (long number in numbers) {\n            if (number\
    \ == lastNumber) {\n                lastCount++;\n            } else {\n     \
    \           result.Add(lastNumber);\n                lastNumber = number;\n  \
    \              lastCount = 1;\n            }\n        }\n        result.Add(lastNumber);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> hashSet = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (hashSet.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> hashSet = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (hashSet.Add(number)) {\n                result.Add(number);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number == lastNumber) {\n                continue;\n          \
    \  }\n            result.Add(number);\n            lastNumber = number;\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          currentNumber++;\n            } else {\n                result.Add(currentNumber);\n\
    \                currentNumber = number;\n                lastNumber = number;\n\
    \            }\n        }\n        result.Add(currentNumber);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   HashSet<long> set = new HashSet<long>();\n        foreach (var number in numbers)\
    \ {\n            if (set.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            if (currentNumber\
    \ == 0) {\n                currentNumber = number;\n                lastNumber\
    \ = number;\n                result.Add(number);\n                continue;\n\
    \            }\n            if (number == currentNumber) {\n                currentNumber\
    \ = number;\n                lastNumber = number;\n                result.Add(number);\n\
    \                continue;\n            }\n            if (number > currentNumber)\
    \ {\n                result.Add(number);\n                currentNumber = number;\n\
    \                lastNumber = number;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          continue;\n            }\n            currentNumber = number;\n   \
    \         result.Add(currentNumber);\n            lastNumber = currentNumber;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (set.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       long currentNumber = 0;\n        bool isDuplicate = false;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          isDuplicate = true;\n            } else {\n                if (isDuplicate)\
    \ {\n                    result.Add(currentNumber);\n                    isDuplicate\
    \ = false;\n                }\n                currentNumber = number;\n     \
    \           lastNumber = number;\n            }\n        }\n        if (isDuplicate)\
    \ {\n            result.Add(currentNumber);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (seen.Add(n)) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            if (number == lastNumber) {\n                continue;\n        \
    \    }\n            if (result.Contains(number)) {\n                continue;\n\
    \            }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> hashSet = new HashSet<long>();\n        foreach (long number\
    \ in numbers) {\n            if (hashSet.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long lastNumber = 0;\n    \
    \    long currentNumber = 0;\n        foreach (long number in numbers) {\n   \
    \         if (number == lastNumber) {\n                result.Add(number);\n \
    \           } else {\n                lastNumber = number;\n                currentNumber\
    \ = number;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                currentNumber++;\n\
    \            } else {\n                result.Add(currentNumber);\n          \
    \      currentNumber = number;\n                lastNumber = number;\n       \
    \     }\n        }\n        result.Add(currentNumber);\n        return result;",
  "        List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (set.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number == lastNumber) {\n                continue;\n            }\n    \
    \        result.Add(number);\n            lastNumber = number;\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   HashSet<long> set = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (set.Add(n)) {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = numbers.First();\n        long lastCount = 0;\n   \
    \     foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                lastCount++;\n            } else {\n                if (lastCount\
    \ > 1) {\n                    result.Add(lastNumber);\n                    lastNumber\
    \ = number;\n                    lastCount = 1;\n                } else {\n  \
    \                  lastNumber = number;\n                    lastCount = 1;\n\
    \                }\n            }\n        }\n        result.Add(lastNumber);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long lastNumber = 0;\n        foreach (long number in numbers) {\n     \
    \       if (number == lastNumber) {\n                continue;\n            }\n\
    \            result.Add(number);\n            lastNumber = number;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (set.Add(n)) {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (hashSet.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          currentNumber++;\n            } else {\n                result.Add(currentNumber);\n\
    \                currentNumber = number;\n                lastNumber = number;\n\
    \            }\n        }\n        result.Add(currentNumber);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hashSet = new HashSet<long>();\n        foreach (long n in numbers) {\n    \
    \        if (hashSet.Add(n)) {\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = numbers.First();\n        long\
    \ currentNumber = lastNumber;\n        bool isDuplicate = false;\n        foreach\
    \ (long number in numbers) {\n            if (number == currentNumber) {\n   \
    \             isDuplicate = true;\n            }\n            else {\n       \
    \         if (isDuplicate) {\n                    result.Add(currentNumber);\n\
    \                    isDuplicate = false;\n                }\n               \
    \ currentNumber = number;\n            }\n        }\n        if (isDuplicate)\
    \ {\n            result.Add(currentNumber);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        HashSet<long> seen\
    \ = new HashSet<long>();\n        foreach (var number in numbers) {\n        \
    \    if (seen.Add(number)) {\n                result.Add(number);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long lastNumber = 0;\n\
    \        long currentNumber = 0;\n        foreach (long number in numbers) {\n\
    \            if (number == lastNumber) {\n                currentNumber++;\n \
    \           } else {\n                result.Add(currentNumber);\n           \
    \     currentNumber = number;\n            }\n            lastNumber = number;\n\
    \        }\n        result.Add(currentNumber);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hashSet = new HashSet<long>();\n        foreach (long n in numbers) {\n    \
    \        if (hashSet.Add(n)) {\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (hashSet.Add(n)) {\n  \
    \              result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long lastValue = numbers.First();\n\
    \        long lastCount = 1;\n        foreach (long value in numbers) {\n    \
    \        if (lastValue == value) {\n                lastCount++;\n           \
    \ } else {\n                if (lastCount > 1) {\n                    result.Add(lastValue);\n\
    \                    lastCount = 1;\n                }\n                lastValue\
    \ = value;\n            }\n        }\n        if (lastCount > 1) {\n         \
    \   result.Add(lastValue);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (seen.Add(n)) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   var result = new List<long>();\n        long lastNumber;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          continue;\n            }\n            result.Add(number);\n       \
    \     lastNumber = number;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> hashSet =\
    \ new HashSet<long>();\n        foreach (long number in numbers) {\n         \
    \   if (hashSet.Add(number)) {\n                result.Add(number);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          if (number != lastNumber) {\n                result.Add(number);\n\
    \                lastNumber = number;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   long lastNumber;\n        foreach (var number in numbers) {\n            if\
    \ (number == lastNumber) {\n                continue;\n            }\n       \
    \     result.Add(number);\n            lastNumber = number;\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   long lastNumber = 0;\n        foreach (long number in numbers) {\n       \
    \     if (number != lastNumber) {\n                result.Add(number);\n     \
    \           lastNumber = number;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                result.Add(number);\n\
    \            } else {\n                lastNumber = number;\n                currentNumber\
    \ = number;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                currentNumber++;\n\
    \            } else {\n                result.Add(currentNumber);\n          \
    \      currentNumber = number;\n            }\n            lastNumber = number;\n\
    \        }\n        result.Add(currentNumber);\n        return result;", "   \
    \     List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (set.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = numbers.First();\n        foreach (long number in numbers) {\n           \
    \ if (number == lastNumber) {\n                result.Add(number);\n         \
    \   } else {\n                result.Add(lastNumber);\n                result.Add(number);\n\
    \            }\n            lastNumber = number;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        bool isDuplicate = false;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                isDuplicate = true;\n\
    \            }\n            else {\n                if (isDuplicate) {\n     \
    \               result.Add(currentNumber);\n                    isDuplicate =\
    \ false;\n                }\n                currentNumber = number;\n       \
    \         lastNumber = number;\n            }\n        }\n        if (isDuplicate)\
    \ {\n            result.Add(currentNumber);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        long lastNumber =\
    \ 0;\n        foreach (long number in numbers) {\n            if (number != lastNumber)\
    \ {\n                result.Add(number);\n                lastNumber = number;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        long lastValue = numbers.First();\n        foreach (long\
    \ value in numbers) {\n            if (value != lastValue) {\n               \
    \ result.Add(value);\n                lastValue = value;\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ seen = new HashSet<long>();\n        foreach (long n in numbers) {\n       \
    \     if (seen.Add(n)) {\n                result.Add(n);\n            }\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hashSet = new HashSet<long>();\n        foreach (long n in numbers) {\n    \
    \        if (hashSet.Add(n)) {\n                result.Add(n);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long lastCount = 0;\n        foreach (long\
    \ number in numbers) {\n            if (number == lastNumber) {\n            \
    \    lastCount++;\n            }\n            else {\n                if (lastCount\
    \ > 0) {\n                    result.Add(lastNumber);\n                    lastCount\
    \ = 1;\n                }\n                lastNumber = number;\n            }\n\
    \        }\n        if (lastCount > 0) {\n            result.Add(lastNumber);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastValue = numbers.First();\n        long currentValue = numbers.First();\n\
    \        bool isFirst = true;\n        foreach (long number in numbers) {\n  \
    \          if (number == currentValue) {\n                isFirst = false;\n \
    \           }\n            else if (number == lastValue) {\n                result.Add(number);\n\
    \            }\n            else {\n                if (isFirst) {\n         \
    \           result.Add(number);\n                    isFirst = false;\n      \
    \          }\n                else {\n                    result.Add(currentValue);\n\
    \                    result.Add(number);\n                }\n            }\n \
    \           lastValue = number;\n            currentValue = number;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> seen = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (seen.Add(n)) {\n                result.Add(n);\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                result.Add(number);\n            } else {\n \
    \               lastNumber = number;\n                currentNumber = number;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long lastCount =\
    \ 0;\n        foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                lastCount++;\n            } else {\n                lastNumber\
    \ = number;\n                lastCount = 1;\n            }\n            if (lastCount\
    \ > 1) {\n                result.Add(lastNumber);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (set.Add(n)) {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long lastCount = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                lastCount++;\n \
    \           } else {\n                if (lastCount > 1) {\n                 \
    \   result.Add(lastNumber);\n                    lastNumber = number;\n      \
    \              lastCount = 1;\n                } else {\n                    lastNumber\
    \ = number;\n                    lastCount = 1;\n                }\n         \
    \   }\n        }\n        result.Add(lastNumber);\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                continue;\n    \
    \        }\n            if (result.Contains(number)) {\n                continue;\n\
    \            }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long currentNumber = 0;\n        bool found\
    \ = false;\n        foreach (long number in numbers) {\n            if (number\
    \ == lastNumber) {\n                found = true;\n            }\n           \
    \ else {\n                if (found) {\n                    result.Add(currentNumber);\n\
    \                    found = false;\n                }\n                currentNumber\
    \ = number;\n                lastNumber = number;\n            }\n        }\n\
    \        if (found) {\n            result.Add(currentNumber);\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  HashSet<long> set = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (set.Add(n)) {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long lastNumber = 0;\n \
    \       foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hashSet = new HashSet<long>();\n        foreach (long number in numbers) {\n\
    \            if (hashSet.Add(number)) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (hashSet.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                result.Add(number);\n\
    \            } else {\n                lastNumber = number;\n                currentNumber\
    \ = number;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        var result = new List<long>();\n     \
    \   long lastNumber;\n        foreach (var number in numbers) {\n            if\
    \ (number == lastNumber) {\n                continue;\n            }\n       \
    \     result.Add(number);\n            lastNumber = number;\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long lastNumber = 0;\n    \
    \    foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (set.Add(n)) {\n      \
    \          result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long number in numbers) {\n            if\
    \ (set.Add(number)) {\n                result.Add(number);\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long lastNumber = 0;\n\
    \        foreach (long number in numbers) {\n            if (number != lastNumber)\
    \ {\n                result.Add(number);\n                lastNumber = number;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number == lastNumber) {\n                continue;\n\
    \            }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hashSet = new HashSet<long>();\n\
    \        foreach (long number in numbers) {\n            if (hashSet.Add(number))\
    \ {\n                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        long lastCount =\
    \ 0;\n        foreach (long number in numbers) {\n            if (number == lastNumber)\
    \ {\n                lastCount++;\n            } else {\n                if (lastCount\
    \ > 1) {\n                    result.Add(lastNumber);\n                    lastNumber\
    \ = number;\n                    lastCount = 1;\n                } else {\n  \
    \                  lastNumber = number;\n                    lastCount = 1;\n\
    \                }\n            }\n        }\n        result.Add(lastNumber);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     HashSet<long> set = new HashSet<long>();\n        foreach (long n in numbers)\
    \ {\n            if (set.Add(n)) {\n                result.Add(n);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        long lastNumber = 0;\n        foreach (var number in\
    \ numbers) {\n            if (number == lastNumber) {\n                continue;\n\
    \            }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long number in numbers) {\n            if (set.Add(number)) {\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                continue;\n    \
    \        }\n            result.Add(number);\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        long currentNumber = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                result.Add(number);\n\
    \            } else {\n                lastNumber = number;\n                currentNumber\
    \ = number;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long lastNumber = 0;\n        long currentNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number ==\
    \ lastNumber) {\n                continue;\n            }\n            if (result.Contains(number))\
    \ {\n                continue;\n            }\n            result.Add(number);\n\
    \            lastNumber = number;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n\
    \        foreach (long n in numbers) {\n            if (seen.Add(n)) {\n     \
    \           result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long number in numbers) {\n   \
    \         if (set.Add(number)) {\n                result.Add(number);\n      \
    \      }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        long lastNumber = 0;\n        foreach (var number in numbers) {\n   \
    \         if (number == lastNumber) {\n                continue;\n           \
    \ }\n            result.Add(number);\n            lastNumber = number;\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long lastNumber = 0;\n        long currentNumber = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number == lastNumber) {\n      \
    \          continue;\n            }\n            currentNumber = number;\n   \
    \         result.Add(number);\n            lastNumber = number;\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long lastNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number != lastNumber) {\n                result.Add(number);\n    \
    \            lastNumber = number;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (set.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = numbers.First();\n        long currentNumber = numbers.First();\n        bool\
    \ isFirst = true;\n        foreach (long number in numbers) {\n            if\
    \ (number == currentNumber) {\n                isFirst = false;\n            }\n\
    \            else {\n                if (isFirst) {\n                    result.Add(lastNumber);\n\
    \                    isFirst = false;\n                }\n                else\
    \ {\n                    result.Add(number);\n                }\n            \
    \    currentNumber = number;\n            }\n            lastNumber = number;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> seen = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (seen.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long n in numbers) {\n            if (set.Add(n)) {\n          \
    \      result.Add(n);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long n in numbers) {\n        \
    \    if (set.Add(n)) {\n                result.Add(n);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long n in\
    \ numbers) {\n            if (set.Add(n)) {\n                result.Add(n);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> seen = new HashSet<long>();\n   \
    \     foreach (long n in numbers) {\n            if (seen.Add(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        HashSet<long> seen = new\
    \ HashSet<long>();\n        foreach (long n in numbers) {\n            if (seen.Add(n))\
    \ {\n                result.Add(n);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
