name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            bool found = false;\n            foreach (long j in\
    \ l2) {\n                if (i == j) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\n\
    \                    result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n     \
    \   long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n  \
    \      long diff1 = max1 - min1;\n        long diff2 = max2 - min2;\n        long\
    \ diff = mid - min;\n        if (diff1 == diff2) {\n            while (diff1 >\
    \ diff2) {\n                if (l1.Contains(mid))\n                    result.Add(mid);\n\
    \                mid = (mid + min1) / 2;\n                diff1 = max1 - min1;\n\
    \                diff2 = max2 - min2;\n                diff = mid - min;\n   \
    \         }\n            while (diff1 < diff2) {\n                if (l2.Contains(mid))\n\
    \                    result.Add(mid);\n                mid = (mid + min2) / 2;\n\
    \                diff1 = max1 - min1;\n                diff2 = max2 - min2;\n\
    \                diff = mid - min;\n            }\n        }\n        else if\
    \ (diff < diff1) {\n            while (diff > diff1) {\n                if (l1.Contains(mid))\n\
    \                    result.Add(mid);\n                mid = (mid + min1) / 2;\n\
    \                diff1 = max1 - min1;\n                diff2 = max2 - min2;\n\
    \                diff = mid - min;\n            }\n            while (diff < diff2)\
    \ {\n                if (l2.Contains(mid))\n                    result.Add(mid);\n\
    \                mid = (mid + min2) / 2;\n                diff1 = max1 - min1;\n\
    \                diff2 = max2 - min2;\n                diff = mid - min;\n   \
    \         }\n        }\n        else if (diff > diff2) {\n            while (diff\
    \ > diff2) {\n                if (l1.Contains(mid))\n                    result.Add(mid);\n\
    \                mid = (mid + min1) / 2;\n                diff1 = max1 - min1;\n\
    \                diff2 = max2 - min2;\n                diff = mid - min;\n   \
    \         }\n            while (diff < diff1) {\n                if (l2.Contains(mid))\n\
    \                    result.Add(mid);\n                mid = (mid + min2) / 2;\n\
    \                diff1 = max1 - min1;\n                diff2 = max2 - min2;\n\
    \                diff = mid - min;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            bool found = false;\n            foreach (long y in l2) {\n \
    \               if (x == y) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long minValue = l1.Min();\n        long maxValue = l1.Max();\n        long\
    \ minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n        long minValue3\
    \ = l1.Min();\n        long maxValue3 = l1.Max();\n        long minValue4 = l2.Min();\n\
    \        long maxValue4 = l2.Max();\n        long minValue5 = l1.Min();\n    \
    \    long maxValue5 = l1.Max();\n        long minValue6 = l2.Min();\n        long\
    \ maxValue6 = l2.Max();\n        long minValue7 = l1.Min();\n        long maxValue7\
    \ = l1.Max();\n        long minValue8 = l2.Min();\n        long maxValue8 = l2.Max();\n\
    \        long minValue9 = l1.Min();\n        long maxValue9 = l1.Max();\n    \
    \    long minValue10 = l2.Min();\n        long maxValue10 = l2.Max();\n      \
    \  long minValue11 = l1.Min();\n        long maxValue11 = l1.Max();\n        long\
    \ minValue12 = l2.Min();\n        long maxValue12 = l2.Max();\n        long minValue13\
    \ = l1.Min();\n        long maxValue13 = l1.Max();\n        long minValue14 =\
    \ l2.Min();\n        long maxValue14 = l2.Max();\n        long minValue15 = l1.Min();\n\
    \        long maxValue15 = l1.Max();\n        long minValue16 = l2.Min();\n  \
    \      long maxValue16 = l2.Max();\n        long minValue17 = l1.Min();\n    \
    \    long maxValue17 = l1.Max();\n        long minValue18 = l2.Min();\n      \
    \  long maxValue18 = l2.Max();\n        long minValue19 = l1.Min();\n        long\
    \ maxValue19 = l1.Max();\n        long minValue20 = l2.Min();\n        long maxValue20\
    \ = l2.Max();\n        long minValue21 = l1.Min();\n        long maxValue21 =\
    \ l1.Max();\n        long minValue22 = l2.Min();\n        long maxValue22 = l2.Max();\n\
    \        long minValue23 = l1.Min();\n        long maxValue23 = l1.Max();\n  \
    \      long minValue24 = l2.Min();\n        long maxValue24 = l2.Max();\n", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \   }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        long maxValue = long.MinValue;\n\
    \        foreach (long x in l1) {\n            if (x < maxValue) {\n         \
    \       maxValue = x;\n            }\n        }\n        foreach (long x in l2)\
    \ {\n            if (x < maxValue) {\n                maxValue = x;\n        \
    \    }\n        }\n        long minValue = long.MaxValue;\n        foreach (long\
    \ x in l1) {\n            if (x > minValue) {\n                minValue = x;\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (x\
    \ > minValue) {\n                minValue = x;\n            }\n        }\n   \
    \     long maxValue2 = long.MinValue;\n        foreach (long x in l1) {\n    \
    \        if (x < maxValue2) {\n                maxValue2 = x;\n            }\n\
    \        }\n        foreach (long x in l2) {\n            if (x < maxValue2) {\n\
    \                maxValue2 = x;\n            }\n        }\n        long minValue2\
    \ = long.MaxValue;\n        foreach (long x in l1) {\n            if (x > minValue2)\
    \ {\n                minValue2 = x;\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (x > minValue2) {\n                minValue2\
    \ = x;\n            }\n        }\n        long maxValue3 = long.MinValue;\n  \
    \      foreach (long x in l1) {\n            if (x < maxValue3) {\n          \
    \      maxValue3 = x;\n            }\n        }\n        foreach (long x in l2)\
    \ {\n            if (x < maxValue3) {\n                maxValue3 = x;\n      \
    \      }\n        }\n        long minValue3 = long.MaxValue;\n        foreach\
    \ (long x in l1) {\n            if (x > minValue3) {\n                minValue3\
    \ = x;\n            }\n        }\n        foreach (long x in l2) {\n         \
    \   if (x > minValue3) {\n                minValue3 = x;\n            }\n    \
    \    }\n        long maxValue4 = long.MinValue;\n        foreach (long x in l1)\
    \ {\n            if (x < maxValue4) {\n                maxValue4 = x;\n      \
    \      }\n        }\n        foreach (long x in l2) {\n            if (x < maxValue4)\
    \ {\n                maxValue4 = x;\n            }\n        }\n        long minValue4\
    \ = long.MaxValue;\n        foreach (long x in l1) {\n            if (x > minValue4)\
    \ {\n                minValue4 = x;\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (x > minValue4) {\n                minValue4\
    \ = x;\n            }\n        }\n        long maxValue5 = long.MinValue;\n  \
    \      foreach (long x in l1) {\n            if (x < maxValue5) {\n          \
    \      maxValue5 = x;\n            }\n        }\n        foreach (long x in l2)\
    \ {\n            if (x < maxValue5) {\n                maxValue5 = x;\n      \
    \      }\n        }\n        long ", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) {\n                    common\
    \ += i;\n                }\n            }\n            result.Add(common);\n \
    \           common = 0;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ continue;\n                if (i == common) result.Add(i);\n               \
    \ else if (j == common) result.Add(j);\n                else if (i == j) common++;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y)\n                    result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long mid1\
    \ = min1 + (max1 - min1) / 2;\n        long mid2 = min2 + (max2 - min2) / 2;\n\
    \        long mid = mid1;\n        long minDiff = max1 - min2;\n        long maxDiff\
    \ = max1 - min1;\n        while (true) {\n            if (minDiff == maxDiff)\
    \ {\n                result.Add(mid);\n                break;\n            }\n\
    \            if (minDiff > maxDiff) {\n                mid = mid2;\n         \
    \       minDiff = maxDiff - min2;\n            } else {\n                mid =\
    \ mid1;\n                maxDiff = minDiff - max1;\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common || j == common)\
    \ continue;\n                if (i == j) common = i;\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (result.Contains(j)) continue;\n                if (result.Contains(i)) continue;\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        if (common > 0) {\n            result.Add(common);\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) {\n                    result.Remove(i);\n\
    \                    result.Remove(j);\n                }\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l2) {\n            if (l1.Contains(i)) {\n            \
    \    max = Math.Max(max, i);\n            }\n        }\n        long min = long.MaxValue;\n\
    \        foreach (long i in l1) {\n            if (l2.Contains(i)) {\n       \
    \         min = Math.Min(min, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (l1.Contains(i)) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        long mid = (max + min) / 2;\n       \
    \ long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long mid4 = mid\
    \ / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n        long\
    \ mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9 = mid / 9;\n\
    \        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n        long\
    \ mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long mid14 = mid\
    \ / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid / 16;\n    \
    \    long mid17 = mid / 17;\n        long mid18 = mid / 18;\n        long mid19\
    \ = mid / 19;\n        long mid20 = mid / 20;\n        long mid21 = mid / 21;\n\
    \        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n        long\
    \ mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long mid26 = mid\
    \ / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid / 28;\n    \
    \    long mid29 = mid / 29;\n        long mid30 = mid / 30;\n        long mid31\
    \ = mid / 31;\n        long mid32 = mid / 32;\n        long mid33 = mid / 33;\n\
    \        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n        long\
    \ mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long mid38 = mid\
    \ / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid / ", "     \
    \   List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    common++;\n                }\n            }\n \
    \       }\n        result.Add(common);\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = min1 + (max1 - min1) / 2;\n        long mid2\
    \ = min2 + (max2 - min2) / 2;\n        long mid = mid1;\n        long midmid =\
    \ mid2;\n        long midmidmid = mid;\n        long midmidmidmid = midmid;\n\
    \        long midmidmidmid = midmidmid;\n        long midmidmidmidmid = midmidmidmid;\n\
    \        long midmidmidmidmid = midmidmidmidmid;\n        long midmidmidmidmid\
    \ = midmidmidmidmid;\n        long midmidmidmidmid = midmidmidmidmid;\n      \
    \  long midmidmidmidmid = midmidmidmidmid;\n        long midmidmidmidmid = midmidmidmidmid;\n\
    \        long midmidmidmidmid = midmidmidmidmid;\n        long midmidmidmidmid\
    \ = midmidmidmidmid;\n        long midmidmidmidmid = midmidmidmidmid;\n      \
    \  long midmidmidmid = midmidmidmid;\n        long midmidmidmid = midmidmid;\n\
    \        long midmidmid = midmid;\n        long midmid = mid;\n        long midmid\
    \ = mid;\n        long midmid = mid;\n        long midmid = mid;\n        long\
    \ midmid = mid;\n        long midmid = mid;\n        long midmid = mid;\n    \
    \    long midmid = mid;\n        long midmid = mid;\n        long midmid = mid;\n\
    \        long midmid = mid;\n        long midmid = mid;\n        long midmid =\
    \ mid;\n        long midmid = mid;\n        long midmid = mid;\n        long midmid\
    \ = mid;\n        long midmid = mid;\n        long midmid = mid;\n        long\
    \ midmid = mid;\n        long midmid = mid;\n        long midmid = mid;\n    \
    \    long midmid = mid;\n        long midmid = mid;\n        long midmid = mid;\n\
    \        long midmid = mid;\n        long midmid = mid;\n        long midmid =\
    \ mid;\n        long midmid = mid;\n", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) continue;\n                if (i == common\
    \ || j == common) continue;\n                if (i == j) common++;\n         \
    \       else if (i == common) common++;\n                else common++;\n    \
    \        }\n            result.Add(i);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n        long mid2 = (max2\
    \ + min2) / 2;\n        long mid = mid1;\n        while (true) {\n           \
    \ if (l1.Contains(mid) && l2.Contains(mid)) {\n                result.Add(mid);\n\
    \                mid = (max1 + min1) / 2;\n            } else if (mid == min1)\
    \ {\n                mid = (max1 + min2) / 2;\n            } else if (mid == min2)\
    \ {\n                mid = (max2 + min1) / 2;\n            } else if (mid == max1)\
    \ {\n                mid = (max2 + min2) / 2;\n            } else if (mid == max2)\
    \ {\n                break;\n            } else {\n                mid = (mid\
    \ + min1) / 2;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common += 1;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y)\n                    result.Add(x);\n            }\n        }\n      \
    \  return result.Distinct().OrderBy(x => x).ToList();", "        List<long> result\
    \ = new List<long>();\n        long common = 0;\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common) result.Add(i);\n                if (j == common)\
    \ result.Add(j);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          foreach (long y in l2) {\n                if (x == y) {\n         \
    \           result.Add(x);\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long common = 0;\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common) result.Add(j);\n                if (j == common)\
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          foreach (long y in l2) {\n                if (x == y) {\n         \
    \           result.Add(x);\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   if (max > 0) {\n            long min = long.MaxValue;\n            foreach\
    \ (long x in l1) {\n                if (l2.Contains(x)) {\n                  \
    \  min = Math.Min(min, x);\n                }\n            }\n            foreach\
    \ (long x in l2) {\n                if (l1.Contains(x)) {\n                  \
    \  min = Math.Min(min, x);\n                }\n            }\n            long\
    \ mid = (max + min) / 2;\n            while (true) {\n                result.Add(mid);\n\
    \                if (mid > max) {\n                    mid = mid / 2;\n      \
    \          } else if (mid < min) {\n                    mid = mid * 2;\n     \
    \           } else {\n                    break;\n                }\n        \
    \    }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long mid1 = (max1 + min1)\
    \ / 2;\n        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2)\
    \ / 2;\n        long minDiff = mid1 - mid2;\n        if (minDiff < 0) {\n    \
    \        minDiff = minDiff + 1;\n        }\n        long maxDiff = mid2 - mid1;\n\
    \        if (maxDiff < 0) {\n            maxDiff = maxDiff + 1;\n        }\n \
    \       long midDiff = maxDiff - minDiff;\n        if (midDiff < 0) {\n      \
    \      midDiff = midDiff + 1;\n        }\n        long midMidDiff = midDiff /\
    \ 2;\n        long midMid1 = (mid1 + mid2) / 2;\n        long midMid2 = (mid2\
    \ + mid1) / 2;\n        long midMid = (mid1 + mid2) / 2;\n        long midMinDiff\
    \ = midMid1 - midMid2;\n        if (midMinDiff < 0) {\n            midMinDiff\
    \ = midMinDiff + 1;\n        }\n        long midMaxDiff = midMid2 - midMid1;\n\
    \        if (midMaxDiff < 0) {\n            midMaxDiff = midMaxDiff + 1;\n   \
    \     }\n        long midMaxDiff1 = midMid1 - midMid;\n        if (midMaxDiff1\
    \ < 0) {\n            midMaxDiff1 = midMaxDiff1 + 1;\n        }\n        long\
    \ midMaxDiff2 = midMid2 - midMid;\n        if (midMaxDiff2 < 0) {\n          \
    \  midMaxDiff2 = midMaxDiff2 + 1;\n        }\n        long midMaxDiff = midMaxDiff1\
    \ + midMaxDiff2;\n        if (midMaxDiff < 0) {\n            midMaxDiff = midMaxDiff\
    \ + 1;\n        }\n        long midMinDiff1 = midMid1 - midMid;\n        if (midMinDiff1\
    \ < 0) {\n            midMinDiff1 = midMinDiff1 + 1;\n        }\n        long\
    \ midMinDiff2 = midMid2 - midMid;\n        if (midMinDiff2 < 0) {\n          \
    \  midMinDiff2 = midMinDiff2 + 1;\n        }\n        long midMinDiff = midMinDiff1\
    \ + midMinDiff2;\n        if (midMinDiff < 0) {\n            midMinDiff = midMinDiff\
    \ + 1;\n        }\n        long midMaxDiff1 = midMid1 - midMid;\n        if (midMaxDiff1\
    \ < 0) {\n            midMaxDiff1 = ", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result.OrderBy(x => x).Distinct().ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) continue;\n   \
    \             if (result.Contains(j) && result.Contains(i)) continue;\n      \
    \          if (result.Contains(i) && result.Contains(j)) continue;\n         \
    \       if (result.Contains(j) && result.Contains(i)) continue;\n            \
    \    if (result.Contains(i) && result.Contains(j)) continue;\n               \
    \ if (result.Contains(j) && result.Contains(i)) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) continue;\n                if (result.Contains(j)\
    \ && result.Contains(i)) continue;\n                if (result.Contains(i) &&\
    \ result.Contains(j)) continue;\n                if (result.Contains(j) && result.Contains(i))\
    \ continue;\n                if (result.Contains(i) && result.Contains(j)) continue;\n\
    \                if (result.Contains(j) && result.Contains(i)) continue;\n   \
    \             if (result.Contains(i) && result.Contains(j)) continue;\n      \
    \          if (result.Contains(j) && result.Contains(i)) continue;\n         \
    \       if (result.Contains(i) && result.Contains(j)) continue;\n            \
    \    if (result.Contains(j) && result.Contains(i)) continue;\n               \
    \ if (result.Contains(i) && result.Contains(j)) continue;\n                if\
    \ (result.Contains(j) && result.Contains(i)) continue;\n                if (result.Contains(i)\
    \ && result.Contains(j)) continue;\n                if (result.Contains(j) &&\
    \ result.Contains(i)) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ continue;\n                if (result.Contains(j) && result.Contains(i)) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) continue;\n   \
    \             if (result.Contains(j) && result.Contains(i)) continue;\n      \
    \          if (result.Contains(i) && result.Contains(j)) continue;\n         \
    \       if (result.Contains(j) && result.Contains(i)) continue;\n            \
    \    if (result.Contains(i) && result.Contains(j)) continue;\n               \
    \ if (result.Contains(j) && result.Contains(i)) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) continue;\n                if (result.Contains(j)\
    \ && result.Contains(i)) continue;\n                if (result.Contains(i) &&\
    \ result.Contains(j)) continue;\n                if (result.Contains(j) && result.Contains(i))\
    \ continue;\n                if (result.Contains(i) && result.Contains(j)) continue;\n\
    \                if (result.Contains(j) && result.Contains(i)) continue;\n   \
    \             if (result.Contains(i) && result.Contains(j)) continue;\n      \
    \          if (result.Contains(j) && result.Contains(i)) continue;\n         \
    \       if (result.Contains(i) && result.Contains(j)) continue;\n            \
    \    if (", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x)) {\n  \
    \              max = Math.Max(max, x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (l1.Contains(x)) {\n                max = Math.Max(max,\
    \ x);\n            }\n        }\n        foreach (long x in l1) {\n          \
    \  if (l2.Contains(x)) {\n                result.Add(x);\n            }\n    \
    \    }\n        foreach (long x in l2) {\n            if (l1.Contains(x)) {\n\
    \                result.Add(x);\n            }\n        }\n        return result.OrderByDescending(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long x in l1) {\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    common++;\n      \
    \          }\n            }\n        }\n        result.Add(common);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long common\
    \ = 0;\n        foreach (long x in l1) {\n            foreach (long y in l2) {\n\
    \                if (x == y) {\n                    common++;\n              \
    \  }\n            }\n        }\n        result.Add(common);\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long x in l1) {\n            foreach (long y in l2) {\n        \
    \        if (x == y) {\n                    common++;\n                }\n   \
    \         }\n        }\n        result.Add(common);\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) {\n                    common++;\n      \
    \          }\n            }\n        }\n        result.Add(common);\n        return\
    \ result.OrderBy(x => x).Distinct().ToList();", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var x in l1) {\n            foreach (var y in\
    \ l2) {\n                if (x == y) {\n                    result.Add(x);\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return result.OrderBy(x => x).ToList();", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            foreach (long y\
    \ in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l2) {\n            if (l1.Contains(i)) {\n            \
    \    max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        var result = new List<long>();\n\
    \        foreach (var x in l1) {\n            foreach (var y in l2) {\n      \
    \          if (x == y) {\n                    result.Add(x);\n               \
    \     break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long x in l1) {\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    common += 1;\n   \
    \             }\n            }\n        }\n        result.Add(common);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ max1 = l1.Max();\n        long min1 = l1.Min();\n        long max2 = l2.Max();\n\
    \        long min2 = l2.Min();\n        long maxDiff = max1 - min2;\n        long\
    \ minDiff = max2 - min1;\n        long maxDiff2 = maxDiff / 2;\n        long minDiff2\
    \ = minDiff / 2;\n        long mid1 = maxDiff / 2;\n        long mid2 = minDiff\
    \ / 2;\n        long midDiff = mid1 - mid2;\n        long midDiff2 = midDiff /\
    \ 2;\n        long midDiff3 = midDiff2 / 2;\n        long midDiff4 = midDiff3\
    \ / 2;\n        long midDiff5 = midDiff4 / 2;\n        long midDiff6 = midDiff5\
    \ / 2;\n        long midDiff7 = midDiff6 / 2;\n        long midDiff8 = midDiff7\
    \ / 2;\n        long midDiff9 = midDiff8 / 2;\n        long midDiff10 = midDiff9\
    \ / 2;\n        long midDiff11 = midDiff10 / 2;\n        long midDiff12 = midDiff11\
    \ / 2;\n        long midDiff13 = midDiff12 / 2;\n        long midDiff14 = midDiff13\
    \ / 2;\n        long midDiff15 = midDiff14 / 2;\n        long midDiff16 = midDiff15\
    \ / 2;\n        long midDiff17 = midDiff16 / 2;\n        long midDiff18 = midDiff17\
    \ / 2;\n        long midDiff19 = midDiff18 / 2;\n        long midDiff20 = midDiff19\
    \ / 2;\n        long midDiff21 = midDiff20 / 2;\n        long midDiff22 = midDiff21\
    \ / 2;\n        long midDiff23 = midDiff22 / 2;\n        long midDiff24 = midDiff23\
    \ / 2;\n        long midDiff25 = midDiff24 / 2;\n        long midDiff26 = midDiff25\
    \ / 2;\n        long midDiff27 = midDiff26 / 2;\n        long midDiff28 = midDiff27\
    \ / 2;\n        long midDiff29 = midDiff28 / 2;\n        long midDiff30 = midDiff29\
    \ / 2;\n        long midDiff31 = midDiff30 / 2;\n        long midDiff32 = midDiff31\
    \ / 2;\n        long midDiff33 = midDiff32 / 2;\n        long midDiff34 = midDiff33\
    \ / 2;\n        long midDiff35 = midDiff34 / ", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            foreach (long y\
    \ in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        foreach (long x in l2) {\n            foreach (long\
    \ y in l1) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result.OrderBy(x => x).Distinct().ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y)\n                    result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result.OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ continue;\n                if (i == common) continue;\n                if (j\
    \ == common) continue;\n                if (i == j) continue;\n              \
    \  if (i == common) continue;\n                if (j == common) continue;\n  \
    \              if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == ", "        List<long> result = new\
    \ List<long>();\n        long common = 0;\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             common++;\n                    break;\n                }\n     \
    \       }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long x in l1) {\n            foreach (long y in l2) {\n        \
    \        if (x == y) {\n                    common += 1;\n                }\n\
    \            }\n        }\n        result.Add(common);\n        return result;",
  "        var result = new List<long>();\n        foreach (var x in l1) {\n     \
    \       foreach (var y in l2) {\n                if (x == y) {\n             \
    \       result.Add(x);\n                    break;\n                }\n      \
    \      }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result.OrderBy(x\
    \ => x).Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result.Distinct().OrderBy(x => x).ToList();", "        List<long> result = new\
    \ List<long>();\n        long common = 0;\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == ", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        foreach (long x in l2) {\n\
    \            foreach (long y in l1) {\n                if (x == y) {\n       \
    \             common++;\n                }\n            }\n        }\n       \
    \ if (common > 0) {\n            result.Add(common);\n        }\n        return\
    \ result.OrderBy(x => x).ToList();", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   foreach (long x in l2) {\n            if (l1.Contains(x)) {\n            \
    \    max = Math.Max(max, x);\n            }\n        }\n        long min = long.MaxValue;\n\
    \        foreach (long x in l1) {\n            if (l2.Contains(x)) {\n       \
    \         min = Math.Min(min, x);\n            }\n        }\n        foreach (long\
    \ x in l2) {\n            if (l1.Contains(x)) {\n                min = Math.Min(min,\
    \ x);\n            }\n        }\n        long mid = max / 2;\n        long low\
    \ = min - mid * 2;\n        long high = max + mid * 2;\n        long mid1 = mid\
    \ - 1;\n        long mid2 = mid + 1;\n        long mid3 = mid + 2;\n        long\
    \ mid4 = mid + 3;\n        long mid5 = mid + 4;\n        long mid6 = mid + 5;\n\
    \        long mid7 = mid + 6;\n        long mid8 = mid + 7;\n        long mid9\
    \ = mid + 8;\n        long mid10 = mid + 9;\n        long mid11 = mid + 10;\n\
    \        long mid12 = mid + 11;\n        long mid13 = mid + 12;\n        long\
    \ mid14 = mid + 13;\n        long mid15 = mid + 14;\n        long mid16 = mid\
    \ + 15;\n        long mid17 = mid + 16;\n        long mid18 = mid + 17;\n    \
    \    long mid19 = mid + 18;\n        long mid20 = mid + 19;\n        long mid21\
    \ = mid + 20;\n        long mid22 = mid + 21;\n        long mid23 = mid + 22;\n\
    \        long mid24 = mid + 23;\n        long mid25 = mid + 24;\n        long\
    \ mid26 = mid + 25;\n        long mid27 = mid + 26;\n        long mid28 = mid\
    \ + 27;\n        long mid29 = mid + 28;\n        long mid30 = mid + 29;\n    \
    \    long mid31 = mid + 30;\n        long mid32 = mid + 31;\n        long mid33\
    \ = mid + 32;\n        long mid34 = mid + 33;\n        long mid35 = mid + 34;\n\
    \        long mid36 = mid + 35;\n        long mid37 = mid + 36;\n        long\
    \ mid38 = mid + 37;\n        long mid39 = mid + 38;\n        long mid40 = mid\
    \ + 39;\n        long mid41 = mid + 40", "        var result = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    common++;\n                }\n            }\n \
    \       }\n        result.Add(common);\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l2) {\n            if (l1.Contains(i)) {\n            \
    \    max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long common = 0;\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) continue;\n                if (i == common)\
    \ result.Add(i);\n                if (j == common) result.Add(j);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long common = 0;\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) {\n                    common++;\n \
    \               }\n            }\n        }\n        foreach (long i in l2) {\n\
    \            foreach (long j in l1) {\n                if (i == j) {\n       \
    \             common++;\n                }\n            }\n        }\n       \
    \ result.Add(common);\n        return result.OrderBy(x => x).Distinct().ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result.Distinct().OrderBy(x => x).ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) continue;\n                if (result.Contains(j)\
    \ && result.Contains(i)) continue;\n                if (result.Contains(i) &&\
    \ result.Contains(j)) continue;\n                if (result.Contains(j) && result.Contains(i))\
    \ continue;\n                if (result.Contains(i) && result.Contains(j)) continue;\n\
    \                if (result.Contains(j) && result.Contains(i)) continue;\n   \
    \             if (result.Contains(i) && result.Contains(j)) continue;\n      \
    \          if (result.Contains(j) && result.Contains(i)) continue;\n         \
    \       if (result.Contains(i) && result.Contains(j)) continue;\n            \
    \    if (result.Contains(j) && result.Contains(i)) continue;\n               \
    \ if (result.Contains(i) && result.Contains(j)) continue;\n                if\
    \ (result.Contains(j) && result.Contains(i)) continue;\n                if (result.Contains(i)\
    \ && result.Contains(j)) continue;\n                if (result.Contains(j) &&\
    \ result.Contains(i)) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ continue;\n                if (result.Contains(j) && result.Contains(i)) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) continue;\n   \
    \             if (result.Contains(j) && result.Contains(i)) continue;\n      \
    \          if (result.Contains(i) && result.Contains(j)) continue;\n         \
    \       if (result.Contains(j) && result.Contains(i)) continue;\n            \
    \    if (result.Contains(i) && result.Contains(j)) continue;\n               \
    \ if (result.Contains(j) && result.Contains(i)) continue;\n                if\
    \ (result.Contains(i) && result.Contains(j)) continue;\n                if (result.Contains(j)\
    \ && result.Contains(i)) continue;\n                if (result.Contains(i) &&\
    \ result.Contains(j)) continue;\n                if (result.Contains(j) && result.Contains(i))\
    \ continue;\n                if (result.Contains(i) && result.Contains(j)) continue;\n\
    \                if (result.Contains(j) && result.Contains(i)) continue;\n   \
    \             if (result.Contains(i) && result.Contains(j)) continue;\n      \
    \          if (result.Contains(j) && result.Contains(i)) continue;\n         \
    \       if (result.Contains(i) && result.Contains(j)) continue;\n            \
    \    if (result.Contains(j) && result.Contains(i)) continue;\n               \
    \ if (result.Contains(i) && result.Contains(j)) continue;\n                if\
    \ (result.Contains(j) && result.Contains(i)) continue;\n                if (result.Contains(i)\
    \ && result.Contains(j)) continue;\n                if (result.Contains(j) &&\
    \ result.Contains(i)) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ continue;\n                if (", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y)\n                    result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long common = 0;\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) continue;\n                if (i ==\
    \ common) continue;\n                if (j == common) continue;\n            \
    \    if (i == j) continue;\n                if (i == common) continue;\n     \
    \           if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == common) continue;\n                if (j == common) continue;\n\
    \                if (i == j) continue;\n                if (i == common) continue;\n\
    \                if (j == common) continue;\n                if (i == j) continue;\n\
    \                if (i == common) continue;\n                if (j == common)\
    \ continue;\n                if (i == j) continue;\n                if (i == common)\
    \ continue;\n                if (j == common) continue;\n                if (i\
    \ == j) continue;\n                if (i == common) continue;\n              \
    \  if (j == common) continue;\n                if (i == j) continue;\n       \
    \         if (i == ", "        List<long> result = new List<long>();\n       \
    \ long common = 0;\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) {\n                    common++;\n \
    \               }\n            }\n        }\n        result.Add(common);\n   \
    \     return result.OrderBy(x => x).Distinct().ToList();", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long common = 0;\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 common++;\n                    break;\n                }\n \
    \           }\n            if (common > 0) {\n                result.Add(x);\n\
    \                common = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long maxValue = long.MaxValue;\n\
    \        long minValue = long.MinValue;\n        foreach (long x in l1) {\n  \
    \          if (l2.Contains(x)) {\n                result.Add(x);\n           \
    \ }\n        }\n        foreach (long x in l2) {\n            if (!l1.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        foreach\
    \ (long x in result) {\n            if (x < minValue) {\n                minValue\
    \ = x;\n            }\n            if (x > maxValue) {\n                maxValue\
    \ = x;\n            }\n        }\n        long range = (maxValue - minValue) +\
    \ 1;\n        long step = (long.MaxValue - minValue) / range;\n        long currentValue\
    \ = minValue;\n        while (result.Count > 0) {\n            long value = currentValue;\n\
    \            int count = 0;\n            foreach (long x in result) {\n      \
    \          if (x == value) {\n                    count++;\n                }\n\
    \            }\n            if (count == result.Count) {\n                result.Remove(value);\n\
    \            } else {\n                currentValue += step;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = i;\n                break;\n            }\n       \
    \ }\n        foreach (long i in l2) {\n            if (l1.Contains(i)) {\n   \
    \             if (i == max) {\n                    result.Add(i);\n          \
    \      }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long minValue = l1.Min();\n        long maxValue = l1.Max();\n        long\
    \ minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n        long minValue3\
    \ = l1.Min();\n        long maxValue3 = l1.Max();\n        long minValue4 = l2.Min();\n\
    \        long maxValue4 = l2.Max();\n        long minValue5 = l1.Min();\n    \
    \    long maxValue5 = l1.Max();\n        long minValue6 = l2.Min();\n        long\
    \ maxValue6 = l2.Max();\n        long minValue7 = l1.Min();\n        long maxValue7\
    \ = l1.Max();\n        long minValue8 = l2.Min();\n        long maxValue8 = l2.Max();\n\
    \        long minValue9 = l1.Min();\n        long maxValue9 = l1.Max();\n    \
    \    long minValue10 = l2.Min();\n        long maxValue10 = l2.Max();\n      \
    \  long minValue11 = l1.Min();\n        long maxValue11 = l1.Max();\n        long\
    \ minValue12 = l2.Min();\n        long maxValue12 = l2.Max();\n        long minValue13\
    \ = l1.Min();\n        long maxValue13 = l1.Max();\n        long minValue14 =\
    \ l2.Min();\n        long maxValue14 = l2.Max();\n        long minValue15 = l1.Min();\n\
    \        long maxValue15 = l1.Max();\n        long minValue16 = l2.Min();\n  \
    \      long maxValue16 = l2.Max();\n        long minValue17 = l1.Min();\n    \
    \    long maxValue17 = l1.Max();\n        long minValue18 = l2.Min();\n      \
    \  long maxValue18 = l2.Max();\n        long minValue19 = l1.Min();\n        long\
    \ maxValue19 = l1.Max();\n        long minValue20 = l2.Min();\n        long maxValue20\
    \ = l2.Max();\n        long minValue21 = l1.Min();\n        long maxValue21 =\
    \ l1.Max();\n        long minValue22 = l2.Min();\n        long maxValue22 = l2.Max();\n\
    \        long minValue23 = l1.Min();\n        long maxValue23 = l1.Max();\n  \
    \      long minValue24 = l2.Min();\n        long maxValue24 = l2.Max();\n", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long x in l1) {\n            foreach (long y in l2) {\n        \
    \        if (x == y) {\n                    common++;\n                }\n   \
    \         }\n        }\n        if (common > 0) {\n            result.Add(common);\n\
    \        }\n        return result.OrderBy(x => x).Distinct().ToList();", "   \
    \     List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          foreach (long y in l2) {\n                if (x == y) {\n         \
    \           result.Add(x);\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long common = 0;\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 common++;\n                    break;\n                }\n \
    \           }\n            if (common > 0) {\n                result.Add(x);\n\
    \                common = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long minDiff = max1 - min1;\n        long maxDiff = max2\
    \ - min2;\n        long diff = 0;\n        if (minDiff > maxDiff) {\n        \
    \    diff = minDiff;\n        } else {\n            diff = maxDiff;\n        }\n\
    \        long mid = (min1 + max1) / 2;\n        long midDiff = max1 - min1;\n\
    \        long midDiff2 = max2 - min2;\n        long midDiff3 = maxDiff - minDiff;\n\
    \        long midDiff4 = midDiff / 2;\n        long midDiff5 = midDiff2 / 2;\n\
    \        long midDiff6 = midDiff3 / 2;\n        long midDiff7 = midDiff4 / 2;\n\
    \        long midDiff8 = midDiff5 / 2;\n        long midDiff9 = midDiff6 / 2;\n\
    \        long midDiff10 = midDiff7 / 2;\n        long midDiff11 = midDiff8 / 2;\n\
    \        long midDiff12 = midDiff9 / 2;\n        long midDiff13 = midDiff10 /\
    \ 2;\n        long midDiff14 = midDiff11 / 2;\n        long midDiff15 = midDiff12\
    \ / 2;\n        long midDiff16 = midDiff13 / 2;\n        long midDiff17 = midDiff14\
    \ / 2;\n        long midDiff18 = midDiff15 / 2;\n        long midDiff19 = midDiff16\
    \ / 2;\n        long midDiff20 = midDiff17 / 2;\n        long midDiff21 = midDiff18\
    \ / 2;\n        long midDiff22 = midDiff19 / 2;\n        long midDiff23 = midDiff20\
    \ / 2;\n        long midDiff24 = midDiff21 / 2;\n        long midDiff25 = midDiff22\
    \ / 2;\n        long midDiff26 = midDiff23 / 2;\n        long midDiff27 = midDiff24\
    \ / 2;\n        long midDiff28 = midDiff25 / 2;\n        long midDiff29 = midDiff26\
    \ / 2;\n        long midDiff30 = midDiff27 / 2;\n        long midDiff31 = midDiff28\
    \ / 2;\n        long midDiff32 = midDiff29 / 2;\n        long midDiff33 = midDiff30\
    \ / 2;\n        long midDiff34 = midDiff31 / 2;\n        long midDiff35 = midDiff32\
    \ / ", "        List<long> result = new List<long>();\n        long common = 0;\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    common++;\n                }\n\
    \            }\n        }\n        result.Add(common);\n        return result.OrderBy(x\
    \ => x).Distinct().ToList();", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    result.Add(x);\n                  \
    \  break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long i in l1) {\n            bool found = false;\n            foreach\
    \ (long j in l2) {\n                if (i == j) found = true;\n            }\n\
    \            if (!found) result.Add(i);\n        }\n        return result;", " \
    \       var result = new List<long>();\n        foreach (var i in l1) {\n    \
    \        foreach (var j in l2) {\n                if (i == j) continue;\n    \
    \            if (result.Contains(i) && result.Contains(j)) continue;\n       \
    \         if (result.Contains(j) && result.Contains(i)) continue;\n          \
    \      result.Add(i);\n            }\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long maxValue = l1.Max();\n\
    \        long minValue = l2.Min();\n        long maxIndex = 0;\n        long minIndex\
    \ = 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxSum\
    \ = 0;\n        long minSum = 0;\n        long maxProduct = 0;\n        long minProduct\
    \ = 0;\n        long maxProductSum = 0;\n        long minProductSum = 0;\n   \
    \     long maxProductProduct = 0;\n        long minProductProduct = 0;\n     \
    \   long maxProductProductSum = 0;\n        long minProductProductSum = 0;\n \
    \       long maxProductProductProduct = 0;\n        long minProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum\
    \ = 0;\n        long maxProductProductProductProduct = 0;\n        long minProductProductProductProduct\
    \ = 0;\n        long maxProductProductProductSum = 0;\n        long minProductProductProductSum",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        foreach (long x in l2) {\n            foreach (long\
    \ y in l1) {\n                if (x == y) {\n                    common--;\n \
    \               }\n            }\n        }\n        if (common > 0) {\n     \
    \       result.Add(common);\n        }\n        return result.OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        long max = 0;\n       \
    \ foreach (long i in l1) {\n            if (l2.Contains(i)) {\n              \
    \  max = i;\n            }\n        }\n        foreach (long i in l2) {\n    \
    \        if (l1.Contains(i)) {\n                if (max < i) {\n             \
    \       max = i;\n                }\n            }\n        }\n        result.Add(max);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ common = 0;\n        foreach (long i in l1) {\n            foreach (long j in\
    \ l2) {\n                if (i == j) continue;\n                if (i == common)\
    \ result.Add(i);\n                if (j == common) result.Add(j);\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   foreach (long x in l2) {\n            if (l1.Contains(x)) {\n            \
    \    max = Math.Max(max, x);\n            }\n        }\n        foreach (long\
    \ x in l1) {\n            if (l2.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result.OrderBy(x => x).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \           l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (result.Contains(i) && result.Contains(j)) {\n           \
    \         result.Remove(i);\n                    result.Remove(j);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common++;\n                }\n            }\n       \
    \ }\n        result.Add(common);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = l1.Min();\n        long\
    \ maxValue = l2.Max();\n        long minValueIndex = l1.IndexOf(minValue);\n \
    \       long maxValueIndex = l2.IndexOf(maxValue);\n        long minValueLength\
    \ = l1.Count - minValueIndex;\n        long maxValueLength = l2.Count - maxValueIndex;\n\
    \        long minValueSum = l1.Sum(x => x - minValue);\n        long maxValueSum\
    \ = l2.Sum(x => x - maxValue);\n        long minValueSumIndex = l1.IndexOf(minValueSum);\n\
    \        long maxValueSumIndex = l2.IndexOf(maxValueSum);\n        long minValueSumLength\
    \ = l1.Count - minValueSumIndex;\n        long maxValueSumLength = l2.Count -\
    \ maxValueSumIndex;\n        long minValueSumSum = l1.Sum(x => x - minValueSum);\n\
    \        long maxValueSumSum = l2.Sum(x => x - maxValueSum);\n        long minValueSumSumIndex\
    \ = l1.IndexOf(minValueSumSum);\n        long maxValueSumSumIndex = l2.IndexOf(maxValueSumSum);\n\
    \        long minValueSumSumLength = l1.Count - minValueSumSumIndex;\n       \
    \ long maxValueSumSumLength = l2.Count - maxValueSumSumIndex;\n        long minValueSumSumSum\
    \ = l1.Sum(x => x - minValueSumSum);\n        long maxValueSumSumSum = l2.Sum(x\
    \ => x - maxValueSumSum);\n        long minValueSumSumSumIndex = l1.IndexOf(minValueSumSumSum);\n\
    \        long maxValueSumSumSumIndex = l2.IndexOf(maxValueSumSumSum);\n      \
    \  long minValueSumSumSumLength = l1.Count - minValueSumSumSumIndex;\n       \
    \ long maxValueSumSumSumLength = l2.Count - maxValueSumSumSumIndex;\n        long\
    \ minValueSumSumSumSum = l1.Sum(x => x - minValueSumSumSum);\n        long maxValueSumSumSumSum\
    \ = l2.Sum(x => x - maxValueSumSumSum);\n        long minValueSumSumSumSumIndex\
    \ = l1.IndexOf(minValueSumSumSumSum);\n        long maxValueSumSumSumSumIndex\
    \ = l2.IndexOf(maxValueSumSumSumSum);\n        long minValueSumSumSumSumLength\
    \ = l1.Count - minValueSumSumSumSumIndex;\n        long maxValueSumSumSumSumLength\
    \ = ", "        List<long> result = new List<long>();\n        long common = 0;\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long x in l1) {\n            foreach (long y in l2) {\n        \
    \        if (x == y) {\n                    result.Add(x);\n                 \
    \   break;\n                }\n            }\n        }\n        return result.Distinct().ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = (min1 + max1) / 2;\n        long mid2 = (min2\
    \ + max2) / 2;\n        long mid = (min1 + max2) / 2;\n        bool found = false;\n\
    \        long minDiff = Long.MaxValue;\n        long maxDiff = Long.MinValue;\n\
    \        long diff;\n        long minDiffIndex = 0;\n        long maxDiffIndex\
    \ = 0;\n        long diffIndex;\n        long midIndex;\n        long midValue;\n\
    \        long midValue2;\n        long midValue3;\n        long midValue4;\n \
    \       long midValue5;\n        long midValue6;\n        long midValue7;\n  \
    \      long midValue8;\n        long midValue9;\n        long midValue10;\n  \
    \      long midValue11;\n        long midValue12;\n        long midValue13;\n\
    \        long midValue14;\n        long midValue15;\n        long midValue16;\n\
    \        long midValue17;\n        long midValue18;\n        long midValue19;\n\
    \        long midValue20;\n        long midValue21;\n        long midValue22;\n\
    \        long midValue23;\n        long midValue24;\n        long midValue25;\n\
    \        long midValue26;\n        long midValue27;\n        long midValue28;\n\
    \        long midValue29;\n        long midValue30;\n        long midValue31;\n\
    \        long midValue32;\n        long midValue33;\n        long midValue34;\n\
    \        long midValue35;\n        long midValue36;\n        long midValue37;\n\
    \        long midValue38;\n        long midValue39;\n        long midValue40;\n\
    \        long midValue41;\n        long midValue42;\n        long midValue43;\n\
    \        long midValue44;\n        long midValue45;\n        long midValue46;\n\
    \        long midValue47;\n        long midValue48;\n        long midValue49;\n\
    \        long midValue50;\n        long midValue51;\n        long midValue52;\n\
    \        long midValue53;\n        long midValue54;\n        long midValue55;\n\
    \        long midValue56;\n        long midValue57;\n", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            foreach (long\
    \ j in l2) {\n                if (i == j) continue;\n                if (result.Contains(i)\
    \ && result.Contains(j)) continue;\n                if (result.Contains(j) &&\
    \ result.Contains(i)) continue;\n                if (result.Contains(i) && result.Contains(j))\
    \ continue;\n                result.Add(i);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long i in l1) {\n            foreach (long j in l2) {\n                if (i\
    \ == j) {\n                    common++;\n                }\n            }\n \
    \       }\n        result.Add(common);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().ToList();", "    \
    \    var result = new List<long>();\n        foreach (var x in l1) {\n       \
    \     foreach (var y in l2) {\n                if (x == y) {\n               \
    \     result.Add(x);\n                    break;\n                }\n        \
    \    }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            bool found = false;\n            foreach (long y in l2) {\n \
    \               if (x == y) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long mid1 = (max1 + min1) / 2;\n     \
    \   long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + max2) / 2;\n  \
    \      long maxDiff = max1 - max2;\n        long minDiff = min1 - min2;\n    \
    \    long diff;\n        bool found = false;\n        long maxDiffIndex = 0;\n\
    \        long minDiffIndex = 0;\n        long maxDiffIndex2 = 0;\n        long\
    \ minDiffIndex2 = 0;\n        long maxDiffIndex3 = 0;\n        long minDiffIndex3\
    \ = 0;\n        long maxDiffIndex4 = 0;\n        long minDiffIndex4 = 0;\n   \
    \     long maxDiffIndex5 = 0;\n        long minDiffIndex5 = 0;\n        long maxDiffIndex6\
    \ = 0;\n        long minDiffIndex6 = 0;\n        long maxDiffIndex7 = 0;\n   \
    \     long minDiffIndex7 = 0;\n        long maxDiffIndex8 = 0;\n        long minDiffIndex8\
    \ = 0;\n        long maxDiffIndex9 = 0;\n        long minDiffIndex9 = 0;\n   \
    \     long maxDiffIndex10 = 0;\n        long minDiffIndex10 = 0;\n        long\
    \ maxDiffIndex11 = 0;\n        long minDiffIndex11 = 0;\n        long maxDiffIndex12\
    \ = 0;\n        long minDiffIndex12 = 0;\n        long maxDiffIndex13 = 0;\n \
    \       long minDiffIndex13 = 0;\n        long maxDiffIndex14 = 0;\n        long\
    \ minDiffIndex14 = 0;\n        long maxDiffIndex15 = 0;\n        long minDiffIndex15\
    \ = 0;\n        long maxDiffIndex16 = 0;\n        long minDiffIndex16 = 0;\n \
    \       long maxDiffIndex17 = 0;\n        long minDiffIndex17 = 0;\n        long\
    \ maxDiffIndex18 = 0;\n        long minDiffIndex18 = 0;\n        long maxDiffIndex19\
    \ = 0;\n        long minDiffIndex19 = 0;\n        long maxDiffIndex20 = 0;\n \
    \       long minDiffIndex20 = 0;\n        long maxDiffIndex21 = 0;\n        long\
    \ minDiffIndex21 = 0;\n        long maxDiffIndex22 = 0;\n        long minDiffIndex22\
    \ = 0;\n        long maxDiffIndex23 = 0;\n        long minDiffIndex23 = 0;\n \
    \       long maxDiffIndex24 = 0;\n        long minDiffIndex24 = 0;\n        long\
    \ maxDiffIndex25 = 0;\n        long minDiffIndex25 = 0;\n        long maxDiffIndex26\
    \ = 0;\n        long minDiff", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long i in l1) {\n            foreach\
    \ (long j in l2) {\n                if (i == j) continue;\n                if\
    \ (i == common) result.Add(i);\n                if (j == common) result.Add(j);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long common = 0;\n        foreach (long i in l1)\
    \ {\n            foreach (long j in l2) {\n                if (i == j) continue;\n\
    \                if (i == common) result.Add(i);\n                if (j == common)\
    \ result.Add(j);\n            }\n        }\n        return result;", "       \
    \ var result = new List<long>();\n        foreach (var x in l1) {\n          \
    \  foreach (var y in l2) {\n                if (x == y) {\n                  \
    \  result.Add(x);\n                    break;\n                }\n           \
    \ }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long common = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    common++;\n\
    \                }\n            }\n        }\n        result.Add(common);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            bool found = false;\n         \
    \   foreach (long j in l2) {\n                if (i == j) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n            if\
    \ (result.Count > max) {\n                max = result.Count;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long i in l1) {\n            foreach (long j in l2) {\n        \
    \        if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   foreach (long x in l2) {\n            if (l1.Contains(x)) {\n            \
    \    max = Math.Max(max, x);\n            }\n        }\n        long min = long.MaxValue;\n\
    \        foreach (long x in l1) {\n            if (l2.Contains(x)) {\n       \
    \         min = Math.Min(min, x);\n            }\n        }\n        foreach (long\
    \ x in l2) {\n            if (l1.Contains(x)) {\n                min = Math.Min(min,\
    \ x);\n            }\n        }\n        long mid = min + (max - min) / 2;\n \
    \       long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long mid4\
    \ = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n   \
    \     long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9 =\
    \ mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n \
    \       long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long mid14\
    \ = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid / 16;\n\
    \        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n        long\
    \ mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21 = mid\
    \ / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n    \
    \    long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long mid26\
    \ = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid / 28;\n\
    \        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n        long\
    \ mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33 = mid\
    \ / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n    \
    \    long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long mid38\
    \ = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid ", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            bool found = false;\n            foreach (long j in l2) {\n \
    \               if (i == j) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                max = Math.Max(max,\
    \ i);\n            }\n        }\n        foreach (long i in l2) {\n          \
    \  if (l1.Contains(i)) {\n                max = Math.Max(max, i);\n          \
    \  }\n        }\n        long min = long.MaxValue;\n        foreach (long i in\
    \ l1) {\n            if (l2.Contains(i)) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        foreach (long i in l2) {\n          \
    \  if (l1.Contains(i)) {\n                min = Math.Min(min, i);\n          \
    \  }\n        }\n        long mid = (min + max) / 2;\n        long mid2 = mid\
    \ / 2;\n        long mid3 = mid / 3;\n        long mid4 = mid / 4;\n        long\
    \ mid5 = mid / 5;\n        long mid6 = mid / 6;\n        long mid7 = mid / 7;\n\
    \        long mid8 = mid / 8;\n        long mid9 = mid / 9;\n        long mid10\
    \ = mid / 10;\n        long mid11 = mid / 11;\n        long mid12 = mid / 12;\n\
    \        long mid13 = mid / 13;\n        long mid14 = mid / 14;\n        long\
    \ mid15 = mid / 15;\n        long mid16 = mid / 16;\n        long mid17 = mid\
    \ / 17;\n        long mid18 = mid / 18;\n        long mid19 = mid / 19;\n    \
    \    long mid20 = mid / 20;\n        long mid21 = mid / 21;\n        long mid22\
    \ = mid / 22;\n        long mid23 = mid / 23;\n        long mid24 = mid / 24;\n\
    \        long mid25 = mid / 25;\n        long mid26 = mid / 26;\n        long\
    \ mid27 = mid / 27;\n        long mid28 = mid / 28;\n        long mid29 = mid\
    \ / 29;\n        long mid30 = mid / 30;\n        long mid31 = mid / 31;\n    \
    \    long mid32 = mid / 32;\n        long mid33 = mid / 33;\n        long mid34\
    \ = mid / 34;\n        long mid35 = mid / 35;\n        long mid36 = mid / 36;\n\
    \        long mid37 = mid / 37;\n        long mid38 = mid / 38;\n        long\
    \ mid39 = mid / 39;\n        long mid40 = mid / ", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long mid1\
    \ = min1 + (max1 - min1) / 2;\n        long mid2 = min2 + (max2 - min2) / 2;\n\
    \        long mid = mid1;\n        long mid2 = mid1;\n        long mid3 = mid1;\n\
    \        long mid4 = mid1;\n        long mid5 = mid1;\n        long mid6 = mid1;\n\
    \        long mid7 = mid1;\n        long mid8 = mid1;\n        long mid9 = mid1;\n\
    \        long mid10 = mid1;\n        long mid11 = mid1;\n        long mid12 =\
    \ mid1;\n        long mid13 = mid1;\n        long mid14 = mid1;\n        long\
    \ mid15 = mid1;\n        long mid16 = mid1;\n        long mid17 = mid1;\n    \
    \    long mid18 = mid1;\n        long mid19 = mid1;\n        long mid20 = mid1;\n\
    \        long mid21 = mid1;\n        long mid22 = mid1;\n        long mid23 =\
    \ mid1;\n        long mid24 = mid1;\n        long mid25 = mid1;\n        long\
    \ mid26 = mid1;\n        long mid27 = mid1;\n        long mid28 = mid1;\n    \
    \    long mid29 = mid1;\n        long mid30 = mid1;\n        long mid31 = mid1;\n\
    \        long mid32 = mid1;\n        long mid33 = mid1;\n        long mid34 =\
    \ mid1;\n        long mid35 = mid1;\n        long mid36 = mid1;\n        long\
    \ mid37 = mid1;\n        long mid38 = mid1;\n        long mid39 = mid1;\n    \
    \    long mid40 = mid1;\n        long mid41 = mid1;\n        long mid42 = mid1;\n\
    \        long mid43 = mid1;\n        long mid44 = mid1;\n        long mid45 =\
    \ mid1;\n        long mid46 = mid1;\n        long mid47 = mid1;\n        long\
    \ mid48 = mid1;\n        long mid49 = mid1;\n        long mid50 = mid1;\n    \
    \    long mid51 = mid1;\n        long mid52 = mid1;\n        long mid53 = mid1;\n\
    \        long mid54 = mid1;\n        long mid55 = mid1;\n        long mid56 =\
    \ mid1;\n        long mid57", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long mid1 = min1 + (max1 - min1) / 2;\n        long mid2\
    \ = min2 + (max2 - min2) / 2;\n        long mid = mid1;\n        while (true)\
    \ {\n            if (l1.Contains(mid)) {\n                result.Add(mid);\n \
    \               mid1 = mid + (max1 - mid) / 2;\n            }\n            else\
    \ if (l2.Contains(mid)) {\n                result.Add(mid);\n                mid2\
    \ = mid + (max2 - mid) / 2;\n            }\n            else {\n             \
    \   break;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common++;\n                    break;\n             \
    \   }\n            }\n            if (common > 0) {\n                result.Add(x);\n\
    \                common = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long i in l1) {\n            foreach (long j in l2) {\n         \
    \       if (i == j) {\n                    common++;\n                }\n    \
    \        }\n            result.Add(common);\n            common = 0;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l2) {\n            if (l1.Contains(i)) {\n            \
    \    max = Math.Max(max, i);\n            }\n        }\n        long min = long.MaxValue;\n\
    \        foreach (long i in l1) {\n            if (l2.Contains(i)) {\n       \
    \         min = Math.Min(min, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (l1.Contains(i)) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        long mid = max / 2;\n        long mid2\
    \ = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n  \
    \      long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = ", "        List<long> result = new List<long>();\n        long common = 0;\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    common++;\n                  \
    \  break;\n                }\n            }\n            if (common > 0) {\n \
    \               result.Add(x);\n                common = 0;\n            }\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result.Distinct().OrderBy(x\
    \ => x).ToList();", "        var result = new List<long>();\n        foreach (var\
    \ item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result.Distinct().OrderBy(x => x).ToList();",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result.OrderBy(x\
    \ => x).ToList();", "        List<long> result = new List<long>();\n        long\
    \ maxValue = l1.Max();\n        long minValue = l2.Min();\n        long maxDifference\
    \ = maxValue - minValue;\n        long minDifference = minValue - maxValue;\n\
    \        long maxSum = l1.Sum();\n        long minSum = l2.Sum();\n        long\
    \ maxProduct = l1.Product();\n        long minProduct = l2.Product();\n      \
    \  long maxProductDifference = maxProduct - minProduct;\n        long minProductDifference\
    \ = minProduct - maxProduct;\n        long maxProductSum = l1.Product();\n   \
    \     long minProductSum = l2.Product();\n        long maxProductProduct = l1.Product();\n\
    \        long minProductProduct = l2.Product();\n        long maxProductProductDifference\
    \ = maxProductProduct - minProductProduct;\n        long minProductProductDifference\
    \ = minProductProduct - maxProductProduct;\n        long maxProductProductSum\
    \ = l1.Product();\n        long minProductProductSum = l2.Product();\n       \
    \ long maxProductProductProduct = l1.Product();\n        long minProductProductProduct\
    \ = l2.Product();\n        long maxProductProductProductDifference = maxProductProductProduct\
    \ - minProductProductProduct;\n        long minProductProductProductDifference\
    \ = minProductProductProduct - maxProductProductProduct;\n        long maxProductProductProductSum\
    \ = l1.Product();\n        long minProductProductProductSum = l2.Product();\n\
    \        long maxProductProductProductProduct = l1.Product();\n        long minProductProductProductProduct\
    \ = l2.Product();\n        long maxProductProductProductProductDifference = maxProductProductProductProduct\
    \ - minProductProductProductProduct;\n        long minProductProductProductDifference\
    \ = minProductProductProduct - maxProductProductProductProduct;\n        long\
    \ maxProductProductProductProductSum = l1.Product();\n        long minProductProductProductProductSum\
    \ = l2.Product();\n        long maxProductProductProductProductProduct = l1.Product();\n\
    \        long minProductProductProductProductProduct = l2.Product();\n       \
    \ long maxProductProductProductProductDifference = maxProductProductProductProduct\
    \ - minProductProductProductProduct;\n        long minProductProductProductDifference\
    \ = minProductProductProduct - maxProductProductProductProduct;\n        long\
    \ maxProductProductProductProductSum = l1.Product();\n        long minProductProductProductProductSum\
    \ = l2.Product();\n        long maxProductProductProductProductProduct = l1.Product();\n",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        long common = 0;\n    \
    \    foreach (long i in l1) {\n            foreach (long j in l2) {\n        \
    \        if (i == j) continue;\n                if (i == common) result.Add(i);\n\
    \                if (j == common) result.Add(j);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    foreach (long x in l1) {\n            foreach (long y in l2) {\n        \
    \        if (x == y)\n                    result.Add(x);\n            }\n    \
    \    }\n        return result.Distinct().OrderBy(x => x).ToList();", "       \
    \ List<long> result = new List<long>();\n        foreach (long i in l1) {\n  \
    \          foreach (long j in l2) {\n                if (i == j) continue;\n \
    \               if (result.Contains(i) && result.Contains(j)) {\n            \
    \        result.Remove(i);\n                    result.Remove(j);\n          \
    \      }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long common = 0;\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    common += 1;\n                }\n            }\n    \
    \    }\n        result.Add(common);\n        return result;"]
stop_tokens:
- "\n    }\n"
