language: cs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \     sum += number;\n        foreach (long number in numbers)\n            product\
    \ *= number;\n        return new Tuple<long, long>(sum, product);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \     sum += number;\n        foreach (long number in numbers)\n            product\
    \ *= number;\n        return new Tuple<long, long>(sum, product);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0)\n  \
    \          return new Tuple<long, long>(new long(), new long());\n        long\
    \ sum = 0;\n        long product = 1;\n        foreach (long n in numbers)\n \
    \           sum += n;\n        foreach (long n in numbers)\n            product\
    \ *= n;\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <36699a74bf8441ccb564f5f4ef88988d>:0 \n"
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0)\n  \
    \          return new Tuple<long, long>(0, 1);\n        long sum = 0;\n      \
    \  long product = 1;\n        foreach (long n in numbers)\n        {\n       \
    \     sum += n;\n            product *= n;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        var sum = numbers.Sum();\n\
    \        var product = numbers.Aggregate((a, b) => a * b); // or numbers.Aggregate((a,\
    \ b) => a * b);\n        return new Tuple<long, long>(sum, product);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \     sum += number;\n        foreach (long number in numbers)\n            product\
    \ *= number;\n        return new Tuple<long, long>(sum, product);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(new long(), new long());\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long n in\
    \ numbers) {\n            sum += n;\n            product *= n;\n        }\n  \
    \      return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <95c4f2d63db14a948e34b9ce2c37ecbc>:0 \n"
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0,1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0L, 1L);\n\n        long sum\
    \ = 0L;\n        long product = 1L;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0)\n  \
    \          return new Tuple<long, long>(0, 1);\n        var sum = numbers.Sum();\n\
    \        var product = numbers.Aggregate(0, (current, n) => current * n);\n  \
    \      return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8pk0w46j.cs(15,60): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8pk0w46j.cs(15,60): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659977062
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers) {\n     \
    \       sum += number;\n            product *= number;\n        }\n        return\
    \ new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0,1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long number in numbers) {\n  \
    \          sum += number;\n            product *= number;\n        }\n       \
    \ return new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(new long(), new long());\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        foreach (long number\
    \ in numbers) {\n            sum += number;\n            product *= number;\n\
    \        }\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7888893e7f54af99f91d02a0d8d9c6d>:0 \n"
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0)\n  \
    \          return new Tuple<long, long>(0, 1);\n        long sum = 0;\n      \
    \  long product = 1;\n        foreach (var number in numbers)\n        {\n   \
    \         sum += number;\n            product *= number;\n        }\n        return\
    \ new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long number in numbers) {\n  \
    \          sum += number;\n            product *= number;\n        }\n       \
    \ return new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0)\n  \
    \          return new Tuple<long, long>(0, 1);\n        long sum = 0;\n      \
    \  long product = 1;\n        foreach (long number in numbers)\n            sum\
    \ += number;\n        foreach (long number in numbers)\n            product *=\
    \ number;\n        return new Tuple<long, long>(sum, product);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0) {\n            return new Tuple<long, long>(0, 1);\n        }\n      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return new Tuple<long, long>(sum, product);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (var number in numbers)\n        {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers)\n       \
    \     sum += number;\n        foreach (long number in numbers)\n            product\
    \ *= number;\n        return new Tuple<long, long>(sum, product);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (var number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long number in numbers) {\n  \
    \          sum += number;\n            product *= number;\n        }\n       \
    \ return new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long number in numbers) {\n\
    \            sum += number;\n            product *= number;\n        }\n     \
    \   return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659976993
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0,1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers) {\n     \
    \       sum += number;\n            product *= number;\n        }\n        return\
    \ new Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long n in numbers) {\n            sum += n;\n\
    \            product *= n;\n        }\n        return new Tuple<long, long>(sum,\
    \ product);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
    \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (var number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers.Count == 0) {\n\
    \            return new Tuple<long, long>(0, 1);\n        }\n        long sum\
    \ = 0;\n        long product = 1;\n        foreach (long n in numbers) {\n   \
    \         sum += n;\n            product *= n;\n        }\n        return new\
    \ Tuple<long, long>(sum, product);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        if (numbers == null || numbers.Count\
    \ == 0)\n            return new Tuple<long, long>(0, 1);\n        long sum = 0;\n\
    \        long product = 1;\n        foreach (long n in numbers)\n            sum\
    \ += n;\n        foreach (long n in numbers)\n            product *= n;\n    \
    \    return new Tuple<long, long>(sum, product);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L,\
    \ (long)1L}))).Equals((Tuple.Create(3L, 1L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // For a given list of integers, return a tuple consisting\
    \ of a sum and a product of all the integers in a list.\n    // Empty sum should\
    \ be equal to 0 and empty product should be equal to 1.\n    public static Tuple<long,\
    \ long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return new Tuple<long,\
    \ long>(sum, product);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SumProduct((new List<long>())).Equals((Tuple.Create(0L, 1L))));\n\
    \    Debug.Assert(SumProduct((new List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
    \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L,\
    \ (long)0L}))).Equals((Tuple.Create(100L, 0L))));\n    Debug.Assert(SumProduct((new\
    \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))).Equals((Tuple.Create(15L,\
    \ 105L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L,\
    \ 10L))));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659977063
