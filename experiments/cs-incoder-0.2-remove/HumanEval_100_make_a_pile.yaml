name: HumanEval_100_make_a_pile
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    // The first level has n stones.\n    // The number of stones\
  \ in the next level is:\n    // - the next odd number if n is odd.\n    // - the\
  \ next even number if n is even.\n    // Return the number of stones in each level\
  \ in a list, where element at index\n    // i represents the number of stones in\
  \ the level (i+1).\n    // Examples:\n    public static List<long> MakeAPile(long\
  \ n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n\
  \    Debug.Assert(MakeAPile((6L)).Equals((new List<long>(new long[]{(long)6L, (long)8L,\
  \ (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).Equals((new\
  \ List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L,\
  \ (long)20L, (long)22L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long nextLevel\
    \ = n;\n        long nextLevelStones = n;\n        long nextLevelStonesEven =\
    \ n;\n        long nextLevelStonesOdd = n;\n        long nextLevelStonesEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenOdd = n;\n        long nextLevelStonesEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenOdd = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenOdd = n;\n       \
    \ long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenOdd = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd =\
    \ n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevel", "        List<long> result = new List<long>();\n\
    \        long nextEven = n;\n        long nextOdd = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        long nextLevel;\n        if (n % 2 == 0) {\n            nextLevel = n\
    \ + 1;\n        } else {\n            nextLevel = n + 2;\n        }\n        result.Add(nextLevel);\n\
    \        long nextLevel2 = nextLevel;\n        while (nextLevel2 > 0) {\n    \
    \        if (nextLevel2 % 2 == 0) {\n                nextLevel2 /= 2;\n      \
    \      } else {\n                nextLevel2 = nextLevel2 + 1;\n            }\n\
    \            result.Add(nextLevel2);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n    \
    \    long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            return result;\n       \
    \ }\n        long nextOdd = n / 2;\n        long nextEven = n % 2;\n        if\
    \ (nextOdd % 2 == 0) {\n            result.Add(nextOdd);\n        }\n        if\
    \ (nextEven % 2 == 0) {\n            result.Add(nextEven);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            return result;\n       \
    \ }\n        long nextEven = n / 2;\n        long nextOdd = n % 2;\n        if\
    \ (nextOdd != 0) {\n            result.Add(nextOdd);\n        }\n        if (nextEven\
    \ != 0) {\n            result.Add(nextEven);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        long nextOdd\
    \ = n;\n        long nextEven = n;\n        long nextOddEven = n;\n        long\
    \ nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        List<long> result = new List<long>();\n        long nextEven = n;\n   \
    \     long nextOdd = n;\n        while (nextEven > 0 || nextOdd > 0) {\n     \
    \       result.Add(nextEven);\n            if (nextEven % 2 == 0) {\n        \
    \        nextEven = nextEven / 2;\n            } else {\n                nextEven\
    \ = nextEven / 2 + 1;\n            }\n            result.Add(nextOdd);\n     \
    \       if (nextOdd % 2 == 0) {\n                nextOdd = nextOdd / 2;\n    \
    \        } else {\n                nextOdd = nextOdd / 2 + 1;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        while (nextLevel > 0) {\n            long\
    \ nextLevelEven = nextLevel % 2 == 0 ? nextLevel : nextLevel / 2;\n          \
    \  long nextLevelOdd = nextLevel % 2 == 1 ? nextLevel : nextLevel / 2;\n     \
    \       result.Add(nextLevelEven);\n            result.Add(nextLevelOdd);\n  \
    \          nextLevel = nextLevelOdd;\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long nextOdd = (n + 1) /\
    \ 2;\n        long nextEven = (n + 2) / 2;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        long nextOddEvenOdd = nextOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEven = nextOddEvenOdd + nextEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven + nextOdd;\n        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOdd;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenO", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        long nextLevelCountEvenEven = 0;\n        long nextLevelCountOddOdd\
    \ = 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n                nextLevelCountEvenEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n                nextLevelCountOddOdd++;\n\
    \            }\n            nextLevel--;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        result.Add(nextLevelCountEvenEven);\n        result.Add(nextLevelCountOddOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n    \
    \    if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = n;\n       \
    \ long nextEven = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel - 1;\n        }\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            nextLevelCount++;\n       \
    \     if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n     \
    \       } else {\n                nextLevelCountOdd++;\n            }\n      \
    \      nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelCount = 0;\n        while (nextLevel\
    \ > 0) {\n            if (nextLevel % 2 == 0) {\n                nextLevelCount\
    \ += nextLevel;\n            }\n            else {\n                nextLevelCount\
    \ += nextLevel / 2;\n            }\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel / 2;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = (n + 1) >> 2;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 1;\n        long nextLevelCountEven = 1;\n        long nextLevelCountOdd =\
    \ 1;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel--;\n        }\n \
    \       result.Add(nextLevelCount);\n        if (nextLevel > 0) {\n          \
    \  result.Add(nextLevelCountEven);\n            result.Add(nextLevelCountOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            return result;\n       \
    \ }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven = n\
    \ % 2 == 0 ? n + 1 : n;\n        result.Add(MakeAPile(nextOdd));\n        result.Add(MakeAPile(nextEven));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n;\n        long nextEven = n;\n        while (nextEven >\
    \ nextOdd) {\n            result.Add(nextOdd);\n            nextOdd = nextOdd\
    \ + 2;\n            nextEven = nextEven + 2;\n        }\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel\
    \ = 1;\n        long nextLevel = 1;\n        long currentStones = 1;\n       \
    \ long nextStones = 1;\n        long currentStonesSum = 0;\n        long nextStonesSum\
    \ = 0;\n        long currentStonesSumOfNextLevel = 0;\n        long nextStonesSumOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevel = 0;\n        long\
    \ nextStonesSumOfNextLevelOfNextLevel = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevel = 0;\n   \
    \     long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel = 0;\n\
    \        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel = 0;\n\
    \        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentStonesSumOfNextLevelOfNextLevelOfNextLevelOf", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long currentLevel = 1;\n        long currentStones\
    \ = 1;\n        long nextLevel = 0;\n        while (n > 0) {\n            nextLevel\
    \ = nextLevel + currentStones;\n            if (n % 2 == 0) {\n              \
    \  nextEven = nextEven + currentStones;\n            } else {\n              \
    \  nextOdd = nextOdd + currentStones;\n            }\n            currentStones\
    \ = nextLevel;\n            n = n / 2;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        long nextLevelOdd\
    \ = nextLevel;\n        long nextLevelEven = nextLevel;\n        while (nextLevel\
    \ > 0) {\n            if (nextLevel % 2 == 0) {\n                result.Add(nextLevelEven);\n\
    \                nextLevelEven = nextLevelEven + 2;\n            } else {\n  \
    \              result.Add(nextLevelOdd);\n                nextLevelOdd = nextLevelOdd\
    \ + 2;\n            }\n            nextLevel--;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextEven = n;\n   \
    \     long nextOdd = n;\n        long nextOddNextEven = n;\n        long nextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextEven = n;\n        long nextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextEven = n;\n      \
    \  long nextOddNextOddNextOddNextOddNextOddNextOdd = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOdd = n;\n\
    \        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven = n;\n\
    \        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNext", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         return result;\n        }\n        long nextOdd = n % 2 == 0 ? n : n\
    \ + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        List<long> level1\
    \ = MakeAPile(nextOdd);\n        List<long> level2 = MakeAPile(nextEven);\n  \
    \      List<long> level3 = new List<long>();\n        foreach (long level in level1)\
    \ {\n            level.Add(level2.Count);\n            level3.Add(level);\n  \
    \      }\n        result.AddRange(level3);\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long nextEven = n;\n        long\
    \ nextOdd = n;\n        long nextNextEven = n;\n        long nextNextOdd = n;\n\
    \        long nextNextNextEven = n;\n        long nextNextNextOdd = n;\n     \
    \   long nextNextNextNextEven = n;\n        long nextNextNextNextOdd = n;\n  \
    \      long nextNextNextNextNextEven = n;\n        long nextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextEven = n;\n        long\
    \ nextNextNextNextNextNextNextNextNextOdd = n;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextOdd = n;\n        long\
    \ nextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n \
    \       long nextNextNextNextNextNextNextNextNextNextOdd = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd = n;\n      \
    \  long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n \
    \       long nextNextNextNextNextNextNextNextNextNextOdd = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd = n;\n      \
    \  long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = ", "        List<long> result = new List<long>();\n        long nextLevel\
    \ = n;\n        long nextLevelStones = n;\n        long nextLevelStonesOdd = nextLevel;\n\
    \        long nextLevelStonesEven = nextLevel;\n        long nextLevelStonesOddEven\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOdd = nextLevel;\n        long\
    \ nextLevelStonesOddEvenOddEven = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEven = nextLevel;\n\
    \        long nextLevelStonesOddEvenOddEvenOddEvenOdd = nextLevel;\n        long\
    \ nextLevelStonesOddEvenOddEvenOddEvenOddEven = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelStonesOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = ", "        List<long> result = new List<long>();\n        long nextLevel\
    \ = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n\
    \        long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n      \
    \      if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n    \
    \        } else {\n                nextLevelCountOdd++;\n            }\n     \
    \       nextLevel--;\n        }\n        result.Add(nextLevelCount);\n       \
    \ result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n\
    \        long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        List<long> nextLevel = MakeAPile(nextEven);\n\
    \        foreach (long nextLevelStone in nextLevel) {\n            result.Add(nextLevelStone);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextEven = n;\n        long nextOdd = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            result.Add(nextEven);\n            if (nextEven\
    \ % 2 == 0) {\n                nextEven = nextEven / 2;\n            } else {\n\
    \                nextEven = nextEven / 2 + 1;\n            }\n            result.Add(nextOdd);\n\
    \            if (nextOdd % 2 == 0) {\n                nextOdd = nextOdd / 2;\n\
    \            } else {\n                nextOdd = nextOdd / 2 + 1;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel--;\n        }\n        result.Add(nextLevelCount);\n   \
    \     result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(n);\n          \
    \  return result;\n        }\n        long nextOdd = n;\n        long nextEven\
    \ = n;\n        while (nextEven % 2 == 0) {\n            nextEven /= 2;\n    \
    \    }\n        while (nextOdd % 2 == 1) {\n            nextOdd /= 2;\n      \
    \  }\n        result.Add(nextOdd);\n        result.Add(nextEven);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = (n + 1) >> 1;\n        long nextEven = n >> 1;\n        long nextOddEven =\
    \ nextOdd + nextEven;\n        result.Add(nextOdd);\n        if (nextOdd != 0)\
    \ {\n            result.Add(nextOddEven);\n        }\n        if (nextEven !=\
    \ 0) {\n            result.Add(nextEven);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n % 2 == 0) {\n            result.Add(n);\n            return result;\n\
    \        }\n        long nextOdd = (n / 2) + 1;\n        long nextEven = n / 2;\n\
    \        long nextOddEven = nextEven + nextOdd;\n        long nextOddEvenOdd =\
    \ nextOddEven + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextOddEven;\n\
    \        long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOddEvenOdd;\n \
    \       long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven + nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n            }\
    \ else {\n                nextLevelCountOdd++;\n            }\n            nextLevel\
    \ = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long currentLevel = 1;\n        long currentStones = 1;\n    \
    \    long nextLevel = 1;\n        long nextStones = 1;\n        long currentStonesTotal\
    \ = 0;\n        long nextStonesTotal = 0;\n        long currentStonesTotal2 =\
    \ 0;\n        long nextStonesTotal2 = 0;\n        long currentStonesTotal3 = 0;\n\
    \        long nextStonesTotal3 = 0;\n        long currentStonesTotal4 = 0;\n \
    \       long nextStonesTotal4 = 0;\n        long currentStonesTotal5 = 0;\n  \
    \      long nextStonesTotal5 = 0;\n        long currentStonesTotal6 = 0;\n   \
    \     long nextStonesTotal6 = 0;\n        long currentStonesTotal7 = 0;\n    \
    \    long nextStonesTotal7 = 0;\n        long currentStonesTotal8 = 0;\n     \
    \   long nextStonesTotal8 = 0;\n        long currentStonesTotal9 = 0;\n      \
    \  long nextStonesTotal9 = 0;\n        long currentStonesTotal10 = 0;\n      \
    \  long nextStonesTotal10 = 0;\n        long currentStonesTotal11 = 0;\n     \
    \   long nextStonesTotal11 = 0;\n        long currentStonesTotal12 = 0;\n    \
    \    long nextStonesTotal12 = 0;\n        long currentStonesTotal13 = 0;\n   \
    \     long nextStonesTotal13 = 0;\n        long currentStonesTotal14 = 0;\n  \
    \      long nextStonesTotal14 = 0;\n        long currentStonesTotal15 = 0;\n \
    \       long nextStonesTotal15 = 0;\n        long currentStonesTotal16 = 0;\n\
    \        long nextStonesTotal16 = 0;\n        long currentStonesTotal17 = 0;\n\
    \        long nextStonesTotal17 = 0;\n        long currentStonesTotal18 = 0;\n\
    \        long nextStonesTotal18 = 0;\n        long currentStonesTotal19 = 0;\n\
    \        long nextStonesTotal19 = 0;\n        long currentStonesTotal20 = 0;\n\
    \        long nextStonesTotal20 = 0;\n        long currentStonesTotal21 = 0;\n\
    \        long nextStonesTotal21 = 0;\n        long currentStonesTotal22 = 0;\n\
    \        long nextStonesTotal22 = 0;\n        long currentStonesTotal23 = 0;\n\
    \        long nextStonesTotal23 = 0;\n        long currentStonesTotal24 = 0;\n\
    \        ", "        List<long> result = new List<long>();\n        long nextEven\
    \ = n;\n        long nextOdd = n;\n        long nextOddEven = n;\n        long\
    \ nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        List<long> level1 = MakeAPile(nextOdd);\n\
    \        List<long> level2 = MakeAPile(nextEven);\n        List<long> level3 =\
    \ new List<long>();\n        foreach (long level in level1) {\n            level3.Add(level\
    \ + level2.Count);\n        }\n        foreach (long level in level2) {\n    \
    \        level3.Add(level + level1.Count);\n        }\n        foreach (long level\
    \ in level3) {\n            result.Add(level);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n    \
    \    long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        List<long> result = new List<long>();\n        long nextOdd = n;\n    \
    \    long nextEven = n;\n        while (nextEven > 0 || nextOdd > 0) {\n     \
    \       if (nextEven % 2 == 0) {\n                result.Add(nextEven);\n    \
    \            nextEven = nextEven / 2;\n            } else {\n                result.Add(nextOdd);\n\
    \                nextOdd = nextOdd / 2;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextEven\
    \ = n;\n        long nextOdd = n;\n        long nextOddNextEven = n;\n       \
    \ long nextOddNextOdd = n;\n        long nextOddNextEvenNextOdd = n;\n       \
    \ long nextOddNextEvenNextEven = n;\n        long nextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextOdd = n;\n        long nextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextOdd = n;\n    \
    \    long nextOddNextEvenNextOddNextEvenNextEvenNextEvenOdd = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenOdd = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextOddNextEvenNextO", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextEven = n;\n        long nextOdd = n;\n        while (nextEven >\
    \ 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n                result.Add(nextEven);\n\
    \                nextEven = nextEven / 2;\n            } else {\n            \
    \    result.Add(nextOdd);\n                nextOdd = nextOdd / 2;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelCount = 1;\n        long nextLevelCountEven\
    \ = 1;\n        long nextLevelCountOdd = 1;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        long nextOdd\
    \ = n % 2 == 1 ? n : n + 1;\n        long nextLevel = nextOdd;\n        long nextLevel2\
    \ = nextEven;\n        long nextLevel3 = nextLevel2;\n        long nextLevel4\
    \ = nextLevel3;\n        long nextLevel5 = nextLevel4;\n        long nextLevel6\
    \ = nextLevel5;\n        long nextLevel7 = nextLevel6;\n        long nextLevel8\
    \ = nextLevel7;\n        long nextLevel9 = nextLevel8;\n        long nextLevel10\
    \ = nextLevel9;\n        long nextLevel11 = nextLevel10;\n        long nextLevel12\
    \ = nextLevel11;\n        long nextLevel13 = nextLevel12;\n        long nextLevel14\
    \ = nextLevel13;\n        long nextLevel15 = nextLevel14;\n        long nextLevel16\
    \ = nextLevel15;\n        long nextLevel17 = nextLevel16;\n        long nextLevel18\
    \ = nextLevel17;\n        long nextLevel19 = nextLevel18;\n        long nextLevel20\
    \ = nextLevel19;\n        long nextLevel21 = nextLevel20;\n        long nextLevel22\
    \ = nextLevel21;\n        long nextLevel23 = nextLevel22;\n        long nextLevel24\
    \ = nextLevel23;\n        long nextLevel25 = nextLevel24;\n        long nextLevel26\
    \ = nextLevel25;\n        long nextLevel27 = nextLevel26;\n        long nextLevel28\
    \ = nextLevel27;\n        long nextLevel29 = nextLevel28;\n        long nextLevel30\
    \ = nextLevel29;\n        long nextLevel31 = nextLevel30;\n        long nextLevel32\
    \ = nextLevel31;\n        long nextLevel33 = nextLevel32;\n        long nextLevel34\
    \ = nextLevel33;\n        long nextLevel35 = nextLevel34;\n        long nextLevel36\
    \ = nextLevel35;\n        long nextLevel37 = nextLevel36;\n        long nextLevel38\
    \ = nextLevel37;\n        long nextLevel39 = nextLevel38;\n        long nextLevel40\
    \ = nextLevel39;\n        long nextLevel41 = nextLevel40;\n        long nextLevel42\
    \ = nextLevel41;\n        long nextLevel43 = nextLevel42;\n        long nextLevel44\
    \ = nextLevel43;\n        long nextLevel45 = nextLevel44", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        long nextOdd = n % 2 == 0 ? n\
    \ : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(MakeAPile(nextOdd));\n\
    \        result.Add(MakeAPile(nextEven));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelStones\
    \ = n;\n        long nextLevelStonesEven = n;\n        long nextLevelStonesOdd\
    \ = n;\n        long nextLevelStonesEvenOdd = n;\n        long nextLevelStonesEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOdd = n;\n        long nextLevelStonesEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenOdd = n;\n        long\
    \ nextLevelStonesEvenEvenEvenEvenEvenEvenOdd = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven",
  "        List<long> result = new List<long>();\n        long nextOdd = (n + 1) /\
    \ 2;\n        long nextEven = (n + 2) / 2;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        if (nextOddEven\
    \ > n) {\n            result.Add(n - nextOddEven);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextLevel\
    \ = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven = 0;\n    \
    \    while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n        \
    \        nextLevelEven++;\n            } else {\n                nextLevelOdd++;\n\
    \            }\n            nextLevel--;\n        }\n        result.Add(nextLevelEven);\n\
    \        result.Add(nextLevelOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel--;\n        }\n \
    \       result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        long nextLevelCountEvenOdd = 0;\n        long nextLevelCountEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenO", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            return result;\n        }\n     \
    \   long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven = n % 2 == 0\
    \ ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel--;\n        }\n        result.Add(nextLevelCount);\n   \
    \     result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOdd", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel\
    \ = 1;\n        long currentStones = 1;\n        long nextLevel = 1;\n       \
    \ long nextStones = 1;\n        long nextNextLevel = 1;\n        long nextNextStones\
    \ = 1;\n        long nextNextNextLevel = 1;\n        long nextNextNextStones =\
    \ 1;\n        long nextNextNextNextLevel = 1;\n        long nextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextNextNextLevel = 1;\n        long\
    \ nextNextNextNextNextNextNextStones = 1;\n        long nextNextNextNextNextNextNextNextLevel\
    \ = 1;\n        long nextNextNextNextNextNextNextNextStones = 1;\n        long\
    \ nextNextNextNextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextLevel = 1;\n        long\
    \ nextNextNextNextNextNextNextNextNextStones = 1;\n        long nextNextNextNextNextNextNextNextNextLevel\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextStones = 1;\n       \
    \ long nextNextNextNextNextNextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextNextLevel = 1;\n    \
    \    long nextNextNextNextNextNextNextNextNextStones = 1;\n        long nextNextNextNextNextNextNextNextNextNextLevel\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextStones = 1;\n       \
    \ long nextNextNextNextNextNextNextNextNextNextLevel = 1;\n        long nextNextNextNextNextNextNextNextNextStones\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextNextLevel = 1;\n    \
    \    long nextNextNextNextNextNextNextNextNextNextStones = 1;\n        long nextNextNextNextNextNextNextNextNextNextNextLevel\
    \ = 1;\n        long nextNextNextNextNextNextNextNextNextNextStones = 1;\n   \
    \     long next", "        List<long> result = new List<long>();\n        long\
    \ nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd\
    \ = 0;\n        while (nextLevel > 0) {\n            nextLevelCount++;\n     \
    \       if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n   \
    \         }\n            else {\n                nextLevelCountOdd++;\n      \
    \      }\n            nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        if (nextLevel > 0) {\n            nextLevelCountEven = nextLevelCountEven\
    \ + nextLevel;\n            result.Add(nextLevelCountEven);\n        }\n     \
    \   if (nextLevel > 0) {\n            nextLevelCountOdd = nextLevelCountOdd +\
    \ nextLevel;\n            result.Add(nextLevelCountOdd);\n        }\n        if\
    \ (nextLevel > 0) {\n            nextLevelCountEvenOdd = nextLevelCountEvenOdd\
    \ + nextLevel;\n            result.Add(nextLevelCountEvenOdd);\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long nextEven = n;\n        long nextOdd = n;\n        while (nextEven > 0\
    \ || nextOdd > 0) {\n            result.Add(nextEven);\n            if (nextEven\
    \ % 2 == 0) {\n                nextEven = nextEven / 2;\n            } else {\n\
    \                nextEven = nextEven / 2 + 1;\n            }\n            result.Add(nextOdd);\n\
    \            if (nextOdd % 2 == 0) {\n                nextOdd = nextOdd / 2;\n\
    \            } else {\n                nextOdd = nextOdd / 2 + 1;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n \
    \       long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenO", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(n);\n            return result;\n        }\n        List<long> level1\
    \ = MakeAPile(n / 2);\n        List<long> level2 = MakeAPile(n / 2);\n       \
    \ List<long> level3 = MakeAPile(n / 2);\n        List<long> level4 = MakeAPile(n\
    \ / 2);\n        List<long> level5 = MakeAPile(n / 2);\n        List<long> level6\
    \ = MakeAPile(n / 2);\n        List<long> level7 = MakeAPile(n / 2);\n       \
    \ List<long> level8 = MakeAPile(n / 2);\n        List<long> level9 = MakeAPile(n\
    \ / 2);\n        List<long> level10 = MakeAPile(n / 2);\n        List<long> level11\
    \ = MakeAPile(n / 2);\n        List<long> level12 = MakeAPile(n / 2);\n      \
    \  List<long> level13 = MakeAPile(n / 2);\n        List<long> level14 = MakeAPile(n\
    \ / 2);\n        List<long> level15 = MakeAPile(n / 2);\n        List<long> level16\
    \ = MakeAPile(n / 2);\n        List<long> level17 = MakeAPile(n / 2);\n      \
    \  List<long> level18 = MakeAPile(n / 2);\n        List<long> level19 = MakeAPile(n\
    \ / 2);\n        List<long> level20 = MakeAPile(n / 2);\n        List<long> level21\
    \ = MakeAPile(n / 2);\n        List<long> level22 = MakeAPile(n / 2);\n      \
    \  List<long> level23 = MakeAPile(n / 2);\n        List<long> level24 = MakeAPile(n\
    \ / 2);\n        List<long> level25 = MakeAPile(n / 2);\n        List<long> level26\
    \ = MakeAPile(n / 2);\n        List<long> level27 = MakeAPile(n / 2);\n      \
    \  List<long> level28 = MakeAPile(n / 2);\n        List<long> level29 = MakeAPile(n\
    \ / 2);\n        List<long> level30 = MakeAPile(n / 2);\n        List<long> level31\
    \ = MakeAPile(n / 2);\n        List<long> level32 = MakeAPile(n / 2);\n      \
    \  List<long> level33 = ", "        List<long> result = new List<long>();\n  \
    \      long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n        if (n\
    \ % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n         \
    \   result.Add(nextOdd);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0)\n            return result;\n\
    \        if (n % 2 == 0) {\n            result.Add(n);\n            return result;\n\
    \        }\n        long nextEven = n;\n        long nextOdd = n;\n        while\
    \ (nextEven % 2 == 0) {\n            nextEven /= 2;\n            nextOdd *= 2;\n\
    \        }\n        result.Add(nextEven);\n        result.Add(nextOdd);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long nextEven = n;\n        long nextOdd = n;\n        long nextOddNextEven\
    \ = n;\n        long nextOddNextOdd = n;\n        long nextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOdd = n;\n        long nextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOdd = n;\n        long nextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOdd = n;\n        long nextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOdd = n;\n       \
    \ long nextOddNextOddNextOddNextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNext", "        List<long> result\
    \ = new List<long>();\n        if (n == 0)\n            return result;\n     \
    \   long nextEven = n % 2 == 0 ? n : n + 1;\n        long nextOdd = n % 2 == 1\
    \ ? n : n + 1;\n        result.Add(nextEven);\n        result.Add(nextOdd);\n\
    \        result.AddRange(MakeAPile(nextEven));\n        result.AddRange(MakeAPile(nextOdd));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long currentLevel = 1;\n        long currentStones\
    \ = 1;\n        long nextLevel = 1;\n        long nextStones = 1;\n        while\
    \ (n > 0) {\n            currentStones = n;\n            if (n % 2 == 0) {\n \
    \               nextEven = n;\n            } else {\n                nextOdd =\
    \ n;\n            }\n            currentLevel++;\n            nextLevel++;\n \
    \           n = nextOdd;\n            nextOdd = nextEven;\n            nextEven\
    \ = nextOdd + nextEven;\n            result.Add(currentStones);\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long nextEven = n;\n        long nextOdd = n;\n        while (nextEven >\
    \ 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n                nextEven\
    \ = nextEven / 2;\n                result.Add(nextEven);\n            } else {\n\
    \                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        long nextOdd\
    \ = n / 2;\n        long nextEven = n % 2 == 0 ? n / 2 : n / 2 + 1;\n        long\
    \ nextOddEven = nextOdd + nextEven;\n        result.Add(nextOdd);\n        if\
    \ (nextOdd != 0) result.Add(nextOddEven);\n        if (nextEven != 0) result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n    \
    \    long nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextEven;\n \
    \       long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven + nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven + nextOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd + nextOdd;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd", "        List<long>\
    \ result = new List<long>();\n        long nextEven = n;\n        long nextOdd\
    \ = n;\n        long nextNextEven = n;\n        long nextNextOdd = n;\n      \
    \  long nextNextNextEven = n;\n        long nextNextNextOdd = n;\n        long\
    \ nextNextNextNextEven = n;\n        long nextNextNextNextOdd = n;\n        long\
    \ nextNextNextNextNextEven = n;\n        long nextNextNextNextNextOdd = n;\n \
    \       long nextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextEven = n;\n        long\
    \ nextNextNextNextNextNextNextNextNextOdd = n;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextOdd = n;\n        long\
    \ nextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n \
    \       long nextNextNextNextNextNextNextNextNextNextOdd = n;\n        long nextNextNextNextNextNextNextNextNextNextNextEven\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextOdd = n;\n      \
    \  long nextNextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextNextNextEven = n;\n\
    \        long nextNextNextNextNextNextNextNextNextNextNextOdd = n;\n        long\
    \ nextNextNextNextNextNextNextNextNextNextNextNextEven = n;\n        long nextNextNextNextNextNextNextNextNextNextNextOdd\
    \ = n;\n        long nextNextNextNextNextNextNextNextNextNextNextNextEven = n;\n\
    \        long nextNextNextNextNextNextNext", "        List<long> result = new\
    \ List<long>();\n        long nextEven = n;\n        long nextOdd = n;\n     \
    \   long nextEvenCount = 0;\n        long nextOddCount = 0;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n              \
    \  nextEvenCount++;\n                nextEven /= 2;\n            } else {\n  \
    \              nextOddCount++;\n                nextOdd /= 2;\n            }\n\
    \            result.Add(nextEvenCount);\n            result.Add(nextOddCount);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelOdd = nextLevel;\n       \
    \ long nextLevelEven = nextLevel;\n        long nextLevelOddEven = nextLevel;\n\
    \        long nextLevelOddOdd = nextLevel;\n        long nextLevelEvenEven = nextLevel;\n\
    \        long nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOddEven = nextLevel;\n        long nextLevelEvenEvenOdd = nextLevel;\n\
    \        long nextLevelEvenOddOdd = nextLevel;\n        long nextLevelOddEvenEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEven = nextLevel;\n        long\
    \ nextLevelOddEvenOddOdd = nextLevel;\n        long nextLevelOddOddEvenEven =\
    \ nextLevel;\n        long nextLevelOddOddEvenOdd = nextLevel;\n        long nextLevelOddOddOddEven\
    \ = nextLevel;\n        long nextLevelOddOddOddOdd = nextLevel;\n        long\
    \ nextLevelEvenEvenEvenEven = nextLevel;\n        long nextLevelEvenOddEvenEven\
    \ = nextLevel;\n        long nextLevelEvenEvenOddEven = nextLevel;\n        long\
    \ nextLevelEvenOddOddEven = nextLevel;\n        long nextLevelEvenOddEvenOdd =\
    \ nextLevel;\n        long nextLevelEvenOddOddOdd = nextLevel;\n        long nextLevelOddEvenEvenEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEven = nextLevel;\n        long\
    \ nextLevelOddEvenOddOdd = nextLevel;\n        long nextLevelOddOddEvenEven =\
    \ nextLevel;\n        long nextLevelOddOddEvenOdd = nextLevel;\n        long nextLevelOddOddOddEven\
    \ = nextLevel;\n        long nextLevelOddOddOddOdd = nextLevel;\n        long\
    \ nextLevelEvenEvenEvenEven = nextLevel;\n        long nextLevelEvenOddEvenEven\
    \ = ", "        List<long> result = new List<long>();\n        long nextOdd =\
    \ n;\n        long nextEven = n;\n        long nextOddEven = n;\n        long\
    \ nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n / 2;\n        long nextEven = n % 2;\n        if (nextOdd\
    \ % 2 == 0) {\n            result.Add(nextOdd);\n        } else {\n          \
    \  result.Add(nextEven);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel;\n        if (n % 2 == 0)\
    \ {\n            nextLevel = n + 1;\n        } else {\n            nextLevel =\
    \ n + 2;\n        }\n        for (int i = 1; i <= n; i++) {\n            result.Add(nextLevel);\n\
    \            nextLevel += 2;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        long nextOdd = n % 2 == 1 ? n\
    \ : n + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        List<long>\
    \ level1 = MakeAPile(nextOdd);\n        List<long> level2 = MakeAPile(nextEven);\n\
    \        List<long> level3 = MakeAPile(nextOdd * 2);\n        List<long> level4\
    \ = MakeAPile(nextEven * 2);\n        List<long> level5 = MakeAPile(nextOdd *\
    \ 3);\n        List<long> level6 = MakeAPile(nextEven * 3);\n        List<long>\
    \ level7 = MakeAPile(nextOdd * 4);\n        List<long> level8 = MakeAPile(nextEven\
    \ * 4);\n        List<long> level9 = MakeAPile(nextOdd * 5);\n        List<long>\
    \ level10 = MakeAPile(nextEven * 5);\n        List<long> level11 = MakeAPile(nextOdd\
    \ * 6);\n        List<long> level12 = MakeAPile(nextEven * 6);\n        List<long>\
    \ level13 = MakeAPile(nextOdd * 7);\n        List<long> level14 = MakeAPile(nextEven\
    \ * 7);\n        List<long> level15 = MakeAPile(nextOdd * 8);\n        List<long>\
    \ level16 = MakeAPile(nextEven * 8);\n        List<long> level17 = MakeAPile(nextOdd\
    \ * 9);\n        List<long> level18 = MakeAPile(nextEven * 9);\n        List<long>\
    \ level19 = MakeAPile(nextOdd * 10);\n        List<long> level20 = MakeAPile(nextEven\
    \ * 10);\n        List<long> level21 = MakeAPile(nextOdd * 11);\n        List<long>\
    \ level22 = MakeAPile(nextEven * 11);\n        List<long> level23 = MakeAPile(nextOdd\
    \ * 12);\n        List<long> level24 = MakeAPile(nextEven * 12);\n        List<long>\
    \ level25 = MakeAPile(nextOdd * 13);\n        List<long> level26 = MakeAPile(nextEven\
    \ * 13);\n        List<long> level27 = MakeAPile(nextOdd * 14);\n        List<long>\
    \ level28 = MakeAPile(nextEven * 14);\n        List<long> level29 = MakeAPile(nextOdd ",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelOdd = nextLevel;\n        long nextLevelEven = nextLevel;\n\
    \        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n    \
    \            nextLevelEven = nextLevelEven * 2;\n            } else {\n      \
    \          nextLevelOdd = nextLevelOdd * 2;\n            }\n            result.Add(nextLevelEven);\n\
    \            nextLevel = nextLevelOdd;\n            nextLevelEven = nextLevelOdd;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextEven = n;\n        long nextOdd = n;\n        long nextEvenCount\
    \ = 0;\n        long nextOddCount = 0;\n        while (nextEven > 0 || nextOdd\
    \ > 0) {\n            if (nextEven % 2 == 0) {\n                nextEvenCount++;\n\
    \                nextEven = nextEven / 2;\n            } else {\n            \
    \    nextOddCount++;\n                nextOdd = nextOdd / 2;\n            }\n\
    \        }\n        result.Add(nextEvenCount);\n        result.Add(nextOddCount);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelCount = 0;\n        while (nextLevel\
    \ > 0) {\n            if (nextLevel % 2 == 0) {\n                nextLevelCount\
    \ += nextLevel;\n            } else {\n                nextLevelCount += nextLevel\
    \ / 2;\n            }\n            result.Add(nextLevelCount);\n            nextLevel\
    \ = nextLevelCount - nextLevel;\n            nextLevelCount = 0;\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n  \
    \      long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextEven = n;\n        long nextOdd = n;\n        long nextEvenCount = 0;\n\
    \        long nextOddCount = 0;\n        while (nextEven > 0 || nextOdd > 0) {\n\
    \            if (nextEven % 2 == 0) {\n                nextEvenCount++;\n    \
    \            nextEven = nextEven / 2;\n            } else {\n                nextOddCount++;\n\
    \                nextOdd = nextOdd / 2;\n            }\n        }\n        result.Add(nextEvenCount);\n\
    \        result.Add(nextOddCount);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel = nextLevel / 2;\n\
    \        }\n        result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextEven\
    \ = n;\n        long nextOdd = n;\n        long nextEvenCount = 0;\n        long\
    \ nextOddCount = 0;\n        long nextEvenCount2 = 0;\n        long nextOddCount2\
    \ = 0;\n        long nextEvenCount3 = 0;\n        long nextOddCount3 = 0;\n  \
    \      long nextEvenCount4 = 0;\n        long nextOddCount4 = 0;\n        long\
    \ nextEvenCount5 = 0;\n        long nextOddCount5 = 0;\n        long nextEvenCount6\
    \ = 0;\n        long nextOddCount6 = 0;\n        long nextEvenCount7 = 0;\n  \
    \      long nextOddCount7 = 0;\n        long nextEvenCount8 = 0;\n        long\
    \ nextOddCount8 = 0;\n        long nextEvenCount9 = 0;\n        long nextOddCount9\
    \ = 0;\n        long nextEvenCount10 = 0;\n        long nextOddCount10 = 0;\n\
    \        long nextEvenCount11 = 0;\n        long nextOddCount11 = 0;\n       \
    \ long nextEvenCount12 = 0;\n        long nextOddCount12 = 0;\n        long nextEvenCount13\
    \ = 0;\n        long nextOddCount13 = 0;\n        long nextEvenCount14 = 0;\n\
    \        long nextOddCount14 = 0;\n        long nextEvenCount15 = 0;\n       \
    \ long nextOddCount15 = 0;\n        long nextEvenCount16 = 0;\n        long nextOddCount16\
    \ = 0;\n        long nextEvenCount17 = 0;\n        long nextOddCount17 = 0;\n\
    \        long nextEvenCount18 = 0;\n        long nextOddCount18 = 0;\n       \
    \ long nextEvenCount19 = 0;\n        long nextOddCount19 = 0;\n        long nextEvenCount20\
    \ = 0;\n        long nextOddCount20 = 0;\n        long nextEvenCount21 = 0;\n\
    \        long nextOddCount21 = 0;\n        long nextEvenCount22 = 0;\n       \
    \ long nextOddCount22 = 0;\n        long nextEvenCount23 = 0;\n        long nextOddCount23\
    \ = 0;\n        long nextEvenCount24 = 0;\n        long nextOddCount24 = 0;\n\
    \        long nextEvenCount25 = 0;\n        long nextOddCount25 = 0;\n       \
    \ long nextEvenCount26 = 0;\n        long nextOddCount26 = 0;\n        long nextEvenCount27\
    \ = 0;\n        long nextOddCount27 = 0;\n        long nextEvenCount28 = 0;\n\
    \        long nextOddCount28 = 0;\n        long nextEvenCount29 = 0;\n       \
    \ long nextOddCount29 = 0;\n        long nextEven", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel = nextLevel / 2;\n\
    \        }\n        result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel = 1;\n \
    \       long currentStones = n;\n        while (currentStones > 0) {\n       \
    \     if (currentStones % 2 == 0) {\n                nextEven = currentStones\
    \ / 2;\n            } else {\n                nextOdd = currentStones / 2;\n \
    \           }\n            result.Add(nextOdd);\n            result.Add(nextEven);\n\
    \            currentStones = currentStones - (nextOdd + nextEven);\n         \
    \   currentLevel++;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         return result;\n        }\n        long nextOdd = n % 2 == 1 ? n : n\
    \ + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        List<long> nextLevel\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel2 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel3 = MakeAPile(nextOdd + nextEven);\n        List<long>\
    \ nextLevel4 = MakeAPile(nextOdd * nextEven);\n        List<long> nextLevel5 =\
    \ MakeAPile(nextOdd * nextEven + nextOdd * nextOdd);\n        List<long> nextLevel6\
    \ = MakeAPile(nextOdd * nextEven * nextOdd + nextOdd * nextEven * nextOdd);\n\
    \        List<long> nextLevel7 = MakeAPile(nextOdd * nextEven * nextOdd * nextOdd\
    \ + nextOdd * nextEven * nextOdd * nextOdd);\n        List<long> nextLevel8 =\
    \ MakeAPile(nextOdd * nextEven * nextOdd * nextOdd * nextOdd + nextOdd * nextEven\
    \ * nextOdd * nextOdd * nextOdd);\n        List<long> nextLevel9 = MakeAPile(nextOdd\
    \ * nextEven * nextOdd * nextOdd * nextOdd * nextOdd + nextOdd * nextEven * nextOdd\
    \ * nextOdd * nextOdd * nextOdd);\n        List<long> nextLevel10 = MakeAPile(nextOdd\
    \ * nextEven * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd + nextOdd\
    \ * nextEven * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd);\n        List<long>\
    \ nextLevel11 = MakeAPile(nextOdd * nextEven * nextOdd * nextOdd * nextOdd * nextOdd\
    \ * nextOdd * nextOdd * nextOdd + nextOdd * nextEven * nextOdd * nextOdd * nextOdd\
    \ * nextOdd * nextOdd * nextOdd);\n        List<long> nextLevel12 = MakeAPile(nextOdd\
    \ * nextEven * nextOdd * nextOdd * nextOdd * nextOdd * ", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n +\
    \ 1 : n;\n        long nextLevel = nextOdd;\n        long nextLevelCount = 1;\n\
    \        long nextLevelCountEven = 1;\n        while (nextLevel > 0) {\n     \
    \       result.Add(nextLevelCount);\n            nextLevelCount += nextLevel;\n\
    \            nextLevelCountEven++;\n            nextLevel = nextEven - nextLevelCountEven;\n\
    \            nextLevelCount = nextLevelCountEven;\n            nextLevelCountEven\
    \ = nextLevel;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            nextLevelCount++;\n       \
    \     if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n     \
    \       } else {\n                nextLevelCountOdd++;\n            }\n      \
    \      nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n / 2;\n        long nextEven = n % 2;\n        long nextLevel\
    \ = nextOdd;\n        long currentLevel = 1;\n        long currentStones = 1;\n\
    \        while (currentLevel < n) {\n            result.Add(currentStones);\n\
    \            currentStones += nextLevel;\n            nextLevel = nextEven;\n\
    \            nextEven = nextOdd + nextEven;\n            currentLevel++;\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                result.Add(nextLevel);\n           \
    \ }\n            nextLevel = nextLevel / 2;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextOdd = (n + 1) /\
    \ 2;\n        long nextEven = (n + 2) / 2;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOddEven);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long currentLevel = 1;\n        long\
    \ nextLevel = 1;\n        long currentStones = 1;\n        long nextStones = 1;\n\
    \        long currentLevelStones = 1;\n        long nextLevelStones = 1;\n   \
    \     long currentLevelStonesSum = 0;\n        long nextLevelStonesSum = 0;\n\
    \        long currentLevelStonesSumOfNextLevel = 0;\n        long nextLevelStonesSumOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevel = 0;\n      \
    \  long nextLevelStonesSumOfNextLevelOfNextLevel = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevel = 0;\n\
    \        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long nextLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNextLevel\
    \ = 0;\n        long currentLevelStonesSumOfNextLevelOfNextLevelOfNextLevelOfNext",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n            }\
    \ else {\n                nextLevelCountOdd++;\n            }\n            nextLevel\
    \ = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        long nextOdd = n % 2 == 0 ? n\
    \ : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        List<long>\
    \ nextLevel = MakeAPile(nextOdd);\n        List<long> nextLevel2 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel3 = MakeAPile(nextOdd * 2);\n        List<long> nextLevel4\
    \ = MakeAPile(nextEven * 2);\n        List<long> nextLevel5 = MakeAPile(nextOdd\
    \ * 3);\n        List<long> nextLevel6 = MakeAPile(nextEven * 3);\n        List<long>\
    \ nextLevel7 = MakeAPile(nextOdd * 4);\n        List<long> nextLevel8 = MakeAPile(nextEven\
    \ * 4);\n        List<long> nextLevel9 = MakeAPile(nextOdd * 5);\n        List<long>\
    \ nextLevel10 = MakeAPile(nextEven * 5);\n        List<long> nextLevel11 = MakeAPile(nextOdd\
    \ * 6);\n        List<long> nextLevel12 = MakeAPile(nextEven * 6);\n        List<long>\
    \ nextLevel13 = MakeAPile(nextOdd * 7);\n        List<long> nextLevel14 = MakeAPile(nextEven\
    \ * 7);\n        List<long> nextLevel15 = MakeAPile(nextOdd * 8);\n        List<long>\
    \ nextLevel16 = MakeAPile(nextEven * 8);\n        List<long> nextLevel17 = MakeAPile(nextOdd\
    \ * 9);\n        List<long> nextLevel18 = MakeAPile(nextEven * 9);\n        List<long>\
    \ nextLevel19 = MakeAPile(nextOdd * 10);\n        List<long> nextLevel20 = MakeAPile(nextEven\
    \ * 10);\n        List<long> nextLevel21 = MakeAPile(nextOdd * 11);\n        List<long>\
    \ nextLevel22 = MakeAPile(nextEven * 11);\n        List<long> nextLevel23 = MakeAPile(nextOdd\
    \ * 12);\n        List<long> nextLevel24 = MakeAPile(nextEven * 12);\n       \
    \ List<long> nextLevel25 = MakeAPile(nextOdd * 13);\n        List<long> nextLevel26\
    \ = MakeAPile(nextEven * 13);\n        List<long> nextLevel27 = MakeAPile(nextOdd\
    \ * 14);\n        List<long> ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        List<long> level1 = MakeAPile(nextOdd);\n\
    \        List<long> level2 = MakeAPile(nextEven);\n        List<long> level3 =\
    \ new List<long>();\n        foreach (long i in level1) {\n            level3.Add(i);\n\
    \        }\n        foreach (long i in level2) {\n            level3.Add(i);\n\
    \        }\n        foreach (long i in level3) {\n            result.Add(i);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenO", "     \
    \   List<long> result = new List<long>();\n        long nextLevel = n;\n     \
    \   long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n        long\
    \ nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if (nextLevel\
    \ % 2 == 0) {\n                nextLevelCountEven++;\n            } else {\n \
    \               nextLevelCountOdd++;\n            }\n            nextLevel--;\n\
    \        }\n        result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel;\n        if (n % 2 == 0)\
    \ {\n            nextLevel = n + 1;\n        } else {\n            nextLevel =\
    \ n + 2;\n        }\n        result.Add(nextLevel);\n        while (nextLevel\
    \ > 1) {\n            long nextLevelNextOdd = nextLevel % 2 == 0 ? nextLevel +\
    \ 1 : nextLevel + 2;\n            result.Add(nextLevelNextOdd);\n            nextLevel\
    \ = nextLevelNextOdd;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = 1;\n        long nextEven\
    \ = 1;\n        long nextOddEven = 1;\n        long nextOddEvenOddEven = 1;\n\
    \        long nextOddEvenOddEvenOddEven = 1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n        long nextNextOdd\
    \ = nextOdd * 2;\n        long nextNextEven = nextEven * 2;\n        long nextNextNextOdd\
    \ = nextNextOdd * 2;\n        long nextNextNextEven = nextNextEven * 2;\n    \
    \    long nextNextNextNextOdd = nextNextNextOdd * 2;\n        long nextNextNextNextEven\
    \ = nextNextNextEven * 2;\n        long nextNextNextNextNextOdd = nextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextEven = nextNextNextNextEven * 2;\n  \
    \      long nextNextNextNextNextNextOdd = nextNextNextNextNextOdd * 2;\n     \
    \   long nextNextNextNextNextNextEven = nextNextNextNextNextEven * 2;\n      \
    \  long nextNextNextNextNextNextNextOdd = nextNextNextNextNextNextOdd * 2;\n \
    \       long nextNextNextNextNextNextNextEven = nextNextNextNextNextNextEven *\
    \ 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextEven\
    \ * 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextEven\
    \ * 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextEven\
    \ * 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextEven\
    \ * 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextOdd\
    \ * 2;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextEven\
    \ * 2;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextOdd\
    \ * 2;", "        List<long> result = new List<long>();\n        if (n == 0) {\n\
    \            result.Add(0);\n            return result;\n        }\n        long\
    \ nextOdd = n;\n        long nextEven = n;\n        while (nextEven % 2 == 0)\
    \ {\n            nextEven = nextEven / 2;\n        }\n        while (nextOdd %\
    \ 2 == 1) {\n            nextOdd = nextOdd / 2;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextNextOdd = 0;\n        long nextNextEven = 0;\n        long nextNextNextOdd\
    \ = 0;\n        long nextNextNextEven = 0;\n        long nextNextNextNextOdd =\
    \ 0;\n        long nextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNext",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        while (nextLevel > 0) {\n           \
    \ if (nextLevel % 2 == 0) {\n                nextLevelCount += nextLevel;\n  \
    \          } else {\n                nextLevelCount += nextLevel / 2;\n      \
    \      }\n            nextLevel--;\n            result.Add(nextLevelCount);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long next = 0;\n\
    \        long current = 0;\n        long nextLevel = 0;\n        long currentLevel\
    \ = 0;\n        long nextLevelCount = 0;\n        long currentLevelCount = 0;\n\
    \        long nextLevelSum = 0;\n        long currentLevelSum = 0;\n        long\
    \ nextLevelSumCount = 0;\n        long currentLevelSumCount = 0;\n        long\
    \ nextLevelSumCount2 = 0;\n        long currentLevelSumCount2 = 0;\n        long\
    \ nextLevelSumCount3 = 0;\n        long currentLevelSumCount3 = 0;\n        long\
    \ nextLevelSumCount4 = 0;\n        long currentLevelSumCount4 = 0;\n        long\
    \ nextLevelSumCount5 = 0;\n        long currentLevelSumCount5 = 0;\n        long\
    \ nextLevelSumCount6 = 0;\n        long currentLevelSumCount6 = 0;\n        long\
    \ nextLevelSumCount7 = 0;\n        long currentLevelSumCount7 = 0;\n        long\
    \ nextLevelSumCount8 = 0;\n        long currentLevelSumCount8 = 0;\n        long\
    \ nextLevelSumCount9 = 0;\n        long currentLevelSumCount9 = 0;\n        long\
    \ nextLevelSumCount10 = 0;\n        long currentLevelSumCount10 = 0;\n       \
    \ long nextLevelSumCount11 = 0;\n        long currentLevelSumCount11 = 0;\n  \
    \      long nextLevelSumCount12 = 0;\n        long currentLevelSumCount12 = 0;\n\
    \        long nextLevelSumCount13 = 0;\n        long currentLevelSumCount13 =\
    \ 0;\n        long nextLevelSumCount14 = 0;\n        long currentLevelSumCount14\
    \ = 0;\n        long nextLevelSumCount15 = 0;\n        long currentLevelSumCount15\
    \ = 0;\n        long nextLevelSumCount16 = 0;\n        long currentLevelSumCount16\
    \ = 0;\n        long nextLevelSumCount17 = 0;\n        long currentLevelSumCount17\
    \ = 0;\n        long nextLevelSumCount18 = 0;\n        long currentLevelSumCount18\
    \ = 0;\n        long nextLevelSumCount19 = 0;\n        long currentLevelSumCount19\
    \ = 0;\n        long nextLevelSumCount20 = 0;\n        long currentLevelSumCount20\
    \ = 0;\n        long nextLevelSumCount21 = 0;\n        long currentLevelSumCount21\
    \ = 0;\n        long nextLevelSumCount22 = 0;\n        long currentLevelSumCount22\
    \ = 0;\n        long nextLevelSumCount23 = 0;\n        long currentLevelSumCount23\
    \ = 0;\n        long nextLevelSumCount24 = 0;\n        long currentLevelSumCount24\
    \ = 0;\n        long nextLevelSumCount25 = 0;\n        long currentLevelSumCount25\
    \ = 0;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextOdd = n;\n        long nextEven = n;\n        long nextOddEven = n;\n  \
    \      long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n      \
    \  long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      while (nextLevel > 0) {\n            result.Add(nextLevel);\n         \
    \   nextLevel = nextLevel % 2 == 0 ? nextLevel / 2 : nextLevel / 2 + 1;\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        long nextOddEven = nextOdd * nextEven;\n\
    \        long nextOddEvenOdd = nextOdd * nextOdd;\n        long nextOddEvenOddEven\
    \ = nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOdd = nextOdd\
    \ * nextEven * nextOdd * nextEven;\n        long nextOddEvenOddEvenOddEven = nextOdd\
    \ * nextEven * nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven * nextOdd * nextEven *\
    \ nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven * nextOdd\
    \ * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOdd * nextEven * nextOdd *\
    \ nextEven * nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven;\n \
    \       long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven\
    \ * nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven\
    \ * nextOdd * next", "        List<long> result = new List<long>();\n        long\
    \ nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd\
    \ = 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n                nextLevelCountEvenOdd\
    \ += nextLevelCountEven;\n            } else {\n                nextLevelCountOdd++;\n\
    \                nextLevelCountEvenOdd += nextLevelCountOdd;\n            }\n\
    \            result.Add(nextLevelCountEvenOdd);\n            nextLevelCountEvenOdd\
    \ = 0;\n            nextLevelCountOdd = 0;\n            nextLevel = nextLevel\
    \ / 2;\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel\
    \ = 1;\n        long nextLevel = 1;\n        long nextLevelCount = 0;\n      \
    \  long currentCount = 0;\n        long nextCount = 0;\n        long nextLevelCount2\
    \ = 0;\n        long currentCount2 = 0;\n        long nextCount2 = 0;\n      \
    \  long nextLevelCount3 = 0;\n        long currentCount3 = 0;\n        long nextCount3\
    \ = 0;\n        long nextLevelCount4 = 0;\n        long currentCount4 = 0;\n \
    \       long nextCount4 = 0;\n        long nextLevelCount5 = 0;\n        long\
    \ currentCount5 = 0;\n        long nextCount5 = 0;\n        long nextLevelCount6\
    \ = 0;\n        long currentCount6 = 0;\n        long nextCount6 = 0;\n      \
    \  long nextLevelCount7 = 0;\n        long currentCount7 = 0;\n        long nextCount7\
    \ = 0;\n        long nextLevelCount8 = 0;\n        long currentCount8 = 0;\n \
    \       long nextCount8 = 0;\n        long nextLevelCount9 = 0;\n        long\
    \ currentCount9 = 0;\n        long nextCount9 = 0;\n        long nextLevelCount10\
    \ = 0;\n        long currentCount10 = 0;\n        long nextCount10 = 0;\n    \
    \    long nextLevelCount11 = 0;\n        long currentCount11 = 0;\n        long\
    \ nextCount11 = 0;\n        long nextLevelCount12 = 0;\n        long currentCount12\
    \ = 0;\n        long nextCount12 = 0;\n        long nextLevelCount13 = 0;\n  \
    \      long currentCount13 = 0;\n        long nextCount13 = 0;\n        long nextLevelCount14\
    \ = 0;\n        long currentCount14 = 0;\n        long nextCount14 = 0;\n    \
    \    long nextLevelCount15 = 0;\n        long currentCount15 = 0;\n        long\
    \ nextCount15 = 0;\n        long nextLevelCount16 = 0;\n        long currentCount16\
    \ = 0;\n        long nextCount16 = 0;\n        long nextLevelCount17 = 0;\n  \
    \      long currentCount17 = 0;\n        long nextCount17 = 0;\n        long nextLevelCount18\
    \ = 0;\n        long currentCount18 = 0;\n        long nextCount18 = 0;\n    \
    \    long nextLevelCount19 = 0;\n        long currentCount19 = 0;\n        long\
    \ nextCount19 = 0;\n        long nextLevelCount20 = 0;\n        long currentCount20\
    \ = 0;\n        long nextCount20 = 0;\n        long nextLevelCount21 = 0;\n  \
    \      long currentCount21 = 0;\n        long nextCount21 = 0;\n        long nextLevelCount22\
    \ = 0;\n        long currentCount22 = 0;\n        long nextCount22 = 0;\n    \
    \    long nextLevelCount23 = 0;\n", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextEven = n / 2;\n        long nextOdd = n % 2;\n  \
    \      result.Add(nextEven);\n        if (nextOdd != 0) {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextLevel;\n        if (n % 2 == 0) {\n            nextLevel = n + 1;\n    \
    \    } else {\n            nextLevel = n + 2;\n        }\n        result.Add(nextLevel);\n\
    \        while (nextLevel > 1) {\n            nextLevel = nextLevel / 2;\n   \
    \         result.Add(nextLevel);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        long odd = n % 2 == 1 ? n : n\
    \ + 1;\n        long even = n % 2 == 0 ? n : n + 1;\n        List<long> level1\
    \ = MakeAPile(odd);\n        List<long> level2 = MakeAPile(even);\n        List<long>\
    \ result = level1.Concat(level2).ToList();\n        result.Add(n);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextLevel\
    \ = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n\
    \        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n\
    \        long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddOddEven = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd = 0;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelCountEven", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 1;\n        long nextEven = 2;\n        long nextOddEven\
    \ = 3;\n        long nextOddEvenOdd = 4;\n        long nextOddEvenOddEven = 5;\n\
    \        long nextOddEvenOddEvenOdd = 6;\n        long nextOddEvenOddEvenOddEven\
    \ = 7;\n        long nextOddEvenOddEvenOddEvenOdd = 8;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 9;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 10;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 11;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 12;\n     \
    \   long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 13;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 14;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 15;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 16;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 17;\n    \
    \    long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven = 18;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven = 19;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven = 20;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenOdd = 21;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEvenOdd\
    \ = 22;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEvenOddEven\
    \ = 23;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEven",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n    \
    \    while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n        \
    \        nextLevelCountEven++;\n            } else {\n                nextLevelCountOdd++;\n\
    \            }\n            nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        if (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n       \
    \         nextLevelCountEven++;\n            } else {\n                nextLevelCountOdd++;\n\
    \            }\n            result.Add(nextLevelCountEven);\n            if (nextLevel\
    \ > 1) {\n                if (nextLevel % 2 == 0) {\n                    nextLevelCountEvenOdd++;\n\
    \                } else {\n                    nextLevelCountOdd++;\n        \
    \        }\n                result.Add(nextLevelCountEvenOdd);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n / 2;\n        long nextEven = n % 2;\n  \
    \      List<long> nextLevel = MakeAPile(nextOdd);\n        List<long> nextLevel2\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel3 = MakeAPile(nextOdd +\
    \ nextEven);\n        List<long> nextLevel4 = MakeAPile(nextOdd + nextEven + nextOdd\
    \ + nextEven);\n        List<long> nextLevel5 = MakeAPile(nextOdd + nextEven +\
    \ nextOdd + nextEven + nextOdd + nextEven);\n        List<long> nextLevel6 = MakeAPile(nextOdd\
    \ + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n\
    \        List<long> nextLevel7 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n        List<long>\
    \ nextLevel8 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n        List<long>\
    \ nextLevel9 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n\
    \        List<long> nextLevel10 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven);\n        List<long> nextLevel11\
    \ = MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd\
    \ + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven +\
    \ nextOdd + nextEven + nextOdd + nextEven);\n        List<long> nextLevel12 =\
    \ MakeAPile(nextOdd + nextEven ", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelStones = 0;\n        long\
    \ nextLevelStonesEven = 0;\n        long nextLevelStonesOdd = 0;\n        long\
    \ nextLevelStonesEvenEven = 0;\n        long nextLevelStonesOddOdd = 0;\n    \
    \    long nextLevelStonesEvenOdd = 0;\n        long nextLevelStonesOddEven = 0;\n\
    \        long nextLevelStonesEvenOddOdd = 0;\n        long nextLevelStonesOddEvenOdd\
    \ = 0;\n        long nextLevelStonesEvenEvenOdd = 0;\n        long nextLevelStonesOddOddEven\
    \ = 0;\n        long nextLevelStonesEvenOddEven = 0;\n        long nextLevelStonesOddEvenOddEven\
    \ = 0;\n        long nextLevelStonesEvenEvenOddEven = 0;\n        long nextLevelStonesOddOddOddEven\
    \ = 0;\n        long nextLevelStonesEvenOddOddEven = 0;\n        long nextLevelStonesEvenEvenOddOddEven\
    \ = 0;\n        long nextLevelStonesOddOddEvenOdd = 0;\n        long nextLevelStonesEvenOddOddEvenOdd\
    \ = 0;\n        long nextLevelStonesEvenEvenOddOddEven = 0;\n        long nextLevelStonesOddOddOddEven\
    \ = 0;\n        long nextLevelStonesEvenOddOddEvenOdd = 0;\n        long nextLevelStonesEvenEvenOddOddEven\
    \ = 0;\n        long nextLevelStonesOddOddEvenOddOdd = 0;\n        long nextLevelStonesEvenOddOddEvenOddOdd\
    \ = 0;\n        long nextLevelStonesEvenEvenOddOddEvenOdd = 0;\n        long nextLevelStonesOddOddOddEvenOddOdd\
    \ = 0;\n        long nextLevelStonesEvenOddOddEvenOddOdd = 0;\n        long nextLevelStonesEvenEvenOddOddEvenOdd\
    \ = 0;\n        long nextLevelStonesOddOddOddEvenOddOdd = 0;\n        long nextLevelStonesEvenOddOddEvenOddOdd\
    \ = 0;\n        long nextLevelStonesEvenEvenOddOddEvenOdd = 0;\n        long nextLevelStones",
  "        List<long> result = new List<long>();\n        long nextOdd = 1;\n    \
    \    long nextEven = 1;\n        long nextOddEven = 1;\n        long nextOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEven = 1;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 1;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 1;\n", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 1;\n        long nextEven = 2;\n        long nextOddEven = 3;\n        long\
    \ nextOddEvenOdd = 4;\n        long nextOddEvenOddEven = 5;\n        long nextOddEvenOddEvenOdd\
    \ = 6;\n        long nextOddEvenOddEvenOddEven = 7;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 8;\n        long nextOddEvenOddEvenOddEvenOddEven = 9;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 10;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 11;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 12;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 13;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 14;\n \
    \       long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 15;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 16;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 17;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven\
    \ = 18;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven\
    \ = 19;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEven\
    \ = 20;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEven\
    \ = 21;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEven\
    \ = 22;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEven\
    \ = 23;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenEvenEven\
    \ = 24;\n        long next", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        List<long> nextLevel = MakeAPile(nextEven);\n        for (int i = 0;\
    \ i < nextLevel.Count; i++) {\n            nextLevel[i] += nextLevel[i - 1];\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven\
    \ = 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelEven++;\n            } else {\n                nextLevelOdd++;\n\
    \            }\n            nextLevel--;\n        }\n        result.Add(nextLevelEven);\n\
    \        result.Add(nextLevelOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        long nextLevelCountEvenOdd = 0;\n        while (nextLevel > 0) {\n\
    \            long nextLevelCountEven = nextLevelCountEven * 2 + 1;\n         \
    \   long nextLevelCountOdd = nextLevelCountOdd * 2 + 1;\n            long nextLevelCountEvenOdd\
    \ = nextLevelCountEvenOdd * 2 + 1;\n            if (nextLevel % 2 == 0) {\n  \
    \              nextLevelCountEven = nextLevelCountEven * 2;\n                nextLevelCountOdd\
    \ = nextLevelCountOdd * 2;\n                nextLevelCountEvenOdd = nextLevelCountEvenOdd\
    \ * 2;\n            }\n            result.Add(nextLevelCountEven);\n         \
    \   result.Add(nextLevelCountOdd);\n            result.Add(nextLevelCountEvenOdd);\n\
    \            nextLevel = nextLevel / 2;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n;\n   \
    \     long nextEven = n;\n        while (nextEven > 0 || nextOdd > 0) {\n    \
    \        if (nextEven % 2 == 0) {\n                nextEven = nextEven / 2;\n\
    \                result.Add(nextEven);\n            } else {\n               \
    \ nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        long nextOdd = n % 2 == 0 ? n : n\
    \ + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        long nextLevel\
    \ = nextOdd;\n        long nextLevelCount = 1;\n        long nextLevelCount2 =\
    \ 1;\n        while (nextLevel > 0) {\n            long nextLevelCount = nextLevelCount;\n\
    \            long nextLevelCount2 = nextLevelCount2;\n            while (nextLevel\
    \ > 0) {\n                nextLevel = nextLevel / 2;\n                nextLevelCount++;\n\
    \            }\n            result.Add(nextLevelCount);\n            nextLevelCount\
    \ = nextLevelCount2;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            return result;\n        }\n        long nextOdd = n % 2 == 0 ? n\
    \ : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        long nextOddEven\
    \ = nextOdd * nextEven;\n        long nextOddEvenOdd = nextOddEven * nextOdd;\n\
    \        long nextOddEvenOddEven = nextOddEvenOdd * nextEven;\n        long nextOddEvenOddEvenOdd\
    \ = nextOddEvenOddEven * nextOdd;\n        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * nextOdd;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(n);\n          \
    \  return result;\n        }\n        long nextEven = n / 2;\n        long nextOdd\
    \ = nextEven + 1;\n        List<long> level1 = MakeAPile(nextEven);\n        List<long>\
    \ level2 = MakeAPile(nextOdd);\n        List<long> level3 = new List<long>();\n\
    \        foreach (long level in level1) {\n            level3.Add(level + level2[level]);\n\
    \        }\n        result.AddRange(level3);\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = n;\n       \
    \ long nextEven = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenO", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        List<long> nextLevel = MakeAPile(nextEven);\n\
    \        List<long> nextLevel2 = MakeAPile(nextOdd);\n        List<long> nextLevel3\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel4 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel5 = MakeAPile(nextEven);\n        List<long> nextLevel6\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel7 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel8 = MakeAPile(nextOdd);\n        List<long> nextLevel9\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel10 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel11 = MakeAPile(nextEven);\n        List<long> nextLevel12\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel13 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel14 = MakeAPile(nextOdd);\n        List<long> nextLevel15\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel16 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel17 = MakeAPile(nextEven);\n        List<long> nextLevel18\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel19 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel20 = MakeAPile(nextOdd);\n        List<long> nextLevel21\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel22 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel23 = MakeAPile(nextEven);\n        List<long> nextLevel24\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel25 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel26 = MakeAPile(nextOdd);\n        List<long> nextLevel27\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel28 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel29 = MakeAPile(", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   return result;\n        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n\
    \        long nextEven = n % 2 == 0 ? n + 1 : n;\n        List<long> level1 =\
    \ MakeAPile(nextOdd);\n        List<long> level2 = MakeAPile(nextEven);\n    \
    \    List<long> result = new List<long>();\n        foreach (long level in level1)\
    \ {\n            result.Add(level);\n        }\n        foreach (long level in\
    \ level2) {\n            result.Add(level);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n            }\
    \ else {\n                nextLevelCountOdd++;\n            }\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel / 2;\n            nextLevelCount = nextLevelCountEven;\n\
    \            nextLevelCountEven = nextLevelCountOdd;\n            nextLevelCountOdd\
    \ = nextLevelCount;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0)\n            return result;\n     \
    \   long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 == 0\
    \ ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        result.AddRange(MakeAPile(nextOdd));\n        result.AddRange(MakeAPile(nextEven));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd\
    \ = 0;\n        long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n      \
    \  long nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n   \
    \     long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n   \
    \     long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        ",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            nextLevelCount++;\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel = nextLevel / 2;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0)\n            return result;\n        if (n % 2 == 0) {\n   \
    \         result.Add(n);\n            return result;\n        }\n        long\
    \ nextEven = n / 2;\n        long nextOdd = nextEven + 1;\n        result.Add(nextEven);\n\
    \        result.Add(nextOdd);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n;\n        long nextEven = n;\n\
    \        long nextOddNextEven = n;\n        long nextOddNextEvenNextOdd = n;\n\
    \        long nextOddNextEvenNextOddNextEven = n;\n        long nextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEven = n;\n    \
    \    long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd = n;\n \
    \       long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNext",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        long nextOdd\
    \ = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n\
    \        result.Add(nextOdd);\n        result.Add(nextEven);\n        List<long>\
    \ nextLevel = MakeAPile(nextOdd);\n        nextLevel.AddRange(MakeAPile(nextEven));\n\
    \        return result.Concat(nextLevel).ToList();", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long nextEven\
    \ = (n + 2) / 2;\n        long nextNextOdd = nextOdd * nextOdd;\n        long\
    \ nextNextEven = nextEven * nextEven;\n        long nextNextNextOdd = nextNextOdd\
    \ * nextOdd;\n        long nextNextNextEven = nextNextEven * nextEven;\n     \
    \   long nextNextNextNextOdd = nextNextNextOdd * nextOdd;\n        long nextNextNextNextEven\
    \ = nextNextNextEven * nextEven;\n        long nextNextNextNextNextOdd = nextNextNextNextOdd\
    \ * nextOdd;\n        long nextNextNextNextNextEven = nextNextNextNextEven * nextEven;\n\
    \        long nextNextNextNextNextNextOdd = nextNextNextNextNextOdd * nextOdd;\n\
    \        long nextNextNextNextNextNextEven = nextNextNextNextNextEven * nextEven;\n\
    \        long nextNextNextNextNextNextNextOdd = nextNextNextNextNextNextOdd *\
    \ nextOdd;\n        long nextNextNextNextNextNextNextEven = nextNextNextNextNextNextEven\
    \ * nextEven;\n        long nextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextOdd\
    \ * nextOdd;\n        long nextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextEven\
    \ * nextEven;\n        long nextNextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextOdd\
    \ * nextOdd;\n        long nextNextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextEven\
    \ * nextEven;\n        long nextNextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextOdd\
    \ * nextOdd;\n        long nextNextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextNextEven\
    \ * nextEven;\n        long nextNextNextNextNextNextNextNextNextOdd = nextNextNextNextNextNextNextNextNextNextOdd\
    \ * nextOdd;\n        long nextNextNextNextNextNextNextNextNextNextEven = nextNextNextNextNextNextNextNextNextNextEven\
    \ * nextEven;\n        long nextNextNextNextNextNextNextNextNextNextOdd = next",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        long nextOdd\
    \ = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n\
    \        result.Add(nextOdd);\n        result.Add(nextEven);\n        return result;",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n    \
    \    long nextLevelCountEvenOddEven = 0;\n        long nextLevelCountEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOdd = 0;\n        long nextLevelCountEvenOddEvenOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n      \
    \  long nextLevelCountEvenOddEvenOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n   \
    \     long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOdd = 0;\n   \
    \     long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n\
    \        long nextLevelCountEvenOddEvenOddOddOddOddOddOddOddOdd = 0;\n        ",
  "        List<long> result = new List<long>();\n        long nextEven = n;\n   \
    \     long nextOdd = n;\n        long nextEvenCount = 0;\n        long nextOddCount\
    \ = 0;\n        while (nextEven > 0 || nextOdd > 0) {\n            if (nextEven\
    \ > 0 && nextOdd > 0) {\n                nextEvenCount += nextEven;\n        \
    \        nextOddCount += nextOdd;\n            } else if (nextEven > 0) {\n  \
    \              nextEvenCount += nextEven;\n                nextOddCount = 0;\n\
    \            } else if (nextOdd > 0) {\n                nextEvenCount = 0;\n \
    \               nextOddCount += nextOdd;\n            }\n            result.Add(nextEvenCount);\n\
    \            result.Add(nextOddCount);\n            nextEven = nextOdd / 2;\n\
    \            nextOdd = nextEven / 2;\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long currentLevel = 1;\n        long currentStones\
    \ = 1;\n        long nextLevel = 0;\n        while (currentStones < n) {\n   \
    \         if (n % 2 == 0) {\n                nextEven++;\n            } else {\n\
    \                nextOdd++;\n            }\n            currentStones = nextOdd\
    \ + nextEven;\n            nextLevel = nextOdd + nextEven;\n            result.Add(nextLevel);\n\
    \            nextOdd = nextEven;\n            nextEven = 0;\n            currentLevel++;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long currentLevel\
    \ = 1;\n        long currentStones = 1;\n        while (n > 0) {\n           \
    \ if (n % 2 == 0) {\n                nextEven = nextEven + 1;\n            } else\
    \ {\n                nextOdd = nextOdd + 1;\n            }\n            currentStones\
    \ = nextOdd + nextEven;\n            result.Add(currentStones);\n            currentLevel++;\n\
    \            n /= 2;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel;\n        if (n % 2 == 0)\
    \ {\n            nextLevel = n + 1;\n        } else {\n            nextLevel =\
    \ n + 2;\n        }\n        result.Add(nextLevel);\n        while (nextLevel\
    \ > 1) {\n            long nextLevelNextOdd = nextLevel % 2 == 0 ? nextLevel +\
    \ 1 : nextLevel + 2;\n            result.Add(nextLevelNextOdd);\n            nextLevel\
    \ = nextLevelNextOdd;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelOdd\
    \ = nextLevel;\n        long nextLevelEven = nextLevel;\n        long nextLevelOddEven\
    \ = nextLevel;\n        long nextLevelOddOdd = nextLevel;\n        long nextLevelEvenEven\
    \ = nextLevel;\n        long nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven\
    \ = nextLevel;\n        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long nextLevelOddOddOdd\
    \ = nextLevel;\n        long nextLevelEvenEvenEven = nextLevel;\n        long\
    \ nextLevelEvenOdd = nextLevel;\n        long nextLevelOddEvenEven = nextLevel;\n\
    \        long nextLevelOddOddEven = nextLevel;\n        long next", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelOdd\
    \ = nextLevel;\n        long nextLevelEven = nextLevel;\n        long nextLevelOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOdd = nextLevel;\n        long nextLevelOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOdd = nextLevel;\n       \
    \ long nextLevelOddEvenOddEvenOddEven = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEven = nextLevel;\n\
    \        long nextLevelOddEvenOddEvenOddEvenOddEvenOdd = nextLevel;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEven = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextLevel;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOd",
  "        List<long> result = new List<long>();\n        long nextLevel;\n      \
    \  if (n % 2 == 0) {\n            nextLevel = n;\n        } else {\n         \
    \   nextLevel = n + 1;\n        }\n        result.Add(nextLevel);\n        while\
    \ (nextLevel > 1) {\n            nextLevel = nextLevel / 2;\n            result.Add(nextLevel);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextEven = n / 2;\n        long nextOdd = n % 2;\n        long nextLevel\
    \ = nextEven + nextOdd;\n        result.Add(nextLevel);\n        if (nextLevel\
    \ % 2 == 0) {\n            result.Add(nextLevel);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextLevel;\n      \
    \  if (n % 2 == 0) {\n            nextLevel = n + 1;\n        } else {\n     \
    \       nextLevel = n + 2;\n        }\n        for (int i = 0; i < nextLevel;\
    \ i++) {\n            result.Add(1);\n        }\n        for (int i = nextLevel;\
    \ i < n; i++) {\n            result.Add(0);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n            }\
    \ else {\n                nextLevelCountOdd++;\n            }\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel / 2;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextLevel = n;\n \
    \       long nextLevelOdd = nextLevel;\n        long nextLevelEven = nextLevel;\n\
    \        while (nextLevel > 0) {\n            result.Add(nextLevel);\n       \
    \     nextLevel = nextLevelOdd;\n            nextLevelOdd = nextLevelEven;\n \
    \           nextLevelEven = nextLevel;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        ", "        List<long> result = new List<long>();\n        long\
    \ nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelOddCount\
    \ = 0;\n        long nextLevelEvenCount = 0;\n        while (nextLevel > 0) {\n\
    \            nextLevelCount++;\n            if (nextLevel % 2 == 0) {\n      \
    \          nextLevelEvenCount++;\n            } else {\n                nextLevelOddCount++;\n\
    \            }\n            nextLevel--;\n        }\n        result.Add(nextLevelCount);\n\
    \        result.Add(nextLevelOddCount);\n        result.Add(nextLevelEvenCount);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven\
    \ = 0;\n        long nextLevelOddEven = 0;\n        long nextLevelOddEvenOdd =\
    \ 0;\n        long nextLevelOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n  \
    \      long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n       \
    \ long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelO", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel--;\n        }\n        result.Add(nextLevelCount);\n   \
    \     result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        result.Add(MakeAPile(nextOdd));\n       \
    \ result.Add(MakeAPile(nextEven));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel--;\n        }\n \
    \       result.Add(nextLevelCount);\n        result.Add(nextLevelCountEven);\n\
    \        result.Add(nextLevelCountOdd);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextLevel = n;\n        long nextLevelCount\
    \ = 0;\n        long nextLevelCountEven = 0;\n        long nextLevelCountOdd =\
    \ 0;\n        while (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n\
    \                nextLevelCountEven++;\n            } else {\n               \
    \ nextLevelCountOdd++;\n            }\n            nextLevel = nextLevel / 2;\n\
    \        }\n        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextLevel;\n        if (n % 2 == 0) {\n            nextLevel = n +\
    \ 1;\n        } else {\n            nextLevel = n + 2;\n        }\n        result.Add(nextLevel);\n\
    \        while (nextLevel > 1) {\n            long nextLevelNext = nextLevel;\n\
    \            if (nextLevelNext % 2 == 0) {\n                nextLevelNext = nextLevelNext\
    \ + 1;\n            } else {\n                nextLevelNext = nextLevelNext +\
    \ 2;\n            }\n            result.Add(nextLevelNext);\n            nextLevel\
    \ = nextLevelNext;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        while (nextLevel >\
    \ 0) {\n            result.Add(nextLevel);\n            nextLevel = nextLevel\
    \ % 2 == 0 ? nextLevel + 1 : nextLevel;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextLevel = n;\n \
    \       long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n     \
    \   long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n           \
    \ if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n         \
    \   } else {\n                nextLevelCountOdd++;\n            }\n          \
    \  result.Add(nextLevelCount);\n            nextLevel = nextLevel / 2;\n     \
    \       nextLevelCount = 0;\n            if (nextLevel % 2 == 0) {\n         \
    \       nextLevelCountEven++;\n            } else {\n                nextLevelCountOdd++;\n\
    \            }\n        }\n        result.Add(nextLevelCountEven);\n        result.Add(nextLevelCountOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextEven = n;\n        long nextOdd = n;\n        while (nextEven >\
    \ 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n                nextEven\
    \ = nextEven / 2;\n                result.Add(nextEven);\n            } else {\n\
    \                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         return result;\n        }\n        long nextOdd = n / 2;\n        long\
    \ nextEven = n % 2;\n        if (nextOdd % 2 == 0) {\n            result.Add(nextOdd);\n\
    \        }\n        else {\n            result.Add(nextEven);\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long nextOdd = n;\n        long nextEven = n;\n        long nextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOdd = n;\n        long nextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOdd = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextOddNextEven = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNext",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n      \
    \  long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n            }\
    \ else {\n                nextLevelCountOdd++;\n            }\n            nextLevel--;\n\
    \        }\n        result.Add(nextLevelCount);\n        if (nextLevel > 0) {\n\
    \            result.Add(nextLevelCountEven);\n            result.Add(nextLevelCountOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(n);\n          \
    \  return result;\n        }\n        long nextOdd = n;\n        long nextEven\
    \ = n;\n        while (nextEven % 2 == 0) {\n            nextEven /= 2;\n    \
    \    }\n        while (nextOdd % 2 == 0) {\n            nextOdd /= 2;\n      \
    \  }\n        result.Add(nextOdd);\n        result.Add(nextEven);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            return result;\n        }\n     \
    \   long nextOdd = n / 2;\n        long nextEven = n % 2;\n        List<long>\
    \ nextLevel = MakeAPile(nextOdd);\n        List<long> nextLevel2 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel3 = MakeAPile(nextOdd + nextEven);\n        List<long>\
    \ nextLevel4 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven);\n        List<long>\
    \ nextLevel5 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n\
    \        List<long> nextLevel6 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven + nextOdd + nextEven);\n        List<long> nextLevel7 =\
    \ MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd\
    \ + nextEven + nextOdd + nextEven);\n        List<long> nextLevel8 = MakeAPile(nextOdd\
    \ + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven +\
    \ nextOdd + nextEven + nextOdd + nextEven);\n        List<long> nextLevel9 = MakeAPile(nextOdd\
    \ + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven +\
    \ nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven);\n        List<long>\
    \ nextLevel10 = MakeAPile(nextOdd + nextEven + nextOdd + nextEven + nextOdd +\
    \ nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd\
    \ + nextEven + nextOdd + nextEven);\n        List<long> nextLevel11 = MakeAPile(nextOdd\
    \ + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven +\
    \ nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven + nextOdd + nextEven\
    \ + nextOdd + nextEven);\n        List<long> nextLevel12 = MakeAPile(nextOdd +\
    \ nextEven ", "        List<long> result = new List<long>();\n        long nextEven\
    \ = n;\n        long nextOdd = n;\n        long nextOddNextEven = n;\n       \
    \ long nextOddNextOdd = n;\n        long nextOddNextEvenNextOdd = n;\n       \
    \ long nextOddNextEvenNextEven = n;\n        long nextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextOdd = n;\n        long nextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextOdd = n;\n    \
    \    long nextOddNextEvenNextOddNextEvenNextEvenNextEvenOdd = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextOdd = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextEvenNext", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = n;\n        long nextEven\
    \ = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd = n;\n    \
    \    long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd = n;\n \
    \       long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = n;\n        long nextEven\
    \ = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd = n;\n    \
    \    long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd = n;\n \
    \       long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(n);\n            return result;\n        }\n\
    \        long nextEven = n / 2;\n        long nextOdd = nextEven + 1;\n      \
    \  result.Add(nextEven);\n        result.Add(nextOdd);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        long nextEven\
    \ = n / 2;\n        long nextOdd = n % 2;\n        if (nextEven % 2 == 0) {\n\
    \            result.Add(nextEven);\n        }\n        if (nextOdd % 2 == 1) {\n\
    \            result.Add(nextOdd);\n        }\n        List<long> nextLevel = MakeAPile(nextEven);\n\
    \        foreach (long nextLevelStone in nextLevel) {\n            result.Add(nextLevelStone\
    \ + nextOdd);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextLevel = n;\n        long nextLevelStones\
    \ = n;\n        long nextLevelStonesEven = n;\n        long nextLevelStonesOdd\
    \ = n;\n        long nextLevelStonesEvenOdd = n;\n        long nextLevelStonesEvenEven\
    \ = n;\n        long nextLevelStonesOddOdd = n;\n        long nextLevelStonesEvenOddOdd\
    \ = n;\n        long nextLevelStonesEvenEvenOdd = n;\n        long nextLevelStonesOddEvenOdd\
    \ = n;\n        long nextLevelStonesEvenOddEven = n;\n        long nextLevelStonesOddOddEven\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOdd = n;\n        long nextLevelStonesEvenOddOddEven\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOddEven = n;\n        long nextLevelStonesOddEvenEvenOdd\
    \ = n;\n        long nextLevelStonesEvenOddOddEven = n;\n        long nextLevelStonesEvenEvenEvenOddEven\
    \ = n;\n        long nextLevelStonesOddOddEvenOdd = n;\n        long nextLevelStonesEvenOddOddEven\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOddEven = n;\n        long nextLevelStonesOddEvenEvenOddEven\
    \ = n;\n        long nextLevelStonesEvenOddOddEven = n;\n        long nextLevelStonesEvenEvenEvenOddEven\
    \ = n;\n        long nextLevelStonesOddOddEvenOdd = n;\n        long nextLevelStonesEvenOddOddEven\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOddEven = n;\n        long nextLevelStonesOddEvenEvenOddEven\
    \ = n;\n        long nextLevelStonesEvenOddOddEven = n;\n        long nextLevelStonesEvenEvenEvenOddEven\
    \ = n;\n        long nextLevelStonesOddOddEvenOdd = n;\n        long nextLevelStonesEvenOddOddEven\
    \ = n;\n        long nextLevelStonesEvenEvenEvenOddEven = n;\n        long nextLevelStonesOddEvenEven",
  "        List<long> result = new List<long>();\n        long nextLevel = n;\n  \
    \      while (nextLevel > 0) {\n            result.Add(nextLevel);\n         \
    \   nextLevel = nextLevel % 2 == 0 ? nextLevel + 2 : nextLevel;\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long nextLevel = n;\n        long nextLevelOdd = 0;\n        long nextLevelEven\
    \ = 0;\n        long nextLevelOddEven = 0;\n        long nextLevelOddEvenOdd =\
    \ 0;\n        long nextLevelOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEven = 0;\n        long nextLevelOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n  \
    \      long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n       \
    \ long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextLevelO", "        List<long> result = new List<long>();\n\
    \        long nextLevel;\n        if (n % 2 == 0) {\n            nextLevel = n\
    \ + 1;\n        } else {\n            nextLevel = n + 2;\n        }\n        result.Add(nextLevel);\n\
    \        while (nextLevel > 1) {\n            result.Add(nextLevel - 1);\n   \
    \         nextLevel = nextLevel / 2;\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            return result;\n        }\n        long nextOdd\
    \ = n % 2 == 0 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n\
    \        List<long> level1 = MakeAPile(nextOdd);\n        List<long> level2 =\
    \ MakeAPile(nextEven);\n        List<long> level3 = new List<long>();\n      \
    \  foreach (long l in level1) {\n            level3.Add(l);\n        }\n     \
    \   foreach (long l in level2) {\n            level3.Add(l);\n        }\n    \
    \    foreach (long l in level3) {\n            result.Add(l);\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 == 0\
    \ ? n : n + 1;\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        long nextLevelCountEven = 1;\n        while (nextLevel > 0) {\n\
    \            long nextLevelCount = nextLevel + nextLevelCount;\n            long\
    \ nextLevelCountEven = nextLevel + nextLevelCountEven;\n            if (nextLevelCount\
    \ % 2 == 0) {\n                result.Add(nextLevelCountEven);\n            }\
    \ else {\n                result.Add(nextLevelCount);\n            }\n       \
    \     nextLevel = nextLevel - 1;\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long nextLevel = n;\n      \
    \  long nextLevelCount = 0;\n        long nextLevelCountEven = 0;\n        long\
    \ nextLevelCountOdd = 0;\n        long nextLevelCountEvenOdd = 0;\n        while\
    \ (nextLevel > 0) {\n            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \                nextLevelCountEvenOdd += nextLevelCountEven;\n            } else\
    \ {\n                nextLevelCountOdd++;\n                nextLevelCountEvenOdd\
    \ += nextLevelCountOdd;\n            }\n            result.Add(nextLevelCountEvenOdd);\n\
    \            nextLevelCountEvenOdd = 0;\n            nextLevelCountOdd = 0;\n\
    \            nextLevel = nextLevel / 2;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextLevel;\n     \
    \   if (n % 2 == 0) {\n            nextLevel = n;\n        } else {\n        \
    \    nextLevel = n + 1;\n        }\n        result.Add(nextLevel);\n        while\
    \ (nextLevel > 1) {\n            nextLevel = nextLevel / 2;\n            result.Add(nextLevel);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextLevel = n;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        while (nextLevel > 0) {\n\
    \            if (nextLevel % 2 == 0) {\n                nextLevelCountEven++;\n\
    \            } else {\n                nextLevelCountOdd++;\n            }\n \
    \           nextLevel--;\n        }\n        result.Add(nextLevelCount);\n   \
    \     if (nextLevel > 0) {\n            result.Add(nextLevelCountEven);\n    \
    \        result.Add(nextLevelCountOdd);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (n == 0) {\n       \
    \     result.Add(0);\n            return result;\n        }\n        long odd\
    \ = n % 2 == 0 ? n : n + 1;\n        long even = n % 2 == 0 ? n + 1 : n;\n   \
    \     List<long> level1 = MakeAPile(odd);\n        List<long> level2 = MakeAPile(even);\n\
    \        List<long> result = level1.Concat(level2).ToList();\n        result.Add(n);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 1) % 2;\n    \
    \    if (nextOdd > nextEven) {\n            result.Add(nextOdd);\n           \
    \ result.Add(nextEven);\n        } else {\n            result.Add(nextEven);\n\
    \            result.Add(nextOdd);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
