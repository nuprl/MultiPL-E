name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    public static Tuple<Nullable<long>, Nullable<long>>\
  \ LargestSmallestIntegers(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.Where(x => x <\
    \ 0).Max();\n        long b = lst.Where(x => x > 0).Min();\n        if (a == b)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(a, b);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            largest = lst.Min();\n       \
    \     smallest = lst.Max();\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        if (largest == smallest)\
    \ return new Tuple<Nullable<long>, Nullable<long>>(largest, null);\n        long\
    \ largestNegative = lst.Where(x => x < 0).Max();\n        long smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largestNegative < smallestPositive)\
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", '        // Your code here', "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<long?, long?>(null, null);\n        }\n        return\
    \ new Tuple<long?, long?>(largest, smallest);", "        if (lst.Count == 0) return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest\
    \ = lst[0];\n        long smallest = lst[0];\n        foreach (long i in lst)\
    \ {\n            if (i < 0) largest = i;\n            if (i > 0) smallest = i;\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", '        //
    Your code here', "        long max = 0;\n        long min = 0;\n        foreach\
    \ (var i in lst) {\n            if (i < 0) {\n                max = Math.Max(max,\
    \ i);\n            }\n            if (i > 0) {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        if (min == 0 && max == 0) {\n       \
    \     return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", "     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst[0];\n        long smallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < 0)\n     \
    \           largest = i;\n            else if (i > 0)\n                smallest\
    \ = i;\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", '        // Your code here', "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<long?, long?>(null,\
    \ null);\n        }\n        return new Tuple<long?, long?>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                max = i;\n    \
    \        }\n            if (i > 0)\n                min = i;\n        }\n    \
    \    if (max > min) {\n            return new Tuple<long?, long?>(max, min);\n\
    \        }\n        return null;", "        long largest = lst.Max();\n      \
    \  long smallest = lst.Min();\n        if (largest < smallest) {\n           \
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n \
    \       return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            largest = lst.Min();\n       \
    \     smallest = lst.Max();\n        }\n        if (largest == smallest) {\n \
    \           return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest < 0) {\n            largest = -largest;\n      \
    \  }\n        if (smallest > 0) {\n            smallest = -smallest;\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (var i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   }\n            if (i > 0) {\n                min = Math.Min(min, i);\n   \
    \         }\n        }\n        if (min == 0 && max == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", '        // Your code here', "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (var i in lst) {\n\
    \            if (i < 0) {\n                max = i;\n            }\n         \
    \   if (i > 0)\n                min = i;\n        }\n        if (max == 0)\n \
    \           return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      if (min == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", '        // TODO: Write your solution here', "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            largest = lst.Max();\n       \
    \     smallest = lst.Min();\n        }\n        if (largest < 0 || smallest <\
    \ 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst[0];\n  \
    \      long smallest = lst[0];\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                largest = i;\n            }\n            else\
    \ if (i > largest) {\n                largest = i;\n            }\n          \
    \  if (i < 0) {\n                smallest = i;\n            }\n            else\
    \ if (i > smallest) {\n                smallest = i;\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0)\n       \
    \     return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (smallest > 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (var i in lst) {\n            if (i < 0) {\n                if (max < 0)\n \
    \                   max = i;\n            }\n            else if (i > 0)\n   \
    \             if (min > 0)\n                    min = i;\n        }\n        return\
    \ Tuple.Create(max == 0 ? null : max, min == 0 ? null : min);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<long?, long?>(null, null);\n   \
    \     }\n        return new Tuple<long?, long?>(largest, smallest);", "      \
    \  long largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        // Write your code here\n        var result = lst.Where(x\
    \ => x < 0).OrderByDescending(x => x).FirstOrDefault();\n        if (result !=\
    \ null)\n        {\n            var result2 = lst.Where(x => x > 0).OrderBy(x\
    \ => x).FirstOrDefault();\n            return Tuple.Create(result.Value, result2.Value);\n\
    \        }\n        else\n        {\n            return Tuple.Create(null, null);\n\
    \        }", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<long?, long?>(null, null);\n        }\n        return\
    \ new Tuple<long?, long?>(largest, smallest);", "        if (lst.Count == 0) {\n\
    \            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        long largest = lst[0];\n        long smallest = lst[0];\n \
    \       foreach (long i in lst) {\n            if (i < 0) {\n                largest\
    \ = i;\n            } else {\n                smallest = i;\n            }\n \
    \       }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst[0];\n        long smallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n            if (lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0)\n       \
    \     return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (smallest > 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (var i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   }\n            if (i > 0) {\n                min = Math.Min(min, i);\n   \
    \         }\n        }\n        if (min == 0 && max == 0) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        if (largest == smallest)\
    \ return new Tuple<Nullable<long>, Nullable<long>>(largest, null);\n        long\
    \ largestNegative = lst.Where(x => x < 0).Max();\n        long smallestPositive\
    \ = lst.Where(x => x >= 0).Min();\n        if (largestNegative < smallestPositive)\
    \ return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        if (largestNegative\
    \ == smallestPositive) return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long max = 0;\n        long min\
    \ = 0;\n        foreach (long i in lst) {\n            if (i < 0) {\n        \
    \        max = Math.Max(max, i);\n            } else {\n                min =\
    \ Math.Min(min, i);\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ new Tuple<long?, long?>(null, null);\n        }\n        return new Tuple<long?,\
    \ long?>(largest, smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        var largest = lst.Max();\n\
    \        var smallest = lst.Min();\n        if (largest < 0 && smallest > 0) return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ < 0 && smallest < 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max < 0)\n\
    \                    max = i;\n            }\n            else if (i > 0)\n  \
    \              if (min > 0)\n                    min = i;\n        }\n       \
    \ if (max < min)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(max,\
    \ min);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        var min = lst.Min();\n        var max\
    \ = lst.Max();\n        var minNegative = lst.Where(x => x < 0).Min();\n     \
    \   var maxPositive = lst.Where(x => x > 0).Max();\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(\n            minNegative == null ? null : min.HasValue ? min.Value\
    \ : minNegative,\n            maxPositive == null ? null : max.HasValue ? max.Value\
    \ : maxPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst[0];\n        long smallest = lst[0];\n  \
    \      foreach (long i in lst) {\n            if (i < 0) largest = i;\n      \
    \      if (i > 0) smallest = i;\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<long?, long?>(null,\
    \ null);\n        return new Tuple<long?, long?>(largest, smallest);", "     \
    \   if (lst.Count == 0)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var min = new long();\n        var max = new long();\n     \
    \   foreach (var i in lst)\n        {\n            if (i < 0)\n            {\n\
    \                min = i;\n            }\n            else\n            {\n  \
    \              max = i;\n            }\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(min, max);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   } else {\n                min = Math.Min(min, i);\n            }\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(max, min);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) return new\
    \ Tuple<Nullable<long>, Nullable<long>>(null, null);\n        long a = lst.Where(x\
    \ => x < 0).Max();\n        long b = lst.Where(x => x > 0).Min();\n        if\
    \ (a > b) return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    return new Tuple<Nullable<long>, Nullable<long>>(a, b);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", '        // TODO: Write your solution
    here', "        long max = 0;\n        long min = 0;\n        foreach (var i in\
    \ lst) {\n            if (i < 0) {\n                max = Math.Max(max, i);\n\
    \            } else {\n                min = Math.Min(min, i);\n            }\n\
    \        }\n        if (min == max) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", '        // Your code here', "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<long?, long?>(null,\
    \ null);\n        }\n        return new Tuple<long?, long?>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        // Write your code here\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest)\n       \
    \ {\n            return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        else\n        {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);\n        }", "        long max = 0;\n  \
    \      long min = 0;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                max = Math.Max(max, i);\n            } else {\n         \
    \       min = Math.Min(min, i);\n            }\n        }\n        return new\
    \ Tuple<Nullable<long>, Nullable<long>>(max, min);", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                max = Math.Max(max,\
    \ i);\n            } else {\n                min = Math.Min(min, i);\n       \
    \     }\n        }\n        if (min == max) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(max, min);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest)\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);"]
stop_tokens:
- "\n    }\n"
