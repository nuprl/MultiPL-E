name: HumanEval_157_right_angle_triangle
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return True\
  \ if the three\n    // sides form a right-angled triangle, False otherwise.\n  \
  \  // A right-angled triangle is a triangle in which one angle is right angle or\
  \ \n    // 90 degree.\n    // Example:\n    public static bool RightAngleTriangle(long\
  \ a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
  \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
  \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),\
  \ (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
  \    }\n\n}\n"
completions: ["        long d = b * b - 4 * a * c;\n        if (d < 0)\n         \
    \   return false;\n        long sqrtD = Math.Sqrt(d);\n        long root1 = (-b\
    \ + sqrtD) / (2 * a);\n        long root2 = (-b - sqrtD) / (2 * a);\n        if\
    \ (root1 == root2)\n            return true;\n        return false;", "      \
    \  long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n    \
    \    long acbc = ac - bc;\n        long abbc = ab - bc;\n        long abac = ab\
    \ - ac;\n        long acab = ac - ab;\n        long acbca = ac - bca;\n      \
    \  long abacb = ab - acb;\n        long abacca = ab - acca;\n        long acabca\
    \ = ac - abca;\n        long acbcab = ac - bcab;\n        long abaccab = ab -\
    \ accab;\n        long acbcabca = ac - bcabca;\n        long abaccabca = ab -\
    \ accabca;\n        long acbcabcab = ac - bcabcab;\n        long abaccabcab =\
    \ ab - accabcab;\n        long acbcabcabca = ac - bcabcabca;\n        long abaccabcabca\
    \ = ab - accabcabca;\n        long acbcabcabcab = ac - bcabcabcab;\n        long\
    \ abaccabcabcab = ab - accabcabcab;\n        long acbcabcabcabca = ac - bcabcabcabca;\n\
    \        long abaccabcabcabca = ab - accabcabcabca;\n        long acbcabcabcabcab\
    \ = ac - bcabcabcabcab;\n        long abaccabcabcabcab = ab - accabcabcabcab;\n\
    \        long acbcabcabcabcabca = ac - bcabcabcabcabca;\n        long abaccabcabcabcabca\
    \ = ab - accabcabcabcabca;\n        long acbcabcabcabcabcab = ac - bcabcabcabcabcab;\n\
    \        long abaccabcabcabcabcab = ab - accabcabcabcabcab;\n        long acbcabcabcabcabcabca\
    \ = ac - bcabcabcabcabcabca;\n        long abaccabcabcabcabcabca = ab - accabcabcabcabcabca;\n\
    \        long acbcabcabcabcabcabcab = ac - bcabcabcabcabcabcab;\n        long\
    \ abaccabcabcabcabcabcab = ab - accabcabcabcabcabcab;\n        long acbcabcabcabcabcabcabca\
    \ = ac - bcabcabcabcabcab", "        long d = b * b - 4 * a * c;\n        if (d\
    \ < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n \
    \       long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 *\
    \ a);\n        return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;", "        long\
    \ ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long\
    \ acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n\
    \        long acbcab = acbc * abc;\n        long acbcabc = acbcab * abc;\n   \
    \     long acbcabcb = acbcabcb * abc;\n        long acbcabcbc = acbcabcbc * abc;\n\
    \        long acbcabcbcd = acbcabcbcd * abc;\n        long acbcabcbcde = acbcabcbcde\
    \ * abc;\n        long acbcabcbcdef = acbcabcbcdef * abc;\n        long acbcabcbcdefg\
    \ = acbcabcbcdefg * abc;\n        long acbcabcbcdefgh = acbcabcbcdefgh * abc;\n\
    \        long acbcabcbcdefghi = acbcabcbcdefghi * abc;\n        long acbcabcbcdefghij\
    \ = acbcabcbcdefghij * abc;\n        long acbcabcbcdefghijk = acbcabcbcdefghijk\
    \ * abc;\n        long acbcabcbcdefghijkl = acbcabcbcdefghijkl * abc;\n      \
    \  long acbcabcbcdefghijkll = acbcabcbcdefghijkll * abc;\n        long acbcabcbcdefghijkllm\
    \ = acbcabcbcdefghijkllm * abc;\n        long acbcabcbcdefghijkllmm = acbcabcbcdefghijkllmm\
    \ * abc;\n        long acbcabcbcdefghijkllmmn = acbcabcbcdefghijkllmnn * abc;\n\
    \        long acbcabcbcdefghijkllmnn = acbcabcbcdefghijkllmnn * abc;\n       \
    \ long acbcabcbcdefghijkllmnnn = acbcabcbcdefghijkllmnnn * abc;\n        long\
    \ acbcabcbcdefghijkllmnnnn = acbcabcbcdefghijkllmnnnn * abc;\n        long acbcabcbcdef",
  "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n   \
    \     long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side8 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side11 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side13 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side14 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c, 2));\n  \
    \      long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side19 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c, 2));\n        long side25 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", "        long\
    \ d = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n  \
    \      }\n        long rootD = Math.Sqrt(d);\n        long rootA = -b / (2 * a);\n\
    \        long rootB = (-b + rootD) / (2 * a);\n        long rootC = (-b - rootD)\
    \ / (2 * a);\n        if (rootA < rootB && rootA < rootC) {\n            return\
    \ true;\n        }\n        if (rootB < rootC) {\n            return true;\n \
    \       }\n        return false;", "        long d = b * b - 4 * a * c;\n    \
    \    if (d < 0) {\n            return false;\n        }\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2) {\n            return true;\n        }\n      \
    \  return false;", "        long d = b * b - 4 * a * c;\n        if (d < 0) {\n\
    \            return false;\n        }\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2) {\n            return true;\n        }\n      \
    \  return false;", "        long d = b * b - 4 * a * c;\n        if (d < 0)\n\
    \            return false;\n        long root = (long)Math.Sqrt(d);\n        long\
    \ t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n    \
    \    if (t1 == t2)\n            return true;\n        return false;", "      \
    \  long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n    \
    \    long abc = ab + bc;\n        long acb = ac - bc;\n        long abcb = abc\
    \ * bc;\n        long acbc = acb * bc;\n        long acbcabc = acb * abc;\n  \
    \      long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n\
    \        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcb * bc;\n   \
    \     long acbcabcbcbcbcbc = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcb * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb", "        long ab\
    \ = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long abcb = abc * bc;\n        long acbcb = (acb * bc) * bc;\n        long\
    \ abcbb = abc * abc * bc;\n        long acbcbc = (acb * bc) * bc * bc;\n     \
    \   long abcbbc = (abc * abc) * bc * bc;\n        long acbcbcb = (acb * bc) *\
    \ bc * bc * bc;\n        long abcbbcb = (abc * abc) * bc * bc * bc;\n        long\
    \ acbcbcbc = (acb * bc) * bc * bc * bc * bc;\n        long abcbbcbc = (abc * abc)\
    \ * bc * bc * bc * bc;\n        long acbcbcbcb = (acb * bc) * bc * bc * bc * bc\
    \ * bc;\n        long abcbbcbcb = (abc * abc) * bc * bc * bc * bc * bc;\n    \
    \    long acbcbcbcbc = (acb * bc) * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcbbcbcbc = (abc * abc) * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcb\
    \ = (acb * bc) * bc * bc * bc * bc * bc * bc * bc;\n        long abcbbcbcbcb =\
    \ (abc * abc) * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbc =\
    \ (acb * bc) * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcbbcbcbcbc\
    \ = (abc * abc) * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcb\
    \ = (acb * bc) * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcbbcbcbcbcb\
    \ = (abc * abc) * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbc\
    \ = (acb * bc) * bc * bc * bc * bc * bc * bc * bc * bc * bc * ", "        long\
    \ side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long abc = ab + bc;\n        long acb = ac\
    \ - bc;\n        long abbc = ab - bc;\n        long acbb = ac - bb;\n        long\
    \ abbbc = ab - bb;\n        long acbba = ac - bba;\n        long abbcab = ab -\
    \ cab;\n        long acbbca = ac - bca;\n        long abbcabc = ab - cabc;\n \
    \       long acbbcba = ac - bcab;\n        long abbcabcb = ab - cabcb;\n     \
    \   long acbbcbaa = ac - bcaba;\n        long abbcabcbc = ab - cabcba;\n     \
    \   long acbbcbaab = ac - bcabab;\n        long abbcabcbcb = ab - cabcbac;\n \
    \       long acbbcbaabc = ac - bcababc;\n        long abbcabcbcbc = ab - cabcbac;\
    \ \n        long acbbcbaabbc = ac - bcababbc;\n        long abbcabcbcbcb = ab\
    \ - cabcbacb;\n        long acbbcbaabbbc = ac - bcababbbc;\n        long abbcabcbcbcbc\
    \ = ab - cabcbacbc;\n        long acbbcbaabbbbc = ac - bcababbbbc;\n        long\
    \ abbcabcbcbcbcb = ab - cabcbacbcb;\n        long acbbcbaabbbbcbc = ac - bcababbbbcbc;\n\
    \        long abbcabcbcbcbcbc = ab - cabcbacbcbcb;\n        long acbbcbaabbbbcbcbc\
    \ = ac - bcababbbbcbcbc;\n        long abbcabcbcbcbcbcbc = ab - cabcbacbcbcbcb;\n\
    \        long acbbcbaabbbbcbcbcbc = ac - bcababbbbcbcbcbc;\n        long abbcabcbcbcbcbcbcbc\
    \ = ab - cabcbacbcbcbcbcbc;\n        long acbbcbaabbbbcbcbcbcbc = ac - bcababbbbcbcbcbcbcbc;\n\
    \        long abbcabcbcbcbcbcbcbcbc = ab", "        long ab = a - b;\n       \
    \ long ac = a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n  \
    \      long acb = ac - bc;\n        long abcc = abc * abc;\n        long acbc\
    \ = acb * acb;\n        long acbcc = acb * acb;\n        long acbccc = acb * acb\
    \ * acb;\n        long acbcccb = acb * acb * acb * acb;\n        long acbcccbc\
    \ = acb * acb * acb * acb * acb;\n        long acbcccbcb = acb * acb * acb * acb\
    \ * acb * acb;\n        long acbcccbcbc = acb * acb * acb * acb * acb * acb *\
    \ acb;\n        long acbcccbcbcb = acb * acb * acb * acb * acb * acb * acb * acb;\n\
    \        long acbcccbcbcbc = acb * acb * acb * acb * acb * acb * acb * acb * acb;\n\
    \        long acbcccbcbcbcb = acb * acb * acb * acb * acb * acb * acb * acb *\
    \ acb * acb;\n        long acbcccbcbcbcbc = acb * acb * acb * acb * acb * acb\
    \ * acb * acb * acb * acb * acb;\n        long acbcccbcbcbcbcb = acb * acb * acb\
    \ * acb * acb * acb * acb * acb * acb * acb * acb * acb;\n        long acbcccbcbcbcbcbc\
    \ = acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb;\n\
    \        long acbcccbcbcbcbcbcb = acb * acb * acb * acb * acb * acb * acb * acb\
    \ * acb * acb * acb * acb * acb * acb;\n        long acbcccbcbcbcbcbcbc = acb\
    \ * acb * acb * acb * acb", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab\
    \ * bc;\n        long acbc = acb * bc;\n        long abbc = abb * bc;\n      \
    \  long acbcbc = acbcb * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb\
    \ = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n        long acbcbcbc\
    \ = acbcbcbc * bc;\n        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcb\
    \ = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbc\
    \ = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n\
    \        long acbcbcbcbcb = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc\
    \ * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n        long abcbcbcbcbc\
    \ = abcbcbcbcbc * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n\
    \        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcb = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcb\
    \ = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcb = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n\
    \        long acbcb", "        long d = b * b - 4 * a * c;\n        if (d < 0)\n\
    \            return false;\n        long sqrtD = Math.Sqrt(d);\n        long root1\
    \ = (-b + sqrtD) / (2 * a);\n        long root2 = (-b - sqrtD) / (2 * a);\n  \
    \      if (Math.Abs(root1 - root2) < 0.0001) {\n            return true;\n   \
    \     }\n        return false;", "        long ab = a - b;\n        long ac =\
    \ a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n        long\
    \ abc = ab * bc;\n        long acbc = acb * bc;\n        long abcd = abc * bc;\n\
    \        long abcc = abc * c;\n        long acbcc = acbc * c;\n        long abcd\
    \ = abc * c;\n        long abcc = abc * c;\n        long acbcc = acbc * c;\n \
    \       long abcd = abc * c;\n        long abcc = abc * c;\n        long acbcc\
    \ = acbc * c;\n        long abcd = abc * c;\n        long abcc = abc * c;\n  \
    \      long acbcc = acbc * c;\n        long abcd = abc * c;\n        long abcc\
    \ = abc * c;\n        long acbcc = acbc * c;\n        long abcd = abc * c;\n \
    \       long abcc = abc * c;\n        long acbcc = acbc * c;\n        long abcd\
    \ = abc * c;\n        long abcc = abc * c;\n        long acbcc = acbc * c;\n \
    \       long abcd = abc * c;\n        long abcc = abc * c;\n        long acbcc\
    \ = acbc * c;\n        long abcd = abc * c;\n        long abcc = abc * c;\n  \
    \      long acbcc = acbc * c;\n        long abcd = abc * c;\n        long abcc\
    \ = abc * c;\n        long acbcc = acbc * c;\n        long abcd = abc * c;\n \
    \       long abcc = abc * c;\n        long acbcc = acbc * c;\n        long abcd\
    \ = abc * c;\n        long abcc = abc * c;\n        long acbcc = acbc * c;\n \
    \       long abcd = abc * c;\n        long abcc = abc * c;\n        long acbcc\
    \ = acbc * c;\n        long abcd = abc * c;\n        long abcc = abc * c;\n  \
    \      long acbcc = acbc * c;\n        long abcd = abc * c;\n        long abcc\
    \ = abc * c;\n        long acbcc = acbc * c;\n        long abcd = abc * c;\n \
    \       long abcc = abc * c;\n        long acbcc = acbc * c;\n        long abcd\
    \ = abc * c;\n        long abcc", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d <\
    \ 0) {\n            return false;\n        }\n        long root = d; // square\
    \ root\n        long t1 = (-b + root) / a;\n        long t2 = (-b - root) / a;\n\
    \        if (t1 < 0 || t2 < 0 || t1 > t2) {\n            return false;\n     \
    \   }\n        return true;", "        long side1 = Math.Sqrt(Math.Pow(a, 2) +\
    \ Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d <\
    \ 0)\n            return false;\n        long root = (long) Math.Sqrt(d);\n  \
    \      long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 *\
    \ a);\n        if (t1 == t2)\n            return true;\n        if (t1 > t2)\n\
    \            return false;\n        long t3 = t1 - t2;\n        if (t3 > 0)\n\
    \            return true;\n        if (t3 < 0)\n            return false;\n  \
    \      long t4 = t1 + t2;\n        if (t4 > 0)\n            return true;\n   \
    \     if (t4 < 0)\n            return false;\n        long t5 = t1 + t3;\n   \
    \     if (t5 > 0)\n            return true;\n        if (t5 < 0)\n           \
    \ return false;\n        long t6 = t1 + t4;\n        if (t6 > 0)\n           \
    \ return true;\n        if (t6 < 0)\n            return false;\n        long t7\
    \ = t1 + t5;\n        if (t7 > 0)\n            return true;\n        if (t7 <\
    \ 0)\n            return false;\n        long t8 = t1 + t6;\n        if (t8 >\
    \ 0)\n            return true;\n        if (t8 < 0)\n            return false;\n\
    \        long t9 = t1 + t7;\n        if (t9 > 0)\n            return true;\n \
    \       if (t9 < 0)\n            return false;\n        long t10 = t1 + t8;\n\
    \        if (t10 > 0)\n            return true;\n        if (t10 < 0)\n      \
    \      return false;\n        long t11 = t1 + t9;\n        if (t11 > 0)\n    \
    \        return true;\n        if (t11 < 0)\n            return false;\n     \
    \   long t12 = t1 + t10;\n        if (t12 > 0)\n            return true;\n   \
    \     if (t12 < 0)\n            return false;\n        long t13 = t1 + t11;\n\
    \        if (t13 > 0)\n            return true;\n        if (t13 < 0)\n      \
    \      return false;\n        long t14 = t1 + t12;\n        if (t14 > 0)\n   \
    \         return true;\n        if (t14 < 0)\n            return false;\n    \
    \    long t15 = t1 + t13;\n        if (t15 > 0)\n            return true;\n  \
    \      if (t15 < 0)\n            return false;\n        long t16 = t1 + t14;\n\
    \        if (t16 > 0)\n            return true;\n        if (t16 < 0)\n      \
    \      return false;\n        long t17 = t1 + t15;\n        if (t17 > 0)\n   \
    \         return true;\n        if (t17 < 0)\n            return false;\n    \
    \    long t18 = t1 + t16;\n        if (t18 > 0)\n            return true;\n  \
    \      if (t18 < 0)\n            return false;\n        long t19 = t1 + t17;",
  "        long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long acb = ac * bc;\n        long abc = ab * bc;\n        long abbc =\
    \ ab * bc;\n        long acbc = ac * bc;\n        long acbcbc = ac * bc * bc;\n\
    \        long acbcbcbc = ac * bc * bc * bc;\n        long acbcbcbcbc = ac * bc\
    \ * bc * bc * bc;\n        long acbcbcbcbcbc = ac * bc * bc * bc * bc * bc;\n\
    \        long acbcbcbcbcbcbc = ac * bc * bc * bc * bc * bc * bc;\n        long\
    \ acbcbcbcbcbcbcbc = ac * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbcbcbc = ac * bc * bc * bc * bc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbcbc = ac * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc * ", "        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;", "        long\
    \ side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side12 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side13 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side18 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side19 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side24 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side25 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side30 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", "        long ab = a\
    \ - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb =\
    \ ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n     \
    \   long abcd = abc * bc;\n        long acbcdab = acb * abc;\n        long acbcdabc\
    \ = acb * abc * bc;\n        long acbcdabcd = acb * abc * bc * bc;\n        long\
    \ acbcdabcbc = acb * abc * bc * bc * bc;\n        long acbcdabcbcd = acb * abc\
    \ * bc * bc * bc * bc;\n        long acbcdabcbcde = acb * abc * bc * bc * bc *\
    \ bc * bc;\n        long acbcdabcbcdef = acb * abc * bc * bc * bc * bc * bc *\
    \ bc;\n        long acbcdabcbcdefg = acb * abc * bc * bc * bc * bc * bc * bc *\
    \ bc;\n        long acbcdabcbcdefgh = acb * abc * bc * bc * bc * bc * bc * bc\
    \ * bc * bc;\n        long acbcdabcbcdefghi = acb * abc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc;\n        long acbcdabcbcdefghij = acb * abc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcdabcbcdefghijk =\
    \ acb * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ acbcdabcbcdefghijkl = acb * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc\
    \ * bc * bc * bc;\n        long acbcdabcbcdefghijkll = acb * abc * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcdabcbcdefghijkllm\
    \ = acb * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n\
    \        ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n\
    \        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", " \
    \       long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long abc = ab + bc;\n        long acb = ac - bc;\n        long abcb =\
    \ abc * bc;\n        long acbc = acb * bc;\n        long abcac = abc * ac;\n \
    \       long acbca = acb * ca;\n        long abcacb = abcac * bc;\n        long\
    \ acbcab = acb * cab;\n        long acbcabc = acbcab * bc;\n        long acbcabcd\
    \ = acbcab * cd;\n        long acbcabcdc = acbcab * cdb;\n        long acbcabcdcd\
    \ = acbcab * cdd;\n        long acbcabcdcde = acbcab * cde;\n        long acbcabcdcdef\
    \ = acbcab * cdef;\n        long acbcabcdcdefg = acbcab * cdefg;\n        long\
    \ acbcabcdcdefgh = acbcab * cdefgh;\n        long acbcabcdcdefghi = acbcab * cdefghi;\n\
    \        long acbcabcdcdefghij = acbcab * cdefghij;\n        long acbcabcdcdefghijk\
    \ = acbcab * cdefghijk;\n        long acbcabcdcdefghijkl = acbcab * cdefghijkl;\n\
    \        long acbcabcdcdefghijklm = acbcab * cdefghijklm;\n        long acbcabcdcdefghijklmn\
    \ = acbcab * cdefghijkln;\n        long acbcabcdcdefghijklmnx = acbcab * cdefghijklnx;\n\
    \        long acbcabcdcdefghijklmxy = acbcab * cdefghijklmxy;\n        long acbcabcdcdefghijklmxyz\
    \ = acbcab * cdefghijklmxyz;\n        long acbcabcdcdefghijklmxyzw = acbcab *\
    \ cdefghijklmxyzw;\n        long acbcabcdcdefghijklmxyzwz = acbcab * cdefghijklmxyzwz;\n\
    \        long acbcabcdcdefgh", "        long side1 = Math.Sqrt(Math.Pow(a, 2)\
    \ + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     if (side1 == side2 && side2 == side3) {\n            return true;\n    \
    \    }\n        return false;", "        long d = b * b - 4 * a * c;\n       \
    \ if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        return t1 == t2;", "        long ab = a - b;\n        long ac\
    \ = a - c;\n        long bc = b - c;\n        long acbc = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long abac = ab - ac;\n        long acab = ac - ab;\n\
    \        long acbca = ac - bca;\n        long abacb = ab - acb;\n        long\
    \ abcab = ab - cab;\n        long cabab = cab - ab;\n        long cabbc = cab\
    \ - bc;\n        long cabcab = cab - cab;\n        long cabcabc = cab - cabc;\n\
    \        long cabcabcb = cab - cabcb;\n        long cabcabcba = cab - cabcab;\n\
    \        long cabcabcab = cab - cabcab;\n        long cabcabcabc = cab - cabcabc;\n\
    \        long cabcabcabcb = cab - cabcabcb;\n        long cabcabcabcba = cab -\
    \ cabcabcab;\n        long cabcabcabcab = cab - cabcabcab;\n        long cabcabcabcabc\
    \ = cab - cabcabcabc;\n        long cabcabcabcabcb = cab - cabcabcabcb;\n    \
    \    long cabcabcabcabcba = cab - cabcabcabcab;\n        long cabcabcabcabcab\
    \ = cab - cabcabcabcab;\n        long cabcabcabcabcabc = cab - cabcabcabcabc;\n\
    \        long cabcabcabcabcabcb = cab - cabcabcabcabcb;\n        long cabcabcabcabcabcba\
    \ = cab - cabcabcabcabcab;\n        long cabcabcabcabcabcab = cab - cabcabcabcabcab;\n\
    \        long cabcabcabcabcabcabc = cab - cabcabcabcabcabc;\n        long cabcabcabcabcabcabcb\
    \ = cab - cabcabcabcabcabcb;\n        long cabcabcabcabcabcabcba = cab - cabcabcabcabcabcab;\n\
    \        long cabcabcabcabcabcabcab = cab - cabcabcabcabcabcab;\n        long\
    \ cabcabcabcabcabcabcabc = cab - cabcabcabcabcabcabc;\n        long cabcabcabcabcabcabcabcb\
    \ = cab - cabcabcabcabcabcabcb;\n        long cabcabcabcabcabcabcabcba = cab -\
    \ cabcabcabcabcabcabcab;\n        long cabcabcabcabcabcab", "        long side1\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d <\
    \ 0)\n            return false;\n        long e = Math.Sqrt(d);\n        long\
    \ f = (long) Math.Sqrt(a + b + c);\n        long g = (long) Math.Sqrt(a + b -\
    \ c);\n        long h = (long) Math.Sqrt(a + b + c - e);\n        long i = (long)\
    \ Math.Sqrt(a + b - c - e);\n        long j = (long) Math.Sqrt(a + b + c + e);\n\
    \        long k = (long) Math.Sqrt(a + b - c + e);\n        long l = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n        long m = (long) Math.Sqrt(a + b - c - e - f);\n \
    \       long n = (long) Math.Sqrt(a + b + c - e + f);\n        long o = (long)\
    \ Math.Sqrt(a + b - c + e + f);\n        long p = (long) Math.Sqrt(a + b + c +\
    \ e - g);\n        long q = (long) Math.Sqrt(a + b - c - e - g);\n        long\
    \ r = (long) Math.Sqrt(a + b + c - e + g);\n        long s = (long) Math.Sqrt(a\
    \ + b - c + e + g);\n        long t = (long) Math.Sqrt(a + b + c + e - h);\n \
    \       long u = (long) Math.Sqrt(a + b - c - e - h);\n        long v = (long)\
    \ Math.Sqrt(a + b + c - e + h);\n        long w = (long) Math.Sqrt(a + b - c +\
    \ e + h);\n        long x = (long) Math.Sqrt(a + b + c + e - i);\n        long\
    \ y = (long) Math.Sqrt(a + b - c - e - i);\n        long z = (long) Math.Sqrt(a\
    \ + b + c - e + i);\n        long A = (long) Math.Sqrt(a + b - c + e - j);\n \
    \       long B = (long) Math.Sqrt(a + b - c - e - j);\n        long C = (long)\
    \ Math.Sqrt(a + b + c + e - k);\n        long D = (long) Math.Sqrt(a + b - c -\
    \ e - k);\n        long E = (long) Math.Sqrt(a + b + c + e - l);\n        long\
    \ F = (long) Math.Sqrt(a + b - c - e - l);", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        if (side1\
    \ == side2 && side2 == side3) {\n            return true;\n        }\n       \
    \ return false;", "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n\
    \            long root = (long) Math.Sqrt(d);\n            long t1 = (-b + root)\
    \ / (2 * a);\n            long t2 = (-b - root) / (2 * a);\n            if (t1\
    \ >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n   \
    \         }\n        }\n        return false;", "        long ab = a - b;\n  \
    \      long ac = a - c;\n        long bc = b - c;\n        long acbc = ac - bc;\n\
    \        long abbc = ab - bc;\n        long abac = ab - ac;\n        long acab\
    \ = ac - ab;\n        long acbca = ac - bca;\n        long abacb = ab - acb;\n\
    \        long abcab = ab - cab;\n        long acabc = ac - abc;\n        long\
    \ acbcab = ac - bcab;\n        long cabab = cab - ab;\n        long cabac = cab\
    \ - ac;\n        long cabbc = cab - bc;\n        long cabcab = cab - cab;\n  \
    \      long cabacb = cab - acb;\n        long cababc = cab - abc;\n        long\
    \ cabacbc = cab - acbc;\n        long cababca = cab - abca;\n        long cabacbca\
    \ = cab - acbca;\n        long cababcab = cab - abcab;\n        long cabacbcab\
    \ = cab - acbcab;\n        long cabcabab = cab - cabab;\n        long cabcabac\
    \ = cab - cabac;\n        long cabcabbc = cab - cabbc;\n        long cabcabcab\
    \ = cab - cabcab;\n        long cabcabacb = cab - cabacb;\n        long cabcababc\
    \ = cab - cababc;\n        long cabcabacbc = cab - cabacbc;\n        long cabcababca\
    \ = cab - cababca;\n        long cabcabacbca = cab - cabacbca;\n        long cabcababcab\
    \ = cab - cababcab;\n        long cabcabacbcab = cab - cabacbcab;\n        long\
    \ cabcabcabab = cab - cabcabab;\n        long cabcabcabac = cab - cabcabac;\n\
    \        long cabcabcabbc = cab - cabcabbc;\n        long cabcabcabcab = cab -\
    \ cabcabcab;\n        long cabcabcabacb = cab - cabcabacb;\n        long cabcabcababc\
    \ = cab - cabcababc;\n        long cabcabcabacbc = cab - cabcabacbc;\n       \
    \ long cabcabcababca = cab - cabcababca;\n        long cabcabcabacbca = cab",
  "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n   \
    \     long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side11 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(b, 2));\n        long side13 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side14 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side17 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side18 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side19 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side20 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side23 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side24 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side25 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side28 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side29 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side30 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        ", "        long\
    \ side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long ", "        long ab = a\
    \ - b;\n        long ac = c - a;\n        long bc = b - c;\n        long acb =\
    \ ac * bc;\n        long abc = ab * bc;\n        long abbc = ab * bc;\n      \
    \  long abcc = ab * cc;\n        long abbbc = ab * bc * cc;\n        long abbcc\
    \ = ab * bc * cc;\n        long abccb = ab * cc * bc;\n        long abbbcc = ab\
    \ * bc * cc * cc;\n        long abbccb = ab * bc * cc * cc;\n        long abcccb\
    \ = ab * cc * c * bc;\n        long abbbccb = ab * bc * cc * cc * cc;\n      \
    \  long abbcccb = ab * bc * cc * cc * cc;\n        long abcccbc = ab * cc * c\
    \ * c * bc;\n        long abbbcccb = ab * bc * cc * cc * cc * cc;\n        long\
    \ abbcccbc = ab * bc * cc * cc * cc * cc;\n        long abcccbcb = ab * cc * c\
    \ * c * c * bc;\n        long abbbcccb = ab * bc * cc * cc * cc * cc * cc;\n \
    \       long abbcccbc = ab * bc * cc * cc * cc * cc * cc;\n        long abcccbcb\
    \ = ab * cc * c * c * c * c * bc;\n        long abbbcccb = ab * bc * cc * cc *\
    \ cc * cc * cc * cc;\n        long abbcccbc = ab * bc * cc * cc * cc * cc * cc\
    \ * cc;\n        long abcccbcb = ab * cc * c * c * c * c * c * bc;\n        long\
    \ abbbcccb = ab * bc * cc * cc * cc * cc * cc * cc * cc;\n        long abbcccbc\
    \ = ab * bc * cc * cc * cc * cc * cc * cc * cc;\n        long abcccbcb = ab *\
    \ cc * c * c * c * c * c * c * bc;\n        long abbbcccb = ab * bc * cc * cc\
    \ * cc * cc * cc * cc * cc * cc;\n        long abbcccbc = ab * bc * cc * cc",
  "        long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long acbc = ac - bc;\n        long abbc = ab - bc;\n        long acbcab\
    \ = ac - bc - ab;\n        long acbcabc = ac - bc - ab - c;\n        long acbcabcb\
    \ = ac - bc - ab - c - b;\n        long acbcabcbc = ac - bc - ab - c - b - c;\n\
    \        long acbcabcbcb = ac - bc - ab - c - b - c - b;\n        long acbcabcbcbc\
    \ = ac - bc - ab - c - b - c - b - c;\n        long acbcabcbcbcb = ac - bc - ab\
    \ - c - b - c - b - c - b;\n        long acbcabcbcbcbc = ac - bc - ab - c - b\
    \ - c - b - c - b - c;\n        long acbcabcbcbcbcb = ac - bc - ab - c - b - c\
    \ - b - c - b - c - b;\n        long acbcabcbcbcbcbc = ac - bc - ab - c - b -\
    \ c - b - c - b - c - b - c;\n        long acbcabcbcbcbcbcb = ac - bc - ab - c\
    \ - b - c - b - c - b - c - b - c - b;\n        long acbcabcbcbcbcbcbc = ac -\
    \ bc - ab - c - b - c - b - c - b - c - b - c - b;\n        long acbcabcbcbcbcbcbcb\
    \ = ac - bc - ab - c - b - c - b - c - b - c - b - c - b - c;\n        long acbcabcbcbcbcbcbcbc\
    \ = ac - bc - ab - c - b - c - b - c - b - c - b - c - b - c - b;\n        long\
    \ acbcabcbcbcbcbcbcbcb = ac - bc - ab - c - b - c - b - c - b - c - b - c - b\
    \ - c - b;\n        long acbcabcbcbcbcbcbcbcb = ac - bc - ab - c - b - c - b -\
    \ c - b - c - b - c - b - c - b;\n        long acbcabcbcbcbcbcbcbcbc = ac - bc\
    \ - ab - c - b - c - b - c - b - c - b - c - b - c - b - c;\n        long acbcabcbcbcbcbcbcb",
  "        long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long acbc = ac * bc;\n        long abbc = ab * bc;\n        long acbcab\
    \ = ac * bcab;\n        long abcab = ab * cab;\n        long accab = ac * cab;\n\
    \        long abcabc = ab * cabc;\n        long accabbc = ac * cabbc;\n      \
    \  long abcabbc = ab * cabbc;\n        long accabcab = ac * cabcab;\n        long\
    \ abcabcab = ab * cabcab;\n        long accabcabc = ac * cabcabc;\n        long\
    \ abcabcabc = ab * cabcabc;\n        long accabcabbc = ac * cabcabbc;\n      \
    \  long abcabcabbc = ab * cabcabbc;\n        long accabcabcab = ac * cabcabcab;\n\
    \        long abcabcabcab = ab * cabcabcab;\n        long accabcabcabc = ac *\
    \ cabcabcabc;\n        long abcabcabcabc = ab * cabcabcabc;\n        long accabcabcabbc\
    \ = ac * cabcabcabbc;\n        long abcabcabcabbc = ab * cabcabcabbc;\n      \
    \  long accabcabcabcab = ac * cabcabcabcab;\n        long abcabcabcabcab = ab\
    \ * cabcabcabcab;\n        long accabcabcabcabc = ac * cabcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * cabcabcabcabc;\n        long accabcabcabcabbc =\
    \ ac * cabcabcabcabbc;\n        long abcabcabcabcabbc = ab * cabcabcabcabbc;\n\
    \        long accabcabcabcabcab = ac * cabcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * cabcabcabcabcab;\n        long accabcabcabcabcabc = ac * cabcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * cabcabcabcabcabc;\n        long accabcabcabcabcabbc\
    \ = ac * cabcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * cabcabcabcabcabbc;\n\
    \        long accabcabcabcabcabcab = ac * cabcabcabcabcabcab;\n        long abcabcabcabcabcabcab\
    \ = ", "        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 < 0 || t2 < 0 || t1 > t2) {\n            return false;\n     \
    \   }\n        return true;", "        long side1 = Math.Sqrt(a * a + b * b);\n\
    \        long side2 = Math.Sqrt(c * c + a * a);\n        long side3 = Math.Sqrt(c\
    \ * c + b * b);\n        long side4 = Math.Sqrt(a * a + c * c);\n        long\
    \ side5 = Math.Sqrt(a * a + b * b);\n        long side6 = Math.Sqrt(c * c + a\
    \ * a);\n        long side7 = Math.Sqrt(c * c + b * b);\n        long side8 =\
    \ Math.Sqrt(a * a + c * c);\n        long side9 = Math.Sqrt(a * a + b * b);\n\
    \        long side10 = Math.Sqrt(c * c + a * a);\n        long side11 = Math.Sqrt(c\
    \ * c + b * b);\n        long side12 = Math.Sqrt(a * a + c * c);\n        long\
    \ side13 = Math.Sqrt(a * a + b * b);\n        long side14 = Math.Sqrt(c * c +\
    \ a * a);\n        long side15 = Math.Sqrt(c * c + b * b);\n        long side16\
    \ = Math.Sqrt(a * a + c * c);\n        long side17 = Math.Sqrt(a * a + b * b);\n\
    \        long side18 = Math.Sqrt(c * c + a * a);\n        long side19 = Math.Sqrt(c\
    \ * c + b * b);\n        long side20 = Math.Sqrt(a * a + c * c);\n        long\
    \ side21 = Math.Sqrt(a * a + b * b);\n        long side22 = Math.Sqrt(c * c +\
    \ a * a);\n        long side23 = Math.Sqrt(c * c + b * b);\n        long side24\
    \ = Math.Sqrt(a * a + c * c);\n        long side25 = Math.Sqrt(a * a + b * b);\n\
    \        long side26 = Math.Sqrt(c * c + a * a);\n        long side27 = Math.Sqrt(c\
    \ * c + b * b);\n        long side28 = Math.Sqrt(a * a + c * c);\n        long\
    \ side29 = Math.Sqrt(a * a + b * b);\n        long side30 = Math.Sqrt(c * c +\
    \ a * a);\n        long side31 = Math.Sqrt(c * c + b * b);\n        long side32\
    \ = Math.Sqrt(a * a + c * c);\n        long side33 = Math.Sqrt(a * a + b * b);\n\
    \        long side34 = Math.Sqrt(c * c + a * a);\n", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long d = b * b - 4 * a * c;\n        if (d >= 0) {\n\
    \            long root = (long)Math.Sqrt(d);\n            long t1 = (-b + root)\
    \ / (2 * a);\n            long t2 = (-b - root) / (2 * a);\n            if (t1\
    \ >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n   \
    \         }\n        }\n        return false;", "        long d = b * b - 4 *\
    \ a * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = Math.Sqrt(a + b + c);\n        long g = Math.Sqrt(a + b - c);\n\
    \        long h = Math.Sqrt(a + b + c - e);\n        long i = Math.Sqrt(a + b\
    \ - c - e);\n        long j = Math.Sqrt(a + b + c + e);\n        long k = Math.Sqrt(a\
    \ + b - c + e);\n        long l = Math.Sqrt(a + b + c - e);\n        long m =\
    \ Math.Sqrt(a + b + c + e - f);\n        long n = Math.Sqrt(a + b - c - e - f);\n\
    \        long o = Math.Sqrt(a + b + c - e + f);\n        long p = Math.Sqrt(a\
    \ + b - c + e + f);\n        long q = Math.Sqrt(a + b + c + e - g);\n        long\
    \ r = Math.Sqrt(a + b - c - e - g);\n        long s = Math.Sqrt(a + b + c - e\
    \ + g);\n        long t = Math.Sqrt(a + b - c + e + g);\n        long u = Math.Sqrt(a\
    \ + b + c + e - h);\n        long v = Math.Sqrt(a + b - c - e - h);\n        long\
    \ w = Math.Sqrt(a + b + c - e + h);\n        long x = Math.Sqrt(a + b - c + e\
    \ + h);\n        long y = Math.Sqrt(a + b + c + e - i);\n        long z = Math.Sqrt(a\
    \ + b - c - e - i);\n        long A = Math.Sqrt(a + b + c - e + i);\n        long\
    \ B = Math.Sqrt(a + b - c + e + i);\n        long C = Math.Sqrt(a + b + c + e\
    \ - i);\n        long D = Math.Sqrt(a + b - c - e - i);\n        long E = Math.Sqrt(a\
    \ + b + c + e + i);\n        long F = Math.Sqrt(a + b - c - e + i);\n        long\
    \ G = Math.Sqrt(a + b + c + e - f);\n        long H = Math.Sqrt(a + b - c - e\
    \ - f);\n        long I = Math.Sqrt(a + b + c - e + f);\n        long J = Math.Sqrt(a\
    \ + b - c + e + f);\n        long K = Math.Sqrt(a + b + c + e - g);\n        long\
    \ L", "        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 < 0)\n            return false;\n  \
    \      if (t2 < 0)\n            return false;\n        long t3 = Math.Sqrt(t1\
    \ * t1 + t2 * t2);\n        return t1 == t3 || t2 == t3;", "        long ab =\
    \ a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acbc\
    \ = ac * bc;\n        long abbc = ab * bc;\n        long abac = ab * ac;\n   \
    \     long acab = ac * ab;\n        long abcab = ab * ab * c;\n        long acabc\
    \ = ac * ab * c;\n        long abcabc = ab * ab * c * c;\n        long acabcb\
    \ = ac * ab * c * b;\n        long abcabcb = ab * ab * c * c * b;\n        long\
    \ acabcba = ac * ab * c * c * ab;\n        long abcabcab = ab * ab * c * c * ab\
    \ * c;\n        long acabcbac = ac * ab * c * c * ab * c;\n        long abcabcabc\
    \ = ab * ab * c * c * ab * c * c;\n        long acabcbacc = ac * ab * c * c *\
    \ ab * c * c;\n        long abcabcabcb = ab * ab * c * c * ab * c * c * b;\n \
    \       long acabcbaccb = ac * ab * c * c * ab * c * c * b;\n        long abcabcabcab\
    \ = ab * ab * c * c * ab * c * c * ab;\n        long acabcbaccba = ac * ab * c\
    \ * c * ab * c * c * ab * c;\n        long abcabcabcabc = ab * ab * c * c * ab\
    \ * c * c * ab * c * c;\n        long acabcbaccbac = ac * ab * c * c * ab * c\
    \ * c * ab * c * c;\n        long abcabcabcabcb = ab * ab * c * c * ab * c * c\
    \ * ab * c * c * b;\n        long acabcbaccbacb = ac * ab * c * c * ab * c * c\
    \ * ab * c * c * b;\n        long abcabcabcabcab = ab * ab * c * c * ab * c *\
    \ c * ab * c * c * ab;\n        long acabcbaccbacab = ac * ab * c * c * ab * c\
    \ * c * ab * c * c * ab * c;\n        long abcabcabcabcabc = ab * ab * c * c *\
    \ ab * ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n\
    \        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side9 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side21 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side27 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        ", " \
    \       long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab\
    \ * bc;\n        long acbc = acb * bc;\n        long abbc = abb * bc;\n      \
    \  long acbcbc = acbcb * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc\
    \ = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc\
    \ = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc\
    \ = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbc = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb", "        long d = b * b - 4 * a * c;\n\
    \        if (d >= 0) {\n            long e = (long) Math.Sqrt(d);\n          \
    \  long f = (long) Math.Sqrt(a + b + c);\n            long g = (long) Math.Sqrt(a\
    \ + b - c);\n            long h = (long) Math.Sqrt(a + b + c - e);\n         \
    \   if (e == 0) {\n                if (f == 0) {\n                    if (g ==\
    \ 0)\n                        return true;\n                    else\n       \
    \                 return false;\n                }\n                else\n   \
    \                 return false;\n            }\n            else\n           \
    \     return false;\n        }\n        else\n            return false;", "  \
    \      long d = b * b - 4 * a * c;\n        if (d >= 0) {\n            long root\
    \ = (long)Math.Sqrt(d);\n            long t1 = (-b + root) / (2 * a);\n      \
    \      long t2 = (-b - root) / (2 * a);\n            if (t1 >= 0 && t2 >= 0) {\n\
    \                return true;\n            }\n        }\n        return false;",
  "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n   \
    \     long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side13 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side14 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side19 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side20 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side25 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", "        long\
    \ d = b * b - 4 * a * c;\n        if (d > 0) {\n            long e = (long) Math.Sqrt(d);\n\
    \            long f = (long) Math.Sqrt(a + b + c);\n            long g = (long)\
    \ Math.Sqrt(a + b - c);\n            long h = (long) Math.Sqrt(a + b + c - e);\n\
    \            if (e == 0) {\n                return true;\n            }\n    \
    \        if (f == 0) {\n                return false;\n            }\n       \
    \     if (g == 0) {\n                return false;\n            }\n          \
    \  if (h == 0) {\n                return false;\n            }\n            long\
    \ i = (long) Math.Sqrt(a + b + c + e + f + g + h);\n            long j = (long)\
    \ Math.Sqrt(a + b + c + e - f - g - h);\n            long k = (long) Math.Sqrt(a\
    \ + b + c + e + f - g + h);\n            long l = (long) Math.Sqrt(a + b + c -\
    \ e - f + g + h);\n            long m = (long) Math.Sqrt(a + b - c + e + f + g\
    \ + h);\n            long n = (long) Math.Sqrt(a + b - c + e - f - g + h);\n \
    \           long o = (long) Math.Sqrt(a + b - c + e + f - g - h);\n          \
    \  long p = (long) Math.Sqrt(a + b - c + e - f + g - h);\n            long q =\
    \ (long) Math.Sqrt(a + b - c + e + f + g + h);\n            long r = (long) Math.Sqrt(a\
    \ + b - c + e - f - g + h);\n            long s = (long) Math.Sqrt(a + b - c +\
    \ e + f + g - h);\n            long t = (long) Math.Sqrt(a + b - c + e - f + g\
    \ + h);\n            long u = (long) Math.Sqrt(a + b - c + e + f - g - h);\n \
    \           long v = (long) Math.Sqrt(a + b - c + e - f + g + h);\n          \
    \  long w = (long) Math.Sqrt(a + b - c + e + f - g - h);\n            long x =\
    \ (long) Math.Sqrt(a + b - c + e - f + g + h);\n            long y = (long) Math.Sqrt(a\
    \ + b - c + e + f + g - h);\n            long z = (long) Math.Sqrt(a + b - ",
  "        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n\
    \        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 *\
    \ a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 >= 0 && t1\
    \ <= 1 && t2 >= 0 && t2 <= 1;", "        long ab = a - b;\n        long ac = a\
    \ - c;\n        long bc = b - c;\n        long acbc = ac * bc;\n        long abbc\
    \ = ab * bc;\n        long acab = ac * ab;\n        long abac = ab * ac;\n   \
    \     long acbca = ac * bca;\n        long acabc = ac * abc;\n        long abcab\
    \ = ab * cab;\n        long abcabc = ab * cabc;\n        long acbcab = ac * bcab;\n\
    \        long acbcabc = ac * bcabc;\n        long acabcab = ac * abcba;\n    \
    \    long abcabcd = ab * cabcd;\n        long abcabcde = ab * cabcde;\n      \
    \  long acbcabcd = ac * bcabcd;\n        long acbcabcde = ac * bcabcde;\n    \
    \    long acabcabcd = ac * abcbac;\n        long abcabcdef = ab * cabcdef;\n \
    \       long abcabcdefg = ab * cabcdefg;\n        long acbcabcdef = ac * bcabcdef;\n\
    \        long acbcabcdefg = ac * bcabcdefg;\n        long acabcabcdef = ac * abcbacdef;\n\
    \        long abcabcdefgh = ab * cabcdefgh;\n        long abcabcdefghi = ab *\
    \ cabcdefghi;\n        long acbcabcdefgh = ac * bcabcdefgh;\n        long acbcabcdefghi\
    \ = ac * bcabcdefghi;\n        long acabcabcdefgh = ac * abcbacdefgh;\n      \
    \  long abcabcdefghij = ab * cabcdefghij;\n        long abcabcdefghijk = ab *\
    \ cabcdefghijk;\n        long acbcabcdefghij = ac * bcabcdefghij;\n        long\
    \ acbcabcdefghijk = ac * bcabcdefghijk;\n        long acabcabcdefghij = ac * abcbacdefghij;\n\
    \        long abcabcdefghijkl = ab * cabcdefghijkl;\n        long abcabcdefghijkm\
    \ = ab * cabcdefghijkm;\n        long acbcabcdefghijkl = ac * bcabcdefghij", " \
    \       long ab = a + b;\n        long ac = a + c;\n        long bc = b + c;\n\
    \        long abc = ab + bc;\n        long acb = ac + bc;\n        long abcb =\
    \ abc + bc;\n        long acbc = acb + abc;\n        long abcac = abcc + abc;\n\
    \        long abcacb = abcac + abcb;\n        long abcacbc = abcacb + abc;\n \
    \       long abcacbca = abcacbc + abc;\n        long abcacbcab = abcacbca+ abc;\n\
    \        long abcacbcabc = abcacbcab + abc;\n        long abcacbcabcd = abcacbcabc\
    \ + abc;\n        long abcacbcabcdd = abcacbcabcd + abc;\n        long abcacbcabcddd\
    \ = abcacbcabcdd + abc;\n        long abcacbcabcdddd = abcacbcabcddd + abc;\n\
    \        long abcacbcabcddddd = abcacbcabcddd + abc;\n        long abcacbcabcddddde\
    \ = abcacbcabcddd + abc;\n        long abcacbcabcdddddef = abcacbcabcddd + abc;\n\
    \        long abcacbcabcdddddefg = abcacbcabcddd + abc;\n        long abcacbcabcdddddefgh\
    \ = abcacbcabcddd + abc;\n        long abcacbcabcdddddefghi = abcacbcabcddd +\
    \ abc;\n        long abcacbcabcdddddefghij = abcacbcabcddd + abc;\n        long\
    \ abcacbcabcdddddefghijk = abcacbcabcddd + abc;\n        long abcacbcabcdddddefghijkl\
    \ = abcacbcabcddd + abc;\n        long abcacbcabcdddddefghijklm = abcacbcabcddd\
    \ + abc;\n        long abcacbcabcdddddefghijklmn = abcacbcabcddd + abc;\n    \
    \    long abcacbcabcdddddefghijklmno = abcacbcabcddd + abc;\n        long abcacbcabcdddddefghijklmnop\
    \ = abcacbcabcddd + abc;\n        long abcacbcabcdddddefghijklmnopq = abcacbcabcdd",
  "        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n\
    \        }\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ d = b * b - 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n\
    \            long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 *\
    \ a);\n            if (f > 0 && g > 0) {\n                return true;\n     \
    \       }\n        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side11 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side24 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side29 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n\
    \        long abbc = ab + bc;\n        long acbc = ac - bc;\n        long abbcc\
    \ = abbc + acbc;\n        long acbcc = ac - bc - c;\n        long abbccc = abbc\
    \ + acbc + c;\n        long acbccc = ac - bc - c - c;\n        long abbccc = (abbc\
    \ + acbc + c) * (abbc - acbc - c);\n        long acbccc = (ac - bc - c - c) *\
    \ (ac - bc - c - c);\n        long abbccc = (abbc + acbc + c) * (abbc - acbc -\
    \ c) * (ac - bc - c - c);\n        long acbccc = (ac - bc - c - c) * (ac - bc\
    \ - c - c) * (ac - bc - c - c);\n        long abbccc = (abbc + acbc + c) * (abbc\
    \ - acbc - c) * (ac - bc - c - c) * (ac - bc - c - c);\n        long acbccc =\
    \ (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c);\n\
    \        long abbccc = (abbc + acbc + c) * (abbc - acbc - c) * (ac - bc - c -\
    \ c) * (ac - bc - c - c) * (ac - bc - c - c);\n        long acbccc = (ac - bc\
    \ - c - c) * (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c) * (ac -\
    \ bc - c - c);\n        long abbccc = (abbc + acbc + c) * (abbc - acbc - c) *\
    \ (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c);\n\
    \        long acbccc = (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c -\
    \ c) * (ac - bc - c - c) * (ac - bc - c - c) * (ac - bc - c - c);\n        long\
    \ abbccc = (abbc + acbc + c) * (abbc - acbc - c) * (ac - bc - c - c) * (ac - bc\
    \ - c - c) * (ac - bc - ", "        long ab = a + b;\n        long ac = a + c;\n\
    \        long bc = b + c;\n        long abc = ab + bc;\n        long acb = ac\
    \ + bc;\n        long abcb = abc + bc;\n        long acbc = acb + abc;\n     \
    \   long abcac = abcb + acb;\n        long abcacb = abcac + acbc;\n        long\
    \ abcacbc = abcacb + acbc;\n        long abcacbcc = abcacbc + acbc;\n        long\
    \ abcacbccc = abcacbcc+ acbc;\n        long abcacbcccb = abcacbccc + acbc;\n \
    \       long abcacbcccbc = abcacbcccb + acbc;\n        long abcacbcccbcb = abcacbcccbc\
    \ + acbc;\n        long abcacbcccbcba = abcacbcccbcba + acbc;\n        long abcacbcccbcbac\
    \ = abcacbcccbcba+ acbc;\n        long abcacbcccbcbaca = abcacbcccbcbac + acbc;\n\
    \        long abcacbcccbcbacaa = abcacbcccbcbaca + acbc;\n        long abcacbcccbcbacaa1\
    \ = abcacbcccbcbacaa+ acbc;\n        long abcacbcccbcbacaa11 = abcacbcccbcbacaa1\
    \ + acbc;\n        long abcacbcccbcbacaa111 = abcacbcccbcbacaa11 + acbc;\n   \
    \     long abcacbcccbcbacaa1111 = abcacbcccbcbacaa111 + acbc;\n        long abcacbcccbcbacaa11111\
    \ = abcacbcccbcbacaa1111 + acbc;\n        long abcacbcccbcbacaa111111 = abcacbcccbcbacaa11111\
    \ + acbc;\n        long abcacbcccbcbacaa1111111 = abcacbcccbcbacaa111111 + acbc;\n\
    \        long abcacbcccbcbacaa11111111 = abcacbcccbcbacaa1111111 + acbc;\n   \
    \     long abcacbcccbcbacaa111111111 = abcac", "        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbb = acb * ab;\n        long abbb = abb * ab;\n\
    \        long acbba = acb * ba;\n        long abbba = abb * ba;\n        long\
    \ acbcab = acb * cab;\n        long abbcab = abb * cab;\n        long acbcabc\
    \ = acb * cabc;\n        long abbcabc = abb * cabc;\n        long acbcabcb = acb\
    \ * cabcb;\n        long abbcabcb = abb * cabcb;\n        long acbcabcbc = acb\
    \ * cabcbc;\n        long abbcabcbc = abb * cabcbc;\n        long acbcabcbcb =\
    \ acb * cabcbcb;\n        long abbcabcbcb = abb * cabcbcb;\n        long acbcabcbcbc\
    \ = acb * cabcbcbc;\n        long abbcabcbcbc = abb * cabcbcbc;\n        long\
    \ acbcabcbcbcb = acb * cabcbcbcb;\n        long abbcabcbcbcb = abb * cabcbcbcb;\n\
    \        long acbcabcbcbcba = acb * cabcbcbcba;\n        long abbcabcbcbcba =\
    \ abb * cabcbcbcba;\n        long acbcabcbcbcab = acb * cabcbcbcab;\n        long\
    \ abbcabcbcbcab = abb * cabcbcbcab;\n        long acbcabcbcbcabc = acb * cabcbcbcabc;\n\
    \        long abbcabcbcbcabc = abb * cabcbcbcabc;\n        long acbcabcbcbcabcb\
    \ = acb * cabcbcbcabcb;\n        long abbcabcbcbcabcb = abb * cabcbcbcabcb;\n\
    \        long acbcabcbcbcabcbc = acb * cabcbcbcabcbc;\n        long abbcabcbcbcabcbc\
    \ = abb * cabcbcbcabcbc;\n        long acbcabcbcbcab", "        long d = b * b\
    \ - 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n   \
    \         long f = (long) Math.Sqrt(a * a + b * b);\n            long g = (long)\
    \ Math.Sqrt(a * a + e * e);\n            long h = (long) Math.Sqrt(f * f + g *\
    \ g);\n            if (h == 0)\n                return false;\n            long\
    \ x = (long) Math.Sqrt(a * a + b * b);\n            long y = (long) Math.Sqrt(a\
    \ * a + e * e);\n            long z = (long) Math.Sqrt(f * f + g * g);\n     \
    \       long t1 = (long) Math.Sqrt(a * a + b * b);\n            long t2 = (long)\
    \ Math.Sqrt(a * a + e * e);\n            long t3 = (long) Math.Sqrt(f * f + g\
    \ * g);\n            long t4 = (long) Math.Sqrt(a * a + b * b);\n            long\
    \ t5 = (long) Math.Sqrt(a * a + e * e);\n            long t6 = (long) Math.Sqrt(f\
    \ * f + g * g);\n            long t7 = (long) Math.Sqrt(a * a + b * b);\n    \
    \        long t8 = (long) Math.Sqrt(a * a + e * e);\n            long t9 = (long)\
    \ Math.Sqrt(f * f + g * g);\n            long t10 = (long) Math.Sqrt(a * a + b\
    \ * b);\n            long t11 = (long) Math.Sqrt(a * a + e * e);\n           \
    \ long t12 = (long) Math.Sqrt(f * f + g * g);\n            long t13 = (long) Math.Sqrt(a\
    \ * a + b * b);\n            long t14 = (long) Math.Sqrt(a * a + e * e);\n   \
    \         long t15 = (long) Math.Sqrt(f * f + g * g);\n            long t16 =\
    \ (long) Math.Sqrt(a * a + b * b);\n            long t17 = (long) Math.Sqrt(a\
    \ * a + e * e);\n            long t18 = (long) Math.Sqrt(f * f + g * g);\n   \
    \         long t19 = (long) Math.Sqrt(a * a + b * b);\n            long t20 =\
    \ (long) Math.Sqrt(a * a + e * e);\n            long t21 = (long) Math.Sqrt(f\
    \ * f + g * ", "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n  \
    \          long root = (long)Math.Sqrt(d);\n            long t1 = (-b + root)\
    \ / (2 * a);\n            long t2 = (-b - root) / (2 * a);\n            if (t1\
    \ >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n   \
    \         }\n        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a + b;\n        long ac = a + c;\n\
    \        long bc = b + c;\n        long acbc = ac + bc;\n        long abbc = ab\
    \ + bc;\n        long abac = ab + ac;\n        long acab = ac + ab;\n        long\
    \ abcab = ab + cab;\n        long cabab = cab + ab;\n        long cabac = cab\
    \ + ac;\n        long cababc = cab + abc;\n        long cabacb = cab + acb;\n\
    \        long cabacbc = cab + acbc;\n        long cabacbca = cab + acbca;\n  \
    \      long cabacbcab = cab + acbcab;\n        long cabacbcabc = cab + acbcabc;\n\
    \        long cabacbcabca = cab + acbcabca;\n        long cabacbcabcab = cab +\
    \ acbcabcab;\n        long cabacbcabcabc = cab + acbcabcabc;\n        long cabacbcabcabca\
    \ = cab + acbcabcabca;\n        long cabacbcabcabcab = cab + acbcabcabcab;\n \
    \       long cabacbcabcabcabc = cab + acbcabcabcabc;\n        long cabacbcabcabcabca\
    \ = cab + acbcabcabcabca;\n        long cabacbcabcabcabcab = cab + acbcabcabcabcab;\n\
    \        long cabacbcabcabcabcabc = cab + acbcabcabcabcabc;\n        long cabacbcabcabcabcabca\
    \ = cab + acbcabcabcabcabca;\n        long cabacbcabcabcabcabcab = cab + acbcabcabcabcabcab;\n\
    \        long cabacbcabcabcabcabcabc = cab + acbcabcabcabcabcabc;\n        long\
    \ cabacbcabcabcabcabcabca = cab + acbcabcabcabcabcabca;\n        long cabacbcabcabcabcabcabcab\
    \ = cab + acbcabcabcabcabcabcab;\n        long cabacbcabcabcabcabcabcabc = cab\
    \ + acbcabcabcabcabcabcabc;\n        long cabacbcabcabcabcabcabcabca = cab + acbcabcabcabcabcabcabcabca;\n\
    \        long cabacbcabcabcabcabcabcabcab = cab + acbcabcab", "        long side1\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab\
    \ * bc;\n        long acbc = acb * bc;\n        long abbc = ab * bc;\n       \
    \ long acbcbc = acb * bc * bc;\n        long abcbc = ab * bc * bc;\n        long\
    \ acbcbcbc = acb * bc * bc * bc;\n        long abcbcbc = ab * bc * bc * bc;\n\
    \        long acbcbcbcbc = acb * bc * bc * bc * bc;\n        long abcbcbcbcbc\
    \ = ab * bc * bc * bc * bc;\n        long acbcbcbcbcbcbc = acb * bc * bc * bc\
    \ * bc * bc;\n        long abcbcbcbcbcbcbc = ab * bc * bc * bc * bc * bc;\n  \
    \      long acbcbcbcbcbcbcbcbc = acb * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcbc = ab * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = acb * bc * bc * bc * bc * bc * bc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = ab * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc\
    \ = acb * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcbcbcbcbcbcbcbcbcbcbc\
    \ = ab * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbcbc\
    \ = acb * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcbcbcbcbcbcbcbcbcbcbcbc\
    \ = ab * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbcbcbcbcbcbcbcbcbc\
    \ = acb * bc * bc * bc * bc * bc * bc * bc * bc * bc", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d <\
    \ 0)\n            return false;\n        long sq = Math.Sqrt(d);\n        long\
    \ t1 = (-b + sq) / (2 * a);\n        long t2 = (-b - sq) / (2 * a);\n        return\
    \ (t1 > 0 && t1 < t2);", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side9\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side15 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side21 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side27 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      ", "        long ab = a - b;\n        long ac = a - c;\n        long bc\
    \ = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n       \
    \ long acbc = acb * bc;\n        long acbca = acbc * ca;\n        long acbcaa\
    \ = acbca * ca;\n        long acbcaab = acbca * caab;\n        long acbcaabc =\
    \ acbca * caabc;\n        long acbcaabca = acbca * caabca;\n        long acbcaabcab\
    \ = acbca * caabcab;\n        long acbcaabcabc = acbca * caabcabc;\n        long\
    \ acbcaabcabca = acbca * caabcabca;\n        long acbcaabcabcab = acbca * caabcabcab;\n\
    \        long acbcaabcabcabc = acbca * caabcabcabc;\n        long acbcaabcabcabca\
    \ = acbca * caabcabcabca;\n        long acbcaabcabcabcab = acbca * caabcabcabcab;\n\
    \        long acbcaabcabcabcabc = acbca * caabcabcabcabc;\n        long acbcaabcabcabcabca\
    \ = acbca * caabcabcabcabca;\n        long acbcaabcabcabcabcab = acbca * caabcabcabcabcab;\n\
    \        long acbcaabcabcabcabcabc = acbca * caabcabcabcabcabc;\n        long\
    \ acbcaabcabcabcabcabca = acbca * caabcabcabcabcabca;\n        long acbcaabcabcabcabcabcab\
    \ = acbca * caabcabcabcabcabcab;\n        long acbcaabcabcabcabcabcabc = acbca\
    \ * caabcabcabcabcabcabc;\n        long acbcaabcabcabcabcabcabca = acbca * caabcabcabcabcabcabcabca;\n\
    \        long acbcaabcabcabcabcabcabcab = acbca * caabcabcabcabcabcabcab;\n  \
    \      long acbcaabcabcabcabcabcabcabc = acbca * caabcabcabcabcabcabcabcabc;\n\
    \        long acbcaabcabcab", "        long side1 = Math.Sqrt(Math.Pow(a, 2) +\
    \ Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abbc = abc * bc;\n        long abbbc\
    \ = abbc * bc;\n        long abbbbc = abbbc * bc;\n        long abbbbbc = abbbbbc\
    \ * bc;\n        long abbbbbbc = abbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc\
    \ * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long abbbbbbbbbc\
    \ = abbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc = abbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbb", " \
    \       long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return\
    \ false;\n        }\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a);\n        long g = (long) Math.Sqrt(b * b);\n        long h = (long) Math.Sqrt(c\
    \ * c);\n        long i = (long) Math.Sqrt(a + b + c);\n        long j = (long)\
    \ Math.Sqrt(a + b - c);\n        long k = (long) Math.Sqrt(a + b + c);\n     \
    \   long l = (long) Math.Sqrt(a + b - c);\n        long m = (long) Math.Sqrt(a\
    \ + b + c);\n        long n = (long) Math.Sqrt(a + b - c);\n        long o = (long)\
    \ Math.Sqrt(a + b + c);\n        long p = (long) Math.Sqrt(a + b - c);\n     \
    \   long q = (long) Math.Sqrt(a + b + c);\n        long r = (long) Math.Sqrt(a\
    \ + b - c);\n        long s = (long) Math.Sqrt(a + b + c);\n        long t = (long)\
    \ Math.Sqrt(a + b - c);\n        long u = (long) Math.Sqrt(a + b + c);\n     \
    \   long v = (long) Math.Sqrt(a + b - c);\n        long w = (long) Math.Sqrt(a\
    \ + b + c);\n        long x = (long) Math.Sqrt(a + b - c);\n        long y = (long)\
    \ Math.Sqrt(a + b + c);\n        long z = (long) Math.Sqrt(a + b - c);\n     \
    \   long aa = (long) Math.Sqrt(a * a);\n        long ab = (long) Math.Sqrt(a *\
    \ b);\n        long ac = (long) Math.Sqrt(a * c);\n        long ad = (long) Math.Sqrt(a\
    \ * d);\n        long ae = (long) Math.Sqrt(a * e);\n        long af = (long)\
    \ Math.Sqrt(a * f);\n        long ag = (long) Math.Sqrt(a * g);\n        long\
    \ ah = (long) Math.Sqrt(a * h);\n        long ai = (long) Math.Sqrt(a * i);\n\
    \        long aj = (long) Math.Sqrt(a * j);\n        long ak = (long) Math.Sqrt(a\
    \ * k);\n        long al = (long) Math.Sqrt(a * l);\n        ", "        long\
    \ ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long\
    \ acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n\
    \        long abbc = abb * bc;\n        long acbcbc = acbcb * bc;\n        long\
    \ abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcb\
    \ = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbc\
    \ = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n        long abcbcbcb\
    \ = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbc\
    \ = abcbcbcbc * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n \
    \       long acbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcb", "        long d = b * b - 4 * a * c;\n   \
    \     if (d < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n\
    \        long rootC = (-b - rootD) / rootD;\n        long rootAB = Math.Sqrt(rootA\
    \ * rootA + rootB * rootB);\n        long rootAC = Math.Sqrt(rootA * rootA + rootC\
    \ * rootC);\n        long rootBC = Math.Sqrt(rootB * rootB + rootC * rootC);\n\
    \        long rootABC = Math.Sqrt(rootAB * rootAB + rootBC * rootBC);\n      \
    \  long rootACB = Math.Sqrt(rootAC * rootAC + rootBC * rootBC);\n        long\
    \ rootABC = Math.Sqrt(rootAB * rootAB + rootAC * rootAC);\n        return rootABC\
    \ == rootACB;", "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n \
    \           long e = Math.Sqrt(d);\n            long f = (long) Math.Sqrt(a *\
    \ a + b * b - e * e);\n            long g = (long) Math.Sqrt(a * a + e * e + b\
    \ * b);\n            long h = (long) Math.Sqrt(a * a + e * e + g * g);\n     \
    \       long i = (long) Math.Sqrt(a * a + g * g + b * b);\n            return\
    \ ((f < 0 && g < 0 && h < 0 && i < 0) || (f > 0 && g > 0 && h > 0 && i > 0));\n\
    \        }\n        return false;", "        long d = b * b - 4 * a * c;\n   \
    \     if (d < 0) {\n            return false;\n        }\n        long root =\
    \ (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n        long\
    \ t2 = (-b - root) / (2 * a);\n        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2\
    \ <= 1) {\n            return true;\n        }\n        return false;", "    \
    \    long ab = a + b;\n        long ac = a + c;\n        long bc = b + c;\n  \
    \      long abc = ab + bc;\n        long acb = ac + b;\n        long abcb = abc\
    \ + bc;\n        long acbc = acb + c;\n        long abcc = abcc + b;\n       \
    \ long acbca = acbc + a;\n        long abcca = abcc + a;\n        long acbcab\
    \ = acbc + ab;\n        long abccab = abcc + ab;\n        long acbcabc = acbc\
    \ + abc;\n        long abccabc = abcc + abc;\n        long acbcabca = acbc + abc\
    \ + a;\n        long abccabca = abcc + abc + a;\n        long acbcabcab = acbc\
    \ + abc + ab;\n        long abccabcab = abcc + abc + ab;\n        long acbcabcabc\
    \ = acbc + abc + abc;\n        long abccabcabc = abcc + abc + abc;\n        long\
    \ acbcabcabca = acbc + abc + abc + a;\n        long abccabcabca = abcc + abc +\
    \ abc + a;\n        long acbcabcabcab = acbc + abc + abc + ab;\n        long abccabcabcab\
    \ = abcc + abc + abc + ab;\n        long acbcabcabcabc = acbc + abc + abc + abc;\n\
    \        long abccabcabcabc = abcc + abc + abc + abc;\n        long acbcabcabcabca\
    \ = acbc + abc + abc + abc + a;\n        long abccabcabcabca = abcc + abc + abc\
    \ + abc + a;\n        long acbcabcabcabcab = acbc + abc + abc + abc + ab;\n  \
    \      long abccabcabcabcab = abcc + abc + abc + abc + ab;\n        long acbcabcabcabcabc\
    \ = acbc + abc + abc + abc + abc;\n        long abccabcabcabcabc = abcc + abc\
    \ + abc + abc + abc;\n        long acbcabcabcabcabca = acbc + abc + abc + abc\
    \ + abc + a;\n        long abccabcabcabcabca = abcc + abc + abc + abc + abc +\
    \ a;\n        long acbcabcabcabcabcab = acbc + abc + abc + abc + abc + ab;\n \
    \       long abccabcabcabcabcab = abcc + abc + ab", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * b; // acb = ac * bc\n     \
    \   long abc = ab * c; // abc = ab * c\n        long acbc = acb * c; // acbc =\
    \ acb * c\n        long abbc = abb * c; // abbc = abb * c\n        long acbb =\
    \ acb * b; // acbb = acb * b\n        long abbb = abb * b; // abbb = abb * b\n\
    \        long acbba = acbba * c; // acbba = acbba * c\n        long abbba = abbba\
    \ * c; // abbba = abbba * c\n        long acbcab = acbcab * c; // acbcab = acbcab\
    \ * c\n        long abbcab = abbcab * c; // abbcab = abbcab * c\n        long\
    \ acbcabc = acbcabc * c; // acbcabc = acbcabc * c\n        long abbcabc = abbcabc\
    \ * c; // abbcabc = abbcabc * c\n        long acbcabcb = acbcabcb * c; // acbcabcb\
    \ = acbcabcb * c\n        long abbcabcb = abbcabcb * c; // abbcabcb = abbcabcb\
    \ * c\n        long acbcabcbc = acbcabcbc * c; // acbcabcbc = acbcabcbc * c\n\
    \        long abbcabcbc = abbcabcbc * c; // abbcabcbc = abbcabcbc * c\n      \
    \  long acbcabcbcb = acbcabcbcb * c; // acbcabcbcb = acbcabcbcb * c\n        long\
    \ abbcabcbcb = abbcabcbcb * c; // abbcabcbcb = abbcabcbcb * c\n        long acbcabcbcbc\
    \ = acbcabcbcbc * c; // acbcabcbcbc = acbcabcbcbc * c\n        long abbcabcbcbc\
    \ = abbcabcbcbc * c; // abbcabcbcbc = abbcabcbcbc * c\n        long acbcabcbcbcb\
    \ = acbcabcbcbcb * c; // acbcabcbcbcb = ac", "        long ab = a - b;\n     \
    \   long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcbc = acbcbcb * bc;\n        long abcbcbc = abcbcb *\
    \ bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb * bc;\n        long abcbcbcbcbc\
    \ = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcb * bc;\n    \
    \    long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc =\
    \ acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcb",
  "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n            long e =\
    \ (long) Math.Sqrt(d);\n            long f = (long) Math.Sqrt(a + b + c);\n  \
    \          long g = (long) Math.Sqrt(a + b - c);\n            long h = (long)\
    \ Math.Sqrt(a + b + c - e);\n            return ((e * e + f * f - g * g - h *\
    \ h) <= 0);\n        }\n        return false;", "        long d = b * b - 4 *\
    \ a * c;\n        if (d < 0)\n            return false;\n        long e = Math.Sqrt(d);\n\
    \        long f = b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a\
    \ + e * 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long\
    \ i = Math.Sqrt(f * f + g * g + h * h);\n        return i == 0;", "        long\
    \ d = b * b - 4 * a * c;\n        if (d >= 0) {\n            long e = Math.Sqrt(d);\n\
    \            long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 *\
    \ a);\n            if (Math.Abs(f - g) < 0.0001) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long d = b * b - 4\
    \ * a * c;\n        if (d < 0)\n            return false;\n        long disc =\
    \ d / (2 * a);\n        if (disc > 0)\n            return true;\n        long\
    \ e = (b * b) - (4 * a * c);\n        if (e < 0)\n            return false;\n\
    \        long f = (2 * b) - (4 * a * c);\n        if (f < 0)\n            return\
    \ false;\n        long g = (b * b) - (4 * a * c);\n        if (g < 0)\n      \
    \      return false;\n        long h = (2 * b) - (4 * a * c);\n        if (h <\
    \ 0)\n            return false;\n        long i = (b * b) - (4 * a * c);\n   \
    \     if (i < 0)\n            return false;\n        long j = (2 * b) - (4 * a\
    \ * c);\n        if (j < 0)\n            return false;\n        long k = (b *\
    \ b) - (4 * a * c);\n        if (k < 0)\n            return false;\n        long\
    \ l = (2 * b) - (4 * a * c);\n        if (l < 0)\n            return false;\n\
    \        long m = (b * b) - (4 * a * c);\n        if (m < 0)\n            return\
    \ false;\n        long n = (2 * b) - (4 * a * c);\n        if (n < 0)\n      \
    \      return false;\n        long o = (b * b) - (4 * a * c);\n        if (o <\
    \ 0)\n            return false;\n        long p = (2 * b) - (4 * a * c);\n   \
    \     if (p < 0)\n            return false;\n        long q = (b * b) - (4 * a\
    \ * c);\n        if (q < 0)\n            return false;\n        long r = (2 *\
    \ b) - (4 * a * c);\n        if (r < 0)\n            return false;\n        long\
    \ s = (2 * b) - (4 * a * c);\n        if (s < 0)\n            return false;\n\
    \        long t = (b * b) - (4 * a * c);\n        if (t < 0)\n            return\
    \ false;\n        long u = (2 * b) - (4 * a * c);\n        if (u < 0)\n      \
    \      return false;\n        long v = (b * b) - (4 * a * c);\n        if (v <\
    \ 0)\n            return false;\n        long w = (2 * b) - (4 * a * c);\n   \
    \     if (w < 0)\n            return false;\n        long x = (b * b) - (4 * a\
    \ * c);\n        if (x < 0)\n            return false;\n        long y = (2 *\
    \ b) - (4 * a * c);\n        if (y < 0)\n            return false;\n        long\
    \ z = (b * b) - (4 * a * c);\n        if (z < 0)\n            return false;\n\
    \        long aa = (b * b) - (4 * a * c);\n        if (aa < 0)\n            return\
    \ false;\n        long ab = (2 * b) - (4 * a * c);\n        if (ab < 0)\n    \
    \        return false;\n        long ac = (b", "        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcbc = acbcbcb * bc;\n        long abcbcbc = abcbcb *\
    \ bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcb\
    \ * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb * bc;\n        long abcbcbcbcbc\
    \ = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcb * bc;\n    \
    \    long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc =\
    \ acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcb",
  "        long ab = a + b;\n        long ac = a + c;\n        long bc = b + c;\n\
    \        long abc = ab + bc;\n        long acb = ac + bc;\n        long abbc =\
    \ ab + bc;\n        long acbc = ac + bc;\n        long abbbc = ab + bc;\n    \
    \    long acbbc = ac + bc;\n        long abbbbc = ab + bc;\n        long acbbbc\
    \ = ac + bc;\n        long abbbbcd = ab + bc + bc;\n        long acbbbcd = ac\
    \ + bc + bc;\n        long abbbbcdd = ab + bc + bc + bc;\n        long acbbbcdd\
    \ = ac + bc + bc + bc;\n        long abbbbcdcd = ab + bc + bc + bc + bc;\n   \
    \     long acbbbcdcd = ac + bc + bc + bc + bc;\n        long abbbbcdcde = ab +\
    \ bc + bc + bc + bc + bc + bc;\n        long acbbbcdcde = ac + bc + bc + bc +\
    \ bc + bc + bc;\n        long abbbbcdcdef = ab + bc + bc + bc + bc + bc + bc +\
    \ bc;\n        long acbbbcdcdef = ac + bc + bc + bc + bc + bc + bc;\n        long\
    \ abbbbcdcdefg = ab + bc + bc + bc + bc + bc + bc + bc + bc;\n        long acbbbcdcdefg\
    \ = ac + bc + bc + bc + bc + bc + bc + bc + bc;\n        long abbbbcdcdefgh =\
    \ ab + bc + bc + bc + bc + bc + bc + bc + bc + bc;\n        long acbbbcdcdefgh\
    \ = ac + bc + bc + bc + bc + bc + bc + bc + bc;\n        long abbbbcdcdefghi =\
    \ ab + bc + bc + bc + bc + bc + bc + bc + bc + bc + bc;\n        long acbbbcdcdefghi\
    \ = ac + bc + bc + bc + bc + bc + bc + bc + bc + bc + bc;\n        long abbbbcdcdefghij\
    \ = ab + bc + bc + bc + bc + bc + bc + bc + bc + bc + bc + b", "        long ab\
    \ = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long abcac = abc * ac;\n        long abcacb = abcac * bc;\n        long\
    \ abcacbc = abcacb * bc;\n        long abcacbcabc = abcacb * abcac * bc;\n   \
    \     long abcacbcabcdef = abcacbcabc * abc * ac;\n        long abcacbcabcdefgh\
    \ = abcacbcabc * abc * ac * bc;\n        long abcacbcabcdefghij = abcacbcabc *\
    \ abc * ac * bc * c * i;\n        long abcacbcabcdefghijkl = abcacbcabc * abc\
    \ * ac * bc * c * i * k;\n        long abcacbcabcdefghijklm = abcacbcabc * abc\
    \ * ac * bc * c * i * k * m;\n        long abcacbcabcdefghijklmn = abcacbcabc\
    \ * abc * ac * bc * c * i * k * m * n;\n        long abcacbcabcdefghijklmno =\
    \ abcacbcabc * abc * ac * bc * c * i * k * m * n * o;\n        long abcacbcabcdefghijklmnop\
    \ = abcacbcabc * abc * ac * bc * c * i * k * m * n * o * p;\n        long abcacbcabcdefghijklmnopq\
    \ = abcacbcabc * abc * ac * bc * c * i * k * m * n * o * p * q;\n        long\
    \ abcacbcabcdefghijklmnopqr = abcacbcabc * abc * ac * bc * c * i * k * m * n *\
    \ o * p * q * r;\n        long abcacbcabcdefghijklmnopqrst = abcacbcabc * abc\
    \ * ac * bc * c * i * k * m * n * o * p * q * r * s;\n        long abcacbcabcdefghijklmnopqrstu\
    \ = abcacbcabc * abc * ac * bc * c * i * k * m * n * o * p * q", "        long\
    \ d = b * b - 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n\
    \            long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 *\
    \ a);\n            if (f > g) {\n                return true;\n            }\n\
    \        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long abbc = ab * bc;\n        long abcabc = ab * abc;\n        long abcabbc\
    \ = ab * abbc;\n        long abcabcabc = ab * abcabc;\n        long abcabcabbc\
    \ = ab * abcabbc;\n        long abcabcabcabc = ab * abcabcabc;\n        long abcabcabcabbc\
    \ = ab * abcabcabbc;\n        long abcabcabcabcabc = ab * abcabcabcabc;\n    \
    \    long abcabcabcabcabbc = ab * abcabcabcabbc;\n        long abcabcabcabcabcabc\
    \ = ab * abcabcabcabcabc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long abcabcabcabcabcabcabc = ab * abcabcabcabcabcabc;\n        long abcabcabcabcabcabcabbc\
    \ = ab * abcabcabcabcabcabbc;\n        long abcabcabcabcabcabcabcabc = ab * abcabcabcabcabcabcabc;\n\
    \        long abcabcabcabcabcabcabbc = ab * abcabcabcabcabcabcabbc;\n        long\
    \ abcabcabcabcabcabcabcabcabc = ab * abcabcabcabcabcabcabcabc;\n        long abcabcabcabcabcabcabcabbc\
    \ = ab * abcabcabcabcabcabcabcabbc;\n        long abcabcabcabcabcabcabcabcabcabc\
    \ = ab * abcabcabcabcabcabcabcabcabc;\n        long abcabcabcabcabcabcabcabcabcabbc\
    \ = ab * abcabcabcabcabcabcabcabcabbc;\n        long abcabcabcabcabcabcabcabcabcabcabc\
    \ = ab * abcabcabcabcabcabcabcabcabcabcabc;\n        long abcabcabcabcabcabcabcabcabcabcabbc\
    \ = ab * abcabcabcabcabcabcabcabcabcabcabbc;\n        long abcabcabcabcabcabcabcabcabcabcabcabc\
    \ = ab * abcabcabcabcabcabcabcabcabcabcabcabc;\n        long abcabcabcabcabcabcabcabcabcabcabcabbc\
    \ = ab * abcabcabcabcabcabcabcabcabcabcabcabcab", "        long ab = a - b;\n\
    \        long ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcc\
    \ = ab * cc;\n        long abbbc = ab * bc * cc;\n        long abbcc = ab * b\
    \ * cc;\n        long abccb = ab * c * bc;\n        long abbbcc = ab * b * c *\
    \ cc;\n        long abbccb = ab * b * c * bc;\n        long abccbc = ab * c *\
    \ bc * cc;\n        long abbbccb = ab * b * c * bc * cc;\n        long abbccbc\
    \ = ab * b * c * bc * cc;\n        long abcccbc = ab * c * bc * c * cc;\n    \
    \    long abbbccbc = ab * b * c * bc * c * cc;\n        long abbcccbc = ab * b\
    \ * c * bc * c * cc;\n        long abcccbcb = ab * c * bc * c * cb;\n        long\
    \ abbbccbcc = ab * b * c * bc * c * cc;\n        long abbcccbcb = ab * b * c *\
    \ bc * c * cb;\n        long abcccbcbc = ab * c * bc * c * cb * cc;\n        long\
    \ abbbccbccb = ab * b * c * bc * c * cc * cb;\n        long abbcccbcbc = ab *\
    \ b * c * bc * c * cb * cc;\n        long abcccbcbcb = ab * c * bc * c * cb *\
    \ cc * cb;\n        long abbbccbccbc = ab * b * c * bc * c * cc * cb * cc;\n \
    \       long abbcccbcbcb = ab * b * c * bc * c * cb * cc * cb;\n        long abcccbcbcbc\
    \ = ab * c * bc * c * cb * cc * cb * cc;\n        long abbbccbccbcc = ab * b *\
    \ c * bc * c * cc * cb * cc * cc;\n        long abbcccbcbcb = ab * b * c * bc\
    \ * c * cb * cc * cb * cc;\n        long abcccbcbcbcb = ab", "        long side1\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d >=\
    \ 0) {\n            long root = (long)Math.Sqrt(d);\n            long t1 = (-b\
    \ + root) / (2 * a);\n            long t2 = (-b - root) / (2 * a);\n         \
    \   if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n\
    \            }\n        }\n        return false;", "        long ab = a - b;\n\
    \        long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long acbcbc = acbcb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n\
    \        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcb = abcbcbcb * bc;\n\
    \        long acbcbcbcb = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc\
    \ * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long abcbcbcbcb =\
    \ abcbcbcbcb * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc *\
    \ bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcb\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n  \
    \      long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n\
    \        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n", "        long side1 = Math.Sqrt(Math.Pow(a, 2)\
    \ + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long abc = ab + bc;\n        long acb = ac\
    \ - bc;\n        long abbc = ab - bc;\n        long acbb = ac - bb;\n        long\
    \ abbbc = ab - bb;\n        long acbba = ac - bba;\n        long abbcab = ab -\
    \ cab;\n        long acbbca = ac - bca;\n        long abbcabc = ab - cabc;\n \
    \       long acbbcba = ac - bcab;\n        long abbcabcb = ab - cabcb;\n     \
    \   long acbbcbac = ac - bcaba;\n        long abbcabcbc = ab - cabcba;\n     \
    \   long acbbcbaca = ac - bcabac;\n        long abbcabcbca = ab - cabcbac;\n \
    \       long acbbcbacab = ac - bcabacb;\n        long abbcabcbcab = ab - cabcbacb;\n\
    \        long acbbcbacabc = ac - bcabacbc;\n        long abbcabcbcabc = ab - cabcbacbc;\n\
    \        long acbbcbacabca = ac - bcabacbca;\n        long abbcabcbcabca = ab\
    \ - cabcbacbca;\n        long acbbcbacabcab = ac - bcabacbcab;\n        long abbcabcbcabcab\
    \ = ab - cabcbacbcab;\n        long acbbcbacabcabc = ac - bcabacbcabc;\n     \
    \   long abbcabcbcabcabc = ab - cabcbacbcabc;\n        long acbbcbacabcabca =\
    \ ac - bcabacbcabca;\n        long abbcabcbcabcabca = ab - cabcbacbcabca;\n  \
    \      long acbbcbacabcabcab = ac - bcabacbcabcab;\n        long abbcabcbcabcabcab\
    \ = ab - cabcbacbcabcab;\n        long acbbcbacabcabcabc = ac - bcabacbcabcabc;\n\
    \        long abbcabcbcabcabcabc = ab - cabcbacbcabcabc;\n        long acbbcbacabcabcabca\
    \ = ac - bcabacbcabcabca;\n", "        long side1 = Math.Sqrt(Math.Pow(a, 2) +\
    \ Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab\
    \ * bc;\n        long acbc = acb * bc;\n        long abbc = abc * bc;\n      \
    \  long abbbc = abbc * bc;\n        long abbbbc = abbbc * bc;\n        long abbbbbc\
    \ = abbbbbc * bc;\n        long abbbbbbc = abbbbbbc * bc;\n        long abbbbbbbc\
    \ = abbbbbbbc * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbc = abbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbc = abbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc * bc;\n    \
    \    long abbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n    \
    \    long abbbbbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbbbbbbb", "        long d = b * b - 4 * a * c;\n\
    \        if (d > 0) {\n            long e = Math.Sqrt(d);\n            long f\
    \ = (long) Math.Sqrt(a + b + c);\n            long g = Math.Sqrt(a + b - c);\n\
    \            long h = (long) Math.Sqrt(a + b + c - e);\n            long i = (long)\
    \ Math.Sqrt(a + b - c + e);\n            long j = (long) Math.Sqrt(a + b + c +\
    \ e);\n            long k = (long) Math.Sqrt(a + b - c + e - f);\n           \
    \ long l = (long) Math.Sqrt(a + b - c + e + f);\n            long m = (long) Math.Sqrt(a\
    \ + b + c - e + f);\n            long n = (long) Math.Sqrt(a + b + c + e - f);\n\
    \            long o = (long) Math.Sqrt(a + b - c + e - g);\n            long p\
    \ = (long) Math.Sqrt(a + b - c + e + g);\n            long q = (long) Math.Sqrt(a\
    \ + b + c - e + g);\n            long r = (long) Math.Sqrt(a + b + c + e - g);\n\
    \            long s = (long) Math.Sqrt(a + b + c + e + g);\n            long t\
    \ = (long) Math.Sqrt(a + b - c + e - h);\n            long u = (long) Math.Sqrt(a\
    \ + b - c + e + h);\n            long v = (long) Math.Sqrt(a + b + c - e + h);\n\
    \            long w = (long) Math.Sqrt(a + b + c + e - h);\n            long x\
    \ = (long) Math.Sqrt(a + b - c + e - i);\n            long y = (long) Math.Sqrt(a\
    \ + b - c + e + i);\n            long z = (long) Math.Sqrt(a + b + c - e + i);\n\
    \            long aa = (long) Math.Sqrt(a + b - c + e - j);\n            long\
    \ ab = (long) Math.Sqrt(a + b - c + e + j);\n            long ac = (long) Math.Sqrt(a\
    \ + b + c - e + j);\n            long ad = (long) Math.Sqrt(a + b + c + e - j);\n\
    \            long ae = (long) Math.Sqrt(a + b + c + e + j);\n            long\
    \ af = (long) Math.Sqrt(a + b - c + e - k);\n            ", "        long ab =\
    \ a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long abbc = abb * bc;\n        long acbb = acb * ab;\n        long abbb\
    \ = abb * ab;\n        long acbba = acb * ba;\n        long abbba = abb * ba;\n\
    \        long acbbc = acb * bc;\n        long abbbc = abb * bc;\n        long\
    \ acbbac = acb * bac;\n        long abbbac = abb * bac;\n        long acbbca =\
    \ acb * bca;\n        long abbbca = abb * bca;\n        long acbbacb = acb * bcb;\n\
    \        long abbbacb = abb * bcb;\n        long acbbcab = acb * cab;\n      \
    \  long abbbcab = abb * cab;\n        long acbbacbb = acb * bcb;\n        long\
    \ abbbacbb = abb * bcb;\n        long acbbcabc = acb * cabc;\n        long abbbcabc\
    \ = abb * cabc;\n        long acbbacbbc = acb * bcbc;\n        long abbbacbbc\
    \ = abb * bcbc;\n        long acbbcabcb = acb * cabcb;\n        long abbbcabcb\
    \ = abb * cabcb;\n        long acbbacbbcb = acb * bcbcb;\n        long abbbacbbcb\
    \ = abb * bcbcb;\n        long acbbcabcbb = acb * cabcbb;\n        long abbbcabcbb\
    \ = abb * cabcbb;\n        long acbbacbbcbb = acb * bcbcbb;\n        long abbbacbbcbb\
    \ = abb * bcbcbb;\n        long acbbcabcbba = acb * cabcbba;\n        long abbbcabcbba\
    \ = abb * cabcbba;\n        long acbbacbbcbba = acb * bcbcbba;\n        long abbbacbbcbba\
    \ = abb * bcbcbba;\n        long acbbcabcbbc = acb * cabcbbc", "        long ab\
    \ = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * b; // acb = ac * bc\n        long abc = ab * c; // abc = ab * c\n   \
    \     long acbc = acb * c; // acbc = acb * c\n        long abbc = abc * b; //\
    \ abbc = abc * b\n        long abbbc = abbc * b; // abbbc = abbc * b\n       \
    \ long abbbbc = abbbc * b; // abbbbc = abbbc * b\n        long abbbbbc = abbbbbc\
    \ * b; // abbbbbc = abbbbbc * b\n        long abbbbbbc = abbbbbbc * b; // abbbbbbc\
    \ = abbbbbbc * b\n        long abbbbbbbc = abbbbbbbc * b; // abbbbbbbc = abbbbbbbc\
    \ * b\n        long abbbbbbbbbc = abbbbbbbbbc * b; // abbbbbbbbbc = abbbbbbbbbc\
    \ * b\n        long abbbbbbbbbbc = abbbbbbbbbbc * b; // abbbbbbbbbbc = abbbbbbbbbbc\
    \ * b\n        long abbbbbbbbbbbc = abbbbbbbbbbbc * b; // abbbbbbbbbbbc = abbbbbbbbbbbc\
    \ * b\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * b; // abbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbc * b\n        long abbbbbbbbbbbbbbc = abbbbbbbbbbbbbbc * b;\
    \ // abbbbbbbbbbbbbbc = abbbbbbbbbbbbbbc * b\n        long abbbbbbbbbbbbbbbc =\
    \ abbbbbbbbbbbbbbbc * b; // abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc * b\n      \
    \  long abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * b; // abbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbc * b\n        long abbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbc\
    \ * b; // abbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbc * b\n        long abbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbc * b; // abbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbc\
    \ * b\n        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * b; //\
    \ abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * b\n        long abbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbc * b; // abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc\
    \ * b\n        long abbbbbbbbbbbbbbbbbbbbbbbc = ab", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     if (side1 == side2 && side2 == side3) {\n            return true;\n    \
    \    }\n        return false;", "        long ab = a + b;\n        long ac = a\
    \ + c;\n        long bc = b + c;\n        long acbc = ac + bc;\n        long abbc\
    \ = ab + bc;\n        long abac = ab + ac;\n        long acab = ac + ab;\n   \
    \     long acbca = ac + bc + a;\n        long acbcab = ac + bc + ab;\n       \
    \ long accabb = ac + cab + ab;\n        long accabac = ac + cab + ac;\n      \
    \  long accabbc = ac + cab + bc + a;\n        long accabbca = ac + cab + bc +\
    \ ab;\n        long accabbcab = ac + cab + bc + ab + a;\n        long accabbcaba\
    \ = ac + cab + bc + ab + ac;\n        long accabbcabab = ac + cab + bc + ab +\
    \ ac + a;\n        long accabbcababc = ac + cab + bc + ab + ac + b;\n        long\
    \ accabbcababca = ac + cab + bc + ab + ac + b + a;\n        long accabbcababcab\
    \ = ac + cab + bc + ab + ac + b + ab;\n        long accabbcababcaba = ac + cab\
    \ + bc + ab + ac + b + ab + a;\n        long accabbcababcabab = ac + cab + bc\
    \ + ab + ac + b + ab + ac;\n        long accabbcababcababc = ac + cab + bc + ab\
    \ + ac + b + ab + ac + b;\n        long accabbcababcababca = ac + cab + bc + ab\
    \ + ac + b + ab + ac + b + a;\n        long accabbcababcababcab = ac + cab + bc\
    \ + ab + ac + b + ab + ac + b + ab;\n        long accabbcababcababcaba = ac +\
    \ cab + bc + ab + ac + b + ab + ac + b + ab + a;\n        long accabbcababcababcabab\
    \ = ac + cab + bc + ab + ac + b + ab + ac + b + ab + ac;\n        long accabbcababcababcababc\
    \ = ac + cab + bc + ab + ac + b + ab + ac + b + ab + ac + b;\n        ", "   \
    \     long d = b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n\
    \        long root = (long) Math.Sqrt(d);\n        long t1 = (-b + root) / (2\
    \ * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;",
  "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        if (side1 == side2 && side2 == side3) {\n   \
    \         return true;\n        }\n        return false;", "        long ab =\
    \ a + b;\n        long ac = a + c;\n        long bc = b + c;\n        long abc\
    \ = ab + bc;\n        long acb = ac + bc;\n        long abcb = abc + bc;\n   \
    \     long acbc = acb + abc;\n        long abcac = abcb + acb;\n        long acbca\
    \ = acbc + abc;\n        long abcacb = abcac + acb;\n        long acbcab = acbca+\
    \ abc;\n        long abcacbc = abcacb + acb;\n        long acbcabc = acbcab +\
    \ abc;\n        long abcacbca = abcacbc + acb;\n        long acbcabcb = acbcabc\
    \ + abc;\n        long abcacbcab = abcacbcab + acb;\n        long acbcabcba =\
    \ acbcabcba+ abc;\n        long abcacbcabc = abcacbcabc + acb;\n        long acbcabcbac\
    \ = acbcabcbac + abc;\n        long abcacbcabca = abcacbcabca + acb;\n       \
    \ long acbcabcbaca = acbcabcbaca + abc;\n        long abcacbcabcab = abcacbcabcab\
    \ + acb;\n        long acbcabcbacab = acbcabcbacab + abc;\n        long abcacbcabcabc\
    \ = abcacbcabcabc + acb;\n        long acbcabcbacabc = acbcabcbacabc + abc;\n\
    \        long abcacbcabcabca = abcacbcabcabca + acb;\n        long acbcabcbacabca\
    \ = acbcabcbacabca + abc;\n        long abcacbcabcabcab = abcacbcabcabcab + acb;\n\
    \        long acbcabcbacabcab = acbcabcbacabcab + abc;\n        long abcacbcabcabcabc\
    \ = abcacbcabcabcabc + acb;\n        long acbcabcbacabcabc = acbcabcbacabcabc\
    \ + abc;\n        long abcacbcabcabcabca = abcacbcabcabcabca + acb;\n        long\
    \ acbcabcbacabcabca = acbcabcbacabcabca + abc;\n        long abcacbcabcabcabcab\
    \ = abcacbcabcab", "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n\
    \            long e = Math.Sqrt(d);\n            long f = (b + e) / (2 * a);\n\
    \            long g = (c + e) / (2 * a);\n            long h = (b - e) / (2 *\
    \ a);\n            if (Math.Abs(f - g) < Math.Abs(f - h)) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long d = b\
    \ * b - 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n\
    \            long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 *\
    \ a);\n            if (f > g) {\n                return true;\n            }\n\
    \        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) +\
    \ Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side9\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2)\
    \ + Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side10 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side13 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a,\
    \ 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2));\n \
    \       long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a,\
    \ 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side15\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2)\
    \ + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a,\
    \ 2) + Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side16\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.Pow(c, 2)\
    \ + Math.Pow(b, 2) + Math.Pow(a, 2) + Math.", "        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 == t2) {\n            return\
    \ true;\n        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abbc = abc * bc;\n        long acbcbc\
    \ = acbcb * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb\
    \ * bc;\n        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb\
    \ * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbc = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb", "        long d = b * b - 4 * a * c;\n\
    \        if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 < t2)\n            return true;\n        return false;",
  "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long ", "        long ab = a\
    \ + b;\n        long ac = a + c;\n        long bc = b + c;\n        long abc =\
    \ ab + bc;\n        long acb = ac + bc;\n        long abcc = abc + acb;\n    \
    \    long acbc = acb + abc;\n        long abcac = abcc + acbc;\n        long acbca\
    \ = acbc + abcc;\n        long abcacb = abcac + acbca;\n        long acbcab =\
    \ acbca+ abcacb;\n        long acbcabc = acbcab + acbcabc;\n        long acbcabcd\
    \ = acbcabc + acbcabcd;\n        long acbcabcde = acbcabcd + acbcabcde;\n    \
    \    long acbcabcdef = acbcabcde + acbcabcdef;\n        long acbcabcdefg = acbcabcdef\
    \ + acbcabcdefg;\n        long acbcabcdefgh = acbcabcdefg + acbcabcdefgh;\n  \
    \      long acbcabcdefghi = acbcabcdefgh + acbcabcdefghi;\n        long acbcabcdefghij\
    \ = acbcabcdefghi + acbcabcdefghij;\n        long acbcabcdefghijk = acbcabcdefghij\
    \ + acbcabcdefghijk;\n        long acbcabcdefghijkl = acbcabcdefghijk + acbcabcdefghijkl;\n\
    \        long acbcabcdefghijklm = acbcabcdefghijkl + acbcabcdefghijklm; \n   \
    \     long acbcabcdefghijklmm = acbcabcdefghijklm + acbcabcdefghijklmm;\n    \
    \    long acbcabcdefghijklmmn = acbcabcdefghijklmm + acbcabcdefghijklmmn;\n  \
    \      long acbcabcdefghijklmmnn = acbcabcdefghijklmmn + acbcabcdefghijklmmnn;\n\
    \        long acbcabcdefghijklmmnnn = acbcabcdefghijklmmnn + acbcabcdefghijklmmnnn;\n\
    \        long acbcabcdefghijkl", "        long ab = a - b;\n        long ac =\
    \ a - c;\n        long bc = b - c;\n        long abc = ab + bc;\n        long\
    \ acb = ac - bc;\n        long abbc = ab - bc;\n        long acbb = ac - bb;\n\
    \        long abbbc = ab - bbc;\n        long acbba = ac - bba;\n        long\
    \ abbbac = ab - bbac;\n        long acbbca = ac - bbca;\n        long abbbca =\
    \ ab - bbca;\n        long acbbacb = ac - bbacb;\n        long abbbacba = ab -\
    \ bbacb;\n        long acbbcab = ac - bbcab;\n        long abbbcaba = ab - bbcab;\n\
    \        long acbbacbb = ac - bbacbb;\n        long abbbacbbc = ab - bbacbb;\n\
    \        long acbbcabc = ac - bbcabc;\n        long abbbcabca = ab - bbcabc;\n\
    \        long acbbacbbc = ac - bbacbbc;\n        long abbbacbbcb = ab - bbacbbc;\n\
    \        long acbbcabcb = ac - bbcabcb;\n        long abbbcabcba = ab - bbcabcb;\n\
    \        long acbbacbbcb = ac - bbacbbcb;\n        long abbbacbbcbc = ab - bbacbbcb;\n\
    \        long acbbcabcbc = ac - bbcabcbc;\n        long abbbcabcbca = ab - bbcabcbc;\n\
    \        long acbbacbbcbc = ac - bbacbbcbc;\n        long abbbacbbcbca = ab -\
    \ bbacbbcbc;\n        long acbbcabcbcb = ac - bbcabcbcb;\n        long abbbcabcbcba\
    \ = ab - bbcabcbcb;\n        long acbbacbbcbcb = ac - bbacbbcbcb;\n        long\
    \ abbbacbbcbcbc = ab - bbacbbcbcb;\n        long acbbcabcbcbc = ac - bbcabcbcbc;\n\
    \        long abbbcabcbcbca = ab - bbcabcbcbc;\n        long acbbacbbcbcbc = ac\
    \ - bbacbbcbcbc;\n        long abbbacbbcbcbca", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     if (side1 == side2 && side2 == side3) {\n            return true;\n    \
    \    }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a, 2)\
    \ + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long ", "        long d = b\
    \ * b - 4 * a * c;\n        if (d < 0)\n            return false;\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        return t1 == t2;", "        long\
    \ ab = a + b;\n        long ac = a + c;\n        long bc = b + c;\n        long\
    \ abc = ab + bc;\n        long acb = ac + bc;\n        long abcb = abc + bc;\n\
    \        long acbc = acb + abc;\n        long abcac = abcb + acb;\n        long\
    \ acbca = acbc + abc;\n        long abcacb = abcac + acb;\n        long acbcab\
    \ = acbca+ abc;\n        long abcacbc = abcacb + acb;\n        long acbcabc =\
    \ acbcab + abc;\n        long abcacbca = abcacbc + acb;\n        long acbcabcb\
    \ = acbcabc + abc;\n        long abcacbcab = abcacbca+ acb;\n        long acbcabcba\
    \ = acbcabcb + abc;\n        long abcacbcabc = abcacbcab + acb;\n        long\
    \ acbcabcbac = acbcabcba+ abc;\n        long abcacbcabca = abcacbcabc + acb;\n\
    \        long acbcabcbaca = acbcabcbac + abc;\n        long abcacbcabcab = abcacbcabca\
    \ + acb;\n        long acbcabcbacab = acbcabcbaca+ abc;\n        long abcacbcabcabc\
    \ = abcacbcabcab + acb;\n        long acbcabcbacabc = acbcabcbacab + abc;\n  \
    \      long abcacbcabcabca = abcacbcabcabc + acb;\n        long acbcabcbacabca\
    \ = acbcabcbacabc + abc;\n        long abcacbcabcabcab = abcacbcabcabca + acb;\n\
    \        long acbcabcbacabcab = acbcabcbacabca + abc;\n        long abcacbcabcabcabc\
    \ = abcacbcabcabcab + acb;\n        long acbcabcbacabcabc = acbcabcbacabcab +\
    \ abc;\n        long abcacbcabcabcabca = abcacbcabcabcabc + acb;\n        long\
    \ acbcabcbacabcabca = acbcabcbacabcabc + abc;\n        long abcacbcabcabcabcab\
    \ = abcacbcabcabcabca + acb;\n        ", "        long d = b * b - 4 * a * c;\n\
    \        if (d < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n\
    \        long rootC = (-b - rootD) / rootD;\n        if (rootA < rootB && rootA\
    \ < rootC)\n            return true;\n        if (rootB < rootC && rootB < rootA)\n\
    \            return true;\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abcac = abc * ac;\n        long abcabc\
    \ = abcabc * abc;\n        long acbcabc = acbcabc * acb;\n        long abcacbc\
    \ = abcacbc * abc;\n        long abcabcba = abcabc * acb;\n        long acbcabcabc\
    \ = acbcabcabc * acb;\n        long abcacbcabcabc = abcacbcabcabc * abc;\n   \
    \     long abcabcbaacbcabcabc = abcabcbaacbcabcabc * abc;\n        long acbcabcabcabcabcabc\
    \ = acbcabcabcabcabcabc * acb;\n        long abcacbcabcabcabcabcabc = abcacbcabcabcabcabcabc\
    \ * abc;\n        long abcabcbaacbcabcabcabcabc = abcabcbaacbcabcabcabcabc * abc;\n\
    \        long acbcabcabcabcabcabcabcabc = acbcabcabcabcabcabcabcabc * acb;\n \
    \       long abcacbcabcabcabcabcabcabc = abcacbcabcabcabcabcabcabcabc * abc;\n\
    \        long abcabcbaacbcabcabcabcabcabc = abcabcbaacbcabcabcabcabcabcabc * abc;\n\
    \        long acbcabcabcabcabcabcabcabcabc = acbcabcabcabcabcabcabcabcabcabc *\
    \ acb;\n        long abcacbcabcabcabcabcabcabcabcabc = abcacbcabcabcabcabcabcabcabcabcabc\
    \ * abc;\n        long abcabcbaacbcabcabcabcabcabcabcabc = abcabcbaacbcabcabcabcabcabcabcabcabcabc\
    \ * abc;\n        long acbcabcabcabcabcabcabcabcabcabc = acbcabcabcabcabcabcabcabcabcabcabcabc\
    \ * acb;\n        long abcacbcabcabcabcabcabcabcabcabcabc = abcacbcabcabcabcabcabcabcabcabcabcabcabc\
    \ * abc;\n        long abcabcbaacbcabcabcabcabcabcabcabcabcabc = abcab", "   \
    \     long ab = a - b;\n        long ac = c - a;\n        long bc = b - c;\n \
    \       long acb = ac * bc;\n        long abc = ab * bc;\n        long acbc =\
    \ acb * bc;\n        long abbc = abc * bc;\n        long abbbc = abbc * bc;\n\
    \        long abbbbc = abbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n   \
    \     long abbbbbbc = abbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc * bc;\n\
    \        long abbbbbbbbc = abbbbbbbbc * bc;\n        long abbbbbbbbbc = abbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc\
    \ = abbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbb", " \
    \       long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        if (side1 == side2 && side2 == side3) {\n   \
    \         return true;\n        }\n        return false;", "        long d = b\
    \ * b - 4 * a * c;\n        if (d > 0) {\n            long root = (long)Math.Sqrt(d);\n\
    \            long t1 = (-b + root) / a;\n            long t2 = (-b - root) / a;\n\
    \            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n               \
    \ return true;\n            }\n        }\n        return false;", "        long\
    \ ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long\
    \ acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n\
    \        long abcb = abc * bc;\n        long acbcb = (acb * bc) * bc;\n      \
    \  long abcbb = abcb * bc;\n        long acbcbc = (acbcb * bc) * bc;\n       \
    \ long abcbbc = (abcbb * bc) * bc;\n        long acbcbcb = (acbcbc * bc) * bc;\n\
    \        long abcbbcb = (abcbbc * bc) * bc;\n        long acbcbcbc = (acbcbcb\
    \ * bc) * bc;\n        long abcbbcbc = (abcbbcb * bc) * bc;\n        long acbcbcbcb\
    \ = (acbcbcbc * bc) * bc;\n        long abcbbcbcb = (abcbbcbc * bc) * bc;\n  \
    \      long acbcbcbcbc = (acbcbcbcb * bc) * bc;\n        long abcbbcbcbc = (abcbbcbcb\
    \ * bc) * bc;\n        long acbcbcbcbcb = (acbcbcbcbc * bc) * bc;\n        long\
    \ abcbbcbcbcb = (abcbbcbcbc * bc) * bc;\n        long acbcbcbcbcbc = (acbcbcbcbcb\
    \ * bc) * bc;\n        long abcbbcbcbcbc = (abcbbcbcbcb * bc) * bc;\n        long\
    \ acbcbcbcbcbcb = (acbcbcbcbcbc * bc) * bc;\n        long abcbbcbcbcbcb = (abcbbcbcbcbc\
    \ * bc) * bc;\n        long acbcbcbcbcbcbc = (acbcbcbcbcbcb * bc) * bc;\n    \
    \    long abcbbcbcbcbcbc = (abcbbcbcbcbcb * bc) * bc;\n        long acbcbcbcbcbcbcb\
    \ = (acbcbcbcbcbcbc * bc) * bc;\n        long abcbbcbcbcbcbcb = (abcbbcbcbcbcbc\
    \ * bc) * bc;\n        long acbcbcbcbcbcbcbc = (acbcbcbcbcbcbcb * bc) * bc;\n\
    \        long abcbbcbcbcbcbcbc = (", "        long d = b * b - 4 * a * c;\n  \
    \      if (d > 0) {\n            long root = (long)(Math.Sqrt(d));\n         \
    \   long t1 = (-b + root) / (2 * a);\n            long t2 = (-b - root) / (2 *\
    \ a);\n            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n         \
    \       return true;\n            }\n        }\n        return false;", "    \
    \    long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n   \
    \     long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side8 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side13 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side14 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side19 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side20 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side25 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", "        long\
    \ side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        if (side1 == side2 && side2 == side3) {\n            return true;\n\
    \        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * b; // acb = ac * bc\n     \
    \   long abc = ab * c; // abc = ab * c\n        long acbc = acb * c; // acbc =\
    \ acb * c\n        long abcb = abc * b; // abcb = abc * b\n        long abcbc\
    \ = abcb * c; // abcbc = abcb * c\n        long acbcbc = acbcb * c; // acbcbc\
    \ = acbcb * c\n        long acbcbcb = acbcbc * b; // acbcbcb = acbcbcb * b\n \
    \       long acbcbcbc = acbcbcb * c; // acbcbcbc = acbcbcb * c\n        long acbcbcbcb\
    \ = acbcbcbc * b; // acbcbcbcb = acbcbcbcb * b\n        long acbcbcbcbc = acbcbcbcb\
    \ * c; // acbcbcbcbc = acbcbcbcb * c\n        long acbcbcbcbb = acbcbcbcbc * b;\
    \ // acbcbcbcbb = acbcbcbcbb * b\n        long acbcbcbcbcb = acbcbcbcbc * c; //\
    \ acbcbcbcbcb = acbcbcbcbc * c\n        long acbcbcbcbcbc = acbcbcbcbc * b; //\
    \ acbcbcbcbcb = acbcbcbcbcb * b\n        long acbcbcbcbcbc = acbcbcbcbcb * c;\
    \ // acbcbcbcbcbc = acbcbcbcbcb * c\n        long acbcbcbcbcbcb = acbcbcbcbcbc\
    \ * b; // acbcbcbcbcbb = acbcbcbcbcbb * b\n        long acbcbcbcbcbcb = acbcbcbcbcbc\
    \ * c; // acbcbcbcbcbc = acbcbcbcbcbc * c\n        long acbcbcbcbcbcbc = acbcbcbcbcbc\
    \ * b; // acbcbcbcbcbcb = acbcbcbcbcbcb * b\n        long acbcbcbcbcbcbc = acbcbcbcbcbc\
    \ * c; // acbcbcbcbcbcb = acbcbcbcbcbcbc * c\n        long acb", "        long\
    \ ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long\
    \ acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n\
    \        long abbc = abb * bc;\n        long acbcbc = acbcb * bc;\n        long\
    \ abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n        long abcbcbc\
    \ = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n        long abcbcbcb\
    \ = abcbcbcb * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n        long abcbcbcbc\
    \ = abcbcbcbc * bc;\n        long acbcbcbcbc = acbcbcbcbc * bc;\n        long\
    \ abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbcb = acbcbcbcbcb * bc;\n\
    \        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long acbcbcbcbcbc = acbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcb\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n  \
    \      long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n\
    \        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n", "        long d = b * b - 4 * a * c;\n       \
    \ if (d < 0) {\n            return false;\n        }\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2) {\n            return true;\n        }\n      \
    \  return false;", "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n\
    \            long e = Math.Sqrt(d);\n            long f = (b + e) / (2 * a);\n\
    \            long g = (c + e) / (2 * a);\n            long h = (b - e) / (2 *\
    \ a);\n            if (Math.Abs(f - g) < Math.Abs(f - h)) {\n                return\
    \ true;\n            }\n        }\n        return false;", "        long ab =\
    \ a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long abc\
    \ = ab + bc;\n        long acb = ac - bc;\n        long abcb = abc + bc;\n   \
    \     long acbc = acb + abc;\n        long abcac = abcb + ac;\n        long abcacb\
    \ = abcac + acb;\n        long abcacbc = abcacb + abc;\n        long abcacbcc\
    \ = abcacbc + acb;\n        long abcacbccb = abcacbcc + abc;\n        long abcacbccbc\
    \ = abcacbccb + acb;\n        long abcacbccbcb = abcacbccbc + abc;\n        long\
    \ abcacbccbcc = abcacbccbc + acb;\n        long abcacbccbccb = abcacbccbcc+ abc;\n\
    \        long abcacbccbccbc = abcacbccbccb + acb;\n        long abcacbccbccbcc\
    \ = abcacbccbccbc + abc;\n        long abcacbccbccbccb = abcacbccbccbc + acb;\n\
    \        long abcacbccbccbccbc = abcacbccbccbccb + abc;\n        long abcacbccbccbccbcc\
    \ = abcacbccbccbccbc + acb;\n        long abcacbccbccbccbccb = abcacbccbccbccbc\
    \ + abc;\n        long abcacbccbccbccbccbc = abcacbccbccbccbccb + acb;\n     \
    \   long abcacbccbccbccbccbcc = abcacbccbccbccbccbc + abc;\n        long abcacbccbccbccbccbccb\
    \ = abcacbccbccbccbccbc + acb;\n        long abcacbccbccbccbccbccbc = abcacbccbccbccbccbccb\
    \ + abc;\n        long abcacbccbccbccbccbccbcc = abcacbccbccbccbccbccbc + acb;\n\
    \        long abcacbccbccbccbccbccbccb = abcacb", "        long d = b * b - 4\
    \ * a * c;\n        if (d > 0) {\n            long e = (long) Math.Sqrt(d);\n\
    \            long f = (long) Math.Sqrt(a + b + c);\n            long g = Math.Sqrt(a\
    \ + b - c);\n            long h = (long) Math.Sqrt(a + b + c - e);\n         \
    \   long i = (long) Math.Sqrt(a + b - c + e);\n            long j = (long) Math.Sqrt(a\
    \ + b + c + e);\n            long k = (long) Math.Sqrt(a + b - c + e - f);\n \
    \           long l = (long) Math.Sqrt(a + b - c + e + f);\n            long m\
    \ = (long) Math.Sqrt(a + b - c + e + f - g);\n            long n = (long) Math.Sqrt(a\
    \ + b - c + e + f + g);\n            long o = (long) Math.Sqrt(a + b - c + e +\
    \ f + g + h);\n            long p = (long) Math.Sqrt(a + b - c + e + f + g + h\
    \ + i);\n            long q = (long) Math.Sqrt(a + b - c + e + f + g + h + i +\
    \ j);\n            long r = (long) Math.Sqrt(a + b - c + e + f + g + h + i + j\
    \ + k);\n            long s = (long) Math.Sqrt(a + b - c + e + f + g + h + i +\
    \ j + k + l);\n            long t = (long) Math.Sqrt(a + b - c + e + f + g + h\
    \ + i + j + k + l + m);\n            long u = (long) Math.Sqrt(a + b - c + e +\
    \ f + g + h + i + j + k + l + m + n);\n            long v = (long) Math.Sqrt(a\
    \ + b - c + e + f + g + h + i + j + k + l + m + n + o);\n            long w =\
    \ (long) Math.Sqrt(a + b - c + e + f + g + h + i + j + k + l + m + n + o + p);\n\
    \            long x = (long) Math.Sqrt(a + b - c + e + f + g + h + i + j + k +\
    \ l + m + n + o + p + q);\n            long y = (long) Math.Sqrt(a + b - c + e\
    \ + f + g + h + i + j + k + l + m + n + o + p + q + r);\n", "        long d =\
    \ b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 < t2)\n            return\
    \ true;\n        return false;", "        long d = b * b - 4 * a * c;\n      \
    \  if (d < 0) {\n            return false;\n        }\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n\
    \        long rootC = (-b - rootD) / rootD;\n        if (rootA * rootA + rootB\
    \ * rootB == rootC * rootC) {\n            return true;\n        }\n        return\
    \ false;", "        long ab = a - b;\n        long ac = a - c;\n        long bc\
    \ = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n       \
    \ long acbc = acb * bc;\n        long abbc = abc * bc;\n        long abcbc = abbc\
    \ * bc;\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n\
    \        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n    \
    \    long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long\
    \ abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc\
    \ = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc\
    \ * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n\
    \        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n    \
    \    long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long\
    \ abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc\
    \ = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc\
    \ * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n\
    \        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n    \
    \    long abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long\
    \ abcbc = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc\
    \ = (abcbc * bc);\n        long abcbc = (abcbc * bc);\n        long abcbc = (abcbc\
    \ * bc);\n        long abcbc = (abcbc * ", "        long d = b * b - 4 * a * c;\n\
    \        if (d < 0) {\n            return false;\n        }\n        long e =\
    \ Math.Sqrt(d);\n        long f = (b + e) / (2 * a);\n        long g = (c + e)\
    \ / (2 * a);\n        long h = (b - e) / (2 * a);\n        long i = (b + c) /\
    \ (2 * a);\n        long j = (c + b) / (2 * a);\n        long k = Math.Sqrt(a\
    \ * a);\n        long l = (a + b + c + e) / (2 * a);\n        long m = (a + b\
    \ - c + e) / (2 * a);\n        long n = (a + b + c - e) / (2 * a);\n        long\
    \ o = (a + b + c + b + e) / (2 * a);\n        long p = (a + b + c - b + e) / (2\
    \ * a);\n        long q = (a + b + c + b - e) / (2 * a);\n        long r = (a\
    \ + b + c - b - e) / (2 * a);\n        long s = (a + b + c + e + b + g) / (2 *\
    \ a);\n        long t = (a + b + c + e + b - g) / (2 * a);\n        long u = (a\
    \ + b + c + e - b + g) / (2 * a);\n        long v = (a + b + c + e - b - g) /\
    \ (2 * a);\n        long w = (a + b + c + e + e + b + h) / (2 * a);\n        long\
    \ x = (a + b + c + e + e - b + h) / (2 * a);\n        long y = (a + b + c + e\
    \ + e - b - h) / (2 * a);\n        long z = (a + b + c + e + e + e + h) / (2 *\
    \ a);\n        long A = (a + b + c + e + e - e + h) / (2 * a);\n        long B\
    \ = (a + b + c + e + e - e - h) / (2 * a);\n        long C = (a + b + c + e +\
    \ e + e + h) / (2 * a);\n        long D = (a + b + c + e + e + e - h) / (2 * a);\n\
    \        long E = (a + b + c + e + e - e + h) / (2 * a);\n        long F = (a\
    \ + b + c + e + e - e - h) / (2 * a);\n        long G = (a + b + c + e + e + e\
    \ + h) / (2 * a);\n        long H = (a + b + c + e + e + e - h) / (2 * a);", " \
    \       long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d >\
    \ 0) {\n            long e = Math.Sqrt(d);\n            long f = b + e * (b -\
    \ a);\n            long g = a + e * (a - b);\n            if (f > g) {\n     \
    \           return true;\n            }\n        }\n        return false;", " \
    \       long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long acb = ac * bc;\n        long abc = ab * bc;\n        long acbc =\
    \ acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc = acbcab\
    \ * abc;\n        long acbcabcb = acbcabcb * abc;\n        long acbcabcbc = acbcabcbc\
    \ * abc;\n        long acbcabcbcd = acbcabcbcd * abc;\n        long acbcabcbcde\
    \ = acbcabcbcde * abc;\n        long acbcabcbcdef = acbcabcbcdef * abc;\n    \
    \    long acbcabcbcdefg = acbcabcbcdefg * abc;\n        long acbcabcbcdefgh =\
    \ acbcabcbcdefgh * abc;\n        long acbcabcbcdefghi = acbcabcbcdefghi * abc;\n\
    \        long acbcabcbcdefghij = acbcabcbcdefghij * abc;\n        long acbcabcbcdefghijk\
    \ = acbcabcbcdefghijk * abc;\n        long acbcabcbcdefghijkl = acbcabcbcdefghijkl\
    \ * abc;\n        long acbcabcbcdefghijklm = acbcabcbcdefghijklm * abc;\n    \
    \    long acbcabcbcdefghijklmm = acbcabcbcdefghijklmm * abc;\n        long acbcabcbcdefghijklmmn\
    \ = acbcabcbcdefghijklmmn * abc;\n        long acbcabcbcdefghijklmmnn = acbcabcbcdefghijklmmnn\
    \ * abc;\n        long acbcabcbcdefghijklmmnnn = acbcabcbcdefghijklmmnnn * abc;\n\
    \        long acbcabcbcdefghijklmmnnnn = acbcabcbcdefghijklmmnnnn * abc;\n   \
    \     long acbcabcbcdefghijklmmnnnnnn = acbcabcbcdefghijklmmnnnnnn * abc;\n  \
    \      long acbcabcbcdefghijklmmnnnnnn", "        long ab = a - b;\n        long\
    \ ac = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n       \
    \ long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc = abb\
    \ * bc;\n        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n  \
    \      long acbbcb = acbbcb * bc;\n        long abbbcb = abbbcb * bc;\n      \
    \  long acbbcbc = acbbcbc * bc;\n        long abbbcbc = abbbcbc * bc;\n      \
    \  long acbbcbcb = acbbcbcb * bc;\n        long abbbcbcb = abbbcbcb * bc;\n  \
    \      long acbbcbcbc = acbbcbcbc * bc;\n        long abbbcbcbc = abbbcbcbc *\
    \ bc;\n        long acbbcbcbcb = acbbcbcbcb * bc;\n        long abbbcbcbcb = abbbcbcbcb\
    \ * bc;\n        long acbbcbcbcbc = acbbcbcbcbc * bc;\n        long abbbcbcbcbc\
    \ = abbbcbcbcbc * bc;\n        long acbbcbcbcbcb = acbbcbcbcbcb * bc;\n      \
    \  long abbbcbcbcbcb = abbbcbcbcbcb * bc;\n        long acbbcbcbcbcbc = acbbcbcbcbcbc\
    \ * bc;\n        long abbbcbcbcbcbc = abbbcbcbcbcbc * bc;\n        long acbbcbcbcbcbcb\
    \ = acbbcbcbcbcbcb * bc;\n        long abbbcbcbcbcbcb = abbbcbcbcbcbcb * bc;\n\
    \        long acbbcbcbcbcbcbc = acbbcbcbcbcbcbc * bc;\n        long abbbcbcbcbcbcbc\
    \ = abbbcbcbcbcbcbc * bc;\n        long acbbcbcbcbcbcbcb = acbbcbcbcbcbcbcb *\
    \ bc;\n        long abbbcbcbcbcbcbcb = abbbcbcbcbcbcbcb * bc;\n        long acbbcbcbcbcbcbcbc\
    \ = acbbcbcbcbcbcbcbc * bc;\n        long abbbcbcbcbcb", "        long ab = a\
    \ - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb =\
    \ ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n     \
    \   long acbca = acbc * ca;\n        long abca = abc * ca;\n        long abcab\
    \ = abca * ca;\n        long abcabc = abcab * ca;\n        long abcabca = abcabc\
    \ * ca;\n        long abcabcab = abcabca * ca;\n        long abcabcabc = abcabcab\
    \ * ca;\n        long abcabcabca = abcabcabc * ca;\n        long abcabcabcab =\
    \ abcabcabca * ca;\n        long abcabcabcabc = abcabcabcab * ca;\n        long\
    \ abcabcabcabca = abcabcabcabc * ca;\n        long abcabcabcabcab = abcabcabcabca\
    \ * ca;\n        long abcabcabcabcabc = abcabcabcabcab * ca;\n        long abcabcabcabcabca\
    \ = abcabcabcabcabc * ca;\n        long abcabcabcabcabcab = abcabcabcabcabca *\
    \ ca;\n        long abcabcabcabcabcabc = abcabcabcabcabcab * ca;\n        long\
    \ abcabcabcabcabcabca = abcabcabcabcabcabc * ca;\n        long abcabcabcabcabcabcab\
    \ = abcabcabcabcabcabca * ca;\n        long abcabcabcabcabcabcabc = abcabcabcabcabcabcab\
    \ * ca;\n        long abcabcabcabcabcabcabca = abcabcabcabcabcabcabc * ca;\n \
    \       long abcabcabcabcabcabcabcab = abcabcabcabcabcabcabca * ca;\n        long\
    \ abcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcab * ca;\n        long abcabcabcabcabcabcabcabca\
    \ = abcabcabcabcabcabcabcabc * ca;\n        long abcabcabcabcabcabcabcabcab =\
    \ abcabcabcabcabcabcabcabca * ca;\n        long abcabcabcabcabcabcabcabcabc =\
    \ abcabcabcabcabcabcabcabcab * ca;\n        long abcabcabcabcabcabcabcabcabcab\
    \ = abcabcabcabcab", "        long ab = a - b;\n        long ac = a - c;\n   \
    \     long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abcb = abc * bc;\n        long acbcb\
    \ = (acb * bc) * bc;\n        long abcbb = abc * bc * bc;\n        long acbcbc\
    \ = acbcb * bc;\n        long abcbbc = abcbb * bc;\n        long acbcbcb = acbcbc\
    \ * bc;\n        long abcbbcb = abcbbc * bc;\n        long acbcbcb = (acbcb *\
    \ bc) * bc;\n        long abcbbcb = abcbbc * bc * bc;\n        long acbcbcbc =\
    \ acbcbcb * bc;\n        long abcbbcbc = abcbbcb * bc;\n        long acbcbcbc\
    \ = (acbcb * bc) * bc * bc;\n        long abcbbcbc = abcbbcb * bc * bc;\n    \
    \    long acbcbcbc = (acbcb * bc) * bc * bc * bc;\n        long abcbbcbc = abcbbcb\
    \ * bc * bc * bc;\n        long acbcbcbcb = (acbcb * bc) * bc * bc * bc * bc;\n\
    \        long abcbbcbcb = abcbbcb * bc * bc * bc * bc;\n        long acbcbcbcb\
    \ = (acbcb * bc) * bc * bc * bc * bc * bc;\n        long abcbbcbcb = (abcbbcb\
    \ * bc) * bc * bc * bc * bc * bc;\n        long acbcbcbcb = (acbcb * bc) * bc\
    \ * bc * bc * bc * bc * bc;\n        long abcbbcbcb = (abcbbcb * bc) * bc * bc\
    \ * bc * bc * bc * bc;\n        long acbcbcbcb = (acbcb * bc) * bc * bc * bc *\
    \ bc * bc * bc * bc;\n        long abcbbcbcb = (abcbbcb * bc) * bc * bc * bc *\
    \ bc * bc * bc * bc;\n        long acbcbcbcb = (acbcb * bc) * bc * bc * bc * bc\
    \ * bc * bc * bc * bc;\n        long abcbbcbcb = (abcbbcb", "        long ab =\
    \ a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long abc\
    \ = ab + bc;\n        long acb = ac - bc;\n        long abcb = abc + bc;\n   \
    \     long abac = abc - ac;\n        long abcab = abc + abc - ab;\n        long\
    \ abcabc = abcab + abc;\n        long abcabcb = abcabc + abcb;\n        long abcabcba\
    \ = abcabcb + abba;\n        long abcabcbac = abcabcab + abcabc;\n        long\
    \ abcabcbacb = abcabcbac + abcabcb;\n        long abcabcbacba = abcabcbacc + abcabcba;\n\
    \        long abcabcbacbac = abcabcbacbac + abcabcba;\n        long abcabcbacbacb\
    \ = abcabcbacbacc + abcabcba;\n        long abcabcbacbacba = abcabcbacbacbac +\
    \ abcabcba;\n        long abcabcbacbacbac = abcabcbacbacbac + abcabcba;\n    \
    \    long abcabcbacbacbaca = abcabcbacbacbacbac + abcabcba;\n        long abcabcbacbacbacab\
    \ = abcabcbacbacbacbac + abcabcba;\n        long abcabcbacbacbacabc = abcabcbacbacbacbac\
    \ + abcabcba;\n        long abcabcbacbacbacabcb = abcabcbacbacbacbac + abcabcba;\n\
    \        long abcabcbacbacbacabcbc = abcabcbacbacbacbac + abcabcba;\n        long\
    \ abcabcbacbacbacabcbcb = abcabcbacbacbacbac + abcabcba;\n        long abcabcbacbacbacabcbcbc\
    \ = abcabcbacbacbacbac + abcabcba;\n        long abcabcbacbacbacabcbcbcb = abcabcbacbacbacbac\
    \ + abcabcba;\n        long abcabcbacbacbacabcbcbcbc = abcabcbacbacbacbac + abcabcba;\n\
    \        long abcabcbacbacbacabcbcbcbcb = abcabcbacbacbacbac + abcabcba;\n   \
    \     long abcabcbacbacbacabcbcb", "        long ab = a - b;\n        long ac\
    \ = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n        long\
    \ abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc = ab * bc;\n\
    \        long abcbc = ab * bc * bc;\n        long abcbcb = abcbc * bc;\n     \
    \   long abcbcbc = abcbcb * bc;\n        long abcbcbcb = abcbcbc * bc;\n     \
    \   long abcbcbcbc = abcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbc * bc;\n\
    \        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long abcbcbcbcbcb = abcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n      \
    \  long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb",
  "        long d = b * b - 4 * a * c;\n        if (d > 0) {\n            long root\
    \ = (long) Math.Sqrt(d);\n            long t1 = (-b + root) / (2 * a);\n     \
    \       long t2 = (-b - root) / (2 * a);\n            if (t1 >= 0 && t1 <= 1 &&\
    \ t2 >= 0 && t2 <= 1) {\n                return true;\n            }\n       \
    \ }\n        return false;", "        long ab = a - b;\n        long ac = a -\
    \ c;\n        long bc = b - c;\n        long acb = ac * bc;\n        long abc\
    \ = ab * bc;\n        long acbc = acb * bc;\n        long abbc = abb * bc;\n \
    \       long acbcbc = acbcb * bc;\n        long abcbc = abcb * bc;\n        long\
    \ acbcbcb = acbcbcb * bc;\n        long abcbcbc = abcbcb * bc;\n        long acbcbcbc\
    \ = acbcbcbc * bc;\n        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcb\
    \ = acbcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbc\
    \ = acbcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n\
    \        long acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n\
    \        long acbcbcbcbcbcbcb = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n", "        long\
    \ d = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n  \
    \      }\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\
    \ {\n            return true;\n        }\n        return false;", "        long\
    \ side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2 = Math.Sqrt(a\
    \ * a - b * b + c * c);\n        long side3 = Math.Sqrt(a * a - b * b - c * c);\n\
    \        long side4 = Math.Sqrt(a * a + b * b + c * c);\n        long side5 =\
    \ Math.Sqrt(a * a + b * b - c * c);\n        long side6 = Math.Sqrt(a * a - b\
    \ * b + c * c);\n        long side7 = Math.Sqrt(a * a - b * b - c * c);\n    \
    \    long side8 = Math.Sqrt(a * a + b * b + c * c);\n        long side9 = Math.Sqrt(a\
    \ * a + b * b - c * c);\n        long side10 = Math.Sqrt(a * a - b * b + c * c);\n\
    \        long side11 = Math.Sqrt(a * a - b * b - c * c);\n        long side12\
    \ = Math.Sqrt(a * a + b * b + c * c);\n        long side13 = Math.Sqrt(a * a +\
    \ b * b - c * c);\n        long side14 = Math.Sqrt(a * a - b * b + c * c);\n \
    \       long side15 = Math.Sqrt(a * a - b * b - c * c);\n        long side16 =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long side17 = Math.Sqrt(a * a + b\
    \ * b - c * c);\n        long side18 = Math.Sqrt(a * a - b * b + c * c);\n   \
    \     long side19 = Math.Sqrt(a * a - b * b - c * c);\n        long side20 = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long side21 = Math.Sqrt(a * a + b * b - c * c);\n\
    \        long side22 = Math.Sqrt(a * a - b * b + c * c);\n        long side23\
    \ = Math.Sqrt(a * a - b * b - c * c);\n        long side24 = Math.Sqrt(a * a +\
    \ b * b + c * c);\n        long side25 = Math.Sqrt(a * a + b * b - c * c);\n \
    \       long side26 = Math.Sqrt(a * a - b * b + c * c);\n        long side27 =\
    \ Math.Sqrt(a * a - b * b - c * c);\n        long side28 = Math.Sqrt(a * a + b\
    \ * b + c * c);\n        long side29 = Math.Sqr", "        long d = b * b - 4\
    \ * a * c;\n        if (d < 0)\n            return false;\n        long root =\
    \ (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n        long\
    \ t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n            return true;\n\
    \        if (t1 > t2)\n            return false;\n        long t3 = t1 - t2;\n\
    \        if (t3 > 0)\n            return false;\n        long t4 = t1 + t2;\n\
    \        if (t4 > 0)\n            return false;\n        long t5 = t1 + t3;\n\
    \        if (t5 > 0)\n            return false;\n        long t6 = t1 + t4;\n\
    \        if (t6 > 0)\n            return false;\n        long t7 = t1 + t5;\n\
    \        if (t7 > 0)\n            return false;\n        long t8 = t1 + t6;\n\
    \        if (t8 > 0)\n            return false;\n        long t9 = t1 + t7;\n\
    \        if (t9 > 0)\n            return false;\n        long t10 = t1 + t8;\n\
    \        if (t10 > 0)\n            return false;\n        long t11 = t1 + t9;\n\
    \        if (t11 > 0)\n            return false;\n        long t12 = t1 + t10;\n\
    \        if (t12 > 0)\n            return false;\n        long t13 = t1 + t11;\n\
    \        if (t13 > 0)\n            return false;\n        long t14 = t1 + t12;\n\
    \        if (t14 > 0)\n            return false;\n        long t15 = t1 + t13;\n\
    \        if (t15 > 0)\n            return false;\n        long t16 = t1 + t14;\n\
    \        if (t16 > 0)\n            return false;\n        long t17 = t1 + t15;\n\
    \        if (t17 > 0)\n            return false;\n        long t18 = t1 + t16;\n\
    \        if (t18 > 0)\n            return false;\n        long t19 = t1 + t17;\n\
    \        if (t19 > 0)\n            return false;\n        long t20 = t1 + t18;\n\
    \        if (t20 > 0)\n            return false;\n        long t21 = t1 + t19;\n\
    \        if (t21 > 0)\n            return false;\n        long t22 = t1 + t20;\n\
    \        if (t22 > 0)\n            return false;\n        long t23 = t1 + t21;\n\
    \        if (t23 > 0)\n            return false;\n        long t24 = t1 + t22;\n\
    \        if (t24 > 0)\n            return false;\n        long t25 = t1 + t23;\n\
    \        if (t25 > 0)\n            return false;\n        long t26 = t1 + t24;\n\
    \        if (t26 > 0)\n            return false;\n        long t", "        long\
    \ d = b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n    \
    \    long root = d; //Math.Sqrt(d);\n        long t1 = (-b + root) / a;\n    \
    \    long t2 = (-b - root) / a;\n        long t3 = (-b + root) / a;\n        long\
    \ t4 = (-b - root) / a;\n        long t5 = (-b + root) / a;\n        long t6 =\
    \ (-b - root) / a;\n        long t7 = (-b + root) / a;\n        long t8 = (-b\
    \ - root) / a;\n        long t9 = (-b + root) / a;\n        long t10 = (-b - root)\
    \ / a;\n        long t11 = (-b + root) / a;\n        long t12 = (-b - root) /\
    \ a;\n        long t13 = (-b + root) / a;\n        long t14 = (-b - root) / a;\n\
    \        long t15 = (-b + root) / a;\n        long t16 = (-b - root) / a;\n  \
    \      long t17 = (-b + root) / a;\n        long t18 = (-b - root) / a;\n    \
    \    long t19 = (-b + root) / a;\n        long t20 = (-b - root) / a;\n      \
    \  long t21 = (-b + root) / a;\n        long t22 = (-b - root) / a;\n        long\
    \ t23 = (-b + root) / a;\n        long t24 = (-b - root) / a;\n        long t25\
    \ = (-b + root) / a;\n        long t26 = (-b - root) / a;\n        long t27 =\
    \ (-b + root) / a;\n        long t28 = (-b - root) / a;\n        long t29 = (-b\
    \ + root) / a;\n        long t30 = (-b - root) / a;\n        long t31 = (-b +\
    \ root) / a;\n        long t32 = (-b - root) / a;\n        long t33 = (-b + root)\
    \ / a;\n        long t34 = (-b - root) / a;\n        long t35 = (-b + root) /\
    \ a;\n        long t36 = (-b - root) / a;\n        long t37 = (-b + root) / a;\n\
    \        long t38 = (-b - root) / a;\n        long t39 = (-b + root) / a;\n  \
    \      long t40 = (-b - root) / a;\n        long t41 = (-b + root) / a;\n    \
    \    long t42 = (-b - root) / a;\n        long t43 = (-b + root) / a;\n      \
    \  long t44 = (-b - root", "        long d = b * b - 4 * a * c;\n        if (d\
    \ < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n      \
    \  long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n    \
    \    long rootC = (-b - rootD) / rootD;\n        if (rootA < rootB && rootA <\
    \ rootC)\n            return true;\n        if (rootB < rootC && rootB < rootA)\n\
    \            return true;\n        return false;", "        long d = b * b - 4\
    \ * a * c;\n        if (d < 0)\n            return false;\n        long root =\
    \ (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n        long\
    \ t2 = (-b - root) / (2 * a);\n        if (t1 < t2)\n            return true;\n\
    \        return false;", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long abc = ab + bc;\n        long acb = ac\
    \ - bc;\n        long abcc = abc * abc;\n        long acbc = acb * acb;\n    \
    \    long acbcc = acbc * acbc;\n        long acbccc = acbcc * acbcc;\n       \
    \ long acbcccb = acbccc * acbcc;\n        long acbcccbc = acbcccb * acbcc;\n \
    \       long acbcccbcb = acbcccbc * acbcc;\n        long acbcccbcbb = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbb = acbcccbcb * acbcc;\n     \
    \   long acbcccbcbcbb = acbcccbcb * acbcc;\n        long acbcccbcbcbbc = acbcccbcb\
    \ * acbcc;\n        long acbcccbcbcbbc = acbcccbcb * acbcc;\n        long acbcccbcbcbbcc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbcc = acbcccbcb * acbcc;\n   \
    \     long acbcccbcbcbbccc = acbcccbcb * acbcc;\n        long acbcccbcbcbbccc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbcccb = acbcccbcb * acbcc;\n \
    \       long acbcccbcbcbbcccb = acbcccbcb * acbcc;\n        long acbcccbcbcbbcccbc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbcccbc = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbcccbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbbcccbcb\
    \ = acbcccbcb * acbcc;\n", "        long d = b * b - 4 * a * c;\n        if (d\
    \ > 0) {\n            long e = (long) Math.Sqrt(d);\n            long f = (long)\
    \ Math.Sqrt(a + b + c);\n            long g = (long) Math.Sqrt(a + b - c);\n \
    \           long h = (long) Math.Sqrt(a + b + c - e);\n            long i = (long)\
    \ Math.Sqrt(a + b - c - e);\n            long j = (long) Math.Sqrt(a + b + c +\
    \ e);\n            long k = (long) Math.Sqrt(a + b - c + e);\n            long\
    \ l = (long) Math.Sqrt(a + b + c - e);\n            long m = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n            long n = (long) Math.Sqrt(a + b - c - e - f);\n\
    \            long o = (long) Math.Sqrt(a + b + c - e + f);\n            long p\
    \ = (long) Math.Sqrt(a + b - c + e + f);\n            long q = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n            long r = (long) Math.Sqrt(a + b - c - e - f);\n\
    \            long s = (long) Math.Sqrt(a + b + c + e + f);\n            long t\
    \ = (long) Math.Sqrt(a + b - c - e + f);\n            long u = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n            long v = (long) Math.Sqrt(a + b - c + e - f);\n\
    \            long w = (long) Math.Sqrt(a + b + c + e + f);\n            long x\
    \ = (long) Math.Sqrt(a + b - c - e + f);\n            long y = (long) Math.Sqrt(a\
    \ + b + c + e - f);\n            long z = (long) Math.Sqrt(a + b - c + e + f);\n\
    \            long A = (long) Math.Sqrt(a + b + c - e + f);\n            long B\
    \ = (long) Math.Sqrt(a + b - c + e - f);\n            long C = (long) Math.Sqrt(a\
    \ + b + c + e + f);\n            long D = (long) Math.Sqrt(a + b - c - e + f);\n\
    \            long E = (long) Math.Sqrt(a + b + c + e - f);\n            long F\
    \ = (long) Math.Sqrt(a + b - c - e - f", "        long d = b * b - 4 * a * c;\n\
    \        if (d < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n\
    \        long rootC = (-b - rootD) / rootD;\n        long rootAB = rootA * rootB;\n\
    \        long rootAC = rootA * rootC;\n        long rootBA = rootB * rootA;\n\
    \        long rootBC = rootB * rootC;\n        long rootCA = rootC * rootA;\n\
    \        long rootCC = rootC * rootC;\n        long rootABC = rootABC * rootB;\n\
    \        long rootACB = rootAC * rootB;\n        long rootACC = rootAC * rootC;\n\
    \        long rootBCA = rootBC * rootA;\n        long rootBCC = rootBC * rootC;\n\
    \        long rootCAB = rootCA * rootAB;\n        long rootCBA = rootCB * rootA;\n\
    \        long rootCBC = rootCB * rootC;\n        long rootCAC = rootC * rootAB;\n\
    \        long rootCBB = rootCB * rootB;\n        long rootCBA = rootCB * rootA;\n\
    \        long rootCAB = rootCA * rootAB;\n        long rootCAC = rootC * rootAB;\n\
    \        long rootCBC = rootCB * rootC;\n        long rootCAA = rootCA * rootA;\n\
    \        long rootCAB = rootCA * rootAB;\n        long rootCAC = rootC * rootAB;\n\
    \        long rootCBA = rootCB * rootA;\n        long rootCBC = rootCB * rootC;\n\
    \        long rootCAA = rootCA * rootA;\n        long rootCBB = rootCB * rootB;\n\
    \        long rootCBA = rootCB * rootA;\n        long rootCAB = rootCA * rootAB;\n\
    \        long rootCAC = rootC * rootAB;\n        long rootCBC = rootCB * rootC;\n\
    \        long rootCAA = rootCA * rootA;\n        long rootCBB = rootCB * rootB;\n\
    \        long rootCBA = rootCB * rootA;\n        long rootCAB = rootCA * rootAB;\n\
    \        long rootCAC = rootC * rootAB;\n        long rootCBC = rootCB * rootC;\n\
    \        long rootCAA = ", "        long ab = a + b;\n        long ac = a + c;\n\
    \        long bc = b + c;\n        long abc = ab + bc;\n        long acb = ac\
    \ + bc;\n        long abcb = abc + bc;\n        long acbc = acb + abc;\n     \
    \   long abcac = abcb + acb;\n        long acbca = acbc + abc;\n        long abcacb\
    \ = abcac + acb;\n        long acbcab = acbca  + abc;\n        long abcacbc =\
    \ abcacb + acb;\n        long acbcabc = acbcab + abc;\n        long abcacbca =\
    \ abcacbc + acb;\n        long acbcabcb = acbcabc + abc;\n        long abcacbcab\
    \ = abcacbca  + acb;\n        long acbcabcba = acbcabcb + abc;\n        long abcacbcabc\
    \ = abcacbcab + acb;\n        long acbcabcbac = acbcabcba  + abc;\n        long\
    \ abcacbcabcb = abcacbcabc + acb;\n        long acbcabcbacc = acbcabcbac  + abc;\n\
    \        long abcacbcabcba = abcacbcabcb + acb;\n        long acbcabcbaccb = acbcabcbacc\
    \  + abc;\n        long abcacbcabcbac = abcacbcabcba  + acb;\n        long acbcabcbaccbc\
    \ = acbcabcbaccb + abc;\n        long abcacbcabcbacc = abcacbcabcbac  + acb;\n\
    \        long acbcabcbaccbca = acbcabcbaccbc  + abc;\n        long abcacbcabcbaccb\
    \ = abcacbcabcbacc  + acb;\n        long acbcabcbaccbcaa = acbcabcbaccbca  + abc;\n\
    \        long abcacbcabcbaccbc = abcacbcabcbaccb + acb;\n        long acbcabcbaccbcaaa\
    \ = acbcabcbaccbcaa + abc;\n        long abcacbcabcbaccbca = abcacbcabcbaccbc\
    \ + acb;\n        long acbcabcbaccbca", "        long ab = a - b;\n        long\
    \ ac = a - c;\n        long bc = b - c;\n        long acbc = ac * bc;\n      \
    \  long abbc = ab * bc;\n        long acbcab = ac * bcab;\n        long abcab\
    \ = ab * bcab;\n        long acbcabc = ac * bcabc;\n        long abcabc = ab *\
    \ bcabc;\n        long acbcabcd = ac * bcabcd;\n        long abcabcd = ab * bcabcd;\n\
    \        long acbcabcd2 = ac * bcabcd2;\n        long abcabcd2 = ab * bcabcd2;\n\
    \        long acbcabcd3 = ac * bcabcd3;\n        long abcabcd3 = ab * bcabcd3;\n\
    \        long acbcabcd4 = ac * bcabcd4;\n        long abcabcd4 = ab * bcabcd4;\n\
    \        long acbcabcd5 = ac * bcabcd5;\n        long abcabcd5 = ab * bcabcd5;\n\
    \        long acbcabcd6 = ac * bcabcd6;\n        long abcabcd6 = ab * bcabcd6;\n\
    \        long acbcabcd7 = ac * bcabcd7;\n        long abcabcd7 = ab * bcabcd7;\n\
    \        long acbcabcd8 = ac * bcabcd8;\n        long abcabcd8 = ab * bcabcd8;\n\
    \        long acbcabcd9 = ac * bcabcd9;\n        long abcabcd9 = ab * bcabcd9;\n\
    \        long acbcabcd10 = ac * bcabcd10;\n        long abcabcd10 = ab * bcabcd10;\n\
    \        long acbcabcd11 = ac * bcabcd11;\n        long abcabcd11 = ab * bcabcd11;\n\
    \        long acbcabcd12 = ac * bcabcd12;\n        long abcabcd12 = ab * bcabcd12;\n\
    \        long acbcabcd13 = ac * bcabcd13;\n        long abcabcd13 = ab * bcabcd13;\n\
    \        long acbcabcd14 = ac * bcabcd14;\n        long abcabcd14 = ab * bcabcd14;\n\
    \        long acbcabcd15 = ac * bcabcd15;\n        long abcabcd15 = ab * bcabcd15;\n\
    \        long acbcabcd16 = ac * bcabcd16;\n        long abcabcd16 = ab * bcabcd16;\n\
    \        long acbcabcd17 = ac * bcabcd17;\n        long abcabcd17 = ab", "   \
    \     long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n \
    \       long acb = ac * b; // acb is ac times b\n        long abc = ab * c; //\
    \ abc is ab times c\n        long acbc = acb * c; // acbc is ac times bc times\
    \ c\n        long abcb = abc * b; // abcb is ab times bc times c\n        long\
    \ acbcab = acbc * ab; // acbcab is ac times bc times cab\n        long acbcabc\
    \ = acbcab * c; // acbcabc is ac times bc times cab times c\n        long acbcabcb\
    \ = acbcabc * b; // acbcabcb is ac times bc times cab times cb times c\n     \
    \   long acbcabcbc = acbcabcb * c; // acbcabcbc is ac times bc times cab times\
    \ cb times cb times c\n        long acbcabcbcb = acbcabcbc * b; // acbcabcbcb\
    \ is ac times bc times cab times cb times cb times cb times c\n        long acbcabcbcbc\
    \ = acbcabcbcb * c; // acbcabcbcbc is ac times bc times cab times cb times cb\
    \ times cb times cb times c\n        long acbcabcbcbcb = acbcabcbcbc * b; // acbcabcbcbcb\
    \ is ac times bc times cab times cb times cb times cb times cb times cb times\
    \ c\n        long acbcabcbcbcbb = acbcabcbcbcb * c; // acbcabcbcbcbc is ac times\
    \ bc times cab times cb times cb times cb times cb times cb times cb times c\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * c; // acbcabcbcbcbc is ac times bc\
    \ times cab times cb times cb times cb times cb times cb times cb times c\n  \
    \      long acbcabcbcbcbcb = acbcabcbcbcbc * b; // acbcabcbcbcbcb is ac times\
    \ bc times cab times cb times cb times cb times c", "        long d = b * b -\
    \ 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n     \
    \       long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 * a);\n\
    \            if (f > g) {\n                return true;\n            }\n     \
    \   }\n        return false;", "        long ab = a - b;\n        long ac = a\
    \ - c;\n        long bc = b - c;\n        long acb = ac * b; // acb = ac * bc\n\
    \        long abc = ab * c; // abc = ab * c\n        long acbc = acb * c; // acbc\
    \ = acb * c\n        long abcb = abc * b; // abcb = abc * b\n        long acbcb\
    \ = (acb * c) * b; // acbcb = acbcb * c\n        long abcbc = (abc * b) * c; //\
    \ abcbc = abcbc * b\n        long acbcbc = (acbcb * c) * b; // acbcbc = acbcbc\
    \ * c\n        long abcbcc = (abcbc * b) * c; // abcbcc = abcbcc * b\n       \
    \ long acbcbcc = (acbcbc * c) * b; // acbcbcc = acbcbcc * c\n        long abcbccc\
    \ = (abcbcc * b) * c; // abcbccc = abcbccc * b\n        long acbcbccc = (acbcbcc\
    \ * c) * b; // acbcbccc = acbcbccc * c\n        long abcbcccd = (abcbccc * b)\
    \ * c; // abcbcccd = abcbcccd * b\n        long acbcbcccd = (acbcbccc * c) * b;\
    \ // acbcbcccd = acbcbcccd * c\n        long abcbcccdd = (abcbcccd * b) * c; //\
    \ abcbcccd = abcbcccd * c\n        long acbcbcccdd = (acbcbccc * c) * b; // acbcbcccd\
    \ = acbcbcccd * c\n        long abcbcccde = (abcbcccd * b) * c; // abcbcccde =\
    \ abcbcccde * b\n        long acbcbcccde = (acbcbccc * c) * b; // acbcbcccde =\
    \ acbcbcccde * c\n        long abcbcccdef = (abcbcccde * b) * c; // abcbcccdef\
    \ = abcbcccdef * b\n        long acbcbcccdef = (acbcbcccd * c) * b; // acbcbcccdef\
    \ = acbcbcccdef * c\n        long abcbcccdef", "        long ab = a - b;\n   \
    \     long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long abbc = ab * bc;\n        long abcc\
    \ = ab * cc;\n        long abbbc = ab * bc * cc;\n        long abccc = ab * cc\
    \ * cc;\n        long abbbcc = ab * bc * cc * cc;\n        long abbbbbc = ab *\
    \ bc * bc * cc;\n        long abbbbbcc = ab * bc * cc * cc * cc;\n        long\
    \ abbbbbbbc = ab * bc * bc * cc * cc * cc;\n        long abbbbbbbcc = ab * bc\
    \ * cc * cc * cc * cc;\n        long abbbbbbbbc = ab * bc * bc * cc * cc * cc\
    \ * cc;\n        long abbbbbbbbcc = ab * bc * cc * cc * cc * cc * cc;\n      \
    \  long abbbbbbbbcbc = ab * bc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcc\
    \ = ab * bc * cc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcbc =\
    \ ab * bc * cc * cc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcbcc\
    \ = ab * bc * cc * cc * cc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcbcbc\
    \ = ab * bc * cc * cc * cc * cc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcbcbcc\
    \ = ab * bc * cc * cc * cc * cc * cc * cc * cc * cc * cc * cc * cc;\n        long\
    \ abbbbbbbbcbcbcbcbc = ab * bc * cc * cc * cc * cc * cc * cc * cc * cc * cc *\
    \ cc * cc;\n        long abbbbbbbbcbcbcbcbcc = ab * bc * cc * cc * cc * cc * cc\
    \ * cc * cc * cc * cc * cc * cc * cc;\n        long abbbbbbbbcbcbcbcbcbc = ab\
    \ * bc * cc * cc * cc * cc * cc * cc * cc * ", "        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0) {\n            return false;\n        }\n        long\
    \ root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 * a);\n     \
    \   long t2 = (-b - root) / (2 * a);\n        if (t1 >= 0 && t1 <= 1) {\n    \
    \        return true;\n        }\n        if (t2 >= 0 && t2 <= 1) {\n        \
    \    return true;\n        }\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side5 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side9\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side10 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n  \
    \      long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long\
    \ side14 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side15 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side19 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side20 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side21 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side22 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side26 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side27 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      ", "        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n\
    \        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long ", "        long ab = a + b;\n        long\
    \ ac = a + c;\n        long bc = b + c;\n        long abc = ab + bc;\n       \
    \ long acb = ac + bc;\n        long abcb = abc + bc;\n        long acbc = acb\
    \ + abc;\n        long abcac = abcc + abc;\n        long abcacb = abcac + abcb;\n\
    \        long abcacbc = abcacb + abc;\n        long abcacbcc = abcacbc + abc;\n\
    \        long abcacbccb = abcacbcc+ abc;\n        long abcacbccbc = abcacbccb\
    \ + abc;\n        long abcacbccbcd = abcacbccbc + abc;\n        long abcacbccbcdd\
    \ = abcacbccbcd+ abc;\n        long abcacbccbcdde = abcacbccbcdde+ abc;\n    \
    \    long abcacbccbcddef = abcacbccbcddef+ abc;\n        long abcacbccbcddefg\
    \ = abcacbccbcddefg+ abc;\n        long abcacbccbcddefgh = abcacbccbcddefgh+ abc;\n\
    \        long abcacbccbcddefghi = abcacbccbcddefghi+ abc;\n        long abcacbccbcddefghij\
    \ = abcacbccbcddefghij+ abc;\n        long abcacbccbcddefghijk = abcacbccbcddefghijk+\
    \ abc;\n        long abcacbccbcddefghijkl = abcacbccbcddefghijkl+ abc;\n     \
    \   long abcacbccbcddefghijklm = abcacbccbcddefghijklm+ abc;\n        long abcacbccbcddefghijklmn\
    \ = abcacbccbcddefghijkln+ abc;\n        long abcacbccbcddefghijklmn= abcacbccbcddefghijklmn+\
    \ abc;\n        long abcacbccbcddefghijklmn= abcacbccbcddefghijklmn+ abc;\n  \
    \      long abcacbccbcddefghijklmn= abcacbccbcddefghijklmn+ abc;\n        long\
    \ abc", "        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbb = acb * ab;\n\
    \        long abbb = abb * ab;\n        long acbba = acb * ba;\n        long abbba\
    \ = abb * ba;\n        long acbbc = acb * bc;\n        long abbbc = abb * bc;\n\
    \        long acbbac = acb * bac\n        long abbbac = abb * bac\n        long\
    \ acbbca = acb * bca\n        long abbbca = abb * bca\n        long acbbacb =\
    \ acb * bcb\n        long abbbacb = abb * bcb\n        long acbbacba = acb * bba\n\
    \        long abbbacba = abb * bba\n        long acbbacbc = acb * bca\n      \
    \  long abbbacbc = abb * bca\n        long acbbacbca = acb * bcab\n        long\
    \ abbbacbca = abb * bcab\n        long acbbacbcb = acb * bcbc\n        long abbbacbcb\
    \ = abb * bcbc\n        long acbbacbcab = acb * bcabc\n        long abbbacbcab\
    \ = abb * bcabc\n        long acbbacbcba = acb * bcabb\n        long abbbacbcba\
    \ = abb * bcabb\n        long acbbacbcabc = acb * bcabac\n        long abbbacbcabc\
    \ = abb * bcabac\n        long acbbacbcabba = acb * bcabab\n        long abbbacbcabba\
    \ = abb * bcabab\n        long acbbacbcabbc = acb * bcabbc\n        long abbbacbcabbc\
    \ = abb * bcabbc\n        long acbbacbcabbca = acb * bcabbca\n        long abbbacbcabbca\
    \ = abb * bcabbca\n        long acbbacbcabbbc = ac", "        long ab = a - b;\n\
    \        long ac = a - c;\n        long bc = b - c;\n        long acbc = ac -\
    \ bc;\n        long abbc = ab - bc;\n        long acbcab = ac - bc - ab;\n   \
    \     long abcab = ab - c - ab;\n        long acbcabbc = ac - bc - ab - c;\n \
    \       long abcabbc = ab - c - ab - c;\n        long acbcabbcab = ac - bc - ab\
    \ - c - ab;\n        long abcabbcabc = ab - c - ab - c - ab;\n        long acbcabbcabcb\
    \ = ac - bc - ab - c - ab - c;\n        long abcabbcabcba = ab - c - ab - c -\
    \ ab - c;\n        long acbcabbcabcab = ac - bc - ab - c - ab - c - ab;\n    \
    \    long abcabbcabcabc = ab - c - ab - c - ab - c - ab;\n        long acbcabbcabcabb\
    \ = ac - bc - ab - c - ab - c - ab - c;\n        long abcabbcabcabba = ab - c\
    \ - ab - c - ab - c - ab - c;\n        long acbcabbcabcabbc = ac - bc - ab - c\
    \ - ab - c - ab - c - ab;\n        long abcabbcabcabbca = ab - c - ab - c - ab\
    \ - c - ab - c - ab - c;\n        long acbcabbcabcabbcab = ac - bc - ab - c -\
    \ ab - c - ab - c - ab - c - ab;\n        long abcabbcabcabbcabc = ab - c - ab\
    \ - c - ab - c - ab - c - ab - c - ab - c;\n        long acbcabbcabcabbcabcab\
    \ = ac - bc - ab - c - ab - c - ab - c - ab - c - ab - c - ab;\n        long abcabbcabcabbcabcabc\
    \ = ab - c - ab - c - ab - c - ab - c - ab - c - ab - c - ab - c - ab;\n     \
    \   long acbcabbcabcabbcabcab = ac - bc - ab - c - ab - c - ab - c - ab - c -\
    \ ab - c - ab - c - ab - c;\n        long abcabbcabcabbcabcabba = ab - c - ab\
    \ - c - ab - c - ab - c - ab - c - ab - c - ab - c - ab - c - ab - c;\n", "  \
    \      long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long abc = ab + bc;\n        long acb = ac - bc;\n        long abcb =\
    \ abc * bc;\n        long acbc = acb * bc;\n        long acbca = acb * ca;\n \
    \       long acbcaa = acb * caa;\n        long acbcab = acb * cab;\n        long\
    \ acbcaba = acb * caba;\n        long acbcabab = acb * cabab;\n        long acbcababc\
    \ = acb * cababc;\n        long acbcababcd = acb * cababcd;\n        long acbcababcda\
    \ = acb * cababcda;\n        long acbcababcdbc = acb * cababcdbc;\n        long\
    \ acbcababcdbca = acb * cababcdbca;\n        long acbcababcdbcab = acb * cababcdbcab;\n\
    \        long acbcababcdbcaba = acb * cababcdbcaba;\n        long acbcababcdbcabab\
    \ = acb * cababcdbcabab;\n        long acbcababcdbcababc = acb * cababcdbcababc;\n\
    \        long acbcababcdbcababcd = acb * cababcdbcababcd;\n        long acbcababcdbcababcda\
    \ = acb * cababcdbcababcda;\n        long acbcababcdbcababcdbc = acb * cababcdbcababcdbc;\n\
    \        long acbcababcdbcababcdbca = acb * cababcdbcababcdbca;\n        long\
    \ acbcababcdbcababcdbcab = acb * cababcdbcababcdbcab;\n        long acbcababcdbcababcdbcaba\
    \ = acb * cababcdbcababcdbcaba;\n        long acbcababcdbcababcdbcabab = acb *\
    \ cababcdbcababcdbcabab;\n        long acbcababcdbcababcdbcababc = acb * cababcdbcababcdbcababc;\n\
    \        long acbcababcdbcababcdbcababcd = acb * cababcdbcababcdbcababcd;\n  \
    \      long acbcababcdbcababcdbcababcda = acb * cababcdbcababc", "        long\
    \ d = b * b - 4 * a * c;\n        if (d >= 0) {\n            long t1 = (-b + Math.Sqrt(d))\
    \ / (2 * a);\n            long t2 = (-b - Math.Sqrt(d)) / (2 * a);\n         \
    \   if (t1 >= 0 && t2 >= 0) {\n                return true;\n            }\n \
    \       }\n        return false;", "        long d = b * b - 4 * a * c;\n    \
    \    if (d < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n\
    \        long rootC = (-b - rootD) / rootD;\n        if (rootA * rootA + rootB\
    \ * rootB == rootC * rootC)\n            return true;\n        return false;",
  "        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n\
    \        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 *\
    \ a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n     \
    \       return true;\n        return false;", "        long d = b * b - 4 * a\
    \ * c;\n        if (d < 0)\n            return false;\n        long rootD = Math.Sqrt(d);\n\
    \        long rootA = -b / (2 * a);\n        long rootB = (-b + rootD) / (2 *\
    \ a);\n        long rootC = (-b - rootD) / (2 * a);\n        if (rootA < rootB\
    \ && rootA < rootC)\n            return true;\n        if (rootB < rootC)\n  \
    \          return true;\n        return false;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long d = b * b - 4 * a * c;\n        if (d <\
    \ 0) {\n            return false;\n        }\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        if (t1 == t2) {\n            return true;\n        }\n      \
    \  return false;", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbb\
    \ = acb * ab;\n        long abbb = abb * ab;\n        long acbba = acb * ba;\n\
    \        long abbba = abb * ba;\n        long acbbc = acb * bc;\n        long\
    \ abbbc = abb * bc;\n        long acbbac = acb * bac;\n        long abbbac = abb\
    \ * bac;\n        long acbbca = acb * bca;\n        long abbbca = abb * bca;\n\
    \        long acbbacb = acb * bcb;\n        long abbbacb = abb * bcb;\n      \
    \  long acbbcab = acb * cab;\n        long abbbcab = abb * cab;\n        long\
    \ acbbacbb = acb * bcb;\n        long abbbacbb = abb * bcb;\n        long acbbcabc\
    \ = acb * cabc;\n        long abbbcabc = abb * cabc;\n        long acbbacbbc =\
    \ acb * bcbc;\n        long abbbacbbc = abb * bcbc;\n        long acbbcabcb =\
    \ acb * cabcb;\n        long abbbcabcb = abb * cabcb;\n        long acbbacbbcb\
    \ = acb * bcbcb;\n        long abbbacbbcb = abb * bcbcb;\n        long acbbcabcbb\
    \ = acb * cabcbb;\n        long abbbcabcbb = abb * cabcbb;\n        long acbbacbbcbb\
    \ = acb * bcbcbb;\n        long abbbacbbcbb = abb * bcbcbb;\n        long acbbcabcbba\
    \ = acb * cabcbba;\n        long abbbcabcbba = abb * cabcbba;\n        long acbbacbbcbba\
    \ = acb * bcbcbba;\n        long abbbacbbcbba = abb * bcbcbba;\n        long acbbcabcbbc\
    \ = acb * cabcbbc", "        long ab = a - b;\n        long ac = a - c;\n    \
    \    long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc\
    \ = acbb * bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc\
    \ * bc;\n        long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc *\
    \ bc;\n        long abbbbbc = abbbbbc * bc;\n        long acbbbbc = acbbbbc *\
    \ bc;\n        long abbbbbbc = abbbbbbc * bc;\n        long acbbbbbc = acbbbbbc\
    \ * bc;\n        long abbbbbbbc = abbbbbbbc * bc;\n        long acbbbbbbc = acbbbbbbc\
    \ * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long acbbbbbbbc =\
    \ acbbbbbbbc * bc;\n        long abbbbbbbbbc = abbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbc = acbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc *\
    \ bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc\
    \ = abbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc = acbbbbbbbbbbc * bc;\n  \
    \      long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbbbbbc = acbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc", "     \
    \   long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n   \
    \     long acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb\
    \ * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb * bc;\n    \
    \    long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n        long\
    \ abbbbc = abbbbc * bc;\n        long acbbbcbc = acbbbcb * bc;\n        long abbbbcbc\
    \ = abbbbcb * bc;\n        long acbbbcbcd = acbbbcbc * bc;\n        long abbbbcbcd\
    \ = abbbbcbc * bc;\n        long acbbbcbcde = acbbbcbcd * bc;\n        long abbbbcbcde\
    \ = abbbbcbcd * bc;\n        long acbbbcbcdef = acbbbcbcde * bc;\n        long\
    \ abbbbcbcdef = abbbbcbcde * bc;\n        long acbbbcbcdefg = acbbbcbcdef * bc;\n\
    \        long abbbbcbcdefg = abbbbcbcdef * bc;\n        long acbbbcbcdefgh = acbbbcbcdefg\
    \ * bc;\n        long abbbbcbcdefgh = abbbbcbcdefg * bc;\n        long acbbbcbcdefghi\
    \ = acbbbcbcdefgh * bc;\n        long abbbbcbcdefghi = abbbbcbcdefgh * bc;\n \
    \       long acbbbcbcdefghij = acbbbcbcdefghi * bc;\n        long abbbbcbcdefghij\
    \ = abbbbcbcdefghi * bc;\n        long acbbbcbcdefghijk = acbbbcbcdefghij * bc;\n\
    \        long abbbbcbcdefghijk = abbbbcbcdefghij * bc;\n        long acbbbcbcdefghijkl\
    \ = acbbbcbcdefghijk * bc;\n        long abbbbcbcdefghijkl = abbbbcbcdefghijk\
    \ * bc;\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab\
    \ * bc;\n        long acbc = acb * bc;\n        long acbca = acbc * ca;\n    \
    \    long abca = abc * ca;\n        long abcab = abca * ca;\n        long abcabc\
    \ = abcab * ca;\n        long abcabca = abcabc * ca;\n        long abcabcab =\
    \ abcabca * ca;\n        long abcabcabc = abcabcab * ca;\n        long abcabcabca\
    \ = abcabcabc * ca;\n        long abcabcabcab = abcabcabca * ca;\n        long\
    \ abcabcabcabc = abcabcabcab * ca;\n        long abcabcabcabca = abcabcabcabc\
    \ * ca;\n        long abcabcabcabcab = abcabcabcabca * ca;\n        long abcabcabcabcabc\
    \ = abcabcabcabcab * ca;\n        long abcabcabcabcabca = abcabcabcabcabc * ca;\n\
    \        long abcabcabcabcabcab = abcabcabcabcabca * ca;\n        long abcabcabcabcabcabc\
    \ = abcabcabcabcabcab * ca;\n        long abcabcabcabcabcabca = abcabcabcabcabcabc\
    \ * ca;\n        long abcabcabcabcabcabcab = abcabcabcabcabcabca * ca;\n     \
    \   long abcabcabcabcabcabcabc = abcabcabcabcabcabcab * ca;\n        long abcabcabcabcabcabcabca\
    \ = abcabcabcabcabcabcabc * ca;\n        long abcabcabcabcabcabcabcab = abcabcabcabcabcabcabca\
    \ * ca;\n        long abcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcab * ca;\n\
    \        long abcabcabcabcabcabcabcabca = abcabcabcabcabcabcabcabc * ca;\n   \
    \     long abcabcabcabcabcabcabcabcab = abcabcabcabcabcabcabcabca * ca;\n    \
    \    long abcabcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcabcab * ca;\n   \
    \     long abcabcabcabcabcabcabcabcabcab = abcabcabcabcab", "        long side1\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(c, 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n   \
    \     long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side12 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side13 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side18 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side19 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side24 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side25 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side30 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        ", "        long ab = a\
    \ - b;\n        long ac = c - a;\n        long bc = b - c;\n        long acb =\
    \ ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n     \
    \   long acbca = acbc * ca;\n        long acbcab = acbca * ca;\n        long acbcabc\
    \ = acbcab * ca;\n        long acbcabca = acbcabc * ca;\n        long acbcabcab\
    \ = acbcabca * ca;\n        long acbcabcabc = acbcabcab * ca;\n        long acbcabcabca\
    \ = acbcabcabc * ca;\n        long acbcabcabcab = acbcabcabca * ca;\n        long\
    \ acbcabcabcabc = acbcabcabcab * ca;\n        long acbcabcabcabca = acbcabcabcabc\
    \ * ca;\n        long acbcabcabcabcab = acbcabcabcabca * ca;\n        long acbcabcabcabcabc\
    \ = acbcabcabcabcab * ca;\n        long acbcabcabcabcabca = acbcabcabcabcabc *\
    \ ca;\n        long acbcabcabcabcabcab = acbcabcabcabcabca * ca;\n        long\
    \ acbcabcabcabcabcabc = acbcabcabcabcabcab * ca;\n        long acbcabcabcabcabcabca\
    \ = acbcabcabcabcabcabc * ca;\n        long acbcabcabcabcabcabcab = acbcabcabcabcabcabca\
    \ * ca;\n        long acbcabcabcabcabcabcabc = acbcabcabcabcabcabcab * ca;\n \
    \       long acbcabcabcabcabcabcabca = acbcabcabcabcabcabcabc * ca;\n        long\
    \ acbcabcabcabcabcabcabcab = acbcabcabcabcabcabcabca * ca;\n        long acbcabcabcabcabcabcabcabc\
    \ = acbcabcabcabcabcabcabcab * ca;\n        long acbcabcabcabcabcabcabcabca =\
    \ acbcabcabcabcabcabcabcabc * ca;\n        long acbcabcabcabcabcabcabcabcab =\
    \ acbcabcabcabcabcabcabcabcabca * ca;\n        long acbcabcabcabcab", "      \
    \  long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n\
    \        }\n        long e = Math.Sqrt(d);\n        long f = (b + e) / (2 * a);\n\
    \        long g = (c + e) / (2 * a);\n        return f == g;", "        long d\
    \ = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n    \
    \    }\n        long rootD = Math.Sqrt(d);\n        long rootA = -b / (2 * a);\n\
    \        long rootB = (-b + rootD) / (2 * a);\n        long rootC = (-b - rootD)\
    \ / (2 * a);\n        if (rootA * rootA + rootB * rootB == rootC * rootC) {\n\
    \            return true;\n        }\n        return false;", "        long ab\
    \ = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long acbcab = acbc * abc;\n        long acbcabc = acbcab * abc;\n      \
    \  long acbcabcb = acbcabcb * abc;\n        long acbcabcbc = acbcabcbc * abc;\n\
    \        long acbcabcbcd = acbcabcbcd * abc;\n        long acbcabcbcde = acbcabcbcde\
    \ * abc;\n        long acbcabcbcdef = acbcabcbcdef * abc;\n        long acbcabcbcdefg\
    \ = acbcabcbcdefg * abc;\n        long acbcabcbcdefgh = acbcabcbcdefgh * abc;\n\
    \        long acbcabcbcdefghi = acbcabcbcdefghi * abc;\n        long acbcabcbcdefghij\
    \ = acbcabcbcdefghij * abc;\n        long acbcabcbcdefghijk = acbcabcbcdefghijk\
    \ * abc;\n        long acbcabcbcdefghijkl = acbcabcbcdefghijkl * abc;\n      \
    \  long acbcabcbcdefghijkll = acbcabcbcdefghijkll * abc;\n        long acbcabcbcdefghijkllm\
    \ = acbcabcbcdefghijkllm * abc;\n        long acbcabcbcdefghijkllmm = acbcabcbcdefghijkllmm\
    \ * abc;\n        long acbcabcbcdefghijkllmmn = acbcabcbcdefghijkllmnn * abc;\n\
    \        long acbcabcbcdefghijkllmnn = acbcabcbcdefghijkllmnn * abc;\n       \
    \ long acbcabcbcdefghijkllmnnn = acbcabcbcdefghijkllmnnn * abc;\n        long\
    \ acbcabcbcdefghijkllmnnnn = acbcabcbcdefghijkllmnnnn * abc;\n        long acbcabcbcdefgh",
  "        long d = b * b - 4 * a * c;\n        if (d < 0) {\n            return false;\n\
    \        }\n        long rootD = Math.Sqrt(d);\n        long rootA = -b / (2 *\
    \ a);\n        long rootB = (-b + rootD) / (2 * a);\n        long rootC = (-b\
    \ - rootD) / (2 * a);\n        long rootAB = Math.Sqrt(rootA * rootA + rootB *\
    \ rootB);\n        long rootAC = Math.Sqrt(rootA * rootA + rootC * rootC);\n \
    \       return rootAB == rootAC;", "        long side1 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n     \
    \   long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c, 2));\n\
    \        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2) + Math.Pow(c,\
    \ 2));\n        long ", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long abc = ab + bc;\n        long acb = ac\
    \ - bc;\n        long abcb = abc * bc;\n        long acbc = acb * c;\n       \
    \ long acbca = acb * ca;\n        long acbcbc = acb * cb;\n        long acbcab\
    \ = acb * cab;\n        long acbcbca = acb * cbca;\n        long acbcbcbc = acb\
    \ * cbcb;\n        long acbcbcab = acb * cbcab;\n        long acbcbcbca = acb\
    \ * cbcbca;\n        long acbcbcbcbc = acb * cbcbcb;\n        long acbcbcbcab\
    \ = acb * cbcbcab;\n        long acbcbcbcbca = acb * cbcbcbca;\n        long acbcbcbcbcbc\
    \ = acb * cbcbcbcb;\n        long acbcbcbcbcab = acb * cbcbcbcab;\n        long\
    \ acbcbcbcbcbca = acb * cbcbcbcbca;\n        long acbcbcbcbcbcbc = acb * cbcbcbcbcb;\n\
    \        long acbcbcbcbcbcab = acb * cbcbcbcbcab;\n        long acbcbcbcbcbcbca\
    \ = acb * cbcbcbcbcbca;\n        long acbcbcbcbcbcbcbc = acb * cbcbcbcbcbcbc;\n\
    \        long acbcbcbcbcbcbcab = acb * cbcbcbcbcbcab;\n        long acbcbcbcbcbcbcbca\
    \ = acb * cbcbcbcbcbcbca;\n        long acbcbcbcbcbcbcbcbc = acb * cbcbcbcbcbcbcbc;\n\
    \        long acbcbcbcbcbcbcbcab = acb * cbcbcbcbcbcbcab;\n        long acbcbcbcbcbcbcbcbca\
    \ = acb * cbcbcbcbcbcbcbca;\n        long acbcbcbcbcbcbcbcbcbc = acb * cbcbcbcbcbcbcbcbc;\n\
    \        long acbcbcbcbcbcbcbcbcab = acb * cbcbcbcbcbcbcb"]
stop_tokens:
- "\n    }\n"
