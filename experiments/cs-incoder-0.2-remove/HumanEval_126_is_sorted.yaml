name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    public static bool IsSorted(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item)) return false;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] > curr) {\n                isSorted = false;\n       \
    \         break;\n            }\n            prev = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n \
    \               isSorted = false;\n                break;\n            }\n   \
    \         if (lst[i] == lastValue)\n                continue;\n            isSorted\
    \ = true;\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long prev = 0;\n        bool sorted = false;\n\
    \        foreach (long num in lst) {\n            if (prev > num) {\n        \
    \        sorted = true;\n                break;\n            }\n            prev\
    \ = num;\n        }\n        return sorted;", "        long prev = 0;\n      \
    \  long curr = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n      \
    \      if (lst[i] < curr) {\n                return false;\n            }\n  \
    \          if (lst[i] == prev) {\n                return false;\n            }\n\
    \            prev = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                continue;\n            }\n            isSorted = true;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] > lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       foreach (long n in lst) {\n            if (prev > n) {\n             \
    \   return false;\n            }\n            prev = n;\n        }\n        return\
    \ true;", "        long lastValue = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == lastValue) {\n                continue;\n         \
    \   }\n            isSorted = true;\n            lastValue = lst[i];\n       \
    \ }\n        return isSorted;", "        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue) {\n                isSorted = false;\n            \
    \    break;\n            }\n            lastValue = lst[i];\n        }\n     \
    \   return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n            curr = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        var\
    \ hash = new HashSet<long>(lst);\n        if (hash.Count > 1)\n            return\
    \ false;\n        var min = lst.Min();\n        var max = lst.Max();\n       \
    \ return min <= max;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            if (lst[i] == last)\
    \ {\n                isSorted = true;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        long\
    \ prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = curr;\n            curr = lst[i];\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        long curr = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < curr) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == prev) {\n                isSorted =\
    \ false;\n                break;\n            }\n            prev = lst[i];\n\
    \        }\n        return isSorted;", "        long lastValue = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                continue;\n            }\n            isSorted = true;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        long\
    \ prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          if (lst[i] == prev) {\n                isSorted = false;\n        \
    \        break;\n            }\n            prev = lst[i];\n        }\n      \
    \  return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        if (lst.Count < 2) return true;\n        var\
    \ hashSet = new HashSet<long>(lst);\n        return lst.SequenceEqual(hashSet);",
  "        long lastValue = lst[0];\n        bool isSorted = false;\n        foreach\
    \ (long value in lst) {\n            if (value > lastValue) {\n              \
    \  isSorted = false;\n                break;\n            }\n            if (value\
    \ == lastValue) {\n                isSorted = true;\n                break;\n\
    \            }\n            lastValue = value;\n        }\n        return isSorted;",
  "        long lastValue = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] == lastValue) {\n                isSorted = true;\n          \
    \      break;\n            }\n            lastValue = lst[i];\n        }\n   \
    \     return isSorted;", "        long prev = 0;\n        long current = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < current) {\n                isSorted = false;\n    \
    \            break;\n            }\n            if (lst[i] == current) {\n   \
    \             if (prev == current) {\n                    isSorted = false;\n\
    \                    break;\n                }\n                else {\n     \
    \               isSorted = true;\n                    break;\n               \
    \ }\n            }\n            else {\n                isSorted = false;\n  \
    \              break;\n            }\n            prev = current;\n          \
    \  current = lst[i];\n        }\n        return isSorted;", "        long prev\
    \ = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] > curr) {\n                isSorted = false;\n               \
    \ break;\n            }\n            prev = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ last = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] > last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            isSorted = true;\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        var hash = new HashSet<long>();\n    \
    \    foreach (var item in lst) {\n            if (hash.Add(item)) {\n        \
    \        return false;\n            }\n        }\n        return true;", "   \
    \     long prev = 0;\n        foreach (long i in lst) {\n            if (i ==\
    \ prev) {\n                return false;\n            }\n            prev = i;\n\
    \        }\n        return true;", "        long prev = 0;\n        bool sorted\
    \ = false;\n        foreach (long num in lst) {\n            if (num < prev) {\n\
    \                sorted = false;\n                break;\n            }\n    \
    \        prev = num;\n        }\n        return sorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;", "    \
    \    long prev = 0;\n        foreach (long num in lst) {\n            if (num\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ num;\n        }\n        return true;", "        if (lst.Count < 2)\n      \
    \      return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue) {\n                isSorted = false;\n           \
    \     break;\n            }\n            if (lst[i] == lastValue) {\n        \
    \        isSorted = true;\n                break;\n            }\n           \
    \ lastValue = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue) {\n                isSorted = false;\n           \
    \     break;\n            }\n            if (lst[i] == lastValue) {\n        \
    \        isSorted = true;\n                break;\n            }\n           \
    \ lastValue = lst[i];\n        }\n        return isSorted;", "        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2) return true;\n        var hash = new HashSet<long>(lst);\n\
    \        return lst.All(x => hash.Add(x));", "        if (lst.Count < 2)\n   \
    \         return true;\n        long prev = 0;\n        long curr = lst[0];\n\
    \        foreach (long num in lst) {\n            if (num > curr) {\n        \
    \        return false;\n            }\n            if (num == prev) {\n      \
    \          return false;\n            }\n            prev = num;\n           \
    \ curr = num;\n        }\n        return true;", "        long lastNum = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastNum) {\n                isSorted = false;\n    \
    \            break;\n            }\n            else if (lst[i] > lastNum) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastNum = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       long prev = 0;\n        foreach (long num in lst) {\n            if (num\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ num;\n        }\n        return true;", "        long last = 0;\n        bool\
    \ sorted = false;\n        foreach (long num in lst) {\n            if (num <\
    \ last) {\n                sorted = false;\n                break;\n         \
    \   }\n            last = num;\n        }\n        return sorted;", "        long\
    \ prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = lst[i];\n        }\n        return isSorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == lastValue) {\n                continue;\n            }\n            isSorted\
    \ = true;\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long lastNum = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastNum) {\n                isSorted = false;\n                break;\n  \
    \          }\n            if (lst[i] == lastNum) {\n                continue;\n\
    \            }\n            isSorted = true;\n            lastNum = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        long prev = 0;\n        long curr = lst[0];\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < curr) {\n                return\
    \ false;\n            }\n            if (lst[i] == prev) {\n                return\
    \ false;\n            }\n            prev = lst[i];\n        }\n        return\
    \ true;", "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > curr) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == prev) {\n                isSorted = false;\n\
    \                break;\n            }\n            prev = lst[i];\n        }\n\
    \        return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                continue;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        long prev\
    \ = 0;\n        long curr = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] == prev) {\n                isSorted = false;\n              \
    \  break;\n            }\n            prev = lst[i];\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        long curr = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < curr) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == prev) {\n                isSorted =\
    \ false;\n                break;\n            }\n            prev = lst[i];\n\
    \        }\n        return isSorted;", "        long lastValue = lst[0];\n   \
    \     bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < lastValue) {\n                isSorted = false;\n   \
    \             break;\n            }\n            lastValue = lst[i];\n       \
    \ }\n        return isSorted;", "        if (lst.Count < 2) return true;\n   \
    \     long last = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == last) {\n                isSorted = true;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       long prev = 0;\n        long curr = lst[0];\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < curr) {\n                return\
    \ false;\n            }\n            prev = curr;\n            curr = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        if (lst.Count > 2 && lst.Distinct().Count() > 1) return false;\n    \
    \    long last = lst[0];\n        long lastCount = 0;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                return\
    \ false;\n            }\n            if (lst[i] == last) {\n                lastCount++;\n\
    \            } else {\n                last = lst[i];\n                lastCount\
    \ = 1;\n            }\n        }\n        return lastCount == lst.Count;", " \
    \       if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue)\n\
    \                continue;\n            isSorted = true;\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        long prev = 0;\n        foreach (long\
    \ num in lst) {\n            if (num < prev) {\n                return false;\n\
    \            }\n            prev = num;\n        }\n        return true;", " \
    \       long lastValue = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    lastValue = lst[i];\n        }\n        return isSorted;", "        long\
    \ prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          if (lst[i] == curr) {\n                if (prev == lst[i - 1]) {\n\
    \                    isSorted = false;\n                    break;\n         \
    \       }\n            }\n            prev = curr;\n            curr = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        bool isSorted = true;\n\
    \        foreach (long n in lst) {\n            if (prev > n) {\n            \
    \    isSorted = false;\n                break;\n            }\n            prev\
    \ = n;\n        }\n        return isSorted;", "        if (lst.Count < 2)\n  \
    \          return true;\n        long last = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool sorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   sorted = false;\n                break;\n            }\n            sorted\
    \ = true;\n            last = lst[i];\n        }\n        return sorted;", " \
    \       long lastNum = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastNum) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  lastNum = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        var hash = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (hash.Contains(item)) return false;\n            hash.Add(item);\n\
    \        }\n        return true;", "        long prev = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > prev) {\n                return false;\n  \
    \          }\n            prev = i;\n        }\n        return true;", "     \
    \   long prev = 0;\n        long curr = lst[0];\n        bool sorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev)\
    \ {\n                return false;\n            }\n            if (lst[i] > curr)\
    \ {\n                sorted = true;\n            }\n            prev = lst[i];\n\
    \            curr = lst[i];\n        }\n        return sorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                continue;\n            }\n            isSorted = true;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        long\
    \ prev = 0;\n        long curr = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                return false;\n  \
    \          }\n            if (lst[i] == prev) {\n                return false;\n\
    \            }\n            prev = lst[i];\n        }\n        return true;",
  "        long lastValue = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] == lastValue) {\n                isSorted = true;\n          \
    \      break;\n            }\n            lastValue = lst[i];\n        }\n   \
    \     return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count()\
    \ > 1) return false;\n        long last = lst[0];\n        long lastCount = 0;\n\
    \        foreach (long num in lst) {\n            if (num == last) return false;\n\
    \            if (num == lastCount) continue;\n            lastCount = num;\n \
    \           last = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue) {\n                isSorted = false;\n           \
    \     break;\n            }\n            if (lst[i] == lastValue) {\n        \
    \        continue;\n            }\n            isSorted = true;\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] > curr) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = lst[i];\n            curr = lst[i];\n     \
    \   }\n        return isSorted;", "        long prev = 0;\n        long current\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < current) {\n                isSorted = false;\n\
    \                break;\n            }\n            prev = current;\n        \
    \    current = lst[i];\n        }\n        return isSorted;", "        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        long lastNum = lst[0];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < lastNum) {\n                isSorted = false;\n       \
    \         break;\n            }\n            lastNum = lst[i];\n        }\n  \
    \      return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool sorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] > last) {\n                sorted = true;\n \
    \               break;\n            }\n            last = lst[i];\n        }\n\
    \        return sorted;", "        if (lst.Count < 2) return true;\n        if\
    \ (lst.Count < 3) return true;\n        if (lst.Count < 4) return true;\n    \
    \    if (lst.Count < 5) return true;\n        if (lst.Count < 6) return true;\n\
    \        if (lst.Count < 7) return true;\n        if (lst.Count < 8) return true;\n\
    \        if (lst.Count < 9) return true;\n        if (lst.Count < 10) return true;\n\
    \        if (lst.Count < 11) return true;\n        if (lst.Count < 12) return\
    \ true;\n        if (lst.Count < 13) return true;\n        if (lst.Count < 14)\
    \ return true;\n        if (lst.Count < 15) return true;\n        if (lst.Count\
    \ < 16) return true;\n        if (lst.Count < 17) return true;\n        if (lst.Count\
    \ < 18) return true;\n        if (lst.Count < 19) return true;\n        if (lst.Count\
    \ < 20) return true;\n        if (lst.Count < 21) return true;\n        if (lst.Count\
    \ < 22) return true;\n        if (lst.Count < 23) return true;\n        if (lst.Count\
    \ < 24) return true;\n        if (lst.Count < 25) return true;\n        if (lst.Count\
    \ < 26) return true;\n        if (lst.Count < 27) return true;\n        if (lst.Count\
    \ < 28) return true;\n        if (lst.Count < 29) return true;\n        if (lst.Count\
    \ < 30) return true;\n        if (lst.Count < 31) return true;\n        if (lst.Count\
    \ < 32) return true;\n        if (lst.Count < 33) return true;\n        if (lst.Count\
    \ < 34) return true;\n        if (lst.Count < 35) return true;\n        if (lst.Count\
    \ < 36) return true;\n        if (lst.Count < 37) return true;\n        if (lst.Count\
    \ < 38) return true;\n        if (lst.Count < 39) return true;\n        if (lst.Count\
    \ < 40) return true;\n        if (lst.Count < 41) return true;\n        if (lst.Count\
    \ < 42) return true;\n        if (lst.Count < 43) return true;\n        if (lst.Count\
    \ < 44) return true;\n        if (lst.Count < 45) return true;\n        if (lst.Count\
    \ < 46) return true;\n        if (lst.Count < 47) return true;\n        if (lst.Count\
    \ < 48) return true;\n        if (lst.Count < 49) return true;\n        if (lst.Count\
    \ < 50) return true;\n        if (lst.Count < 51) return true;\n        if (lst.Count\
    \ < 52) return true;\n        if (lst.Count < 53) return true;\n        if (lst.Count\
    \ < 54) return true;\n        if (lst.Count < 55) return true;\n        if (lst.Count\
    \ < 56) return true;\n        if (lst.Count < 57) return true;\n        if (lst.Count\
    \ < ", "        long lastValue = lst[0];\n        bool isSorted = false;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == lastValue) {\n                isSorted = true;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        long prev = 0;\n        long curr =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        long lastNum\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastNum) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastNum) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastNum = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] > curr) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        foreach (long num in lst) {\n            if (num\
    \ < prev) {\n                return false;\n            }\n            prev =\
    \ num;\n        }\n        return true;", "        long prev = 0;\n        foreach\
    \ (long num in lst) {\n            if (num > prev) {\n                return false;\n\
    \            }\n            prev = num;\n        }\n        return true;", " \
    \       long lastNum = lst[0];\n        bool isSorted = true;\n        foreach\
    \ (long num in lst) {\n            if (num > lastNum) {\n                isSorted\
    \ = false;\n                break;\n            }\n            lastNum = num;\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < curr) {\n                return false;\n            }\n            if (lst[i]\
    \ == prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;", "        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                continue;\n            }\n            isSorted = true;\n    \
    \        lastValue = lst[i];\n        }\n        return isSorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] > lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool first = true;\n    \
    \    foreach (long num in lst) {\n            if (first && num == last) return\
    \ false;\n            if (num < last) return false;\n            last = num;\n\
    \            first = false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2)\n            return true;\n \
    \       long first = lst[0];\n        long last = lst[lst.Count - 1];\n      \
    \  bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i] < first)\n                isSorted = false;\n            if\
    \ (lst[i] > last)\n                isSorted = false;\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        long curr = lst[0];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n      \
    \          return false;\n            }\n            if (lst[i] == prev) {\n \
    \               return false;\n            }\n            prev = lst[i];\n   \
    \     }\n        return true;", "        long lastNum = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastNum) {\n                isSorted = false;\n             \
    \   break;\n            }\n            if (lst[i] == lastNum) {\n            \
    \    continue;\n            }\n            isSorted = true;\n            lastNum\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastNum = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastNum) {\n                isSorted = false;\n    \
    \            break;\n            }\n            if (lst[i] == lastNum) {\n   \
    \             continue;\n            }\n            isSorted = true;\n       \
    \     lastNum = lst[i];\n        }\n        return isSorted;", "        long lastValue\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            lastValue = lst[i];\n    \
    \    }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long prev = 0;\n        long curr =\
    \ lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n            curr = lst[i];\n        }\n        return\
    \ isSorted;", "        long lastValue = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            else if (lst[i] > lastValue) {\n                isSorted = true;\n\
    \                break;\n            }\n        }\n        return isSorted;",
  "        long prev = 0;\n        foreach (long num in lst) {\n            if (prev\
    \ > num) {\n                return false;\n            }\n            prev = num;\n\
    \        }\n        return true;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool sorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                sorted = true;\n \
    \               break;\n            }\n            if (lst[i] == prev) {\n   \
    \             sorted = false;\n                break;\n            }\n       \
    \     prev = lst[i];\n        }\n        return sorted;", "        long lastNum\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastNum) {\n                isSorted = false;\n\
    \                break;\n            }\n            lastNum = lst[i];\n      \
    \  }\n        return isSorted;", "        long prev = 0;\n        foreach (long\
    \ num in lst) {\n            if (num < prev) {\n                return false;\n\
    \            }\n            prev = num;\n        }\n        return true;", " \
    \       long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long lastNum = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastNum) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  lastNum = lst[i];\n        }\n        return isSorted;", "        long lastValue\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            lastValue = lst[i];\n    \
    \    }\n        return isSorted;", "        long lastValue = lst[0];\n       \
    \ bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n     \
    \       if (lst[i] < lastValue) {\n                isSorted = false;\n       \
    \         break;\n            }\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < curr) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == curr) {\n         \
    \       continue;\n            }\n            if (lst[i] > prev) {\n         \
    \       isSorted = false;\n                break;\n            }\n           \
    \ prev = curr;\n            curr = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long lastNum = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastNum) {\n                isSorted = false;\n                break;\n  \
    \          }\n            if (lst[i] == lastNum) {\n                isSorted =\
    \ true;\n            }\n            lastNum = lst[i];\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        foreach (long num in lst) {\n \
    \           if (num < prev) {\n                return false;\n            }\n\
    \            prev = num;\n        }\n        return true;", "        long lastValue\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            lastValue = lst[i];\n    \
    \    }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < curr) {\n                return false;\n            }\n            if (lst[i]\
    \ == prev) {\n                return false;\n            }\n            prev =\
    \ lst[i];\n        }\n        return true;", "        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       long curr = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] > curr) {\n                return false;\n            }\n\
    \            prev = curr;\n            curr = lst[i];\n        }\n        return\
    \ true;", "        if (lst.Count < 2) return true;\n        if (lst.Count > 2\
    \ && lst.Distinct().Count() > 1) return false;\n        long first = lst[0];\n\
    \        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) isSorted\
    \ = false;\n            if (lst[i] > last) isSorted = false;\n        }\n    \
    \    return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < curr) {\n                sorted = false;\n         \
    \       break;\n            }\n            if (lst[i] == prev) {\n           \
    \     sorted = false;\n                break;\n            }\n            prev\
    \ = lst[i];\n            curr = lst[i];\n        }\n        return sorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                sorted = false;\n         \
    \       break;\n            }\n            sorted = true;\n            last =\
    \ lst[i];\n        }\n        return sorted;", "        if (lst.Count < 2) return\
    \ true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1) return false;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        long lastNum = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastNum) {\n                isSorted = false;\n              \
    \  break;\n            }\n            lastNum = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ lastValue = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] > lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == lastValue) {\n                isSorted = true;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long first = lst[0];\n       \
    \ long last = lst[lst.Count - 1];\n        long middle = first + (lst.Count -\
    \ 1) * 0.5;\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < middle) {\n                isSorted = false;\n\
    \                break;\n            }\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        long prev = 0;\n        bool sorted = false;\n\
    \        foreach (long num in lst) {\n            if (prev > num) {\n        \
    \        sorted = false;\n                break;\n            }\n            prev\
    \ = num;\n        }\n        return sorted;", "        if (lst.Count < 2)\n  \
    \          return true;\n        long last = lst[0];\n        bool isSorted =\
    \ true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        var hash = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (hash.Contains(item)) return\
    \ false;\n            hash.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            last = lst[i];\n   \
    \     }\n        return isSorted;", "        long prev = 0;\n        foreach (long\
    \ n in lst) {\n            if (prev > n) {\n                return false;\n  \
    \          }\n            prev = n;\n        }\n        return true;", "     \
    \   if (lst.Count == 0)\n            return true;\n        if (lst.Count == 1)\n\
    \            return lst[0] == lst[0];\n        long last = lst[0];\n        bool\
    \ isSorted = false;\n        foreach (long num in lst) {\n            if (num\
    \ < last)\n                return false;\n            last = num;\n        }\n\
    \        isSorted = true;\n        return isSorted;", "        long prev = 0;\n\
    \        foreach (long num in lst) {\n            if (num > prev) {\n        \
    \        return false;\n            }\n            prev = num;\n        }\n  \
    \      return true;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n            }\n            lastValue = lst[i];\n        }\n       \
    \ return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long lastNumber = lst[0];\n        bool isSorted = false;\n        foreach\
    \ (long number in lst) {\n            if (number > lastNumber) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (number == lastNumber) {\n                isSorted = true;\n               \
    \ break;\n            }\n            lastNumber = number;\n        }\n       \
    \ return isSorted;", "        long lastNum = lst[0];\n        bool isSorted =\
    \ true;\n        foreach (long num in lst) {\n            if (num > lastNum) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          lastNum = num;\n        }\n        return isSorted;", "        long\
    \ lastNum = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < lastNum) {\n                isSorted\
    \ = false;\n                break;\n            }\n            lastNum = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == lastValue)\n                continue;\n           \
    \ isSorted = true;\n            lastValue = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2) return true;\n        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        if (lst.Count < 2) return true;\n        if (lst.Count\
    \ > 2) return false;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) isSorted = false;\n            if (lst[i]\
    \ > last) isSorted = false;\n        }\n        return isSorted;", "        long\
    \ lastValue = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == lastValue) {\n                continue;\n            }\n            isSorted\
    \ = true;\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        bool sorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < curr) {\n                sorted = false;\n         \
    \       break;\n            }\n            if (lst[i] == prev) {\n           \
    \     sorted = true;\n                break;\n            }\n            prev\
    \ = lst[i];\n        }\n        return sorted;", "        long last = 0;\n   \
    \     bool isSorted = true;\n        foreach (long num in lst) {\n           \
    \ if (num > last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = num;\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ long prev = 0;\n        bool isSorted = false;\n        foreach (long num in\
    \ lst) {\n            if (num < prev) {\n                isSorted = false;\n \
    \               break;\n            }\n            prev = num;\n        }\n  \
    \      return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long last = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            last = lst[i];\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n            curr = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        long prev = 0;\n        foreach (long num in lst)\
    \ {\n            if (num > prev) {\n                return false;\n          \
    \  }\n            prev = num;\n        }\n        return true;", "        long\
    \ lastNum = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < lastNum) {\n                isSorted\
    \ = false;\n                break;\n            }\n            if (lst[i] == lastNum)\
    \ {\n                continue;\n            }\n            isSorted = true;\n\
    \            lastNum = lst[i];\n        }\n        return isSorted;", "      \
    \  if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < curr) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == prev) {\n         \
    \       isSorted = false;\n                break;\n            }\n           \
    \ prev = lst[i];\n            curr = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long curr = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n            curr\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       long curr = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < curr) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == prev) {\n                isSorted = false;\n                break;\n    \
    \        }\n            prev = lst[i];\n        }\n        return isSorted;",
  "        long prev = 0;\n        long current = lst[0];\n        bool isSorted =\
    \ true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < current) {\n                isSorted = false;\n                break;\n  \
    \          }\n            if (lst[i] == current) {\n                continue;\n\
    \            }\n            if (lst[i] > current) {\n                isSorted\
    \ = false;\n                break;\n            }\n            prev = current;\n\
    \            current = lst[i];\n        }\n        return isSorted;", "      \
    \  if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            last = lst[i];\n   \
    \     }\n        return isSorted;", "        long lastValue = lst[0];\n      \
    \  bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < lastValue) {\n                isSorted = false;\n     \
    \           break;\n            }\n            if (lst[i] == lastValue) {\n  \
    \              isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        var hash = new HashSet<long>(lst);\n        return lst.All(x\
    \ => hash.Add(x));", "        long lastNum = lst[0];\n        bool isSorted =\
    \ false;\n        foreach (long num in lst) {\n            if (num < lastNum)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastNum = num;\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        long last = lst[0];\n        bool sorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            sorted\
    \ = true;\n            last = lst[i];\n        }\n        return sorted;", " \
    \       long lastNum = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastNum) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == lastNum) {\n                continue;\n            }\n      \
    \      isSorted = true;\n            lastNum = lst[i];\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        foreach (long num in lst) {\n \
    \           if (prev > num) {\n                return false;\n            }\n\
    \            prev = num;\n        }\n        return true;", "        long prev\
    \ = 0;\n        long curr = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < prev) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] > curr) {\n                isSorted = false;\n               \
    \ break;\n            }\n            prev = lst[i];\n        }\n        return\
    \ isSorted;", "        long lastValue = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count == 0) return true;\n        if (lst.Count\
    \ == 1) return false;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        foreach (long n in\
    \ lst) {\n            if (prev > n) {\n                return false;\n       \
    \     }\n            prev = n;\n        }\n        return true;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        if (lst.Count < 2) return true;\n  \
    \      long last = lst[0];\n        bool sorted = false;\n        foreach (long\
    \ num in lst) {\n            if (num == last) return false;\n            last\
    \ = num;\n            sorted = true;\n        }\n        return sorted;", "  \
    \      long prev = 0;\n        long curr = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < curr)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == prev) {\n                isSorted = false;\n      \
    \          break;\n            }\n            prev = lst[i];\n        }\n    \
    \    return isSorted;", "        long prev = 0;\n        long curr = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < curr) {\n                isSorted = false;\n       \
    \         break;\n            }\n            if (lst[i] == prev) {\n         \
    \       isSorted = false;\n                break;\n            }\n           \
    \ prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        foreach (long n in\
    \ lst) {\n            if (prev > n) {\n                return false;\n       \
    \     }\n            prev = n;\n        }\n        return true;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = lst[i];\n        }\n        return isSorted;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue) {\n                isSorted = false;\n           \
    \     break;\n            }\n            lastValue = lst[i];\n        }\n    \
    \    return isSorted;", "        long prev = 0;\n        foreach (long num in\
    \ lst) {\n            if (num < prev) {\n                return false;\n     \
    \       }\n            prev = num;\n        }\n        return true;", "      \
    \  if (lst.Count == 0)\n            return true;\n        if (lst.Count == 1)\n\
    \            return lst[0] == lst[0];\n        long last = lst[0];\n        bool\
    \ found = false;\n        foreach (long num in lst) {\n            if (num ==\
    \ last)\n                found = true;\n            else\n                return\
    \ false;\n            last = num;\n        }\n        return found;", "      \
    \  long lastValue = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n      \
    \          isSorted = false;\n                break;\n            }\n        \
    \    if (lst[i] == lastValue) {\n                isSorted = true;\n          \
    \  }\n            lastValue = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;"]
stop_tokens:
- "\n    }\n"
